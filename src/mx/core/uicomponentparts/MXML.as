//----------------------------------
//  descriptor
//----------------------------------

/**
 *  @private
 *  Storage for the descriptor property.
 *  This variable is initialized in the construct() method
 *  using the _descriptor in the initObj, which is set in
 *  createComponentFromDescriptor().
 *  If this UIComponent was not created by createComponentFromDescriptor(),
 *  its 'descriptor' property is null.
 */
mx_internal var _descriptor:UIComponentDescriptor;

[Inspectable(environment="none")]

/**
 *  Reference to the UIComponentDescriptor, if any, that was used
 *  by the <code>createComponentFromDescriptor()</code> method to create this
 *  UIComponent instance. If this UIComponent instance
 *  was not created from a descriptor, this property is null.
 *
 *  @see mx.core.UIComponentDescriptor
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get descriptor():UIComponentDescriptor
{
	return _descriptor;
}

/**
 *  @private
 */
public function set descriptor(value:UIComponentDescriptor):void
{
	_descriptor = value;
}

//----------------------------------
//  document
//----------------------------------

/**
 *  @private
 *  Storage for the document property.
 *  This variable is initialized in the init() method.
 *  A document object (i.e., an Object at the top of the hierarchy
 *  of a Flex application, MXML component, or AS component) has an
 *  autogenerated override of initalize() which sets its _document to
 *  'this', so that its 'document' property is a reference to itself.
 *  Other UIComponents set their _document to their parent's _document,
 *  so that their 'document' property refers to the document object
 *  that they are inside.
 */
mx_internal var _document:Object;

[Inspectable(environment="none")]

/**
 *  A reference to the document object associated with this UIComponent.
 *  A document object is an Object at the top of the hierarchy of a
 *  Flex application, MXML component, or AS component.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get document():Object
{
	return _document;
}

/**
 *  A reference to the document object associated with this UIComponent.
 *  A document object is an Object at the top of the hierarchy of a
 *  Flex application, MXML component, or AS component.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function set document(value:Object):void
{
	var n:int = numChildren;
	for (var i:int = 0; i < n; i++)
	{
		var child:IUIComponent = getChildAt(i) as IUIComponent;
		if (!child)
			continue;
		
		if (child.document == _document ||
			child.document == FlexGlobals.topLevelApplication)
		{
			child.document = value;
		}
	}
	
	_document = value;
}

//----------------------------------
//  documentDescriptor
//----------------------------------

/**
 *  @private
 *  Storage for the documentDescriptor property.
 *  A document object (i.e., a UIComponent at the top of the
 *  hierarchy of a Flex application, MXML component,
 *  or AS component) has an autogenerated override of init()
 *  which sets its _documentDescriptor to the descriptor
 *  at the top of the autogenerated descriptor tree for that
 *  document. For other UIComponents, _documentDescriptor is
 *  never defined.
 */
mx_internal var _documentDescriptor:UIComponentDescriptor;

/**
 *  @private
 *  For a document object, which is an instance of a UIComponent
 *  at the top of the hierarchy of a Flex application, MXML
 *  component, or ActionScript component, the
 *  <code>documentDescriptor</code> property is a reference
 *  to the UIComponentDescriptor at the top of the autogenerated
 *  descriptor tree for that document, which describes the
 *  set of children and their attributes for that document.
 *  For other UIComponents, it is <code>null</code>.
 */
mx_internal function get documentDescriptor():UIComponentDescriptor
{
	return _documentDescriptor;
}

//----------------------------------
//  id
//----------------------------------

/**
 *  @private
 */
private var _id:String;

/**
 *  ID of the component. This value becomes the instance name of the object
 *  and should not contain any white space or special characters. Each component
 *  throughout an application should have a unique id.
 *
 *  <p>If your application is going to be tested by third party tools, give each component
 *  a meaningful id. Testing tools use ids to represent the control in their scripts and
 *  having a meaningful name can make scripts more readable. For example, set the
 *  value of a button to submit_button rather than b1 or button1.</p>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get id():String
{
	return _id;
}

/**
 *  @private
 */
public function set id(value:String):void
{
	_id = value;
}

//----------------------------------
//  isDocument
//----------------------------------

/**
 *  Contains <code>true</code> if this UIComponent instance is a document object.
 *  That means it is at the top of the hierarchy of a Flex
 *  application, MXML component, or ActionScript component.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get isDocument():Boolean
{
	return document == this;
}

//----------------------------------
//  parentApplication
//----------------------------------

[Bindable("initialize")]

/*
*  Note:
*  There are two reasons that 'parentApplication' is typed as Object
*  rather than as Application. The first is that typing it as Application
*  would make UIComponent dependent on Application, slowing down compile
*  times not only for SWCs for also for MXML and AS components. The
*  second is that authors would not be able to access properties and
*  methods in the <Script> of their <Application> without casting it
*  to their application's subclass, as in
*     MyApplication(paentApplication).myAppMethod().
*  Therefore we decided to dispense with strict typing for
*  'parentApplication'.
*/
/**
 *  A reference to the Application object that contains this UIComponent
 *  instance.
 *  This Application object might exist in a SWFLoader control in another
 *  Application, and so on, creating a chain of Application objects that
 *  can be walked using parentApplication.
 *
 *  <p>The <code>parentApplication</code> property of an Application is never itself;
 *  it is either the Application into which it was loaded or null
 *  (for the top-level Application).</p>
 *
 *  <p>Walking the application chain using the <code>parentApplication</code>
 *  property is similar to walking the document chain using the
 *  <code>parentDocument</code> property.
 *  You can access the top-level application using the
 *  <code>application</code> property of the Application class.</p>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get parentApplication():Object
{
	// Look for the SystemManager's document,
	// which should be the Application.
	var o:Object = systemManager.document;
	
	// If this UIComponent is its own root, then it is an Application.
	// We want to return its parent Application, or null
	// (if it has no parent because it is the top-level Application).
	// The hierarchy in this situation looks something like this:
	//
	//  SystemManager
	//      Application
	//          SomeContainer
	//              Loader
	//                  Loaded App's SystemManager
	//                      Application
	//                          ThisComponent
	if (o == this)
	{
		var p:UIComponent = o.systemManager.parent as UIComponent;
		o = p ? p.systemManager.document : null;
	}
	
	return o;
}

//----------------------------------
//  parentDocument
//----------------------------------

[Bindable("initialize")]

/**
 *  A reference to the parent document object for this UIComponent.
 *  A document object is a UIComponent at the top of the hierarchy
 *  of a Flex application, MXML component, or AS component.
 *
 *  <p>For the Application object, the <code>parentDocument</code>
 *  property is null.
 *  This property  is useful in MXML scripts to go up a level
 *  in the chain of document objects.
 *  It can be used to walk this chain using
 *  <code>parentDocument.parentDocument</code>, and so on.</p>
 *
 *  <p>It is typed as Object so that authors can access properties
 *  and methods on ancestor document objects without casting.</p>
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get parentDocument():Object
{
	if (document == this)
	{
		var p:IUIComponent = parent as IUIComponent;
		if (p)
			return p.document;
		
		if (systemManager)
			return systemManager.document;
		
		return null;
	}
	else
	{
		return document;
	}
}

//----------------------------------
//  screen
//----------------------------------

/**
 *  Returns an object that contains the size and position of the base
 *  drawing surface for this object.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Flex 3
 */
public function get screen():Rectangle
{
	return systemManager ? systemManager.screen : null;
}