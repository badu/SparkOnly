<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark">
	
	<fx:Metadata>
		[HostComponent("spark.components.ToolTip")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[			
			import mx.utils.ColorUtil;
			
			public static const ARROW_SIDE_LENGHT:int = 10;
			public static const ARROW_INSET:int = 25;			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void 
			{				
				updateArrow (unscaledWidth, unscaledHeight);				
				var chromeColor:uint = this.getStyle("chromeColor");
				arrowColor.color = chromeColor;
				bgColor.color = chromeColor;
				displayText.setStyle("color", this.hostComponent.getStyle("color"));				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updateArrow (uw:Number, uh:Number):void 
			{
				var ttPos:String = this.getStyle("placement");
				if (!ttPos)
					return;
				if (ttPos == "bottomRight")
				{
					arrow.data = "M 0 10 L 0 0 L 10 10 Z";
					allContent.y = ARROW_SIDE_LENGHT;
					
				} else if (ttPos == "bottomLeft")
				{
					arrow.data = "M 0 10 L 10 0 L 10 10 Z";
					arrow.x = uw - ARROW_INSET;
					this.move(-uw, 0);
					
				} else if (ttPos == "topLeft")
				{
					arrow.data= "M 0 0 L 10 10 L 10 0 Z";
					arrow.y = uh - ARROW_SIDE_LENGHT;
					arrow.x = uw - ARROW_INSET;
					allContent.y = 0;
					this.move(-uw, -uh);
					
				} else {
					arrow.data = "M 0 0 L 0 10 L 10 0 Z";
					arrow.y = uh - ARROW_SIDE_LENGHT;
					allContent.y = 0;
					this.move(0, -uh);
				}
			}			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Component for the dynamic title skin part --> 
		<fx:Component id="displayTitle">
			<s:DataRenderer width="100%" height="100%" >
				<s:Rect top="0" right="0" bottom="0" left="0" blendMode="add" >
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0x202020" alpha="1" />
							<s:GradientEntry color="0x101010" alpha="1" />
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:RichText content="{data}"							
							color="{this.getStyle('color')}"
							paddingTop="5" 
							paddingRight="5" 
							paddingBottom="3" 
							paddingLeft="5" 
							/>
			</s:DataRenderer>
		</fx:Component>
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="normal" />
	</s:states>
	
	<!-- arrow as the pointer for the tooltip that will be redrawn and positioned based on the tooltip position -->
	<s:Path id="arrow" x="15" y="0" width="{ARROW_SIDE_LENGHT}" height="{ARROW_SIDE_LENGHT}" data="M 0 10 L 0 0 L 10 10 Z">
		<s:fill>
			<s:SolidColor id="arrowColor" />
		</s:fill>
	</s:Path>
	
	<!-- group that holds all content (bg and text) and will be moved according to tooltip position -->
	<s:Group id="allContent" x="0" y="10">
		<s:Rect id="bg" top="0" right="0" bottom="0" left="0" radiusX="3" radiusY="3" >
			<s:fill>
				<s:SolidColor id="bgColor" color="{getStyle('color')}" />
			</s:fill>
		</s:Rect>
		
		<!-- container to hold the tooltip text. if a title is required, the tooltip title is added to this group -->
		<s:Group id="textContainer" top="5" right="5" bottom="5" left="5" >
			<s:VGroup id="tooltipGroup" gap="1" width="100%" height="100%" >
				<s:Group width="100%" height="100%">
					<s:Rect width="100%" height="100%" blendMode="add" >
						<s:fill>
							<s:SolidColor color="{getStyle('chromeColor')}" />
						</s:fill>
					</s:Rect>					
					<s:RichText id="displayText" 
								maxWidth="{hostComponent.maxWidth}"
								textFlow="{hostComponent.textFlow}"
								lineBreak="toFit"
								paddingTop="5" 
								paddingRight="5" 
								paddingBottom="2" 
								paddingLeft="5" 
								width="100%" />										
				</s:Group>
			</s:VGroup>
		</s:Group>
		
		
	</s:Group>
	<s:filters>
		<s:DropShadowFilter quality="1" strength=".75" />
	</s:filters>
</s:SparkSkin>
