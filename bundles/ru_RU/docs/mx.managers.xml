<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.managers"><apiName>mx.managers</apiName><apiDetail/><apiClassifier id="mx.managers:HistoryManager"><apiName>HistoryManager</apiName><shortdesc>
  Управление историей позволяет пользователям осуществлять навигацию в рамках приложения Flex с помощью команд навигации web-браузера «Вперед» и «Назад».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Управление историей позволяет пользователям осуществлять навигацию в рамках приложения Flex с помощью команд навигации web-браузера «Вперед» и «Назад». 
  
  <p>Как правило, для поддержания состояния приложения, а также управления URL-адресами и историей браузера следует использовать класс BrowserManager и внешние ссылки, но при некоторых обстоятельствах, например при использовании устаревшего приложения Flex, может быть рекомендован класс HistoryManager. Невозможно запустить классы HistoryManager и BrowserManager в одном приложении Flex даже в том случае, если они используют один набор файлов поддержки.</p>
  
  <p>Управление историей по умолчанию включается для контейнеров Accordion и TabNavigator. Это означает, что если пользователь выбирает одну из панелей в элементе управления Accordion, он может вернуться к предыдущей панели путем нажатия кнопки браузера «Назад» или команды навигации «Назад». Управление историей для контейнера навигатора ViewStack по умолчанию отключается.</p>
  
  <p>Отключить управление историей можно путем установки для свойства контейнера навигатора <codeph>historyManagementEnabled</codeph> значения <codeph>false</codeph>.</p>
  
  <p>Можно также включить управление историей для других объектов приложения путем регистрации этих объектов в HistoryManager. Для регистрации компонента в классе HistoryManager следует вызвать метод класса HistoryManager <codeph>register()</codeph> со ссылкой на экземпляр компонента, реализующий интерфейс IHistoryManagerClient. В следующем примере компонент приложения (<codeph>this</codeph>) зарегистрирован в классе HistoryManager при инициализации приложения:
  <pre>
  &lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
    implements="mx.managers.IHistoryManagerClient" 
    initialize="mx.managers.HistoryManager.register(this);">
  </pre>
  Для завершения регистрации компонента следует также реализовать методы <codeph>saveState()</codeph> и <codeph>loadState()</codeph> интерфейса IHistoryManagerClient. Компоненты, являющиеся расширением UIComponent, автоматически наследуют метод <codeph>loadState()</codeph>.</p>
  
  <p>Все методы и свойства HistoryManager являются статическими, и таким образом, отсутствует необходимость создания его экземпляра.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links><apiOperation id="mx.managers:HistoryManager:initialize"><apiName>initialize</apiName><shortdesc>
      Устаревший – инициализирует HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sm</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>SystemManager для этого приложения.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устаревший – инициализирует HistoryManager. Как правило, необходимость в его вызове отсутствует, так как при каждом добавлении компонента с использованием <codeph>historyManagementEnabled</codeph> Flex выполняет вызов этого метода. Однако HistoryManager не будет работать правильно, если он не будет инициализирован из приложения верхнего уровня. Таким образом, если приложение не содержит каких-либо включенных в него посредством HistoryManager компонентов и загружает другие подчиненные приложения, содержащие их, то в главном приложении следует вызвать метод <codeph>HistoryManager.initialize()</codeph>, обычно из обработчика событий <codeph>initialize</codeph> этого приложения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:register"><apiName>register</apiName><shortdesc>
      Регистрирует объект в HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Регистрируемый объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Регистрирует объект в HistoryManager. Объект должен реализовывать интерфейс IHistoryManagerClient.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:HistoryManager:save"><apiName>save</apiName><shortdesc>
      Сохраняет текущее состояние приложения для его последующего восстановления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Сохраняет текущее состояние приложения для его последующего восстановления. Этот метод автоматически вызывается контейнерами навигатора при каждом изменении состояния навигации. Если интерфейс зарегистрирован в HistoryManager, то при изменении состояния приложения следует вызвать метод <codeph> save()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:unregister"><apiName>unregister</apiName><shortdesc>
      Отменяет регистрацию объекта в HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Объект, для которого отменяется регистрация.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отменяет регистрацию объекта в HistoryManager.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:PopUpManagerChildList"><apiName>PopUpManagerChildList</apiName><shortdesc>
  Класс PopUpManagerChildList определяет значения констант для свойства detail методов PopUpManager addPopUp() и createPopUp().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс PopUpManagerChildList определяет значения констант для свойства <codeph>detail</codeph> методов PopUpManager <codeph>addPopUp()</codeph> и <codeph>createPopUp()</codeph>.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManager"><linktext>PopUpManager</linktext></link></related-links><apiValue id="mx.managers:PopUpManagerChildList:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	  Указывает, что всплывающее меню помещено в тот же нижестоящий список, что и приложение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает, что всплывающее меню помещено в тот же нижестоящий список, что и приложение.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:PARENT"><apiName>PARENT</apiName><shortdesc>
	  Указывает, что всплывающее меню помещено в тот нижестоящий список, в котором находится его вышестоящий компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает, что всплывающее меню помещено в тот нижестоящий список, в котором находится его вышестоящий компонент.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:POPUP"><apiName>POPUP</apiName><shortdesc>
	  Указывает, что всплывающее меню помещено в нижестоящий список всплывающих меню, что приведет к его отображению поверх других всплывающих меню на уровне приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>popup</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает, что всплывающее меню помещено в нижестоящий список всплывающих меню, что приведет к его отображению поверх других всплывающих меню на уровне приложения.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComponent"><apiName>IFocusManagerComponent</apiName><shortdesc>
  Интерфейс IFocusManagerComponent определяет интерфейс, который должны реализовать фокусируемые компоненты для получения фокуса от FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFocusManagerComponent определяет интерфейс, который должны реализовать фокусируемые компоненты для получения фокуса от FocusManager. Основные реализации этого интерфейса находятся в классе UIComponent, но UIComponent не реализует полнофункциональный интерфейс IFocusManagerComponent, так как некоторые UIComponents не предназначены для получения фокуса. Поэтому для превращения компонента на основе UIComponent в действительный фокусируемый компонент просто добавьте к определению класса «реализует IFocusManagerComponent».
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Вызывается посредством FocusManager при получении фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Если <codeph>true</codeph>, выведите на экран индикатор фокуса, в противном случае скройте его.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается посредством FocusManager при получении фокуса компонентом. Этот компонент должен отображать или скрывать графический символ, указывающий на наличие фокуса у данного компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Вызывается посредством FocusManager при получении фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается посредством FocusManager при получении фокуса компонентом. Этот компонент может, в свою очередь, устанавливать фокус для внутреннего компонента.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Флаг, выбор которого указывает на возможность получения фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, выбор которого указывает на возможность получения фокуса компонентом.
     
      <p>Если нижестоящий по отношению к данному компонент реализует интерфейс IFocusManagerComponent, и получение фокусировки не требуется, перед вызовом <codeph>addChild()</codeph> в нижестоящем компоненте в качестве оптимизации можно установить для <codeph>focusEnabled</codeph> значение <codeph>false</codeph>.</p>
     
      <p>Это заставит FocusManager игнорировать этот компонент и не контролировать изменения его свойств <codeph>tabFocusEnabled</codeph>, <codeph>hasFocusableChildren</codeph> и <codeph>mouseFocusEnabled</codeph>. Это также означает, что FocusManager не сможет отследить изменение этого значения, если оно внесено после <codeph>addChild()</codeph>.</p>
     
      <p>Примечание. Это не значит, что невозможно задать фокусировку этого объекта программным путем, с помощью метода <codeph>setFocus()</codeph>; FocusManager лишь получает команду игнорировать этот компонент IFocusManagerComponent при поиске мышью и табулятором.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc conref="mx.core.UIComponent#hasFocusableChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#hasFocusableChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Флаг, выбор которого с помощью указателя мыши указывает на возможность получения фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, выбор которого с помощью указателя мыши указывает на возможность получения фокуса компонентом. Если <codeph>false</codeph>, то фокус будет передан в первый вышестоящий элемент <codeph>mouseFocusEnabled</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Флаг, задающий перемещение фокуса в этот компонент путем нажатия клавиши табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, задающий перемещение фокуса в этот компонент путем нажатия клавиши табуляции. Даже при значении <codeph>false</codeph> фокус можно получить посредством выбора мышью или вызова <codeph>setFocus()</codeph>. Это свойство заменяет InteractiveObject.tabEnabled, которое следует установить на значение true в приложениях Flex.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabIndex:get"><apiName>tabIndex</apiName><shortdesc>
      В случае tabFocusEnabled – порядок получения фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      В случае <codeph>tabFocusEnabled</codeph> – порядок получения фокуса компонентом. Если 1, то компонент получает фокус на основе z-порядка.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:BrowserManager"><apiName>BrowserManager</apiName><shortdesc>
  BrowserManager является диспетчером Singleton, действующим в качестве прокси между браузером и приложением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  BrowserManager является диспетчером Singleton, действующим в качестве прокси между браузером и приложением. Он обеспечивает доступ к URL-адресу в адресной строке браузера, подобно доступу к свойству <codeph>document.location</codeph> в JavaScript. События передаются при изменении свойства <codeph>url</codeph>. В это время прослушиватели могут отвечать, изменять URL-адрес и/или блокировать других пользователей от получения этого события. 
 
  <p>Для использования BrowserManager следует вызвать метод <codeph>getInstance()</codeph> с целью получения текущего экземпляра диспетчера, а также вызова методов и прослушивания событий на этом диспетчере. Для получения информации об используемых методах, свойствах и событиях см. класс IBrowserManager.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#IBrowserManager"><linktext>mx.managers.IBrowserManager</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:BrowserManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Возвращает единственный экземпляр этого класса Singleton; создает его, если его еще не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Возвращает единственный экземпляр этого класса Singleton; создает его, если его еще не существует.
      
      </apiDesc><apiOperationClassifier>mx.managers:IBrowserManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Возвращает единственный экземпляр этого класса Singleton; создает его, если его еще не существует.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IHistoryManagerClient"><apiName>IHistoryManagerClient</apiName><shortdesc>
  Интерфейс, который должен реализовываться объектами, зарегистрированными в History Manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс, который должен реализовываться объектами, зарегистрированными в History Manager. Вызов методов в этом интерфейсе осуществляется посредством HistoryManager при сохранении и загрузке состояния истории приложения.
 
  <p>Этот интерфейс реализуется контейнерами навигатора Flex TabNavigator, Accordion и ViewStack. Он должен реализовываться любым другим компонентом, зарегистрированным на HistoryManager.</p> 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:loadState"><apiName>loadState</apiName><shortdesc>
	  Загружает состояние этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Состояние объекта, который требуется загрузить. При загрузке начального состояния приложения значение будет равно null.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Загружает состояние этого объекта.
	  
	  </apiDesc><example>Следующий код загружает выбранный индекс и строку поиска из сохраненного состояния.
	  <pre>
	  public function loadState(state:Object):void
	  {
	  	// First, check to see if state is null. When the app is reset
	  	// back to its initial state, loadState() is passed null.
	  	if (state == null)
	  	{
	 		myList.selectedIndex = -1;
	  		mySearchInput.text = "";
	  	}
	  	else
	  	{
	  		myList.selectedIndex = state.selectedIndex;
	  		mySearchInput.text = state.searchString;
	  	}
	  }
	  </pre>
	  
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:saveState"><apiName>saveState</apiName><shortdesc>
	  Сохраняет состояние этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Состояние этого объекта.
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	  Сохраняет состояние этого объекта. Объект содержит пары «значение – имя» для каждого свойства, сохраняемого с этим состоянием. 
	 
	  <p>History Manager собирает информацию о состоянии от всех компонентов и кодирует эту информацию в формате URL-адреса. Большинство браузеров имеют ограничение длины URL-адреса, поэтому возвращаемая информация о состоянии должна быть по возможности минимальной.</p>
	 
	  </apiDesc><example>Следующий код сохраняет выбранный индекс из списка и строку поиска.
	  <pre>
	  public function saveState():Object
	  {
	  	var state:Object = {};
	 
	  	state.selectedIndex = myList.selectedIndex;
	  	state.searchString = mySearchInput.text;
	 
	  	return state;
	 }
	 </pre>
	 
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:toString"><apiName>toString</apiName><shortdesc>
	  Преобразовывает этот объект в уникальное строковое значение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Уникальный идентификатор этого объекта.
	  
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Преобразовывает этот объект в уникальное строковое значение. Реализуется посредством UIComponent.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:ISystemManager"><apiName>ISystemManager</apiName><shortdesc>
  ISystemManager управляет «окном приложения».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISystemManager управляет «окном приложения». Каждое приложение, выполняемое на рабочем столе или в браузере, имеет область, в которой будут отображаться видимые элементы приложения. Это может быть либо окно в операционной системе, либо область браузера. Это называется «окном приложения», которое отличается от экземпляра <codeph>mx.core.Application</codeph>, являющегося главным окном «верхнего уровня» в приложении.
 
  <p>Каждое приложение имеет ISystemManager. ISystemManager отправляет событие в случае изменения размера окна приложения (его невозможно изменить изнутри приложения, но только через взаимодействие с окном операционной системы или браузером). Он является вышестоящим элементом по отношению ко всем отображаемым элементам внутри приложения, например к главному экземпляру mx.core.Application и всем всплывающим меню, всплывающим подсказкам, курсорам и т.п.. Любой объект, являющийся нижестоящим по отношению к ISystemManager, рассматривается как окно «верхнего уровня», включая всплывающие подсказки и курсоры.</p>
 
  <p>ISystemManager также переключает фокус между окнами верхнего уровня при отображении нескольких IFocusManagerContainer и взаимодействии пользователей с компонентами внутри IFocusManagerContainers.</p>
 
  <p>Все действия клавиатуры и мыши, не обрабатываемые явно, отслеживаются ISystemManager, что в случае необходимости превращает его в удобное средство контроля.</p>
 
  <p>Если приложение загружается в другое приложение, то ISystemManager будет создан, но он не будет управлять «окном приложения» в зависимости от правил домена и безопасности. Вместо этого он будет представлять собой <codeph>content</codeph> загрузившего его <codeph>Loader</codeph> и служить просто вышестоящим элементом субприложения.</p>
 
  <p>ISystemManager поддерживает несколько списков нижестоящих элементов, по одному на каждый для всплывающих подсказок, курсоров и всплывающих окон. Таким образом, он обеспечивает отображение всплывающих окон поверх окон главного приложения, выше – отображение всплывающих подсказок, и еще выше – отображение курсоров. При исследовании свойства <codeph>numChildren</codeph> или метода <codeph>getChildAt()</codeph> в ISystemManager осуществляется обращение к окну главного приложения и к другим не всплывающим окнам. Для получения списка всех окон, включая всплывающие меню, всплывающие подсказки и курсоры, используется свойство <codeph>rawChildren</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      Разверните или удалите блокировки ввода с помощью мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> – для развертывания блокировок ввода с помощью мыши, <codeph>false</codeph> – для удаления блокировок ввода с помощью мыши.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Разверните или удалите блокировки ввода с помощью мыши. Эта блокировка блокирует ввод с помощью мыши в ненадежных приложениях. Причина возможной блокировки ввода с помощью мыши пользователем состоит в том, что при перемещении по ненадежному приложению он обычно не получает событий перемещения мыши. Flash Player не отправляет события через границы надежности/ненадежности в интересах безопасности. Путем прикрытия ненадежного приложения блокировкой ввода с помощью мыши (если пользователь является вышестоящим элементом) можно получить сообщение о перемещении мыши, и тогда операция перетаскивания будет выполнена как ожидается. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
	  Преобразовывает данную строку в класс или функцию уровня пакета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Класс, представленный <codeph>name</codeph>, или значением null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Имя класса, например mx.video.VideoManager.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Преобразовывает данную строку в класс или функцию уровня пакета. Вызывает соответствующий метод <codeph>ApplicationDomain.getDefinition()</codeph>, в зависимости от того, загружен пользователь в другое приложение или нет.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Получает SystemManager, являющегося корнем всех диспетчеров системы верхнего уровня в этом SecurityDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>systemManager самого высокого уровня в изолированной среде
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Получает SystemManager, являющегося корнем всех диспетчеров системы верхнего уровня в этом SecurityDomain.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Пытается получать диспетчер системы, находящийся в главном приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>SystemManager главного приложения, если это разрешено требованиями безопасности, или null, если он находится на другом SecurityDomain.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Пытается получать диспетчер системы, находящийся в главном приложении.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Получает пределы загруженного приложения, видимые пользователем на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект <codeph>Rectangle</codeph>, включающий видимую часть этого объекта. Прямоугольник находится в глобальных координатах.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Дополнительно. Начальные пределы для видимого прямоугольника. Пределы находятся в глобальных координатах. Если <codeph>bounds</codeph> имеют значение null, то начальные пределы определяются свойством <codeph>screen</codeph> диспетчера системы. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      Получает пределы загруженного приложения, видимые пользователем на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Попытка уведомления вышестоящего SWFLoader о возможном изменении размера приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Попытка уведомления вышестоящего SWFLoader о возможном изменении размера приложения.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      Возвращает true, если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода Font.registerFont().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода <codeph>Font.registerFont()</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>tf</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Класс TextFormat, представляющий информацию о форматировании символов.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph>, если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода <codeph>Font.registerFont()</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
      Проверяет, является ли этот диспетчер системы корневым для всех диспетчеров системы верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если данный SystemManager является корневым для всех SystemManager из списка отображения, в противном случае – <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет, является ли этот диспетчер системы корневым для всех диспетчеров системы верхнего уровня.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
	  Возвращает true, если этот ISystemManager отвечает за окно приложения, и false, если это приложение было загружено в другом приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если этот ISystemManager отвечает за окно приложения.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает <codeph>true</codeph>, если этот ISystemManager отвечает за окно приложения, и <codeph>false</codeph>, если это приложение было загружено в другом приложении.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
	  Список пользовательских курсоров, являющихся нижестоящими по отношению к данному ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Список пользовательских курсоров, являющихся нижестоящими по отношению к данному ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, окна, находящиеся в самой верхней позиции, всплывающие подсказки и пользовательские курсоры. Доступ к пользовательским курсорам можно получить через свойство <codeph>cursorChildren</codeph>.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>cursorChildren.numChildren</codeph> определяет количество пользовательских курсоров (0 или 1), и если пользовательский курсор существует, то доступ к нему можно получить как к <codeph>cursorChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:document:get"><apiName>document</apiName><shortdesc>
	  Ссылка на объект документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Ссылка на объект документа. Объект документа представляет собой Object на самом верху иерархии приложения Flex, компонента MXML или компонента AS.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
	  Одиночный спрайт, общий для компонентов, используемых в качестве оверлея для перемещения фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
	  Одиночный спрайт, общий для компонентов, используемых в качестве оверлея для перемещения фокуса. Является общим в случае, если нижестоящий компонент является фокусируемым, и не используется в случае IFocusManagerComponent.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
	  True, если ISystemManager является прокси, а не корневым классом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  True, если ISystemManager является прокси, а не корневым классом.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc>
	  Объект LoaderInfo, представляющий собой информацию о приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc>
	  Объект LoaderInfo, представляющий собой информацию о приложении.
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Число модальных окон.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Число модальных окон.  
     
      <p>Модальные окна не позволяют производить щелчки мышью в других окнах, которые в обычном случае приводят к активации в этих окнах FocusManager. PopUpManager изменяет это число, поскольку он создает и удаляет модальные окна.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
	  Список самых верхних (всплывающих) окон, нижестоящих по отношению к этому ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Список самых верхних (всплывающих) окон, нижестоящих по отношению к этому ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, всплывающие подсказки и пользовательские курсоры. Доступ к самым верхним окнам можно получить через свойство <codeph>popUpChildren</codeph>.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>popUpChildren.numChildren</codeph> определяет число самых верхних окон, и получить доступ к ним можно как к <codeph>popUpChildren.getChildAt(i)</codeph>.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Список всех нижестоящих по отношению к этому ISystemManager элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Список всех нижестоящих по отношению к этому ISystemManager элементов.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, всплывающие подсказки и пользовательские курсоры.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:screen:get"><apiName>screen</apiName><shortdesc>
	  Размер и расположение окна приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Размер и расположение окна приложения. Объект Rectangle содержит свойства <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph>. Rectangle находится в начале изолированной системы координат.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:stage:get"><apiName>stage</apiName><shortdesc>
	  flash.display.Stage, представляющая собой окно приложения, отображаемое в SystemManager
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
	  flash.display.Stage, представляющая собой окно приложения, отображаемое в SystemManager
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
	  Список всплывающих подсказок, являющихся нижестоящими по отношению к данному ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Список всплывающих подсказок, являющихся нижестоящими по отношению к данному ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, самые верхние окна, всплывающие подсказки и пользовательские курсоры.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>toolTipChildren.numChildren</codeph> определяет число всплывающих подсказок (0 или 1), и если всплывающая подсказка существует, доступ к ней можно получить как к <codeph>toolTipChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
	  ISystemManager, отвечающий за окно приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
	  ISystemManager, отвечающий за окно приложения. Это будет тот же самый ISystemManager, если данное приложение не было загружено в другое приложение.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ToolTipManager"><apiName>ToolTipManager</apiName><shortdesc>
  ToolTipManager позволяет устанавливать базовую функцию ToolTip и функцию рекомендации ошибки, например задержку отображения и отключение всплывающих подсказок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToolTipManager позволяет устанавливать базовую функцию ToolTip и функцию рекомендации ошибки, например задержку отображения и отключение ToolTip.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link></related-links><apiOperation id="mx.managers:ToolTipManager:createToolTip"><apiName>createToolTip</apiName><shortdesc>
      Создает экземпляр класса ToolTip с указанным текстом и отображает его в указанном месте в координатах рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Новый созданный ToolTip.
     
      
      </apiDesc><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Текст, отображаемый в экземпляре ToolTip.
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Горизонтальная координата ToolTip в координатах рабочей области. В случае наличия нескольких рабочих областей соответствующая рабочая область определяется из аргумента <codeph>context</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Вертикальная координата ToolTip в координатах рабочей области. В случае наличия нескольких рабочих областей соответствующая рабочая область определяется из аргумента <codeph>context</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorTipBorderStyle</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Стиль границы поля рекомендации ошибки. Этот аргумент метода может иметь значение null, errorTipRight, errorTipAbove или errorTipBelow. Если он имеет значение null, то метод <codeph>createToolTip()</codeph> создает обычный ToolTip. Если он имеет значение errorTipRight, errorTipAbove или errorTipBelow, то метод <codeph>createToolTip()</codeph> создает рекомендацию ошибки, и этот параметр определяет адресата, на которого указывает стрелка рекомендации ошибки (целевой объект ошибки). Например, если передается errorTipRight, то Flex устанавливает рекомендацию ошибки (посредством аргументов x и y) справа от адресата ошибки; при этом стрелка располагается на левой границе поля рекомендации ошибки.
     
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает используемый StyleManager. Обычно передается объект, на котором отображается ToolTip, чтобы обеспечить использование одного и того же StyleManager для ToolTip и для объекта. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает экземпляр класса ToolTip с указанным текстом и отображает его в указанном месте в координатах рабочей области.
     
      <p>Всплывающие подсказки появляются на своем собственном уровне, поверх всех элементов, за исключением курсоров.</p>
     
      <p>Стандартным способом использования всплывающих подсказок является разрешение ToolTipManager автоматически показывать и скрывать их при перемещении пользователем указателя мыши по объектам с установленным свойством <codeph>toolTip</codeph>. Отключить это автоматическое управление ToolTip можно путем установки для свойства ToolTipManager <codeph>enabled</codeph> значения <codeph>false</codeph>.</p>
     
      <p>В отличие от предыдущего, этот метод – наряду с методом <codeph>destroyToolTip()</codeph> – дает возможность программного управления ToolTip. Их можно показывать в то время и в том месте, где это требуется, кроме того, если это необходимо, можно отображать сразу несколько подсказок. (ToolTipManager никогда не использует эту возможность, поскольку, как правило, это мешает пользователю).</p>
     
      <p>Этот метод сначала создает новый экземпляр ToolTip и вызывает метод <codeph>addChild()</codeph> для его размещения на уровне ToolTip в SystemManager. Если у пользователя отображается рекомендация ошибки, то он устанавливает соответствующие стили. Затем он задает текст и размеры ToolTip в зависимости от текста и помещает этот элемент в указанное местоположение.</p>
     
      <p>Следует сохранить ссылку на ToolTip, возвращаемую этим методом, для передачи ее в метод <codeph>destroyToolTip()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ToolTipManager:destroyToolTip"><apiName>destroyToolTip</apiName><shortdesc>
      Удаляет указанный ToolTip, созданный методом createToolTip().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toolTip</apiItemName><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier><apiDesc>Удаляемый экземпляр ToolTip.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет указанный ToolTip, созданный методом <codeph>createToolTip()</codeph>.
     
      <p>Посредством этого метода вызывается метод <codeph>removeChild()</codeph> с целью удаления ToolTip с уровня ToolTip в SystemManager. Затем, если на этот элемент не будет сохранена ссылка, он будет удален сборщиком мусора.</p>
     
      <p>Этот метод не следует вызывать на <codeph>currentToolTip</codeph> класса ToolTipManager.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ToolTipManager:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
      UIComponent, в настоящее время отображающий ToolTip, или null, если таковые отсутствуют.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      UIComponent, в настоящее время отображающий ToolTip, или <codeph>null</codeph>, если таковые отсутствуют.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:currentToolTip:get"><apiName>currentToolTip</apiName><shortdesc>
      Объект ToolTip, видимый в настоящее время, или null если таковые отсутствуют.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IToolTip</apiValueClassifier></apiValueDef><apiDesc>
      Объект ToolTip, видимый в настоящее время, или <codeph>null</codeph> если таковые отсутствуют.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:enabled:get"><apiName>enabled</apiName><shortdesc>
      Если true, то при наведении пользователем указателя мыши на компоненты ToolTipManager будет автоматически отображать элементы ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, то при наведении пользователем указателя мыши на компоненты ToolTipManager будет автоматически отображать элементы ToolTip. Если <codeph>false</codeph>, то элементы ToolTip не будут отображаться.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideDelay:get"><apiName>hideDelay</apiName><shortdesc>
      Время в миллисекундах, которое Flex выжидает после отображения ToolTip до его скрытия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время в миллисекундах, которое Flex выжидает после отображения ToolTip до его скрытия. После скрытия ToolTip в Flex пользователь должен убрать указатель мыши с компонента и затем, в случае необходимости повторного просмотра ToolTip, вновь навести его на компонент. Если <codeph>hideDelay</codeph> установлено на <codeph>Infinity</codeph>, то Flex не скрывает ToolTip, пока пользователь не запустит какое-либо событие, например уберет указатель мыши с компонента.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideEffect:get"><apiName>hideEffect</apiName><shortdesc>
      Эффект, воспроизводимый при скрытии ToolTip, или null, если ToolTip должен исчезнуть без эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Эффект, воспроизводимый при скрытии ToolTip, или <codeph>null</codeph>, если ToolTip должен исчезнуть без эффекта.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:scrubDelay:get"><apiName>scrubDelay</apiName><shortdesc>
      Время в миллисекундах, необходимое пользователю при перемещении указателя мыши между элементами управления до повторного запуска Flex showDelay для отображения ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время в миллисекундах, необходимое пользователю при перемещении указателя мыши между элементами управления до повторного запуска Flex <codeph>showDelay</codeph> для отображения ToolTip.
     
      <p>Этот параметр рекомендуется использовать, когда пользователь быстро переходит от одного элемента управления к другому; после отображения первого ToolTip Flex отобразит другие немедленно, без какого-либо ожидания. Чем меньше длительность <codeph>scrubDelay</codeph>, тем более вероятно, что пользователь будет ожидать время, указанное в <codeph>showDelay</codeph> для просмотра следующего ToolTip. Это свойство рекомендуется использовать тогда, когда на панели инструментов имеется несколько кнопок, и пользователь быстро сканирует их с целью просмотра кратких описаний их функций.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showDelay:get"><apiName>showDelay</apiName><shortdesc>
      Время в миллисекундах, которое Flex ожидает перед отображением поля ToolTip после того, как пользователь наводит указатель мыши на компонент, имеющий ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время в миллисекундах, которое Flex ожидает перед отображением поля ToolTip после того, как пользователь наводит указатель мыши на компонент, имеющий ToolTip. Для немедленного появления ToolTip установите <codeph>showDelay</codeph> на 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showEffect:get"><apiName>showEffect</apiName><shortdesc>
      Эффект, воспроизводимый при просмотре ToolTip, или null, если ToolTip должен появляться без эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Эффект, воспроизводимый при просмотре ToolTip, или <codeph>null</codeph>, если ToolTip должен появляться без эффекта.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:toolTipClass:get"><apiName>toolTipClass</apiName><shortdesc>
      Класс, используемый для создания ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>mx.controls.ToolTip
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Класс, используемый для создания всплывающих подсказок.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManagerPriority"><apiName>CursorManagerPriority</apiName><shortdesc>
  Класс CursorManagerPriority определяет значения констант для аргумента priority метода CursorManager.setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CursorManagerPriority определяет значения констант для аргумента <codeph>priority</codeph> метода <codeph>CursorManager.setCursor()</codeph>. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links><apiValue id="mx.managers:CursorManagerPriority:HIGH"><apiName>HIGH</apiName><shortdesc>
	  Константа, задающая самый высокий приоритет курсора при передаче в качестве аргумента priority для setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Константа, задающая самый высокий приоритет курсора при передаче в качестве аргумента <codeph>priority</codeph> для <codeph>setCursor()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:LOW"><apiName>LOW</apiName><shortdesc>
	  Константа, задающая самый низкий приоритет курсора при передаче в качестве аргумента priority для setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Константа, задающая самый низкий приоритет курсора при передаче в качестве аргумента <codeph>priority</codeph> для <codeph>setCursor()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:MEDIUM"><apiName>MEDIUM</apiName><shortdesc>
	  Константа, задающая средний приоритет курсора при передаче в качестве аргумента priority для setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Константа, задающая средний приоритет курсора при передаче в качестве аргумента <codeph>priority</codeph> для <codeph>setCursor()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:DragManager"><apiName>DragManager</apiName><shortdesc>
  Класс DragManager управляет функциями перетаскивания, позволяющими перемещать данные из одного места в другое в рамках приложения Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="rejectCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Курсор, отображаемый для операции отклонения. Значением по умолчанию является символ mx.skins.cursor.DragReject в файле Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="moveCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Курсор, отображаемый при осуществлении операции перемещения. Значением по умолчанию является символ mx.skins.cursor.DragMove в файле Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Курсор, отображаемый при осуществлении операции ссылки. Значением по умолчанию является символ mx.skins.cursor.DragLink в файле Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDragImageSkin" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Тема оформления, используемая для отображения значка перетаскивания по умолчанию, называемого также прокси перетаскивания.
 
  </description>
<default>mx.skins.halo.DefaultDragImage (for both Halo and Spark themes)
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="copyCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Курсор, отображаемый при осуществлении операции копирования. Значением по умолчанию является символ mx.skins.cursor.DragCopy в файле Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DragManager управляет функциями перетаскивания, позволяющими перемещать данные из одного места в другое в рамках приложения Flex. Например, можно выбрать объект, такой как элемент управления List, или элемент управления Flex, или элемент управления Image, и затем перетащить его поверх другого компонента для добавления к этому компоненту.
  
  <p>Все методы и свойства DragManager являются статическими, следовательно, создавать его экземпляр не требуется.</p>
  
  <p>Все компоненты Flex поддерживают функции перетаскивания. Flex обеспечивает дополнительную поддержку перетаскивания в элементы управления List, Tree и DataGrid.</p>
  
  <p>Когда пользователь выбирает какой-либо элемент с помощью указателя мыши, выбранный компонент называется инициатором перетаскивания. Значок, отображаемый при осуществлении операции перетаскивания, называется прокси перетаскивания.</p>
  
  <p>Когда пользователь перемещает прокси перетаскивания на другой компонент, этому компоненту отправляется событие <codeph>dragEnter</codeph>. Если компонент принимает перетаскивание, он становится адресатом перетаскивания и получает события <codeph>dragOver</codeph>, <codeph>dragExit</codeph> и <codeph>dragDrop</codeph>.</p>
  
  <p>Когда перетаскивание завершено, в инициатор перетаскивания передается событие <codeph>dragComplete</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DragSource"><linktext>mx.core.DragSource</linktext></link><link href="mx.events.xml#DragEvent"><linktext>mx.events.DragEvent</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><apiOperation id="mx.managers:DragManager:acceptDragDrop"><apiName>acceptDragDrop</apiName><shortdesc>
      В случае согласия на прием перетаскиваемых данных вызовите этот метод из обработчика событий dragEnter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Адресат перетаскивания, принимающий это перетаскивание.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      В случае согласия на прием перетаскиваемых данных вызовите этот метод из обработчика событий <codeph>dragEnter</codeph>. Как правило, <codeph>event.target</codeph> приводится к типу данных целевого объекта перетаскивания. В примере ниже целевым объектом перетаскивания является контейнер MX Canvas: 
     
      <pre>DragManager.acceptDragDrop(Canvas(event.target));</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:doDrag"><apiName>doDrag</apiName><shortdesc>
      Инициирует операцию перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>IUIComponent, указывающий инициирующий перетаскивание компонент.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiDesc>Объект DragSource, содержащий перетаскиваемые данные.
     
      </apiDesc></apiParam><apiParam><apiItemName>mouseEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent, содержащий информацию о положении мыши для начала перетаскивания.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragImage</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Перетаскиваемое изображение. Этот аргумент является необязательным. Если он опущен, то в течение функции перетаскивания используется стандартный прямоугольник перетаскивания. При указании изображения следует явно установить высоту и ширину изображения, иначе оно не будет отображено.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Число, указывающее смещение по оси x в пикселях для <codeph>dragImage</codeph>. Этот аргумент является необязательным. Если оно опущено, то прокси перетаскивания отображается в левом верхнем углу инициатора перетаскивания. Смещение выражается в пикселях от левого края прокси перетаскивания до левого края инициатора перетаскивания, и обычно является отрицательным числом.
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Число, указывающее смещение по оси y в пикселях для <codeph>dragImage</codeph>. Этот аргумент является необязательным. Если оно опущено, то прокси перетаскивания отображается в левом верхнем углу инициатора перетаскивания. Смещение выражается в пикселях от верхнего края прокси перетаскивания до верхнего края инициатора перетаскивания, и обычно является отрицательным числом.
     
      </apiDesc></apiParam><apiParam><apiItemName>imageAlpha</apiItemName><apiType value="Number"/><apiData>0.5</apiData><apiDesc>Число, указывающее используемое для перетаскиваемого изображения значение альфа-канала. Этот аргумент является необязательным. Если оно опущено, то значением альфа-канала по умолчанию является 0,5. Значение 0,0 указывает, что изображение является прозрачным; значение 1,0 указывает, что оно полностью непрозрачно. 
         
          </apiDesc></apiParam><apiParam><apiItemName>allowMove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, разрешено ли цели операции перетаскивания переместить перетаскиваемые данные.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Инициирует операцию перетаскивания.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:getFeedback"><apiName>getFeedback</apiName><shortdesc>
      Возвращает текущую обратную связь перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Возможными возвращаемыми значениями являются <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> и <codeph>DragManager.NONE</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает текущую обратную связь перетаскивания.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:showFeedback"><apiName>showFeedback</apiName><shortdesc>
      Устанавливает индикатор обратной связи для операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>feedback</apiItemName><apiType value="String"/><apiDesc>Тип индикатора обратной связи для отображения.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает индикатор обратной связи для операции перетаскивания. Возможными значениями являются <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> и <codeph>DragManager.NONE</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:DragManager:COPY"><apiName>COPY</apiName><shortdesc>
      Константа, указывающая, что типом действия перетаскивания является copy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа, указывающая, что типом действия перетаскивания является copy.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:LINK"><apiName>LINK</apiName><shortdesc>
      Константа, указывающая, что типом действия перетаскивания является link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа, указывающая, что типом действия перетаскивания является link.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:MOVE"><apiName>MOVE</apiName><shortdesc>
      Константа, указывающая, что типом действия перетаскивания является move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа, указывающая, что типом действия перетаскивания является move.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:NONE"><apiName>NONE</apiName><shortdesc>
      Константа, указывающая, что типом действия перетаскивания является none.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа, указывающая, что типом действия перетаскивания является none.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:isDragging:get"><apiName>isDragging</apiName><shortdesc>
      Доступное только для чтения свойство, которое возвращает true во время выполнения перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Доступное только для чтения свойство, которое возвращает <codeph>true</codeph> во время выполнения перетаскивания.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerContainer"><apiName>IFocusManagerContainer</apiName><shortdesc>
  Интерфейс IFocusManagerContainer определяет интерфейс, реализуемый контейнерами для размещения FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFocusManagerContainer определяет интерфейс, реализуемый контейнерами для размещения FocusManager. PopUpManager автоматически устанавливает FocusManager в любом вызываемом им всплывающем IFocusManagerContainer.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:contains"><apiName>contains</apiName><shortdesc>
      Определяет, является ли указанный экранный объект нижестоящим элементом экземпляра контейнера или самим экземпляром.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение <codeph>true</codeph>, если нижестоящий объект является нижестоящим объектом контейнера или самим контейнером; в противном случае значение <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Тестируемый нижестоящий объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет, является ли указанный экранный объект нижестоящим элементом экземпляра контейнера или самим экземпляром. Поиск охватывает весь список отображения, включая этот экземпляр контейнера. Нижестоящие элементы второго, третьего и последующих уровней возвращают значение <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера. При фокусе, установленном на элементах управления в контейнере, нажатие клавиши Enter эквивалентно нажатию элемента управления Button
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      FocusManager для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      FocusManager для этого компонента. FocusManager должен находиться в свойстве <codeph>focusManager</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManager"><apiName>ILayoutManager</apiName><shortdesc>
  LayoutManager является механизмом, стоящим за стратегией измерений и макетов Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  LayoutManager является механизмом, стоящим за стратегией измерений и макетов Flex. Макет выполняется в три фазы: передача, измерение и макет.
 
  <p>Каждая фаза отличается от остальных, и все UIComponents одной фазы обрабатываются до перехода к следующей фазе. В течение обработки UIComponents в фазе могут возникнуть запросы на повторную обработку UIComponents некоторой фазой. Эти запросы помещаются в очередь и обрабатываются только в течение следующего выполнения фазы.</p>
 
  <p>Фаза <b>commit</b> начинается с вызова <codeph>validateProperties()</codeph>, просматривающего список объектов (отсортированных в обратном порядке по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateProperties()"> метод <codeph>validateProperties()</codeph></xref>.</p>
 
  <p>Объекты в списке обрабатываются в обратном порядке вложенности, начиная с <b>least</b> глубоко вложенного объекта. Также это можно обозначить как нисходящий порядок или порядок движения извне.</p>
 
  <p>Эта фаза позволяет компонентам, содержимое которых зависит от параметров настройки свойств, быть сконфигурированными до фаз измерения и макета. Иногда ради повышения производительности метод установщика свойства компонента не выполняет всю работу по обновлению до нового значения свойства. Вместо этого установщик свойства вызывает метод <codeph>invalidateProperties()</codeph>, что приостанавливает работу до выполнения этой фазы. Это предотвращает выполнение лишней работы при многократной установке свойства.</p>
 
  <p>Фаза <b>measurement</b> начинается с вызова <codeph>validateSize()</codeph>, просматривающего список объектов (отсортированных по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph> каждого из объектов для определения, изменился ли размер объекта.</xref></p>
 
  <p>Если метод <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> объекта был вызван ранее, то затем вызывается метод <codeph>validateSize()</codeph>. Если размер или позиция объекта были изменены в результате вызова <codeph>validateSize()</codeph>, то вызывается метод <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> объекта, добавляя, таким образом, объект к очереди обработки для следующего выполнения фазы макета. Кроме того, вышестоящий элемент объекта отмечается для фаз измерения и макета путем вызова <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> и <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> соответственно.</p>
 
  <p>Объекты в списке обрабатываются в порядке вложенности, начиная с <b>most</b> глубоко вложенного объекта. Также это можно обозначить как восходящий порядок или порядок движения изнутри.</p>
 
  <p>Фаза <b>layout</b> начинается с вызова метода <codeph>validateDisplayList()</codeph>, просматривающего список объектов (отсортированных в обратном порядке по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateDisplayList()"> <codeph>validateDisplayList()</codeph></xref> каждого из объектов для запроса объекта измерить размер и установить позицию всех компонентов, содержащихся в нем (т. е. нижестоящих элементов).</p>
 
  <p>Если метод <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> объекта был вызван ранее, то затем для объекта вызывается метод <codeph>validateDisplayList()</codeph>.</p>
 
  <p>Объекты в списке обрабатываются в обратном порядке вложенности, начиная с <b>least</b> глубоко вложенного объекта. Также это можно обозначить как нисходящий порядок или порядок движения извне.</p>
 
  <p>Как правило, компоненты не перезаписывают методы <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph>. В случае UIComponents большинство компонентов перезаписывают методы <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> или <codeph>updateDisplayList()</codeph>, которые вызываются методами <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph> соответственно.</p>
 
  <p>При запуске приложения одиночный экземпляр LayoutManager создается и сохраняется в свойстве <codeph>UIComponent.layoutManager</codeph>. Ожидается, что все компоненты будут использовать этот экземпляр. При отсутствии доступа к объекту UIComponent доступ к LayoutManager можно получить также с помощью статического метода <codeph>LayoutManager.getInstance()</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  Вызывается при каком-либо изменении компонента, требующем изменения его макета и/или визуальных эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Измененный объект.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Вызывается при каком-либо изменении компонента, требующем изменения его макета и/или визуальных эффектов. В этом случае необходимо выполнить алгоритм макета компонента, даже если размер компонента не изменился. Например, при добавлении нового нижестоящего компонента, изменении свойства стиля или присвоении компоненту нового размера его вышестоящим элементом.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод validateProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Объект, свойство которого изменилось.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод <codeph>validateProperties()</codeph>. Компонент должен вызывать этот метод при изменении свойства. Как правило, метод установщика свойства хранит новое значение во временной переменной и вызывает метод <codeph>invalidateProperties()</codeph> таким образом, чтобы методы <codeph>validateProperties()</codeph> и <codeph>commitProperties()</codeph> были вызваны позднее, когда новое значение будет фактически применено к компоненту и/или его нижестоящим элементам. Преимущество этой стратегии состоит в том, что зачастую одновременно изменяются несколько свойств, и эти свойства могут взаимодействовать друг с другом, иметь повторяющийся код при применении или должны быть применены в определенном порядке. Эта стратегия представляет наиболее эффективный метод применения новых значений свойств.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод validateSize().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Объект, размер которого изменился.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод <codeph>validateSize()</codeph>. Вызывается при изменении размера объекта.
	 
	  <p>Размер объекта может измениться по двум причинам.</p>
	 
	  <ol>
	    <li>Изменение содержимого объекта. Например, размер кнопки изменяется при изменении ее <codeph>label</codeph>.</li>
	    <li>Сценарий изменяет явно одно из следующих свойств: <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> или <codeph>maxHeight</codeph>.</li>
	  </ol>
	 
	  <p>При возникновении первого условия необходимо повторно вычислить измерения для объекта. При возникновении второго условия отсутствует необходимость в повторном вычислении измерений, т.к. новый размер объекта известен. Однако необходимо повторно измерить и повторно создать макет для вышестоящего по отношению к объекту элемента.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
	  Возвращает значение true при наличии компонентов, требующих проверки; значение false, если все компоненты были проверены.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph> при наличии компонентов, требующих проверки; значение <codeph>false</codeph>, если все компоненты были проверены.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает значение <codeph>true</codeph> при наличии компонентов, требующих проверки; значение <codeph>false</codeph>, если все компоненты были проверены.
          
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
	  При изменении свойств компоненты, как правило, не применяют эти изменения немедленно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Передаваемый компонент используется для выявления тех компонентов, которые должны быть проверены. Будут вызваны методы <codeph>validateProperties()</codeph>, <codeph>commitProperties()</codeph>, <codeph>validateSize()</codeph>, <codeph>measure()</codeph>, <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> всех содержащихся в этом компоненте компонентов.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> методы <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> не вызываются.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  При изменении свойств компоненты, как правило, не применяют эти изменения немедленно. Вместо этого компоненты обычно вызывают один из методов invalidate LayoutManager и применяют свойства позднее. Фактическое свойство, которое было установлено, может быть считано немедленно, но если свойство воздействует на другие свойства в компоненте, его нижестоящих или вышестоящих элементах, то эти свойства могут не быть обновлены немедленно.  
	 
	  <p>Для проверки обновления значений можно вызвать метод <codeph>validateClient()</codeph>. Он обновляет все свойства во всех компонентах, уровни вложенности которых больше или равны уровню целевого компонента, перед возвратом управления. Этот метод следует вызывать только при необходимости, т.к. его вызов приводит к большим объемам вычислений.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
	  При изменении свойств компоненты, как правило, не применяют эти изменения немедленно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  При изменении свойств компоненты, как правило, не применяют эти изменения немедленно. Вместо этого компоненты обычно вызывают один из методов invalidate LayoutManager и применяют свойства позднее. Фактическое свойство, которое было установлено, может быть считано немедленно, но если свойство воздействует на другие свойства в компоненте, его нижестоящих или вышестоящих элементах, то эти свойства могут не быть обновлены немедленно. Для проверки обновления значения, можно вызвать метод <codeph>validateNow()</codeph>. Он обновляет все свойства во всех компонентах перед возвратом. Этот метод следует вызывать только при необходимости, т.к. его вызов приводит к большим объемам вычислений.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
	  Флаг, указывающий, позволяет ли LayoutManager обновлять экран между фазами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Флаг, указывающий, позволяет ли LayoutManager обновлять экран между фазами. При значении <codeph>true</codeph>, измерение и макет были выполнены в фазах, одна фаза на обновление экрана. Методы <codeph>validateProperties()</codeph> и <codeph>commitProperties()</codeph> вызываются для всех компонентов, пока все их свойства не будут проверены. Затем будет обновлен экран.  
	 
	  <p>Затем будут вызываться методы <codeph>validateSize()</codeph> и <codeph>measure()</codeph> для всех компонентов, пока все компоненты не будут измерены, а затем экран будет снова обновлен.  </p>
	 
	  <p>Наконец, будут вызываться методы <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> всех компонентов, пока все компоненты не будут проверены, а затем экран будет снова обновлен. Если при проверке одной фазы будет аннулирована более ранняя фаза, то LayoutManager начнет сначала. Этот процесс становится более эффективным при большом количестве созданных и инициализированных компонентов. Инфраструктура ответственна за установку этого свойства.</p>
	 
	  <p>При значении <codeph>false</codeph> все три фазы выполняются до обновления экрана.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:FocusManager"><apiName>FocusManager</apiName><shortdesc>
  Класс FocusManager управляет фокусом на компонентах в ответ на действия мыши или клавиатуры (клавиши Tab).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс FocusManager управляет фокусом на компонентах в ответ на действия мыши или клавиатуры (клавиши Tab). В приложении могут быть несколько экземпляров FocusManager. Каждый экземпляр FocusManager ответственен за набор компонентов, составляющих «цикл табуляции». При необходимом количестве нажатий клавиши Tab фокус проходит через набор компонентов, и, в конечном счете, возвращается к исходному компоненту. Это и есть «цикл табуляции», а экземпляр FocusManager управляет этим циклом. При наличии всплывающих окон с их собственным набором компонентов в «цикле табуляции» эти всплывающие окна будут иметь собственные экземпляры FocusManager. Главное приложение всегда имеет экземпляр FocusManager.
   <p>FocusManager управляет фокусом из «уровня компонентов». Во Flex UITextField в компоненте является единственным способом ввода текста с клавиатуры. В Flash Player или AIR этот UITextField имеет фокус. Однако с точки зрения FocusManager фокус имеет компонент, являющийся вышестоящим элементом по отношению к UITextField. Таким образом, существует различие между фокусом уровня проигрывателя и фокусом уровня компонентов. Как правило, разработчики приложений имеют дело только с фокусом уровня компонентов, в то время как разработчики компонентов должны иметь представление о фокусе уровня проигрывателя.</p>
   <p>Все компоненты, которыми можно управлять с помощью FocusManager, должны реализовать mx.managers.IFocusManagerComponent, в то время как объекты, управляемые фокусом уровня проигрывателя, не должны.</p>  
   <p>FocusManager также управляет понятием defaultButton, являющимся кнопкой на форме, передающей событие щелчка мышью при нажатии клавиши Enter в зависимости от того, где находится фокус в этот момент времени.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.managers:FocusManager:FocusManager"><apiName>FocusManager</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerContainer</apiOperationClassifier><apiDesc>IFocusManagerContainer, размещающий FocusManager.
           </apiDesc></apiParam><apiParam><apiItemName>popup</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Значение <codeph>true</codeph> указывает, что контейнер является всплывающим компонентом, а не главным приложением.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
           <p>FocusManager управляет фокусом внутри нижестоящих элементов IFocusManagerContainer. Он устанавливается в IFocusManagerContainer во время выполнения конструктора.</p>
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:FocusManager:activate"><apiName>activate</apiName><shortdesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer. При нажатии кнопки мыши в IFocusManagerContainer при деактивированном FocusManager SystemManager вызовет метод <codeph>activate()</codeph> на этом FocusManager. До активации другого FocusManager у активированного FocusManager будет вызван метод <codeph>deactivate()</codeph>.
           <p>FocusManager добавляет обработчиков события, позволяющих ему контролировать связанные с фокусом действия клавиатуры и мыши.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer. При нажатии кнопки мыши в IFocusManagerContainer при деактивированном FocusManager SystemManager вызовет метод <codeph>activate()</codeph> на этом FocusManager. До активации другого FocusManager у активированного FocusManager будет вызван метод <codeph>deactivate()</codeph>.
           <p>FocusManager удаляет обработчиков событий, позволяющих ему контролировать связанные с фокусом действия клавиатуры и мыши.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      
      Возвращает IFocusManagerComponent, содержащий данный объект при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFOcusManagerComponent, содержащий <codeph>o</codeph> или <codeph>null</codeph>
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Объект, который может иметь фокус уровня проигрывателя.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает IFocusManagerComponent, содержащий данный объект при его наличии. Поскольку проигрыватель мог установить фокус на субкомпоненте компонента Flex, этот метод определяет, какой IFocusManagerComponent имеет фокус с точки зрения компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      
      Получает компонент IFocusManagerComponent, который в настоящее время имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект IFocusManagerComponent, который имеет фокус.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Получает компонент IFocusManagerComponent, который в настоящее время имеет фокус. Рекомендуется выполнить вызов этого метода вместо использования объекта рабочей области, т.к. он указывает, какой компонент имеет фокус. Рабочая область может вернуть субкомпонент в этом компоненте.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      
      Возвращает IFocusManagerComponent, который получил бы фокус, если бы пользователь нажал клавишу Tab для перемещения к другому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Компонент, который получил бы фокус.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> возвращает объект, как при нажатии клавиш Shift-Tab.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает IFocusManagerComponent, который получил бы фокус, если бы пользователь нажал клавишу Tab для перемещения к другому компоненту. Он возвратит тот же компонент в качестве текущего сфокусированного компонента, если отсутствуют другие допустимые компоненты в приложении.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      
      Устанавливает для showFocusIndicator значение false и удаляет визуальный индикатор фокуса из сфокусированного объекта при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Устанавливает для <codeph>showFocusIndicator</codeph> значение <codeph>false</codeph> и удаляет визуальный индикатор фокуса из сфокусированного объекта при его наличии.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      
      Устанавливает фокус на компоненте IFocusManagerComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Компонент, который может получить фокус.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Устанавливает фокус на компоненте IFocusManagerComponent. Не проверяет видимость компонентов, включенное состояние или любые другие условия.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      
      Устанавливает для showFocusIndicator значение true и выводит визуальный индикатор фокуса на сфокусированном объекте при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Устанавливает для <codeph>showFocusIndicator</codeph> значение <codeph>true</codeph> и выводит визуальный индикатор фокуса на сфокусированном объекте при его наличии.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:toString"><apiName>toString</apiName><shortdesc>
      Возвращает представление в виде строки компонента, размещающего объект FocusManager, с добавленной к концу строки строкой .focusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Возвращает представление в виде строки компонента, размещающего объект FocusManager, с добавленной к концу строки строкой <codeph>.focusManager</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает представление в виде строки компонента, размещающего объект FocusManager, с добавленной к концу строки строкой <codeph>.focusManager</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:FocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      
      Флаг, указывающий, должен ли FocusManager проверить, была ли нажата клавиша Enter для активации кнопки по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Флаг, указывающий, должен ли FocusManager проверить, была ли нажата клавиша Enter для активации кнопки по умолчанию. TextArea и другие компоненты, для которых требуется распознать нажатие клавиши <codeph>Enter</codeph>, устанавливают для этого свойства значение <codeph>false</codeph> для отключения передачи события <codeph>click</codeph> клавишей Enter по кнопке по умолчанию, если она существует.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      
      Ссылка на исходный элемент управления Button по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      
      Ссылка на исходный элемент управления Button по умолчанию. Нажатие клавиши Enter при нахождении фокуса на любом элементе управления активирует элемент управления Button путем передачи события <codeph>click</codeph> на элемент управления Button, как если бы по нему щелкнули мышью. Фактический элемент управления Button по умолчанию изменяется при передаче фокуса другому элементу управления Button, но переключается обратно на оригинал, если фокус не находится на кнопке.
     
      <p>Этим свойством управляют контейнеры Flex; не следует устанавливать его непосредственно для указания кнопки по умолчанию.</p>
     
      <p><codeph>defaultButton</codeph> должен иметь класс <codeph>mx.controls.Button</codeph> даже в том случае, если это свойство имеет тип <codeph>IUIComponent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Одиночный спрайт, перемещаемый из контейнера в контейнер при перемещении фокуса в эти контейнеры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Одиночный спрайт, перемещаемый из контейнера в контейнер при перемещении фокуса в эти контейнеры. Спрайт используется в качестве вышестоящего элемента визуального индикатора того, что компонент имеет фокус.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      
      Следующий уникальный индекс табуляции для использования в этом цикле табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Следующий уникальный индекс табуляции для использования в этом цикле табуляции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      
      Флаг, указывающий, отображать ли индикатор того, что компонент имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Флаг, указывающий, отображать ли индикатор того, что компонент имеет фокус. При значении <codeph>true</codeph> получающий фокус компонент выводит визуальный индикатор о том, что он имеет фокус.
     
      <p>По умолчанию это значение <codeph>false</codeph> до тех пор, пока пользователь не использует клавишу Tab, затем устанавливается значение <codeph>true</codeph>.</p>
     
      <p>Для изменения этого свойства предпочтительнее использовать методы <codeph>showFocus()</codeph> и <codeph>hideFocus()</codeph>, поскольку эти методы также обновляют визуальный индикатор о том, что компонент имеет фокус.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComplexComponent"><apiName>IFocusManagerComplexComponent</apiName><shortdesc>
  Интерфейс IFocusManagerComplexComponent определяет интерфейс, реализуемый компонентами, которые могут иметь несколько внутренних адресатов фокуса, для получения фокуса из FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFocusManagerComplexComponent определяет интерфейс, реализуемый компонентами, которые могут иметь несколько внутренних адресатов фокуса, для получения фокуса из FocusManager.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:assignFocus"><apiName>assignFocus</apiName><shortdesc>
	  Вызывается посредством FocusManager при получении фокуса компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>bottom если Tab используется с клавишей Shift, top в противном случае
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Вызывается посредством FocusManager при получении фокуса компонентом. Этот компонент может в свою очередь устанавливать фокус для внутреннего компонента. Метод setFocus() компонента будет по-прежнему вызываться при получении фокуса с помощью мыши, но этот метод используется, если фокус изменяется с помощью клавиатуры.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:hasFocusableContent:get"><apiName>hasFocusableContent</apiName><shortdesc>
	  Флаг, указывающий, имеет ли компонент в настоящее время внутренние фокусируемые целевые объекты.
	 
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Флаг, указывающий, имеет ли компонент в настоящее время внутренние фокусируемые целевые объекты.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IBrowserManager"><apiName>IBrowserManager</apiName><shortdesc>
  Интерфейс, реализуемый общедоступным экземпляром BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс, реализуемый общедоступным экземпляром BrowserManager. Приложения прослушивают события, вызывают методы и получают доступ к свойствам на общедоступном экземпляре, доступ к которому осуществляется с помощью метода <codeph>BrowserManager.getInstance()</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link></related-links><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.URL_CHANGE_urlChange"><apiName>urlChange</apiName><shortdesc>
  Передается при изменении URL-адреса приложением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении URL-адреса приложением.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE_browserURLChange"><apiName>browserURLChange</apiName><shortdesc>
  Передается при изменении URL-адреса браузером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении URL-адреса браузером.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается при изменении URL-адреса пользователем при помощи взаимодействия с браузером, вызова приложения в AIR или программной установки свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении URL-адреса пользователем при помощи взаимодействия с браузером, вызова приложения в AIR или программной установки свойства.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:initForHistoryManager"><apiName>initForHistoryManager</apiName><shortdesc> 
      Инициализирует BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Инициализирует BrowserManager. HistoryManager вызывает этот метод для подготовки BrowserManager к дальнейшим вызовам из HistoryManager. Невозможно использовать HistoryManager и вызывать из приложения метод <codeph>setFragment()</codeph>. В результате метод <codeph>init()</codeph> обычно назначает свойству <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> значение <codeph>false</codeph> для отключения HistoryManager.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:init"><apiName>init</apiName><shortdesc> 
      Инициализирует BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Фрагмент для использования в случае отсутствия фрагмента в начальном URL-адресе.
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Заголовок для использования в случае отсутствия фрагмента в начальном URL-адресе.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Инициализирует BrowserManager. BrowserManager получит начальный URL-адрес. При наличии в нем фрагмента он передаст событие <codeph>BROWSER_URL_CHANGE</codeph>. Этот метод устанавливает для свойства <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> значение <codeph>false</codeph>, т.к. HistoryManager, как правило, сталкивается с обработкой фрагментов URL-адреса приложением.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setFragment"><apiName>setFragment</apiName><shortdesc> 
      Изменяет в браузере фрагмент URL-адреса после #.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Новый фрагмент для использования после # в URL-адресе.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Изменяет в браузере фрагмент URL-адреса после #. Будет выполнена попытка проследить этот URL-адрес в истории браузера.
     
      <p>При установленном заголовке старый заголовок в браузере заменяется новым.</p>
     
      <p>Для хранения URL-адреса вызывается метод JavaScript <codeph>setBrowserURL()</codeph>. Оболочка HTML приложения должна иметь этот метод, который должен реализовать механизм для принятия этого значения и регистрации его на схеме истории браузера и в адресной строке.</p>
     
      <p>При установке передается событие <codeph>APPLICATION_URL_CHANGE</codeph>. При отмене события метод <codeph>setBrowserURL()</codeph> не вызывается.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setTitle"><apiName>setTitle</apiName><shortdesc> 
      Изменяет текст в строке заголовка браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Новый заголовок для использования в строке заголовка браузера.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Изменяет текст в строке заголовка браузера. Этот метод не влияет на историю браузера.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:base:get"><apiName>base</apiName><shortdesc>
      Часть текущего URL-адреса перед #, как она отображается в адресной строке браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Часть текущего URL-адреса перед #, как она отображается в адресной строке браузера.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:fragment:get"><apiName>fragment</apiName><shortdesc>
      Часть текущего URL-адреса после #, как она отображается в адресной строке браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Часть текущего URL-адреса после #, как она отображается в адресной строке браузера. Для изменения этого значения используется метод <codeph>setURLFragment()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:title:get"><apiName>title</apiName><shortdesc>
      Заголовок приложения, как он должен отображаться в истории браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Заголовок приложения, как он должен отображаться в истории браузера.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:url:get"><apiName>url</apiName><shortdesc>
      Текущий URL-адрес, как он отображается в адресной строке браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Текущий URL-адрес, как он отображается в адресной строке браузера.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:PopUpManager"><apiName>PopUpManager</apiName><shortdesc>
  Класс одиночного PopUpManager создает новые окна верхнего уровня и помещает или удаляет эти окна из верхнего уровня всех остальных видимых окон.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс одиночного PopUpManager создает новые окна верхнего уровня и помещает или удаляет эти окна из верхнего уровня всех остальных видимых окон. Для описания слоев см. раздел, посвященный SystemManager. Он используется для всплывающих диалоговых окон, меню и выпадающих списков в элементе управления ComboBox и в подобных компонентах.
 
  <p>PopUpManager также обеспечивает модальность, так, что окна ниже всплывающего не могут получить события мыши, а также обеспечивает событие, если пользователь щелкает кнопкой мыши вне окна, таким образом, разработчик может выбрать, закрыть окно или предупредить пользователя.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links><apiOperation id="mx.managers:PopUpManager:addPopUp"><apiName>addPopUp</apiName><shortdesc>
      Отображает окно верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>window</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>IFlexDisplayObject, который будет отображен.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject, используемый для определения используемых слоев SystemManager и дополнительной эталонной точки для центрирования нового окна верхнего уровня. Он может не быть фактическим вышестоящим элементом всплывающего окна, т.к. все всплывающие окна являются нижестоящими элементами по отношению к SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> окно является модальным, что означает, что пользователь не будет иметь доступа к другим всплывающим окнам до тех пор, пока оно не будет удалено.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Список нижестоящих элементов для добавления всплывающего окна. Один из <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> или <codeph>PopUpManagerChildList.PARENT</codeph> (по умолчанию).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>moduleFactory, в котором всплывающему окну следует искать свои вложенные шрифты и менеджер стиля.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отображает окно верхнего уровня. Рекомендуется вызывать <codeph>removePopUp()</codeph> для удаления всплывающих окон, создаваемых с помощью метода <codeph>addPopUp()</codeph>. Если класс реализует IFocusManagerContainer, то окно будет иметь свой собственный FocusManager так, что если пользователь использует клавишу Tab для перемещения между элементами управления, только элементы управления в окне будут доступны.
     
      <p><b>Пример</b></p> 
     
      <pre>var tw:TitleWindow = new TitleWindow();
        tw.title = "My Title";
        mx.managers.PopUpManager.addPopUp(tw, pnl, false);</pre>
     
      <p>Создает всплывающее окно с помощью экземпляра <codeph>tw</codeph> класса TitleWindow и <codeph>pnl</codeph> как спрайт для определения, где поместить всплывающее окно. Определено как немодальное окно.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:bringToFront"><apiName>bringToFront</apiName><shortdesc>
      Убедитесь, что всплывающее окно выше других объектов списка нижестоящих элементов. SystemManager обеспечивает это автоматически, если всплывающее окно является окном верхнего уровня и на него наведена мышь, но в противном случае необходимо следить за этим самостоятельно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Представление всплывающего окна IFlexDisplayObject.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Убедитесь, что всплывающее окно выше других объектов списка нижестоящих элементов. SystemManager обеспечивает это автоматически, если всплывающее окно является окном верхнего уровня и на него наведена мышь, но в противном случае необходимо следить за этим самостоятельно.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:centerPopUp"><apiName>centerPopUp</apiName><shortdesc>
      Центрирует всплывающее окно по любому использованному в вызове метода createPopUp() или addPopUp() окну.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Представление всплывающего окна IFlexDisplayObject.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Центрирует всплывающее окно по любому использованному в вызове метода <codeph>createPopUp()</codeph> или <codeph>addPopUp()</codeph> окну.
     
      <p>Следует отметить, что позиция всплывающего окна может не измениться немедленно после этого вызова, т.к. Flex может ожидать измерения и макета всплывающего окна перед выполнением его центрирования.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:createPopUp"><apiName>createPopUp</apiName><shortdesc>
      Создает окно верхнего уровня и помещает его выше других окон в z-порядке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ссылка на новое окно верхнего уровня.
     
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject, используемый для определения используемых слоев SystemManager и дополнительной эталонной точки для центрирования нового окна верхнего уровня. Он может не быть фактическим вышестоящим элементом всплывающего окна, т.к. все всплывающие окна являются нижестоящими элементами по отношению к SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="Class"/><apiDesc>Класс объекта, который должен быть создан для всплывающего окна. Этот класс должен реализовать IFlexDisplayObject.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> окно является модальным, что означает, что пользователь не будет иметь доступа к другим всплывающим окнам до тех пор, пока оно не будет удалено.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Список нижестоящих элементов для добавления всплывающего окна. Один из <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> или <codeph>PopUpManagerChildList.PARENT</codeph> (по умолчанию).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>moduleFactory, в котором всплывающему окну следует искать свои вложенные шрифты и менеджер стиля.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает окно верхнего уровня и помещает его выше других окон в z-порядке. Рекомендуется вызывать метод <codeph>removePopUp()</codeph> для удаления всплывающих окон, создаваемых с помощью метода <codeph>createPopUp()</codeph>. Если класс реализует IFocusManagerContainer, то окно будет иметь свой собственный FocusManager так, что если пользователь использует клавишу Tab для перемещения между элементами управления, только элементы управления в окне будут доступны.
     
      <p><b>Пример</b></p> 
     
      <pre>pop = mx.managers.PopUpManager.createPopUp(pnl, TitleWindow, false); </pre>
      
      <p>Создает всплывающее окно, основанное на классе TitleWindow, с помощью <codeph>pnl</codeph> в качестве MovieClip для определения, где поместить всплывающее окно. Оно является немодальным окном. Это означает, что другие окна могут реагировать на события мыши</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:removePopUp"><apiName>removePopUp</apiName><shortdesc>
      Удаляет всплывающее окно, отображенное методом createPopUp() или addPopUp().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>IFlexDisplayObject, представляющий всплывающее окно.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет всплывающее окно, отображенное методом <codeph>createPopUp()</codeph> или <codeph>addPopUp()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IFocusManager"><apiName>IFocusManager</apiName><shortdesc>
  Интерфейс IFocusManager определяет интерфейс, который компоненты должны реализовать для управления фокусом на компонентах в ответ на действия мыши или действия клавиатуры (клавиши Tab), и поддерживать кнопку по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFocusManager определяет интерфейс, который компоненты должны реализовать для управления фокусом на компонентах в ответ на действия мыши или действия клавиатуры (клавиши Tab), и поддерживать кнопку по умолчанию.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#FocusManager"><linktext>mx.managers.FocusManager</linktext></link></related-links><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:activate"><apiName>activate</apiName><shortdesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer. При нажатии кнопки мыши в IFocusManagerContainer при деактивированном FocusManager SystemManager вызовет метод <codeph>activate()</codeph> на этом FocusManager. До активации другого FocusManager у активированного FocusManager будет вызван метод <codeph>deactivate()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      SystemManager активирует и деактивирует FocusManager при нескольких одновременно отображаемых IFocusManagerContainer. При нажатии кнопки мыши в IFocusManagerContainer при деактивированном FocusManager SystemManager вызовет метод <codeph>activate()</codeph> на этом FocusManager. До активации другого FocusManager у активированного FocusManager будет вызван метод <codeph>deactivate()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      Возвращает IFocusManagerComponent, содержащий данный объект при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFOcusManagerComponent, содержащий <codeph>o</codeph> или <codeph>null</codeph>
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Объект, который может иметь фокус уровня проигрывателя.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает IFocusManagerComponent, содержащий данный объект при его наличии. Поскольку проигрыватель мог установить фокус на субкомпоненте компонента Flex, этот метод определяет, какой IFocusManagerComponent имеет фокус с точки зрения компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      Получает компонент IFocusManagerComponent, который в настоящее время имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект IFocusManagerComponent, который имеет фокус.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Получает компонент IFocusManagerComponent, который в настоящее время имеет фокус. Рекомендуется выполнить вызов этого метода вместо использования объекта рабочей области, т.к. он указывает, какой компонент имеет фокус. Рабочая область может вернуть субкомпонент в этом компоненте.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      Возвращает IFocusManagerComponent, который получил бы фокус, если бы пользователь нажал клавишу Tab для перемещения к другому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Компонент, который получил бы фокус.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> возвращает объект, как при нажатии клавиш Shift-Tab.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает IFocusManagerComponent, который получил бы фокус, если бы пользователь нажал клавишу Tab для перемещения к другому компоненту. Он возвратит тот же компонент в качестве текущего сфокусированного компонента, если отсутствуют другие допустимые компоненты в приложении.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      Устанавливает для showFocusIndicator значение false и удаляет визуальный индикатор фокуса из сфокусированного объекта при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Устанавливает для <codeph>showFocusIndicator</codeph> значение <codeph>false</codeph> и удаляет визуальный индикатор фокуса из сфокусированного объекта при его наличии.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      Устанавливает фокус на компоненте IFocusManagerComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Компонент, который может получить фокус.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает фокус на компоненте IFocusManagerComponent. Не проверяет видимость компонентов, включенное состояние или любые другие условия.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      Устанавливает для showFocusIndicator значение true и выводит визуальный индикатор фокуса на сфокусированном объекте при его наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Устанавливает для <codeph>showFocusIndicator</codeph> значение <codeph>true</codeph> и выводит визуальный индикатор фокуса на сфокусированном объекте при его наличии.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      Флаг, указывающий, должен ли FocusManager проверить, была ли нажата клавиша Enter для активации кнопки по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий, должен ли FocusManager проверить, была ли нажата клавиша Enter для активации кнопки по умолчанию. TextArea и другие компоненты, для которых требуется распознать нажатие клавиши <codeph>Enter</codeph>, устанавливают для этого свойства значение <codeph>false</codeph> для отключения передачи события <codeph>click</codeph> клавишей Enter по кнопке по умолчанию, если она существует.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Ссылка на исходный элемент управления Button по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на исходный элемент управления Button по умолчанию. Нажатие клавиши Enter при нахождении фокуса на любом элементе управления активирует элемент управления Button путем передачи события <codeph>click</codeph> на элемент управления Button, как если бы по нему щелкнули мышью. Фактический элемент управления Button по умолчанию изменяется при передаче фокуса другому элементу управления Button, но переключается обратно на оригинал, если фокус не находится на кнопке.
     
      <p>Этим свойством управляют контейнеры Flex; не следует устанавливать его непосредственно для указания кнопки по умолчанию.</p>
     
      <p><codeph>defaultButton</codeph> должен иметь класс <codeph>mx.controls.Button</codeph> даже в том случае, если это свойство имеет тип <codeph>IUIComponent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Одиночный спрайт, перемещаемый из контейнера в контейнер при перемещении фокуса в эти контейнеры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Одиночный спрайт, перемещаемый из контейнера в контейнер при перемещении фокуса в эти контейнеры. Спрайт используется в качестве вышестоящего элемента визуального индикатора того, что компонент имеет фокус.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      Следующий уникальный индекс табуляции для использования в этом цикле табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Следующий уникальный индекс табуляции для использования в этом цикле табуляции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      Флаг, указывающий, отображать ли индикатор того, что компонент имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий, отображать ли индикатор того, что компонент имеет фокус. При значении <codeph>true</codeph> получающий фокус компонент выводит визуальный индикатор о том, что он имеет фокус.
     
      <p>По умолчанию это значение <codeph>false</codeph> до тех пор, пока пользователь не использует клавишу Tab, затем устанавливается значение <codeph>true</codeph>.</p>
     
      <p>Для изменения этого свойства предпочтительнее использовать методы <codeph>showFocus()</codeph> и <codeph>hideFocus()</codeph>, поскольку эти методы также обновляют визуальный индикатор о том, что компонент имеет фокус.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerGroup"><apiName>IFocusManagerGroup</apiName><shortdesc>
  Интерфейс IFocusManagerGroup определяет интерфейс любых компонентов, сгруппированных в наборы, в которых одновременно может быть выбран только один элемент набора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFocusManagerGroup определяет интерфейс любых компонентов, сгруппированных в наборы, в которых одновременно может быть выбран только один элемент набора. Например, объект RadioButton реализует интерфейс IFocusManagerGroup, так как в наборе RadioButton одновременно можно выбрать только один объект RadioButton и FocusManager запретит фокусировку на других, не выбранных посредством клавиши Tab объектах RadioButton.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:groupName:get"><apiName>groupName</apiName><shortdesc>
	 Имя группы элементов управления, к которой принадлежит данный элемент управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	 Имя группы элементов управления, к которой принадлежит данный элемент управления.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:selected:get"><apiName>selected</apiName><shortdesc>
	 Флаг, указывающий на то, выбран ли данный элемент управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 Флаг, указывающий на то, выбран ли данный элемент управления.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:SystemManager"><apiName>SystemManager</apiName><shortdesc>
  Класс SystemManager управляет окном приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>mx.managers:ISystemManager</apiBaseInterface><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SystemManager управляет окном приложения. Каждое выполняемое настольное приложение имеет область, в которой отображаются визуальные эффекты этого приложения. Это может быть либо окно в операционной системе, либо область браузера. Эта область является окном приложения и отличается от экземпляра <codeph>mx.core.Application</codeph>, который является главным окном или окном верхнего уровня в приложении.
   <p>У каждого приложения есть класс SystemManager. SystemManager передает событие при изменении размера окна приложения (он может быть изменен только через действия с окном операционной системы или браузера и не может быть изменен вне приложения). Подчиняет все отображаемые объекты внутри приложения, такие как главный экземпляр mx.core.Application, всплывающие меню, всплывающие подсказки, курсоры и прочее. Любой объект, подчиненный SystemManager, рассматривается как окно верхнего уровня, даже всплывающие подсказки и курсоры.</p>
   <p>SystemManager также осуществляет переключение фокуса между окнами верхнего уровня, если есть несколько отображаемых IFocusManagerContainer и осуществляются действия пользователя над компонентами.  </p>
   <p>Все действия клавиатуры и мыши, не обрабатываемые явно, отслеживаются ISystemManager, что в случае необходимости превращает его в удобное средство контроля.</p>
   <p>Если приложение загружено в другое приложение, то SystemManager по-прежнему будет создан, но не будет управлять окном приложения, зависящим от правил домена и безопасности. Вместо этого он будет представлять собой <codeph>content</codeph> загрузившего его <codeph>Loader</codeph> и служить просто вышестоящим элементом субприложения.</p>
   <p>SystemManager поддерживает множество списков нижестоящих элементов, по одному для всплывающих подсказок, курсоров и всплывающих окон. Таким образом, он обеспечивает отображение всплывающих окон поверх окон главного приложения, выше – отображение всплывающих подсказок, и еще выше – отображение курсоров. При проверке свойства <codeph>numChildren</codeph> или применении метода <codeph>getChildAt()</codeph> к SystemManager открывается доступ к главному окну приложения и любым другим, не отображенным окнам. Для получения списка всех окон, включая всплывающие меню, всплывающие подсказки и курсоры, используется свойство <codeph>rawChildren</codeph>.</p>
   <p>SystemManager является первым создаваемым классом отображения внутри приложения. Он ответственен за создание <codeph>mx.preloaders.Preloader</codeph>, отображающего <codeph>mx.preloaders.SparkDownloadProgressBar</codeph>, в то время как приложение завершает загрузку, а затем создает экземпляр <codeph>mx.core.Application</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.managers:SystemManager_flash.events.Event.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Передается при изменении рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.RESIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении рабочей области.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.IDLE_idle"><apiName>idle</apiName><shortdesc>
  Передается каждые 100 миллисекунд при отсутствии действий клавиатуры или мыши в течение секунды.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.IDLE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается каждые 100 миллисекунд при отсутствии действий клавиатуры или мыши в течение секунды.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Передается при завершении инициализации
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при завершении инициализации
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.managers:SystemManager:SystemManager"><apiName>SystemManager</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
           <p>Является начальной точкой для всех приложений Flex. Этот класс установлен как корневой для файлов Flex SWF. В Flash Player реализован экземпляр этого класса, вызывающий конструктор.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:SystemManager:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      
      Добавляет RSL в список preloadedRSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>loaderInfo для загруженного RSL.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>Информация о конфигурации RSL. Вектор RSLData. Первый элемент массива является первичным RSL. Остальные элементы - это резервные RSL.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Добавляет RSL в список preloadedRSL. Этот метод вызывается нижестоящими фабриками модулей, когда они добавляют загрузку RSL в домен приложения этой фабрики модуля.
           <p>Этот метод не вызывается напрямую. Этот метод вызывается нижестоящими фабриками модулей, когда они добавляют загрузку RSL в домен приложения этой фабрики модуля.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Вызовы Security.allowDomain() для SWF, связанные с SystemManager, плюс все SWF, связанные с RSL, предварительно загружены с помощью SystemManager.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Вызовы Security.allowDomain() для SWF, связанные с SystemManager, плюс все SWF, связанные с RSL, предварительно загружены с помощью SystemManager.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Вызовы Security.allowInsecureDomain() для SWF, связанные с SystemManager, плюс все SWF, связанные с RSL, предварительно загружены с помощью SystemManager.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Вызовы Security.allowInsecureDomain() для SWF, связанные с SystemManager, плюс все SWF, связанные с RSL, предварительно загружены с помощью SystemManager.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:create"><apiName>create</apiName><shortdesc>
      Метод фабрики, запрашивающий экземпляр определения, известный модулю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Экземпляр модуля или <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>params</apiItemName><apiType value="restParam"/><apiDesc>Дополнительный список параметров. Можно передавать любое количество параметров, которые затем хранятся в массиве<codeph>parameters</codeph>. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Метод фабрики, запрашивающий экземпляр определения, известный модулю. Для формирования методов фабрики на основе вводимых данных требуется предоставить набор дополнительных параметров. По возможности необходимо пропускать нулевые значения, созданные по умолчанию. Этот метод отменен для автоматически создаваемого подкласса.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      
      Разверните или удалите блокировки ввода с помощью мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> – для развертывания блокировок ввода с помощью мыши, <codeph>false</codeph> – для удаления блокировок ввода с помощью мыши.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Разверните или удалите блокировки ввода с помощью мыши. Эта блокировка блокирует ввод с помощью мыши в ненадежных приложениях. Причина возможной блокировки ввода с помощью мыши пользователем состоит в том, что при перемещении по ненадежному приложению он обычно не получает событий перемещения мыши. Flash Player не отправляет события через границы надежности/ненадежности в интересах безопасности. Путем прикрытия ненадежного приложения блокировкой ввода с помощью мыши (если пользователь является вышестоящим элементом) можно получить сообщение о перемещении мыши, и тогда операция перетаскивания будет выполнена как ожидается. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
      
	  Преобразовывает данную строку в класс или функцию уровня пакета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Класс, представленный <codeph>name</codeph>, или значением null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Имя класса, например mx.video.VideoManager.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Преобразовывает данную строку в класс или функцию уровня пакета. Вызывает соответствующий метод <codeph>ApplicationDomain.getDefinition()</codeph>, в зависимости от того, загружен пользователь в другое приложение или нет.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Стандартный метод, позволяющий определить, использовать ли явную или измеренную высоту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Число, являющееся значением свойства <codeph>explicitHeight</codeph>, если это свойство задано, или свойства <codeph>measuredHeight</codeph> в противном случае.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Стандартный метод, позволяющий определить, использовать ли явную или измеренную высоту.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Стандартный метод, позволяющий определить, использовать ли явную или измеренную ширину.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Число, являющееся значением свойства <codeph>explicitWidth</codeph>, если это свойство задано, или свойства <codeph>measuredWidth</codeph> в противном случае.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Стандартный метод, позволяющий определить, использовать ли явную или измеренную ширину.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSWFRoot"><apiName>getSWFRoot</apiName><shortdesc>
      Возвращает SWF корневой объект DisplayObject, который содержит код для данного объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Корневой объект DisplayObject
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="Object"/><apiDesc>Любой объект. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает SWF корневой объект DisplayObject, который содержит код для данного объекта.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Для получения доступа к диспетчеру системы верхнего уровня в данном SecurityDomain поднимитесь к вышестоящей цепочке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Корневой диспетчер системы в данном SecurityDomain.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Для получения доступа к диспетчеру системы верхнего уровня в данном SecurityDomain поднимитесь к вышестоящей цепочке.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Для получения доступа к диспетчеру системы верхнего уровня поднимитесь к вышестоящей цепочке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Корневой диспетчер системы.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Для получения доступа к диспетчеру системы верхнего уровня поднимитесь к вышестоящей цепочке. Возвращает <codeph>null</codeph>, если не содержится в списке отображения или при отсутствии доступа к диспетчеру системы верхнего уровня.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
     
      Получает пределы загруженного приложения, видимые пользователем на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект <codeph>Rectangle</codeph>, включающий видимую часть этого объекта. Прямоугольник находится в глобальных координатах.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Дополнительно. Начальные пределы для видимого прямоугольника. Пределы находятся в глобальных координатах. Если <codeph>bounds</codeph> имеют значение null, то начальные пределы определяются свойством <codeph>screen</codeph> диспетчера системы. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
     
      Получает пределы загруженного приложения, видимые пользователем на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Предпринимает попытку уведомления вышестоящего SWFLoader об изменении размера приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Предпринимает попытку уведомления вышестоящего SWFLoader об изменении размера приложения.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      
      Возвращает true, если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода Font.registerFont().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода <codeph>Font.registerFont()</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>textFormat</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Класс TextFormat, представляющий информацию о форматировании символов.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает <codeph>true</codeph>, если требуемый вид шрифта встроен в это приложение или был зарегистрирован глобально с использованием метода <codeph>Font.registerFont()</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
     
      Проверяет, является ли этот диспетчер системы корневым для всех диспетчеров системы верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если данный SystemManager является корневым для всех SystemManager из списка отображения, в противном случае – <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Проверяет, является ли этот диспетчер системы корневым для всех диспетчеров системы верхнего уровня.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelWindow"><apiName>isTopLevelWindow</apiName><shortdesc>
          Определяет, является ли данный объект DisplayObject окном верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если данный DisplayObject является окном верхнего уровня.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Тестируемый DisplayObject.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
          Определяет, является ли данный объект DisplayObject окном верхнего уровня.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
      
	  Возвращает true, если этот ISystemManager отвечает за окно приложения, и false, если это приложение было загружено в другом приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если этот ISystemManager отвечает за окно приложения.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
	  Возвращает <codeph>true</codeph>, если этот ISystemManager отвечает за окно приложения, и <codeph>false</codeph>, если это приложение было загружено в другом приложении.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:move"><apiName>move</apiName><shortdesc>
      Вызов метода move() не оказывает эффекта, поскольку он непосредственно относится к окну приложения или загрузчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая координата x.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая координата y.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызов метода <codeph>move()</codeph> не оказывает эффекта, поскольку он непосредственно относится к окну приложения или загрузчика.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      Вызов метода setActualSize() не оказывает влияние, если он непосредственно относится к окну приложения и если это окно верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина.
           </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызов метода <codeph>setActualSize()</codeph> не оказывает влияние, если он непосредственно относится к окну приложения и если это окно верхнего уровня. В противном случае попытается изменить собственные размеры, отсекая при необходимости нижестоящие элементы.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:SystemManager:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      
      Определяет, будут ли домены, предоставленные при вызовах allowDomain(), использоваться при RSL, загруженных после вызова.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Определяет, будут ли домены, предоставленные при вызовах <codeph>allowDomain()</codeph>, использоваться при RSL, загруженных после вызова. Подчиненные приложения или модули могут загружать дополнительные RSL в эту фабрику модуля.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      
      Определяет, будут ли домены, предоставленные при вызовах allowInsecureDomain(), использоваться при RSL, загруженных после вызова.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Определяет, будут ли домены, предоставленные при вызовах <codeph>allowInsecureDomain(),</codeph> использоваться при RSL, загруженных после вызова. Подчиненные приложения или модули могут добавлять дополнительные RSL в эту фабрику модуля.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:application:get"><apiName>application</apiName><shortdesc>
      Приложение, подчиненное данному классу SystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Приложение, подчиненное данному классу SystemManager. Экземпляр приложения создается даже при загрузке SystemManager в другое приложение. При загрузке SWF в другое приложение экземпляр приложения может не соответствовать mx.core.Application.application.
      <p>Следует отметить, что это свойство не вводится как mx.core.Application из соображений увеличения производительности во время загрузки, но может быть преобразовано в mx.core.Application.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.managers:SystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
      
	  Список пользовательских курсоров, являющихся нижестоящими по отношению к данному ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Список пользовательских курсоров, являющихся нижестоящими по отношению к данному ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, окна, находящиеся в самой верхней позиции, всплывающие подсказки и пользовательские курсоры. Доступ к пользовательским курсорам можно получить через свойство <codeph>cursorChildren</codeph>.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>cursorChildren.numChildren</codeph> определяет количество пользовательских курсоров (0 или 1), и если пользовательский курсор существует, то доступ к нему можно получить как к <codeph>cursorChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:document:get"><apiName>document</apiName><shortdesc>
      
	  Ссылка на объект документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
	  Ссылка на объект документа. Объект документа представляет собой Object на самом верху иерархии приложения Flex, компонента MXML или компонента AS.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:embeddedFontList:get"><apiName>embeddedFontList</apiName><shortdesc>
      Таблица встроенных шрифтов для этого приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Таблица встроенных шрифтов для этого приложения. Объект представляет собой таблицу, индексированную по названиям шрифтов.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Явная ширина данного объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Явная ширина данного объекта. Для SystemManager это значение всегда должно быть NaN, если приложение не было загружено в другое приложение. Если приложение не было загружено в другое приложение, то установка этого значения не имеет эффекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Явная ширина данного объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Явная ширина данного объекта. Для SystemManager это значение всегда должно быть NaN, если приложение не было загружено в другое приложение. Если приложение не было загружено в другое приложение, то установка этого значения не имеет эффекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc conref="mx.core.UIComponent#focusPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="mx.core.UIComponent#focusPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:height:get"><apiName>height</apiName><shortdesc>
      Высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Высота этого объекта. Для SystemManager она всегда должна быть равна ширине рабочей области, если данное приложение не было загружено в другое приложение. Если приложение не было загружено в другое приложение, то установка этого значения не имеет эффекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
      True, если SystemManager является прокси, а не корневым классом
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True, если SystemManager является прокси, а не корневым классом
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      Если главное окно не создано или не существует, то measuredHeight задается явно или используется measuredHeight главного окна mx.core.Application или начальная высота SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Если главное окно не создано или не существует, то measuredHeight задается явно или используется measuredHeight главного окна mx.core.Application или начальная высота SWF.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      Если главное окно не создано или не существует, то measuredWidth задается явно или используется measuredWidth главного окна mx.core.Application или начальная ширина SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Если главное окно не создано или не существует, то measuredWidth задается явно или используется measuredWidth главного окна mx.core.Application или начальная ширина SWF.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Число нединамических окон.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Число нединамических окон. Таким окном является окно главного приложения и любые другие окна, добавляемые к SystemManager, не являющиеся всплывающими меню, всплывающими подсказками или курсорами.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Число модальных окон.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Число модальных окон. Модальные окна не позволяют производить щелчки мышью в других окнах, которые в обычном случае приводят к активации в этих окнах FocusManager. PopUpManager изменяет это количество, поскольку он создает и разрушает модальные окна.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parent:get"><apiName>parent</apiName><shortdesc>
     Отмените вышестоящее свойство для обработки тех случаев, где вышестоящий элемент находится в другой изолированной среде.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
     Отмените вышестоящее свойство для обработки тех случаев, где вышестоящий элемент находится в другой изолированной среде. Возвращается значение, если вышестоящий элемент находится в той же самой изолированной среде. Возвращается null, если вышестоящий элемент находится в другой изолированной среде.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
      
	  Список самых верхних (всплывающих) окон, нижестоящих по отношению к этому ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Список самых верхних (всплывающих) окон, нижестоящих по отношению к этому ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, всплывающие подсказки и пользовательские курсоры. Доступ к самым верхним окнам можно получить через свойство <codeph>popUpChildren</codeph>.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>popUpChildren.numChildren</codeph> определяет число самых верхних окон, и получить доступ к ним можно как к <codeph>popUpChildren.getChildAt(i)</codeph>.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      
      RSL, загружаемые с помощью SystemManager или FlexModuleFactory до запуска приложения.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      
      RSL, загружаемые с помощью SystemManager или FlexModuleFactory до запуска приложения. Словарь может также включать RSL, загруженные в домен приложения этой фабрики модуля другими модулями или подчиненными приложениями. При добавлении новой словарной записи нижестоящей фабрикой модуля событие <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> отправляется фабрикой модуля, которой принадлежит словарь. Информация о preloadedRSLs хранится в словаре. Клавиша – RSL LoaderInfo. Это значение - вектор RSLData, первый элемент которого является основным RSL и остальные элементы - резервными RSL.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundAlpha:get"><apiName>preloaderBackgroundAlpha</apiName><shortdesc>
      Альфа-канал фона, используемый нижестоящим элементом предварительного загрузчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Альфа-канал фона, используемый нижестоящим элементом предварительного загрузчика.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundColor:get"><apiName>preloaderBackgroundColor</apiName><shortdesc>
      Цвет фона, используемый нижестоящим элементом предварительного загрузчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Цвет фона, используемый нижестоящим элементом предварительного загрузчика.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundImage:get"><apiName>preloaderBackgroundImage</apiName><shortdesc>
      Цвет фона, используемый нижестоящим элементом предварительного загрузчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Цвет фона, используемый нижестоящим элементом предварительного загрузчика.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundSize:get"><apiName>preloaderBackgroundSize</apiName><shortdesc>
      Размер фона, используемый нижестоящим элементом предварительного загрузчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Размер фона, используемый нижестоящим элементом предварительного загрузчика.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      
	  Список всех нижестоящих по отношению к этому ISystemManager элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Список всех нижестоящих по отношению к этому ISystemManager элементов.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, всплывающие подсказки и пользовательские курсоры.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:screen:get"><apiName>screen</apiName><shortdesc>
      
	  Размер и расположение окна приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
	  Размер и расположение окна приложения. Объект Rectangle содержит свойства <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph>. Rectangle находится в начале изолированной системы координат.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
      
	  Список всплывающих подсказок, являющихся нижестоящими по отношению к данному ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Список всплывающих подсказок, являющихся нижестоящими по отношению к данному ISystemManager.
	 
	  <p>ISystemManager имеет различные типы нижестоящих элементов, например приложение, всплывающие меню, самые верхние окна, всплывающие подсказки и пользовательские курсоры.</p>
	 
	  <p>Объект IChildList имеет такие методы, как <codeph>getChildAt()</codeph> и такие свойства, как <codeph>numChildren</codeph>. Например, <codeph>toolTipChildren.numChildren</codeph> определяет число всплывающих подсказок (0 или 1), и если всплывающая подсказка существует, доступ к ней можно получить как к <codeph>toolTipChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
      Возвращает SystemManager, отвечающий за окно приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает SystemManager, отвечающий за окно приложения. Это будет тот же SystemManager, если данное приложение не было загружено в другое приложение.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:width:get"><apiName>width</apiName><shortdesc>
      Ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Ширина этого объекта. Для SystemManager она всегда должна быть равна ширине рабочей области, если данное приложение не было загружено в другое приложение. Если приложение не было загружено в другое приложение, то установка этого значения не будет иметь эффекта.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:LayoutManager"><apiName>LayoutManager</apiName><shortdesc>
  LayoutManager является механизмом, стоящим за стратегией измерений и макетов Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  LayoutManager является механизмом, стоящим за стратегией измерений и макетов Flex. Макет выполняется в три фазы: передача, измерение и макет.
 
  <p>Каждая фаза отличается от остальных, и все UIComponents одной фазы обрабатываются до перехода к следующей фазе. В течение обработки UIComponents в фазе могут возникнуть запросы на повторную обработку UIComponents некоторой фазой. Эти запросы помещаются в очередь и обрабатываются только в течение следующего выполнения фазы.</p>
 
  <p>Фаза <b>commit</b> начинается с вызова <codeph>validateProperties()</codeph>, просматривающего список объектов (отсортированных в обратном порядке по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateProperties()"> метод <codeph>validateProperties()</codeph></xref>.</p>
 
  <p>Объекты в списке обрабатываются в обратном порядке вложенности, начиная с <b>least</b> глубоко вложенного объекта. Также это можно обозначить как нисходящий порядок или порядок движения извне.</p>
 
  <p>Эта фаза позволяет компонентам, содержимое которых зависит от параметров настройки свойств, быть сконфигурированными до фаз измерения и макета. Иногда ради повышения производительности метод установщика свойства компонента не выполняет всю работу по обновлению до нового значения свойства. Вместо этого установщик свойства вызывает метод <codeph>invalidateProperties()</codeph>, что приостанавливает работу до выполнения этой фазы. Это предотвращает выполнение лишней работы при многократной установке свойства.</p>
 
  <p>Фаза <b>measurement</b> начинается с вызова <codeph>validateSize()</codeph>, просматривающего список объектов (отсортированных по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph> каждого из объектов для определения, изменился ли размер объекта.</xref></p>
 
  <p>Если метод <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> объекта был вызван ранее, то затем вызывается метод <codeph>validateSize()</codeph>. Если размер или позиция объекта были изменены в результате вызова <codeph>validateSize()</codeph>, то вызывается метод <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> объекта, добавляя, таким образом, объект к очереди обработки для следующего выполнения фазы макета. Кроме того, вышестоящий элемент объекта отмечается для фаз измерения и макета путем вызова <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> и <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> соответственно.</p>
 
  <p>Объекты в списке обрабатываются в порядке вложенности, начиная с <b>most</b> глубоко вложенного объекта. Также это можно обозначить как восходящий порядок или порядок движения изнутри.</p>
 
  <p>Фаза <b>layout</b> начинается с вызова метода <codeph>validateDisplayList()</codeph>, просматривающего список объектов (отсортированных в обратном порядке по уровню вложенности) путем вызова метода <xref href="../core/UIComponent.html#validateDisplayList()"> <codeph>validateDisplayList()</codeph></xref> каждого из объектов для запроса объекта измерить размер и установить позицию всех компонентов, содержащихся в нем (т. е. нижестоящих элементов).</p>
 
  <p>Если метод <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> объекта был вызван ранее, то затем для объекта вызывается метод <codeph>validateDisplayList()</codeph>.</p>
 
  <p>Объекты в списке обрабатываются в обратном порядке вложенности, начиная с <b>least</b> глубоко вложенного объекта. Также это можно обозначить как нисходящий порядок или порядок движения извне.</p>
 
  <p>Как правило, компоненты не перезаписывают методы <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph>. В случае UIComponents большинство компонентов перезаписывают методы <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> или <codeph>updateDisplayList()</codeph>, которые вызываются методами <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph> соответственно.</p>
 
  <p>При запуске приложения одиночный экземпляр LayoutManager создается и сохраняется в свойстве <codeph>UIComponent.layoutManager</codeph>. Ожидается, что все компоненты будут использовать этот экземпляр. При отсутствии доступа к объекту UIComponent доступ к LayoutManager можно получить также с помощью статического метода <codeph>LayoutManager.getInstance()</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:LayoutManager:attachListeners"><apiName>attachListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Возвращает единственный экземпляр одного класса путем его создания, если он еще не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Возвращает единственный экземпляр одного класса путем его создания, если он еще не существует.
          
          </apiDesc><apiOperationClassifier>mx.managers:LayoutManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Возвращает единственный экземпляр одного класса путем его создания, если он еще не существует.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Вызывается при каком-либо изменении компонента, требующем изменения его макета и/или визуальных эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Измененный объект.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при каком-либо изменении компонента, требующем изменения его макета и/или визуальных эффектов. В этом случае необходимо выполнить алгоритм макета компонента, даже если размер компонента не изменился. Например, при добавлении нового нижестоящего компонента, изменении свойства стиля или присвоении компоненту нового размера его вышестоящим элементом.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод validateProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Объект, свойство которого изменилось.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод <codeph>validateProperties()</codeph>. Компонент должен вызывать этот метод при изменении свойства. Как правило, метод установщика свойства хранит новое значение во временной переменной и вызывает метод <codeph>invalidateProperties()</codeph> таким образом, чтобы методы <codeph>validateProperties()</codeph> и <codeph>commitProperties()</codeph> были вызваны позднее, когда новое значение будет фактически применено к компоненту и/или его нижестоящим элементам. Преимущество этой стратегии состоит в том, что зачастую одновременно изменяются несколько свойств, и эти свойства могут взаимодействовать друг с другом, иметь повторяющийся код при применении или должны быть применены в определенном порядке. Эта стратегия представляет наиболее эффективный метод применения новых значений свойств.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод validateSize().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Объект, размер которого изменился.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет объект к списку компонентов, для которых требуется вызвать соответствующий метод <codeph>validateSize()</codeph>. Вызывается при изменении размера объекта.
     
      <p>Размер объекта может измениться по двум причинам.</p>
     
      <ol>
        <li>Изменение содержимого объекта. Например, размер кнопки изменяется при изменении ее <codeph>label</codeph>.</li>
        <li>Сценарий изменяет явно одно из следующих свойств: <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> или <codeph>maxHeight</codeph>.</li>
      </ol>
     
      <p>При возникновении первого условия необходимо повторно вычислить измерения для объекта. При возникновении второго условия отсутствует необходимость в повторном вычислении измерений, т.к. новый размер объекта известен. Однако необходимо повторно измерить и повторно создать макет для вышестоящего по отношению к объекту элемента.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
      Возвращает значение true при наличии компонентов, требующих проверки; значение false, если все компоненты были проверены.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph> при наличии компонентов, требующих проверки; значение <codeph>false</codeph>, если все компоненты были проверены.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает значение <codeph>true</codeph> при наличии компонентов, требующих проверки; значение <codeph>false</codeph>, если все компоненты были проверены.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
      При изменении свойств компоненты, как правило, не применяют эти изменения немедленно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Передаваемый компонент используется для выявления тех компонентов, которые должны быть проверены. Будут вызваны методы <codeph>validateProperties()</codeph>, <codeph>commitProperties()</codeph>, <codeph>validateSize()</codeph>, <codeph>measure()</codeph>, <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> всех содержащихся в этом компоненте компонентов.
     
        </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>true</codeph> методы <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> не вызываются.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      При изменении свойств компоненты, как правило, не применяют эти изменения немедленно. Вместо этого компоненты обычно вызывают один из методов invalidate LayoutManager и применяют свойства позднее. Фактическое свойство, которое было установлено, может быть считано немедленно, но если свойство воздействует на другие свойства в компоненте, его нижестоящих или вышестоящих элементах, то эти свойства могут не быть обновлены немедленно.  
     
      <p>Для проверки обновления значений можно вызвать метод <codeph>validateClient()</codeph>. Он обновляет все свойства во всех компонентах, уровни вложенности которых больше или равны уровню целевого компонента, перед возвратом управления. Этот метод следует вызывать только при необходимости, т.к. его вызов приводит к большим объемам вычислений.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
      При изменении свойств компоненты, как правило, не применяют эти изменения немедленно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      При изменении свойств компоненты, как правило, не применяют эти изменения немедленно. Вместо этого компоненты обычно вызывают один из методов invalidate LayoutManager и применяют свойства позднее. Фактическое свойство, которое было установлено, может быть считано немедленно, но если свойство воздействует на другие свойства в компоненте, его нижестоящих или вышестоящих элементах, то эти свойства могут не быть обновлены немедленно. Для проверки обновления значения, можно вызвать метод <codeph>validateNow()</codeph>. Он обновляет все свойства во всех компонентах перед возвратом. Этот метод следует вызывать только при необходимости, т.к. его вызов приводит к большим объемам вычислений.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:LayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
      Флаг, указывающий, позволяет ли LayoutManager обновлять экран между фазами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий, позволяет ли LayoutManager обновлять экран между фазами. При значении <codeph>true</codeph>, измерение и макет были выполнены в фазах, одна фаза на обновление экрана. Методы <codeph>validateProperties()</codeph> и <codeph>commitProperties()</codeph> вызываются для всех компонентов, пока все их свойства не будут проверены. Затем будет обновлен экран.  
     
      <p>Затем будут вызываться методы <codeph>validateSize()</codeph> и <codeph>measure()</codeph> для всех компонентов, пока все компоненты не будут измерены, а затем экран будет снова обновлен.  </p>
     
      <p>Наконец, будут вызываться методы <codeph>validateDisplayList()</codeph> и <codeph>updateDisplayList()</codeph> всех компонентов, пока все компоненты не будут проверены, а затем экран будет снова обновлен. Если при проверке одной фазы будет аннулирована более ранняя фаза, то LayoutManager начнет сначала. Этот процесс становится более эффективным при большом количестве созданных и инициализированных компонентов. Инфраструктура ответственна за установку этого свойства.</p>
     
      <p>При значении <codeph>false</codeph> все три фазы выполняются до обновления экрана.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IMarshalSystemManager"><apiName>IMarshalSystemManager</apiName><shortdesc>
  Интерфейс IMarshalSystemManager определяет методы и свойства, которые классы должны реализовать для получения доступа, добавления и удаления соединений с другими приложениями в конфигурации для различных версий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IMarshalSystemManager определяет методы и свойства, которые классы должны реализовать для получения доступа, добавления и удаления соединений с другими приложениями в конфигурации для различных версий.
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildBridge"><apiName>addChildBridge</apiName><shortdesc> 
      Добавляет нижестоящее соединение к диспетчеру системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Соединение для нижестоящего элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>SWFLoader для нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Добавляет нижестоящее соединение к диспетчеру системы. Каждое нижестоящее соединение представляет собой компоненты в другой изолированной среде или скомпилированные посредством другой версии Flex.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildToSandboxRoot"><apiName>addChildToSandboxRoot</apiName><shortdesc> 
      Добавляет указанный нижестоящий элемент к корню изолированной среды на запрашиваемом уровне.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Имя IChildList в SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Добавляемый DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Добавляет указанный нижестоящий элемент к корню изолированной среды на запрашиваемом уровне.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:dispatchEventFromSWFBridges"><apiName>dispatchEventFromSWFBridges</apiName><shortdesc>
      Передайте сообщение всем вышестоящим и нижестоящим приложениям в группе соединений SWF этого SystemManager, независимо от того, находятся ли они в одном SecurityDomain или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Передаваемое событие.
          
          </apiDesc></apiParam><apiParam><apiItemName>skip</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>Указывает IEventDispatcher, которому не следует отправлять сообщение. Он обычно используется для пропуска IEventDispatcher, инициировавшего событие.
     
          </apiDesc></apiParam><apiParam><apiItemName>trackClones</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Хранить ли ссылку на события по мере их передачи.
          
          </apiDesc></apiParam><apiParam><apiItemName>toOtherSystemManagers</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Передавать ли событие другим SystemManager верхнего уровня в AIR.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Передайте сообщение всем вышестоящим и нижестоящим приложениям в группе соединений SWF этого SystemManager, независимо от того, находятся ли они в одном SecurityDomain или нет. Можно по выбору исключить приложение с параметрами этого метода.
     
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:isDisplayObjectInABridgedApplication"><apiName>isDisplayObjectInABridgedApplication</apiName><shortdesc>
      Проверяет, не находится ли экранный объект в нижестоящем приложении, загруженном в режиме совместимости или в ненадежной изолированной среде.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если <codeph>displayObject</codeph> находится в нижестоящем приложении, загруженном в режиме совместимости или в ненадежной изолированной среде, в противном случае – <codeph>false</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Тестируемый DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Проверяет, не находится ли экранный объект в нижестоящем приложении, загруженном в режиме совместимости или в ненадежной изолированной среде.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc> 
      Добавляет нижестоящее соединение к диспетчеру системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Соединение для нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Добавляет нижестоящее соединение к диспетчеру системы. Каждое нижестоящее соединение представляет собой компоненты в другой изолированной среде или скомпилированные посредством другой версии Flex.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildFromSandboxRoot"><apiName>removeChildFromSandboxRoot</apiName><shortdesc> 
      Удаляет указанный нижестоящий элемент из корня изолированной среды на запрашиваемом уровне.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Имя IChildList в SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Добавляемый DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Удаляет указанный нижестоящий элемент из корня изолированной среды на запрашиваемом уровне.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:useSWFBridge"><apiName>useSWFBridge</apiName><shortdesc>
      Определяет, должен ли вызывающий модуль, использующий этот диспетчер системы, взаимодействовать непосредственно с другими диспетчерами или он должен взаимодействовать с соединением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если вызывающий модуль, использующий этот диспетчер системы, должен взаимодействовать с помощью соединений изолированной среды. Если <codeph>false</codeph>, то диспетчер системы может вызывать другие диспетчеры непосредственно через ссылки.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Определяет, должен ли вызывающий модуль, использующий этот диспетчер системы, взаимодействовать непосредственно с другими диспетчерами или он должен взаимодействовать с соединением.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:swfBridgeGroup:get"><apiName>swfBridgeGroup</apiName><shortdesc>
      Содержит все соединения с другими приложениями, к которым подключено данное приложение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:ISWFBridgeGroup</apiValueClassifier></apiValueDef><apiDesc>
      Содержит все соединения с другими приложениями, к которым подключено данное приложение.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManagerClient"><apiName>ILayoutManagerClient</apiName><shortdesc>
  Интерфейс ILayoutManagerClient определяет интерфейс, который какой-либо компонент должен реализовать для участия в последовательности LayoutManager передача/измерение/макет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс ILayoutManagerClient определяет интерфейс, который какой-либо компонент должен реализовать для участия в последовательности LayoutManager передача/измерение/макет.  
 
  <p>Объекты, реализующие этот интерфейс, могут передаваться методу LayoutManager <codeph>invalidateProperties()</codeph>. При достижении LayoutManager фазы передачи свойств он вызывает метод <codeph>validateProperties()</codeph> для этих объектов.</p>
 
  <p>Подобным образом, если объект передается методу LayoutManager <codeph>invalidateSize()</codeph>, то в течение фазы измерений LayoutManager вызывает для этого объекта метод <codeph>validateSize()</codeph>, и если объект передается методу LayoutManager <codeph>invalidateDisplayList()</codeph>, то в течение фазы макета будет вызван метод<codeph>validateDisplayList()</codeph>.</p>
 
  <p>Интерфейс ILayoutManagerClient реализован классами UIComponent и ProgrammaticSkin.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      Проверяет правильность расположения и размера нижестоящих элементов и отображает различные визуальные эффекты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет правильность расположения и размера нижестоящих элементов и отображает различные визуальные эффекты. Если совместно с ILayoutManagerClient вызван метод <codeph>LayoutManager.invalidateDisplayList()</codeph>, то при обновлении списка отображения будет вызван метод<codeph>validateDisplayList()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Проверяет правильность свойств компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет правильность свойств компонента. Если с данным IlayoutManagerClient вызван метод <codeph>LayoutManager.invalidateProperties()</codeph>, то при отправке значений свойств будет вызван метод<codeph>validateProperties()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateSize"><apiName>validateSize</apiName><shortdesc>
      Проверяет правильность измеренного размера компонента. Если совместно с данным IlayoutManagerClient вызван метод LayoutManager.invalidateSize(), то при измерении будет вызван метод validateSize().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение <codeph>true</codeph>, то необходимо вызвать этот метод для нижестоящих элементов объекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Проверяет правильность измеренного размера компонента. Если совместно с данным IlayoutManagerClient вызван метод <codeph>LayoutManager.invalidateSize()</codeph>, то при измерении будет вызван метод <codeph>validateSize()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:initialized:get"><apiName>initialized</apiName><shortdesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались). Этот флаг может быть изменен только с помощью LayoutManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались). Этот флаг может быть изменен только с помощью LayoutManager.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      Значение nestLevel для SystemManager верхнего уровня равно 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Значение nestLevel для SystemManager верхнего уровня равно 1. Его непосредственные нижестоящие элементы (приложение верхнего уровня и любые всплывающие окна) имеют значение <codeph>nestLevel</codeph> равное 2. Их нижестоящие элементы имеют значение<codeph>nestLevel</codeph> равное 3 и так далее. <codeph>nestLevel</codeph> используется для сортировки ILayoutManagerClient в течение фаз измерения и макета. В фазе передачи LayoutManager передает свойства клиентам в порядке увеличения значения их <codeph>nestLevel</codeph>, таким образом, нижестоящим элементам объекта переданы их свойства до того, как Flex передаст свойства непосредственно объекту. В фазе измерений LayoutManager измеряет клиентов в порядке уменьшения значения их <codeph>nestLevel</codeph>, таким образом, нижестоящие элементы объекта измерены до того, как Flex измерит непосредственно объект. В фазе макета LayoutManager макетирует клиентов в порядке увеличения значения их <codeph>nestLevel</codeph>, таким образом, нижестоящим элементам объекта устанавливаются размеры до того, как нижестоящие объекты запрошены об изменении положения и размеров их нижестоящих объектов.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Флаг, определяющий, ожидает ли объект передачи события updateComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, ожидает ли объект передачи события <codeph>updateComplete</codeph>. Этот флаг может быть изменен только LayoutManager.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IToolTipManagerClient"><apiName>IToolTipManagerClient</apiName><shortdesc>
  Компоненты, реализующие IToolTipManagerClient, могут иметь всплывающие подсказки и должны иметь toolTip получателя/установщика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Компоненты, реализующие IToolTipManagerClient, могут иметь всплывающие подсказки и должны иметь toolTip получателя/установщика. Класс ToolTipManager управляет видимостью всплывающей подсказки от имени любого компонента, являющегося IToolTipManagerClient.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.core.xml#IToolTip"><linktext>mx.core.IToolTip</linktext></link></related-links><apiValue id="mx.managers:IToolTipManagerClient:mx.managers:IToolTipManagerClient:toolTip:get"><apiName>toolTip</apiName><shortdesc>
	  Текст всплывающей подсказки данного компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Текст всплывающей подсказки данного компонента.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManager"><apiName>CursorManager</apiName><shortdesc>
  Класс CursorManager управляет составленным по приоритетам списком курсоров, в котором курсор с наивысшим приоритетом является видимым в настоящее время.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="busyCursorBackground" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  Класс, используемый в качестве темы оформления фона курсора в состоянии занятости. Значением по умолчанию является символ cursorStretch из файла Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="busyCursor" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  Тема оформления для курсора в состоянии занятости.
 
  </description>
<default>mx.skins.halo.BusyCursor
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CursorManager управляет составленным по приоритетам списком курсоров, в котором курсор с наивысшим приоритетом является видимым в настоящее время. Если список курсоров содержит несколько курсоров с одинаковым приоритетом, то диспетчер курсора выведет на экран курсор, созданный позднее.
  
  <p>Например, если приложение выполняет обработку, в течение которой требуется ожидание пользователем ее завершения, то следует придать курсору вид, отражающий период ожидания. В этом случае, необходимо изменить курсор на изображение песочных часов или какое-либо другое изображение.</p>
  
  <p>Также может потребоваться изменить курсор для предоставления обратной связи с пользователем с целью указать возможные выполняемые действия. Например, можно использовать одно изображение курсора для указания возможности пользовательского ввода и другое для указания его невозможности. В качестве изображения курсора можно использовать рисунки форматов JPEG, GIF, PNG или SVG, объект Sprite или файл SWF.</p>
  
  <p>Все методы и свойства CursorManager являются статическими, таким образом создавать их экземпляр не требуется.</p>
 
  <p>В AIR каждый экземпляр mx.core.Window использует собственный экземпляр класса CursorManager. Вместо непосредственной ссылки на статические методы и свойства класса CursorManager можно использовать свойство <codeph>Window.cursorManager</codeph> для ссылки на экземпляр CursorManager для экземпляра окна. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link><link href="" invalidHref="mx.core.Window.xml"><linktext>mx.core.Window</linktext></link></related-links><apiOperation id="mx.managers:CursorManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Каждый экземпляр mx.core.Window в приложении AIR имеет собственный экземпляр CursorManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Экземпляр CursorManager для экземпляра главного окна в приложении AIR.  
      
      </apiDesc><apiType value="mx.managers:ICursorManager"/></apiReturn></apiOperationDef><apiDesc>
      Каждый экземпляр mx.core.Window в приложении AIR имеет собственный экземпляр CursorManager. Этот метод возвращает экземпляр CursorManager для экземпляра главного окна.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:hideCursor"><apiName>hideCursor</apiName><shortdesc>
      Делает курсор невидимым.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Делает курсор невидимым. Видимость курсора не учитывается при подсчете ссылок. Одиночный вызов метода <codeph>hideCursor()</codeph> всегда скрывает курсор независимо от того, сколько было произведено вызовов метода <codeph>showCursor()</codeph>.
     
      <p>Вызов этого метода не влияет на курсор системы. Для непосредственного контроля курсора системы следует использовать методы <codeph>Mouse.show()</codeph> и <codeph>Mouse.hide()</codeph>. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeAllCursors"><apiName>removeAllCursors</apiName><shortdesc>
      Удаляет все курсоры из списка курсоров и восстанавливает курсор системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет все курсоры из списка курсоров и восстанавливает курсор системы.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeBusyCursor"><apiName>removeBusyCursor</apiName><shortdesc>
      Удаляет курсор в состоянии занятости из списка курсоров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет курсор в состоянии занятости из списка курсоров. Если другие запросы курсоров в состоянии занятости по-прежнему активны в списке курсоров, что означает многократный вызов метода <codeph>setBusyCursor()</codeph>, то курсор в состоянии занятости не исчезнет, пока не будут удалены все курсоры в состоянии занятости из списка.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeCursor"><apiName>removeCursor</apiName><shortdesc>
      Удаляет курсор из списка курсоров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursorID</apiItemName><apiType value="int"/><apiDesc>Идентификатор удаляемого курсора.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет курсор из списка курсоров. Если удаляемый курсор в настоящее время отображен, то CursorManager покажет следующий курсор в списке, если таковой существует. Если список пустой, CursorManager отображает курсор системы по умолчанию.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setBusyCursor"><apiName>setBusyCursor</apiName><shortdesc>
      Отображает курсор в состоянии занятости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отображает курсор в состоянии занятости. Курсор в состоянии занятости имеет значение приоритета CursorManagerPriority.LOW. Поэтому, если список курсоров содержит курсор с более высоким приоритетом, то курсор в состоянии занятости не отображается, пока не будут удалены курсоры с более высоким приоритетом. Для создания курсора в состоянии занятости с более высоким уровнем приоритета следует использовать метод <codeph>setCursor()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setCursor"><apiName>setCursor</apiName><shortdesc>
      Создает новый курсор и устанавливает дополнительный приоритет курсора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Идентификатор курсора.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>cursorClass</apiItemName><apiType value="Class"/><apiDesc>Класс отображаемого курсора.
     
      </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>2</apiData><apiDesc>Целое число, указывающее уровень приоритета курсора. Возможными значениями являются <codeph>CursorManagerPriority.HIGH</codeph>, <codeph>CursorManagerPriority.MEDIUM</codeph> и <codeph>CursorManagerPriority.LOW</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Число, указывающее смещение курсора относительно указателя мыши по оси x в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Число, указывающее смещение курсора относительно указателя мыши по оси y в пикселях.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает новый курсор и устанавливает дополнительный приоритет курсора. Добавляет новый курсор к списку курсоров.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:CursorManager:showCursor"><apiName>showCursor</apiName><shortdesc>
      Делает курсор видимым.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Делает курсор видимым. Видимость курсора не учитывается при подсчете ссылок. Одиночный вызов метода <codeph>showCursor()</codeph> всегда показывает курсор независимо от того, сколько было произведено вызовов метода <codeph>hideCursor()</codeph>.
     
      <p>Вызов этого метода не влияет на курсор системы. Для непосредственного контроля курсора системы следует использовать методы <codeph>Mouse.show()</codeph> и <codeph>Mouse.hide()</codeph>. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:CursorManager:NO_CURSOR"><apiName>NO_CURSOR</apiName><shortdesc>
      Константа, являющаяся значением свойства currentCursorID при отсутствии курсора, управляемого CursorManager и вследствие этого при отображении курсора системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Константа, являющаяся значением свойства <codeph>currentCursorID</codeph> при отсутствии курсора, управляемого CursorManager и вследствие этого при отображении курсора системы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorID:get"><apiName>currentCursorID</apiName><shortdesc>
      Идентификатор текущего пользовательского курсора или NO_CURSOR, если показан курсор системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Идентификатор текущего пользовательского курсора или NO_CURSOR, если показан курсор системы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorXOffset:get"><apiName>currentCursorXOffset</apiName><shortdesc>
      Смещение пользовательского курсора относительно указателя мыши по оси x в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Смещение пользовательского курсора относительно указателя мыши по оси x в пикселях.
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorYOffset:get"><apiName>currentCursorYOffset</apiName><shortdesc>
      Смещение пользовательского курсора относительно указателя мыши по оси y в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Смещение пользовательского курсора относительно указателя мыши по оси y в пикселях.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>