<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.validators"><apiName>mx.validators</apiName><apiDetail/><apiClassifier id="mx.validators:CurrencyValidatorAlignSymbol"><apiName>CurrencyValidatorAlignSymbol</apiName><shortdesc>
  Класс CurrencyValidatorAlignSymbol определяет константы значений для настройки выравнивания символа валюты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CurrencyValidatorAlignSymbol определяет константы значений для настройки выравнивания символа валюты. Эти значения используются в свойстве <codeph>CurrencyValidator.alignSymbol</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidator"><linktext>mx.validators.CurrencyValidator</linktext></link></related-links><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:ANY"><apiName>ANY</apiName><shortdesc>
	  Указывает значение any как выравнивание символа валюты для класса CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает значение <codeph>any</codeph> как выравнивание символа валюты для класса CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Указывает значение left как выравнивание символа валюты для класса CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает значение <codeph>left</codeph> как выравнивание символа валюты для класса CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Указывает значение right как выравнивание символа валюты для класса CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает значение <codeph>right</codeph> как выравнивание символа валюты для класса CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:DateValidator"><apiName>DateValidator</apiName><shortdesc>
  Класс DateValidator проверяет содержимое соответствующей даты в строке, дате или объекте и соответствие указанному формату.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>  
  
  <pre>
  &lt;mx:DateValidator 
    allowedFormatChars="/\-. " 
    dayListener="<i>Object specified by daySource</i>"
    dayProperty="<i>No default</i>"
    daySource="<i>No default</i>"
    formatError= "Configuration error: Incorrect formatting string." 
    inputFormat="MM/DD/YYYY" 
    invalidCharError="The date contains invalid characters."
    monthListener="<i>Object specified by monthSource</i>"
    monthProperty="<i>No default</i>"
    monthSource="<i>No default</i>"
    validateAsString="true|false"
    wrongDayError="Enter a valid day for the month."
    wrongLengthError="Type the date in the format <i>inputFormat</i>." 
    wrongMonthError="Enter a month between 1 and 12."
    wrongYearError="Enter a year between 0 and 9999."
    yearListener="<i>Object specified by yearSource</i>"
    yearProperty="<i>No default</i>"
    yearSource="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DateValidator проверяет содержимое соответствующей даты в строке, дате или объекте и соответствие указанному формату. В значение месяца, дня и года пользователи могут вводить одну или две цифры. По умолчанию средство проверки обеспечивает следующие форматы:
 
  <ul>
    <li>месяц: от 1 до 12 (или 0 – 11 для объектов <codeph>Date</codeph>);</li>
    <li>день: от 1 до 31;</li>
    <li>год: число.</li>
  </ul>
 
  <p>Определить дату в классе DateValidator можно двумя способами:</p>
  <ul>
    <li>Отдельной строкой с датой – для определения строки используются свойства <codeph>source</codeph> и <codeph>property</codeph>. Строка может содержать цифры и символы форматирования, определенные свойством <codeph>allowedFormatChars</codeph>, например символы "/\-. ". По умолчанию формат ввода даты в поле строки: MM/DD/YYYY, где ММ – месяц, DD – день и YYYY – год. Свойство <codeph>inputFormat</codeph> можно использовать для определения другого формата.</li>
 	  <li>Объект <codeph>Date</codeph>.</li>
    <li>Объект или несколько полей, содержащие день, месяц и год. Все следующие свойства используются для определения значений дня, месяца и года: <codeph>daySource</codeph>, <codeph>dayProperty</codeph>, <codeph>monthSource</codeph>, <codeph>monthProperty</codeph>, <codeph>yearSource</codeph> и <codeph>yearProperty</codeph>.</li>
  </ul>
  
  </apiDesc><example conref="DateValidatorExample.mxml"><swfblock conref="examples/DateValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:DateValidator:DateValidator"><apiName>DateValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:DateValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределяет метод базового класса doValidation() для проверки даты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемая строка или объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределяет метод базового класса <codeph>doValidation()</codeph> для проверки даты.
	 
	  <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовать при создании пользовательского класса Validator. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:DateValidator:validateDate"><apiName>validateDate</apiName><shortdesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:DateValidator</apiOperationClassifier><apiDesc>Экземпляр DateValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре value. Например, если параметр <codeph>value</codeph> имеет значение value.date, то <codeph>baseField</codeph> имеет значение date.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:DateValidator:dayProperty"><apiName>dayProperty</apiName><shortdesc>
	  Имя проверяемого свойства day.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя проверяемого свойства day. Это свойство является необязательным, но если определено свойство <codeph>daySource</codeph>, следует также указать это свойство.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthProperty"><apiName>monthProperty</apiName><shortdesc>
	  Имя проверяемого свойства month.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя проверяемого свойства month. Это свойство является необязательным, но если определено свойство <codeph>monthSource</codeph>, следует также указать это свойство.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearProperty"><apiName>yearProperty</apiName><shortdesc>
	  Имя проверяемого свойства year.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя проверяемого свойства year. Это свойство является необязательным, но если определено свойство <codeph>yearSource</codeph>, следует также указать это свойство.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Набор символов форматирования, допустимых для разделения значений месяца, дня и года.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"/\-. "
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Набор символов форматирования, допустимых для разделения значений месяца, дня и года.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:dayListener:get"><apiName>dayListener</apiName><shortdesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля дня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля дня. Если он не указан, используется значение, указанное для свойства <codeph>daySource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:daySource:get"><apiName>daySource</apiName><shortdesc> 
	  Объект, содержащий значение поля дня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Объект, содержащий значение поля дня. Если для этого свойства указано значение, следует также определить значение для свойства <codeph>dayProperty</codeph>. Не используйте это свойство, если определены свойства <codeph>source</codeph> и <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:formatError:get"><apiName>formatError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении неверного формата свойства inputFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Configuration error: Incorrect formatting string." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении неверного формата свойства <codeph>inputFormat</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:inputFormat:get"><apiName>inputFormat</apiName><shortdesc> 
	  Формат даты для проверки значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"MM/DD/YYYY"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Формат даты для проверки значения. ММ – месяц, DD – день и YYYY – год. Строка с учетом регистра.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении в дате недопустимых символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your date."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении в дате недопустимых символов.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthListener:get"><apiName>monthListener</apiName><shortdesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля месяца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля месяца. Если он не указан, используется значение, указанное для свойства <codeph>monthSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthSource:get"><apiName>monthSource</apiName><shortdesc> 
	  Объект, содержащий значение поля месяца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Объект, содержащий значение поля месяца. Если для этого свойства указано значение, следует также определить значение для свойства <codeph>monthProperty</codeph>. Не используйте это свойство, если определены свойства <codeph>source</codeph> и <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:validateAsString:get"><apiName>validateAsString</apiName><shortdesc> 
	  Определяет способ проверки значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true	 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Определяет способ проверки значения. Если установлено <codeph>true</codeph>, средство проверки анализирует значение как строку, если только значение не имеет свойства <codeph>month</codeph>, <codeph>day</codeph> или <codeph>year</codeph>. Если значение равно <codeph>false</codeph>, средство проверки анализирует значение как объект Date. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongDayError:get"><apiName>wrongDayError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения дня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a valid day for the month." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения дня.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Сообщение об ошибке при несоответствии длины даты длине в свойстве inputFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Type the date in the format &lt;i>inputFormat&lt;/i>." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при несоответствии длины даты длине в свойстве <codeph>inputFormat</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongMonthError:get"><apiName>wrongMonthError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения месяца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a month between 1 and 12."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения месяца.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongYearError:get"><apiName>wrongYearError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения года.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a year between 0 and 9999."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении недопустимого значения года.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearListener:get"><apiName>yearListener</apiName><shortdesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля года.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля года. Если он не определен, используется значение, указанное для свойства <codeph>yearSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearSource:get"><apiName>yearSource</apiName><shortdesc> 
	  Объект, содержащий значение поля года.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Объект, содержащий значение поля года. Если для этого свойства определено значение, следует также указать значение для свойства <codeph>yearProperty</codeph>. Не используйте это свойство, если определены свойства <codeph>source</codeph> и <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
  Класс ZipCodeValidator проверяет длину строки и формат почтового индекса из пяти цифр, почтового индекса США в виде комбинации «пять цифр + четыре цифры» или почтового индекса Канады.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ZipCodeValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:ZipCodeValidator
    allowedFormatChars=" -" 
    domain="US Only | US or Canada | Canada Only"
    invalidCharError="The ZIP code contains invalid characters." 
    invalidDomainError="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." 
    wrongCAFormatError="The Canadian postal code must be formatted 'A1B 2C3'." 
    wrongLengthError="The ZIP code must be 5 digits or 5+4 digits." 
    wrongUSFormatError="The ZIP+4 code must be formatted '12345-6789'." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ZipCodeValidator проверяет длину строки и формат почтового индекса из пяти цифр, почтового индекса США в виде комбинации «пять цифр + четыре цифры» или почтового индекса Канады.
  
  </apiDesc><example conref="ZipCodeValidatorExample.mxml"><swfblock conref="examples/ZipCodeValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidatorDomainType"><linktext>mx.validators.ZipCodeValidatorDomainType</linktext></link></related-links><apiConstructor id="mx.validators:ZipCodeValidator:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:ZipCodeValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределяет метод базового класса doValidation() для проверки почтового индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределяет метод базового класса <codeph>doValidation()</codeph> для проверки почтового индекса.
     
      <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:ZipCodeValidator:validateZipCode"><apiName>validateZipCode</apiName><shortdesc>
      Удобный метод для выполнения вызова средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:ZipCodeValidator</apiOperationClassifier><apiDesc>Экземпляр ZipCodeValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> определен как value.zipCode, то <codeph>baseField</codeph> имеет значение <codeph>zipCode</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удобный метод для выполнения вызова средства проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:ZipCodeValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
      Набор символов форматирования, допустимых в почтовом индексе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -". 
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Набор символов форматирования, допустимых в почтовом индексе. Он не может содержать цифры или буквы [a-z A-Z].
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:domain:get"><apiName>domain</apiName><shortdesc> 
      Тип проверяемого почтового индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ZipCodeValidatorDomainType.US_ONLY
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Тип проверяемого почтового индекса. В MXML допустимыми значениями являются <codeph>US or Canada</codeph>, <codeph>US Only</codeph> и <codeph>Canada Only</codeph>.
     
      <p>В ActionScript можно использовать следующие константы для определения этого свойства: <codeph>ZipCodeValidatorDomainType.US_ONLY</codeph>, <codeph>ZipCodeValidatorDomainType.US_OR_CANADA</codeph> или <codeph>ZipCodeValidatorDomainType.CANADA_ONLY</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
      Сообщение об ошибке при обнаружении недопустимых символов в почтовом индексе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке при обнаружении недопустимых символов в почтовом индексе.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc> 
      Сообщение об ошибке при обнаружении недопустимого значения свойства domain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain parameter is invalid. It must be either 'US Only' or 'US or Canada'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке при обнаружении недопустимого значения свойства <codeph>domain</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongCAFormatError:get"><apiName>wrongCAFormatError</apiName><shortdesc> 
      Сообщение об ошибке при обнаружении недопустимого значения почтового индекса Канады.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Canadian postal code must be formatted 'A1B 2C3'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке при обнаружении недопустимого значения почтового индекса Канады.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
      Сообщение об ошибке при обнаружении недопустимого значения почтового индекса США.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code must be 5 digits or 5+4 digits."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке при обнаружении недопустимого значения почтового индекса США.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongUSFormatError:get"><apiName>wrongUSFormatError</apiName><shortdesc> 
      Сообщение об ошибке в случае некорректно отформатированного почтового индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP+4 code must be formatted '12345-6789'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке в случае некорректно отформатированного почтового индекса.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidator"><apiName>IValidator</apiName><shortdesc>
  Этот интерфейс определяет методы и свойства, которые должен реализовать объект Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Этот интерфейс определяет методы и свойства, которые должен реализовать объект Validator. 
  <p>В помощью этого интерфейса проверяется достоверность различных типов данных, таких как числа, валюта, номера телефонов, почтовые индексы и т. д., которые определены в пространствах имен MX и Spark. Классы mx:Validator и spark:GlobaliationValidatorBase реализуют этот интерфейс. Метод validateAll() в этих классах использует этот тип интерфейса для вызова метода validate() для множественных объектов средства проверки.</p>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link><link href="" invalidHref="spark.validators.GlobalizationValidatorBase.xml"><linktext>spark.validators.GlobalizationValidatorBase</linktext></link></related-links><apiOperation id="mx.validators:IValidator:mx.validators:IValidator:validate"><apiName>validate</apiName><shortdesc>
      Выполняет проверку и дополнительно оповещает прослушиватели результата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект ValidationResultEvent, содержащий результаты проверки. В случае успешной проверки свойство массива <codeph>ValidationResultEvent.results</codeph> является пустым. В случае сбоя проверки свойство массива <codeph>ValidationResultEvent.results</codeph> содержит по одному объекту ValidationResult для каждого поля, проверяемого средством проверки, как для не прошедших, так и для прошедших проверку полей. Проверьте свойство <codeph>ValidationResult.isError</codeph> для определения успешного выполнения или сбоя проверки поля. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Необязательное проверяемое значение. Если null, средство проверки использует свойства <codeph>source</codeph> и <codeph>property</codeph> для определения значения. При определении этого аргумента следует также настроить свойство <codeph>listener</codeph> для определения целевого компонента любых сообщений об ошибках, возникающих при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение <codeph>false</codeph>, после проверки средство проверки оповещает прослушиватель результата.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет проверку и дополнительно оповещает прослушиватели результата. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidator:mx.validators:IValidator:enabled:get"><apiName>enabled</apiName><shortdesc>
      Свойство для включения или выключения процесса проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство для включения или выключения процесса проверки.
      <p>Установка этого значения на <codeph>false</codeph> помешает выполнению проверки средством проверки. Если средство проверки отключено, оно не передает события, а метод <codeph>validate()</codeph> возвращает значение null.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
  Класс CurrencyValidator обеспечивает представление в строке допустимого выражения валюты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:CurrencyValidator" replacement="spark.validators.CurrencyValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CurrencyValidator&gt;</code> tag
  inherits all of the tag properties of its superclass,
  and adds the following tag properties:</p>
 
  <pre>
  &lt;mx:CurrencyValidator
    alignSymbol="left|right|any"
    allowNegative="true|false"
    currencySymbol="$"
    currencySymbolError="The currency symbol occurs in an invalid location."
    decimalPointCountError="The decimal separator can occur only once."
    decimalSeparator="."
    exceedsMaxError="The amount entered is too large."
    invalidCharError="The input contains invalid characters."
    invalidFormatCharsError="One of the formatting parameters is invalid."
    lowerThanMinError="The amount entered is too small."
    maxValue="NaN"
    minValue="NaN"
    negativeError="The amount may not be negative."
    precision="2"
    precisionError="The amount entered has too many digits beyond the decimal point."
    separationError="The thousands separator must be followed by three digits."
    thousandsSeparator=","
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CurrencyValidator обеспечивает представление в строке допустимого выражения валюты. Он проверяет вводимые данные на попадание в пределы указанного диапазона (определяется значениями <codeph>minValue</codeph> и <codeph>maxValue</codeph>), на неотрицательное значение (определяется значениями <codeph>allowNegative</codeph>) и на попадание в пределы указанного параметра <codeph>precision</codeph>. Класс CurrencyValidator проверяет правильность отформатированных и неотформатированных выражений валюты, например $12,345.00 и 12345. Для интернационализации можно настроить свойства <codeph>currencySymbol</codeph>, <codeph>alignSymbol</codeph>, <codeph>thousandsSeparator</codeph> и <codeph>decimalSeparator</codeph>.
 
  </apiDesc><example conref="CurrencyValidatorExample.mxml"><swfblock conref="examples/CurrencyValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links><apiConstructor id="mx.validators:CurrencyValidator:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CurrencyValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределяет метод базового класса doValidation() для проверки выражения валюты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределяет метод базового класса <codeph>doValidation()</codeph> для проверки выражения валюты.
     
      <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CurrencyValidator:validateCurrency"><apiName>validateCurrency</apiName><shortdesc>
      Удобный метод для выполнения вызова средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CurrencyValidator</apiOperationClassifier><apiDesc>Экземпляр CurrencyValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> имеет значение value.currency, значением baseField является currency.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удобный метод для выполнения вызова средства проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CurrencyValidator:alignSymbol:get"><apiName>alignSymbol</apiName><shortdesc>
      Определяет выравнивание currencySymbol относительно остальной части выражения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CurrencyValidatorAlignSymbol.LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет выравнивание<codeph>currencySymbol</codeph> относительно остальной части выражения. Допустимыми значениями в ActionScript являются<codeph>CurrencyValidatorAlignSymbol.LEFT</codeph>, <codeph>CurrencyValidatorAlignSymbol.RIGHT</codeph> и <codeph>CurrencyValidatorAlignSymbol.ANY</codeph>. Допустимыми значениями в MXML являются <codeph>left</codeph>, <codeph>right</codeph> и <codeph>any</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links></apiValue><apiValue id="mx.validators:CurrencyValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Указывает возможность использования отрицательных чисел.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает возможность использования отрицательных чисел. Может иметь значение <codeph>true</codeph> или <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbolError:get"><apiName>currencySymbolError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении символа валюты, определенного currencySymbol, в неправильном местоположении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The currency symbol occurs in an invalid location."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении символа валюты, определенного <codeph>currencySymbol</codeph>, в неправильном местоположении.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbol:get"><apiName>currencySymbol</apiName><shortdesc>
      Строка символов, используемая для определения символа валюты, например $, R$ или #163;.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"$"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Строка символов, используемая для определения символа валюты, например $, R$ или ?. Не может быть цифрой и должна отличаться от <codeph>thousandsSeparator</codeph> и <codeph>decimalSeparator</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении нескольких десятичных разделителей.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can only occur once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении нескольких десятичных разделителей.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Символ, используемый для отделения целой части числа от дробной.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Символ, используемый для отделения целой части числа от дробной. Не может быть числом и должен отличаться от <codeph>currencySymbol</codeph> и <codeph>thousandsSeparator</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Сообщение об ошибке, если значение больше, чем maxValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение больше, чем <codeph>maxValue</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении недопустимых символов в валюте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении недопустимых символов в валюте.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении в значении недопустимого символа форматирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении в значении недопустимого символа форматирования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Сообщение об ошибке, если значение меньше, чем minValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение меньше, чем <codeph>minValue</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Максимальное значение допустимого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное значение допустимого числа. Значение NaN означает игнорирование.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Минимальное значение допустимого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальное значение допустимого числа. Значение NaN означает игнорирование.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Сообщение об ошибке, если значение отрицательное и свойство allowNegative имеет значение false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение отрицательное и свойство <codeph>allowNegative</codeph> имеет значение <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Сообщение об ошибке, если точность значения превышает значение, определенное свойством precision.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond 
      the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если точность значения превышает значение, определенное свойством <codeph>precision</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Максимальное количество цифр после запятой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное количество цифр после запятой. Любое неотрицательное целое число. Примечание. Установка значения <codeph>0</codeph> равноценна установке для <codeph>NumberValidator.domain</codeph> значения <codeph>int</codeph>. Установка на -1 означает игнорирование.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении неправильного местоположения тысячного разделителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении неправильного местоположения тысячного разделителя.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Символ, используемый для разделения тысяч.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Символ, используемый для разделения тысяч. Не может быть числом и должен отличаться от <codeph>currencySymbol</codeph> и <codeph>decimalSeparator</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidatorDomainType"><apiName>NumberValidatorDomainType</apiName><shortdesc>
  Класс NumberValidatorDomainType определяет значения для свойств domain класса NumberValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс NumberValidatorDomainType определяет значения для свойства <codeph>domain</codeph> класса NumberValidator.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#NumberValidator"><linktext>mx.validators.NumberValidator</linktext></link></related-links><apiValue id="mx.validators:NumberValidatorDomainType:INT"><apiName>INT</apiName><shortdesc>
	  Задает проверку правильности целого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>int</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Задает проверку правильности целого числа.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidatorDomainType:REAL"><apiName>REAL</apiName><shortdesc>
	  Задает проверку правильности реального числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>real</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Задает проверку правильности реального числа.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:StringValidator"><apiName>StringValidator</apiName><shortdesc>
  Класс StringValidator проверяет попадание длины строки в указанный диапазон.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:StringValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and add the following tag attributes:</p>
  
  <pre>
  &lt;mx:StringValidator
    maxLength="NaN" 
    minLength="NaN" 
    tooLongError="This string is longer than the maximum allowed length. This must be less than {0} characters long." 
    tooShortError="This string is shorter than the minimum allowed length. This must be at least {0} characters long." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс StringValidator проверяет попадание длины строки в указанный диапазон. 
  
  </apiDesc><example conref="StringValidatorExample.mxml"><swfblock conref="examples/StringValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:StringValidator:StringValidator"><apiName>StringValidator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:StringValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределение метода базового класса doValidation() для проверки строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределение метода базового класса <codeph>doValidation()</codeph> для проверки строки.
     
      <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:StringValidator:validateString"><apiName>validateString</apiName><shortdesc>
      Удобный метод для выполнения вызова средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:StringValidator</apiOperationClassifier><apiDesc>Экземпляр StringValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> имеет значение value.mystring, то <codeph>baseField</codeph> имеет значение <codeph>mystring</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удобный метод для выполнения вызова средства проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:StringValidator:maxLength:get"><apiName>maxLength</apiName><shortdesc> 
      Максимальная допустимая для строки длина.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Максимальная допустимая для строки длина. Значение NaN означает игнорирование свойства.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:minLength:get"><apiName>minLength</apiName><shortdesc> 
      Минимальная допустимая для строки длина.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Минимальная допустимая для строки длина. Значение NaN означает игнорирование свойства.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooLongError:get"><apiName>tooLongError</apiName><shortdesc> 
      Сообщение об ошибке, если длина строки больше, чем свойство maxLength.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is longer than the maximum allowed length. This must be less than {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке, если длина строки больше, чем свойство <codeph>maxLength</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooShortError:get"><apiName>tooShortError</apiName><shortdesc> 
      Сообщение об ошибке, если длина строки меньше, чем свойство minLength.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is shorter than the minimum allowed length. This must be at least {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Сообщение об ошибке, если длина строки меньше, чем свойство <codeph>minLength</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidatorDomainType"><apiName>ZipCodeValidatorDomainType</apiName><shortdesc>
  Класс ZipCodeValidatorDomainType определяет значения для свойства domain класса ZipCodeValidator, используемого для определения типа проверяемого почтового индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ZipCodeValidatorDomainType определяет значения для свойства <codeph>domain</codeph> класса ZipCodeValidator, используемого для определения типа проверяемого почтового индекса.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidator"><linktext>mx.validators.ZipCodeValidator</linktext></link></related-links><apiValue id="mx.validators:ZipCodeValidatorDomainType:CANADA_ONLY"><apiName>CANADA_ONLY</apiName><shortdesc>
	  Определяет необходимость проверки почтового индекса Канады.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Canada Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Определяет необходимость проверки почтового индекса Канады.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_ONLY"><apiName>US_ONLY</apiName><shortdesc>
	  Определяет необходимость проверки почтового индекса США.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Определяет необходимость проверки почтового индекса США.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_OR_CANADA"><apiName>US_OR_CANADA</apiName><shortdesc>
	  Определяет необходимость проверки почтового индекса США или Канады.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US or Canada</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Определяет необходимость проверки почтового индекса США или Канады.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
  Класс RegExpValidator позволяет использовать для проверки поля регулярное выражение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RegExpValidator&gt;</code> tag 
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:RegExpValidator
    expression="<i>No default</i>" 
    flags="<i>No default</i>" 
    noExpressionError="The expression is missing." 
    noMatchError="The field is invalid." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Класс RegExpValidator позволяет использовать для проверки поля регулярное выражение. Регулярное выражение передается в средство проверки с помощью свойства <codeph>expression</codeph>, а дополнительные флаги для управления сопоставлением с образцом регулярного выражения – с помощью свойства <codeph>flags</codeph>. 
 
  <p>Проверка успешна, если средство проверки сможет обнаружить соответствие регулярного выражения в проверяемом поле. Если соответствие средством проверки не обнаруживается, происходит ошибка проверки.</p>
 
  <p>Класс RegExpValidator передает события <codeph>valid</codeph> и <codeph>invalid</codeph>. Для события <codeph>invalid</codeph> объект события является экземпляром класса ValidationResultEvent и содержит массив объектов ValidationResult.</p>
 
  <p>Однако для события <codeph>valid</codeph> объект ValidationResultEvent содержит массив объектов RegExpValidationResult. Класс RegExpValidationResult является нижестоящим классом класса ValidationResult и содержит дополнительные свойства, используемые с регулярными выражениями, включая следующие:</p>
  <ul>
    <li><codeph>matchedIndex</codeph> – целое число с начальным индексом во входной строке соответствия.</li>
    <li><codeph>matchedString</codeph> – строка, с подстрокой входной строки, соответствующая регулярному выражению.</li>
    <li><codeph>matchedSubStrings</codeph> – массив строк, содержащий заключенные в скобки соответствия подстроки при их наличии. Если соответствий подстроки не обнаружено, этот массив имеет длину 0. matchedSubStrings[0] используется для перехода к первому соответствию подстроки.</li>
  </ul>
  
  </apiDesc><example conref="RegExValidatorExample.mxml"><swfblock conref="examples/RegExValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="" invalidHref="mx.validators.RegExp.xml"><linktext>RegExp</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidator:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
      Конструктор
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      Конструктор
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:RegExpValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределение метода базового класса doValidation() для проверки регулярного выражения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Для недопустимого значения результата массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверяемым средством проверки. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределение метода базового класса <codeph>doValidation()</codeph> для проверки регулярного выражения.
     
      <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.validators:RegExpValidator:expression:get"><apiName>expression</apiName><shortdesc>
      Регулярное выражение, используемое для проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Регулярное выражение, используемое для проверки. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:flags:get"><apiName>flags</apiName><shortdesc>
      Флаги регулярных выражений для использования при обнаружении соответствий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Флаги регулярных выражений для использования при обнаружении соответствий.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noExpressionError:get"><apiName>noExpressionError</apiName><shortdesc> 
      Сообщение об ошибке при отсутствии определенного регулярного выражения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Сообщение об ошибке при отсутствии определенного регулярного выражения. Значение по умолчанию: «Отсутствует выражение».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noMatchError:get"><apiName>noMatchError</apiName><shortdesc> 
      Сообщение об ошибке при отсутствии соответствий регулярному выражению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Сообщение об ошибке при отсутствии соответствий регулярному выражению. Значение по умолчанию: «Недопустимое поле».
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
  Класс NumberValidator обеспечивает допустимое значение в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:NumberValidator" replacement="spark.validators.NumberValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:NumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:NumberValidator 
    allowNegative="true|false" 
    decimalPointCountError="The decimal separator can only occur once." 
    decimalSeparator="." 
    domain="real|int" 
    exceedsMaxError="The number entered is too large." 
    integerError="The number must be an integer." 
    invalidCharError="The input contains invalid characters." 
    invalidFormatCharsError="One of the formatting parameters is invalid." 
    lowerThanMinError="The amount entered is too small." 
    maxValue="NaN" 
    minValue="NaN" 
    negativeError="The amount may not be negative." 
    precision="-1" 
    precisionError="The amount entered has too many digits beyond the decimal point." 
    separationError="The thousands separator must be followed by three digits." 
    thousandsSeparator="," 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс NumberValidator обеспечивает допустимое значение в строке. Он может обеспечивать попадание вводимого значения в пределы заданного диапазона (определяется <codeph>minValue</codeph> и <codeph>maxValue</codeph>), значение в виде целого числа (определяется <codeph>domain</codeph>), неотрицательное значение (определяется <codeph>allowNegative</codeph>) и не превышение указанного параметра <codeph>precision</codeph>. Средство проверки проверяет отформатированные числа (например, 12,345.67), а в целях интернационализации можно задать свойства <codeph>thousandsSeparator</codeph> и <codeph>decimalSeparator</codeph>.
  
  </apiDesc><example conref="NumberValidatorExample.mxml"><swfblock conref="examples/NumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:NumberValidator:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:NumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределение метода базового класса doValidation() для проверки числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределение метода базового класса <codeph>doValidation()</codeph> для проверки числа.
     
	  <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:NumberValidator:validateNumber"><apiName>validateNumber</apiName><shortdesc>
      Удобный метод для вызова средства проверки в пользовательской функции проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:NumberValidator</apiOperationClassifier><apiDesc>Экземпляр NumberValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
	 
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> имеет значение value.number, то <codeph>baseField</codeph> имеет значение number.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удобный метод для вызова средства проверки в пользовательской функции проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:NumberValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Указывает возможность использования отрицательных чисел.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает возможность использования отрицательных чисел. К допустимым значениям относятся <codeph>true</codeph> или <codeph>false</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении нескольких десятичных разделителей.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can occur only once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении нескольких десятичных разделителей.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Символ, используемый для отделения целой части числа от дробной.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Символ, используемый для отделения целой части числа от дробной. Не может быть цифрой и должен отличаться от <codeph>thousandsSeparator</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:domain:get"><apiName>domain</apiName><shortdesc>
      Тип проверяемого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"real"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Тип проверяемого числа. К допустимым значениям относятся <codeph>real</codeph> и <codeph>int</codeph>.
	 
	  <p>В ActionScript для установки значения этого свойства можно использовать следующие константы: <codeph>NumberValidatorDomainType.REAL</codeph> или <codeph>NumberValidatorDomainType.INT</codeph>.</p>
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Сообщение об ошибке, если значение превышает свойство maxValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение превышает свойство <codeph>maxValue</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:integerError:get"><apiName>integerError</apiName><shortdesc>
      Сообщение об ошибке, если необходимо ввести целое число, как определено свойством domain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number must be an integer."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если необходимо ввести целое число, как определено свойством <codeph>domain</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении в значении недопустимых символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении в значении недопустимых символов.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении в значении символов недопустимого формата, т.е. числа или знака «минус» (-) в качестве символа-разделителя или двух или более последовательных символов-разделителей.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении в значении символов недопустимого формата, т.е. числа или знака «минус» (-) в качестве символа-разделителя или двух или более последовательных символов-разделителей.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Сообщение об ошибке, если значение меньше, чем minValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение меньше, чем <codeph>minValue</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Максимальное значение допустимого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное значение допустимого числа. Значение NaN означает отсутствие максимального значения.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Минимальное значение допустимого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальное значение допустимого числа. Значение NaN означает отсутствие минимального значения.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Сообщение об ошибке, если значение отрицательное и свойство allowNegative имеет значение false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение отрицательное и свойство <codeph>allowNegative</codeph> имеет значение <codeph>false</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Сообщение об ошибке, если точность значения превышает значение, определенное свойством precision.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если точность значения превышает значение, определенное свойством precision.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Максимальное количество цифр после запятой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное количество цифр после запятой. Может быть любым неотрицательным целым числом. Примечание. Определение значения <codeph>0</codeph> равноценно определению для <codeph>domain</codeph> значения <codeph>int</codeph>. Значение -1 означает игнорирование.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Сообщение об ошибке при обнаружении тысячного разделителя в неправильном местоположении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке при обнаружении тысячного разделителя в неправильном местоположении.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Символ, используемый для разделения тысяч в целой части числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Символ, используемый для разделения тысяч в целой части числа. Не может быть цифрой и должен отличаться от <codeph>decimalSeparator</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
  Класс PhoneNumberValidator проверяет строку как допустимый номер телефона.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:PhoneNumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PhoneNumberValidator 
    allowedFormatChars="()- .+" 
    invalidCharError="Your telephone number contains invalid characters."
 	  minDigits="10"
    wrongLengthError="Your telephone number must contain at least 10 digits."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс PhoneNumberValidator проверяет строку как допустимый номер телефона. Допустимый номер телефона содержит, по крайней мере, 10 цифр плюс дополнительные символы форматирования. Средство проверки не проверяет фактическое существование номера телефона.
  
  </apiDesc><example conref="PhoneNumberValidatorExample.mxml"><swfblock conref="examples/PhoneNumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:PhoneNumberValidator:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:PhoneNumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределение метода базового класса doValidation() для проверки номера телефона.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределение метода базового класса <codeph>doValidation()</codeph> для проверки номера телефона.
     
	  <p>Обычно этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:PhoneNumberValidator:validatePhoneNumber"><apiName>validatePhoneNumber</apiName><shortdesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:PhoneNumberValidator</apiOperationClassifier><apiDesc>Экземпляр PhoneNumberValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> имеет значение value.phone, то <codeph>baseField</codeph> имеет значение phone.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:PhoneNumberValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Набор допустимых символов форматирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Набор допустимых символов форматирования.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении в значении недопустимых символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number contains invalid characters."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении в значении недопустимых символов.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:minDigits:get"><apiName>minDigits</apiName><shortdesc> 
      Минимальное число цифр для допустимого номера телефона.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Минимальное число цифр для допустимого номера телефона. Значение NaN означает игнорирование свойства.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении значения из менее чем 10 цифр.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number must contain at least 10 digits."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении значения из менее чем 10 цифр.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
  Класс EmailValidator проверяет наличие в строке одного символа &amp;#64;, точки в имени домена и наличие в суффиксе домена верхнего уровня двух, трех, четырех или шести символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:EmailValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:EmailValidator 
    invalidCharError="Your e-mail address contains invalid characters."
    invalidDomainError= "The domain in your e-mail address is incorrectly formatted." 
    invalidIPDomainError="The IP domain in your e-mail address is incorrectly formatted." 
    invalidPeriodsInDomainError="The domain in your e-mail address has consecutive periods." 
    missingAtSignError="An at sign (&64;) is missing in your e-mail address."
    missingPeriodInDomainError="The domain in your e-mail address is missing a period." 
    missingUsernameError="The username in your e-mail address is missing." 
    tooManyAtSignsError="Your e-mail address contains too many &64; characters."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EmailValidator проверяет наличие в строке одного знака @, точки в имени домена и наличие в суффиксе домена верхнего уровня двух, трех, четырех или шести символов. Имена IP-домена являются допустимыми, если они заключены в квадратные скобки. Средство проверки не проверяет фактическое существование имени домена и имени пользователя.
 
  <p>Можно использовать имена IP-домена, если они заключены в квадратные скобки; например, myname@[206.132.22.1]. Можно использовать отдельные IP-номера от 0 до 255.</p>
  
  </apiDesc><example conref="EmailValidatorExample.mxml"><swfblock conref="examples/EmailValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:EmailValidator:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:EmailValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределение метода базового класса doValidation() для проверки адреса электронного письма.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемая строка или объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределение метода базового класса <codeph>doValidation()</codeph> для проверки адреса электронного письма.
	 
	  <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:EmailValidator:validateEmail"><apiName>validateEmail</apiName><shortdesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:EmailValidator</apiOperationClassifier><apiDesc>Экземпляр EmailValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре value. Например, если параметр <codeph>value</codeph> имеет значение value.email, то <codeph>baseField</codeph> имеет значение email.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Удобный метод для вызова средства проверки в пользовательской функции проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:EmailValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении недопустимых символов в адресе электронного письма.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении недопустимых символов в адресе электронного письма.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении суффикса (домена верхнего уровня) длиной не из 2, 3, 4 или 6 символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении суффикса (домена верхнего уровня) длиной не из 2, 3, 4 или 6 символов.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidIPDomainError:get"><apiName>invalidIPDomainError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении недопустимого IP-домена.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The IP domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении недопустимого IP-домена. IP-домен должен быть заключен в квадратные скобки.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidPeriodsInDomainError:get"><apiName>invalidPeriodsInDomainError</apiName><shortdesc>
	  Сообщение об ошибке при наличии в домене многоточий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address has continous periods."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при наличии в домене многоточий.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingAtSignError:get"><apiName>missingAtSignError</apiName><shortdesc>
	  Сообщение об ошибке в случае отсутствия в адресе электронной почты знака «@».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"An at sign (&amp;64;) is missing in your e-mail address."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке в случае отсутствия в адресе электронной почты знака «@».
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingPeriodInDomainError:get"><apiName>missingPeriodInDomainError</apiName><shortdesc>
	  Сообщение об ошибке при отсутствии в домене точки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is missing a period."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при отсутствии в домене точки.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingUsernameError:get"><apiName>missingUsernameError</apiName><shortdesc>
	  Сообщение об ошибке при отсутствии имени пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The username in your e-mail address is missing."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при отсутствии имени пользователя.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:tooManyAtSignsError:get"><apiName>tooManyAtSignsError</apiName><shortdesc>
	  Сообщение об ошибке при наличии нескольких знаков «@» в адресе электронного письма.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains too many &amp;64; characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при наличии нескольких знаков «@» в адресе электронного письма. Это свойство является необязательным. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc>
  Класс RegExpValidator передает события valid и invalid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:ValidationResult</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс RegExpValidator передает события <codeph>valid</codeph> и <codeph>invalid</codeph>. Для события <codeph>invalid</codeph> объектом события является экземпляр класса ValidationResultEvent, а свойство <codeph>ValidationResultEvent.results</codeph> содержит массив объектов ValidationResult.
 
  <p>Однако для события <codeph>valid</codeph> свойство <codeph>ValidationResultEvent.results</codeph> содержит массив объектов RegExpValidationResult. Класс RegExpValidationResult является нижестоящим классом класса ValidationResult и содержит дополнительные свойства, используемые с регулярными выражениями.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidationResult:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc> 
	  Конструктор
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc>Передача значения <codeph>true</codeph> в случае ошибки при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Имя подчиненного поля проверяемого объекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Код ошибки при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Сообщение об ошибке при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedString</apiItemName><apiType value="String"/><apiData/><apiDesc>Соответствующая подстрока.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Индекс соответствующей строки.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedSubstrings</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив соответствий подстроки.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc> 
	  Конструктор
	  
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:RegExpValidationResult:matchedIndex"><apiName>matchedIndex</apiName><shortdesc> 
	  Целое число, содержащее начальный индекс во входной строке соответствия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> 
	  Целое число, содержащее начальный индекс во входной строке соответствия.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedString"><apiName>matchedString</apiName><shortdesc>
	  Строка с подстрокой входной строки, соответствующая регулярному выражению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Строка с подстрокой входной строки, соответствующая регулярному выражению.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedSubstrings"><apiName>matchedSubstrings</apiName><shortdesc>
	  Массив строк, содержащий заключенные в скобки соответствия подстроки при их наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
	  Массив строк, содержащий заключенные в скобки соответствия подстроки при их наличии. Если соответствий подстроки не обнаружено, этот массив имеет длину 0. <codeph>matchedSubStrings[0]</codeph> используется для перехода к первому соответствию подстроки.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
  Класс ValidationResult содержит результаты проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ValidationResult содержит результаты проверки. 
 
  <p>Класс ValidationResultEvent определяет объект события, переданный прослушивателям событий средства проверки <codeph>valid</codeph> и <codeph>invalid</codeph>. Класс также определяет свойство <codeph>results</codeph>, содержащее массив объектов ValidationResult, по одному на каждое поле, проверяемому средством проверки. Это позволяет получить доступ к объектам ValidationResult из прослушивателя событий.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:ValidationResult:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
	  Конструктор
	 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc>Передача значения <codeph>true</codeph> в случае ошибки при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Имя подчиненного поля проверяемого объекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Код ошибки при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Сообщение об ошибке при проверке.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор
	 
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:ValidationResult:errorCode"><apiName>errorCode</apiName><shortdesc>
	  Код ошибки при проверке, если свойство isError имеет значение true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Код ошибки при проверке, если свойство <codeph>isError</codeph> имеет значение <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:errorMessage"><apiName>errorMessage</apiName><shortdesc>
	  Сообщение об ошибке при проверке, если свойство isError имеет значение true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Сообщение об ошибке при проверке, если свойство <codeph>isError</codeph> имеет значение <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:isError"><apiName>isError</apiName><shortdesc>
	  Имеет значение true, если поле вызвало сбой проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Имеет значение <codeph>true</codeph>, если поле вызвало сбой проверки.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:subField"><apiName>subField</apiName><shortdesc>
	  Имя подчиненного поля, с которым связан результат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя подчиненного поля, с которым связан результат. Некоторые средства проверки, например CreditCardValidator и DateValidator, проверяют несколько подчиненных полей одновременно.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidatorCardType"><apiName>CreditCardValidatorCardType</apiName><shortdesc>
  Класс CreditCardValidatorCardType определяет константы значений для определения типа проверяемой кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CreditCardValidatorCardType определяет константы значений для определения типа проверяемой кредитной карты. Эти значения используются в свойстве <codeph>CreditCardValidator.cardType</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidator"><linktext>mx.validators.CreditCardValidator</linktext></link></related-links><apiValue id="mx.validators:CreditCardValidatorCardType:AMERICAN_EXPRESS"><apiName>AMERICAN_EXPRESS</apiName><shortdesc>
	  Указывает тип карты, например American Express.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>American Express</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает тип карты, например American Express.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DINERS_CLUB"><apiName>DINERS_CLUB</apiName><shortdesc>
	  Указывает тип карты, например Diners Club.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Diners Club</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает тип карты, например Diners Club.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DISCOVER"><apiName>DISCOVER</apiName><shortdesc>
	  Указывает тип карты, например Discover.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Discover</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает тип карты, например Discover.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:MASTER_CARD"><apiName>MASTER_CARD</apiName><shortdesc>
	  Указывает тип карты, например MasterCard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>MasterCard</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает тип карты, например MasterCard.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:VISA"><apiName>VISA</apiName><shortdesc>
	  Указывает тип карты, например Visa.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Visa</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Указывает тип карты, например Visa.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:Validator"><apiName>Validator</apiName><shortdesc>
  Класс Validator является базовым классом для всех средств проверки Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Validator class defines the following tag attributes, 
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:Validator 
    enabled="true|false" 
    listener="<i>Value of the source property</i>" 
    property="<i>No default</i>" 
    required="true|false" 
    requiredFieldError="This field is required." 
    source="<i>No default</i>" 
    trigger="<i>Value of the source property</i>" 
    triggerEvent="valueCommit" 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseInterface>mx.validators:IValidator</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Validator является базовым классом для всех средств проверки Flex. В этом классе реализуется возможность средства проверки создавать требуемое поле, т.е. пользователь должен ввести значение в поле, либо проверка даст сбой.
 
  </apiDesc><example conref="SimpleValidatorExample.mxml"><swfblock conref="examples/SimpleValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link></related-links><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc> 
  Передается при сбое проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  Передается при сбое проверки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Передается при успешном завершении проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при успешном завершении проверки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.validators:Validator:Validator"><apiName>Validator</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:Validator:protected:addListenerHandler"><apiName>addListenerHandler</apiName><shortdesc>
      Настраивает все прослушиватели на события valid и invalid, передаваемые из средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Настраивает все прослушиватели на события <codeph>valid</codeph> и <codeph>invalid</codeph>, передаваемые из средства проверки. Подклассы класса Validator должны сначала вызвать метод <codeph>removeListenerHandler()</codeph>, а затем метод <codeph>addListenerHandler()</codeph>, если изменяется значение одного из прослушивателей или источников. Классы CreditCardValidator и DateValidator используют эту функцию на внутреннем уровне. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Выполняет логику проверки этого средства проверки, включая проверку ошибки из-за отсутствующего или пустого значения, определяемую значением свойства required.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Для недопустимого результата массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки со сбоем.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое значение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет логику проверки этого средства проверки, включая проверку ошибки из-за отсутствующего или пустого значения, определяемую значением свойства <codeph>required</codeph>.
     
      <p>При создании подкласса класса Validator следует переопределить этот метод. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiOperation id="mx.validators:Validator:protected:getValueFromSource"><apiName>getValueFromSource</apiName><shortdesc>
      Возвращает проверяемый объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Проверяемый объект.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает проверяемый объект. Подклассы, например классы CreditCardValidator и DateValidator, переопределяют этот метод, так как для них необходим доступ к значениям из нескольких подчиненных полей. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:handleResults"><apiName>handleResults</apiName><shortdesc>
      Возвращает ValidationResultEvent из массива результатов ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ValidationResultEvent, возвращенный с помощью метода <codeph>validate()</codeph>. 
      
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>errorResults</apiItemName><apiType value="Array"/><apiDesc>Массив объектов ValidationResult.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает ValidationResultEvent из массива результатов ошибки. Внутренне эта функция принимает результаты из метода <codeph>doValidation()</codeph> и помещает их в объект ValidationResultEvent. Подклассы, например класс RegExpValidator, должны переопределять эту функцию, если они выводят подкласс объектов ValidationResultEvent, таких как объекты RegExpValidationResult, и должны заполнять объект дополнительной информацией. Данная функция никогда не вызывается напрямую, поэтому частое переопределение функции не требуется. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:initialized"><apiName>initialized</apiName><shortdesc>
       Вызывается автоматически компилятором MXML при создании класса Validator с помощью тега MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Документ MXML, содержащий этот класс Validator.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Игнорируется.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Вызывается автоматически компилятором MXML при создании класса Validator с помощью тега MXML.  
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:isRealValue"><apiName>isRealValue</apiName><shortdesc>
      Возвращает true, если value не имеет значения null.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph>, если <codeph>value</codeph> не имеет значение null.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Тестируемое значение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph>, если <codeph>value</codeph> не имеет значения null. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:removeListenerHandler"><apiName>removeListenerHandler</apiName><shortdesc>
      Отключает все прослушиватели для событий valid и invalid, передаваемых из средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отключает все прослушиватели для событий <codeph>valid</codeph> и <codeph>invalid</codeph>, передаваемых из средства проверки. Подклассы должны сначала вызывать метод <codeph>removeListenerHandler()</codeph>, а затем метод <codeph>addListenerHandler</codeph> при изменении значения одного из прослушивателей или источников. Классы CreditCardValidator и DateValidator используют эту функцию на внутреннем уровне. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Этот метод вызывается при создании класса Validator и каждый раз при отправке ResourceManager события change для указания изменения локализованных ресурсов сходным образом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Этот метод вызывается при создании класса Validator и каждый раз при отправке ResourceManager события <codeph>change</codeph> для указания изменения локализованных ресурсов сходным образом.
     
      <p>Это событие передается при установке значения для свойства ResourceManager <codeph>localeChain</codeph> после завершения загрузки модуля ресурсов и при вызове метода ResourceManager <codeph>update()</codeph>.</p>
     
      <p>Подклассы должны отменять этот метод и после вызова <codeph>super.resourcesChanged()</codeph> выполнять соответствующую операцию в ответ на получение новых значений ресурсов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validateAll"><apiName>validateAll</apiName><shortdesc>
      Вызывает все средства проверки в массиве validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResultEvent, где массив содержит по одному объекту ValidationResultEvent на каждое средство проверки, выполненное с ошибкой. Массив пуст, если все средства проверки были выполнены успешно.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validators</apiItemName><apiType value="Array"/><apiDesc>Массив, содержащий выполняемые объекты класса Validator. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает все средства проверки в массиве <codeph>validators</codeph>. Возвращает массив, содержащий по одному объекту ValidationResultEvent на каждое средство проверки, выполненное с ошибкой. Возвращает пустой массив, если все средства проверки выполнены успешно. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validate"><apiName>validate</apiName><shortdesc>
      Выполняет проверку и дополнительно оповещает прослушиватели результата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект ValidationResultEvent, содержащий результаты проверки. В случае успешной проверки свойство массива <codeph>ValidationResultEvent.results</codeph> является пустым. В случае сбоя проверки свойство массива <codeph>ValidationResultEvent.results</codeph> содержит по одному объекту ValidationResult для каждого поля, проверяемого средством проверки, как для не прошедших, так и для прошедших проверку полей. Проверьте свойство <codeph>ValidationResult.isError</codeph> для определения успешного выполнения или сбоя проверки поля. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Необязательное проверяемое значение. Если null, средство проверки использует свойства <codeph>source</codeph> и <codeph>property</codeph> для определения значения. При определении этого аргумента следует также настроить свойство <codeph>listener</codeph> для определения целевого компонента любых сообщений об ошибках, возникающих при проверке.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение <codeph>false</codeph>, после проверки средство проверки оповещает прослушиватель результата.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет проверку и дополнительно оповещает прослушиватели результата. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:Validator:protected:DECIMAL_DIGITS"><apiName>DECIMAL_DIGITS</apiName><shortdesc>
      Строка, содержащая десятичные цифры от 0 до 9.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>0123456789</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Строка, содержащая десятичные цифры от 0 до 9.    
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:ROMAN_LETTERS"><apiName>ROMAN_LETTERS</apiName><shortdesc>
      Строка, содержащая буквы верхнего и нижнего регистра римского алфавита (от A до Z и от a до z).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Строка, содержащая буквы верхнего и нижнего регистра римского алфавита (от A до Z и от a до z).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:required"><apiName>required</apiName><shortdesc>
      Значение true указывает на то, что ошибка проверки вызвана отсутствующим или пустым значением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение <codeph>true</codeph> указывает на то, что ошибка проверки вызвана отсутствующим или пустым значением. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:subFields"><apiName>subFields</apiName><shortdesc>
      Массив строк, содержащий имена свойств из объекта value, переданного в метод validate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      Массив строк, содержащий имена свойств из объекта <codeph>value</codeph>, переданного в метод <codeph>validate()</codeph>. Например, CreditCardValidator определяет это свойство значениями <codeph>[ "cardNumber", "cardType" ]</codeph>. Это значение означает, что объект <codeph>value</codeph>, передаваемый в метод <codeph>validate()</codeph> должен содержать свойство <codeph>cardNumber</codeph> и <codeph>cardType</codeph>. 
     
      <p>Подклассы класса Validator, проверяющие несколько полей данных (например, CreditCardValidator и DateValidator) должны назначать это свойство в своем конструкторе. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualListeners:get"><apiName>actualListeners</apiName><shortdesc>
      Содержит массив объектов прослушивателей при их наличии или исходный объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Содержит массив объектов прослушивателей при их наличии или исходный объект. Используется для определения объекта, который необходимо оповестить о результате проверки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualTrigger:get"><apiName>actualTrigger</apiName><shortdesc>
      Содержит объект-триггер при его наличии или исходный объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Содержит объект-триггер при его наличии или исходный объект. Используется для определения объекта прослушивателя для <codeph>triggerEvent</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:enabled:get"><apiName>enabled</apiName><shortdesc> 
      Установка этого значения на false помешает выполнению проверки средством проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Установка этого значения на <codeph>false</codeph> помешает выполнению проверки средством проверки. Если средство проверки отключено, оно не передает события, а метод <codeph>validate()</codeph> возвращает значение null.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:listener:get"><apiName>listener</apiName><shortdesc>
      Указывает прослушиватель проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Указывает прослушиватель проверки.
     
      <p>Если прослушиватель не указан, Flex использует значение свойства <codeph>source</codeph>. После определения Flex исходного компонента изменяется цвет границы компонента, появляется сообщение об ошибке в результате сбоя или скрывается любое существующее сообщение об успешной проверке.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:property:get"><apiName>property</apiName><shortdesc>
      Строка с именем свойства для объекта source, содержащего проверяемое значение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Строка с именем свойства для объекта <codeph>source</codeph>, содержащего проверяемое значение. Это свойство является необязательным, но при указании <codeph>source</codeph> требуется также установить значение для этого свойства.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:requiredFieldError:get"><apiName>requiredFieldError</apiName><shortdesc>
      Сообщение об ошибке, если значение отсутствует, а свойство required имеет значение true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This field is required."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Сообщение об ошибке, если значение отсутствует, а свойство <codeph>required</codeph> имеет значение <codeph>true</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc conref="mx.core.UIComponent#resourceManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#resourceManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:source:get"><apiName>source</apiName><shortdesc>
      Указывает объект, содержащий проверяемое свойство.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает объект, содержащий проверяемое свойство. Определяет данный элемент как экземпляр компонента или модель данных. Синтаксис связывания данных в MXML используется для определения значения. Это свойство поддерживает разделенные точкой строки для определения вложенных свойств. Если указано значение свойства <codeph>source</codeph>, требуется также определить значение свойства <codeph>property</codeph>. Свойство <codeph>source</codeph> является необязательным.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Указывает запускающее проверку событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает запускающее проверку событие. Если оно опущено, Flex использует событие <codeph>valueCommit</codeph>. Flex передает событие <codeph>valueCommit</codeph>, если пользователь выполняет ввод данных в элемент управления. Обычно происходит при удалении пользователем фокуса из компонента или при программном изменении значения свойства. При необходимости игнорирования средством проверки всех событий установите <codeph>triggerEvent</codeph> как пустую строку ("").
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:trigger:get"><apiName>trigger</apiName><shortdesc>
      Указывает компонент, генерирующий запускающее средство проверки событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Указывает компонент, генерирующий запускающее средство проверки событие. Если он опущен, по умолчанию Flex использует значение свойства <codeph>source</codeph>. Если <codeph>trigger</codeph> передает <codeph>triggerEvent</codeph>, проверка выполняется. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
  Класс CreditCardValidator проверяет длину номера кредитной карточки, правильный префикс и передачу алгоритма Luhn mod10 для указанного типа карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CreditCardValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:CreditCardValidator
    allowedFormatChars=" -" 
    cardNumberListener="<i>Object specified by cardNumberSource</i>"
    cardNumberProperty="<i>No default</i>"
    cardNumberSource="<i>No default</i>"
    cardTypeListener="<i>Object specified by cardTypeSource</i>"
    cardTypeProperty="<i>No default</i>"
    cardTypeSource="<i>No default</i>"
    invalidCharError= "Invalid characters in your credit card number. (Enter numbers only.)"
    invalidNumberError="The credit card number is invalid." 
    noNumError="No credit card number is specified."
    noTypeError="No credit card type is specified or the type is not valid." 
    wrongLengthError="Your credit card number contains the wrong number of digits." 
    wrongTypeError="Incorrect card type is specified." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CreditCardValidator проверяет длину номера кредитной карточки, правильный префикс и передачу алгоритма Luhn mod10 для указанного типа карты. Это средство проверки не проверяет фактическое существование активного счета кредитной карты.
 
  <p>Указать вводимые данные в CreditCardValidator можно двумя способами:</p>
  <ul>
    <li>Используйте свойства <codeph>cardNumberSource</codeph> и <codeph>cardNumberProperty</codeph> для определения местоположения номера кредитной карты и свойства <codeph>cardTypeSource</codeph> и <codeph>cardTypeProperty</codeph> для определения местоположения типа проверяемой кредитной карты.</li>
    <li>Используйте свойства <codeph>source</codeph> и <codeph>property</codeph> для определения одного объекта. Объект должен содержать следующие поля:
    <ul>
        <li><codeph>cardType</codeph>: указывает тип проверяемой кредитной карты. 
         <p>В MXML используются значения: <codeph>American Express</codeph>, <codeph>Diners Club</codeph>, <codeph>Discover</codeph>, <codeph>MasterCard</codeph> или <codeph>Visa</codeph>.</p>
         <p>В ActionScript используются статические константы <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph> или <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph> <codeph>CreditCardValidatorCardType.DISCOVER</codeph> или <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</p>
          </li>
       <li><codeph>cardNumber</codeph>: указывает номер проверяемой карты.</li>
     </ul>
    </li>
  </ul>
  
  <p>Для выполнения проверки используются следующие рекомендации:</p>
  <p>Длина:</p>
  <ol>
    <li>Visa: 13 или 16 цифр</li> 
    <li>MasterCard: 16 цифр</li> 
    <li>Discover: 16 цифр</li> 
    <li>American Express: 15 цифр</li> 
    <li>Diners Club: 14 цифр или 16 цифр, если она функционирует так же, как MasterCard</li>
  </ol>
  Префикс:
  <ol>
    <li>Visa: 4</li> 
    <li>MasterCard: 51 – 55</li>
    <li>Discover: 6011</li>
    <li>American Express: 34 или 37</li>
    <li>Diners Club: 300 – 305, 36 или 38, 51 – 55</li>
  </ol>
  
  </apiDesc><example conref="CreditCardValidatorExample.mxml"><swfblock conref="examples/CreditCardValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links><apiConstructor id="mx.validators:CreditCardValidator:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CreditCardValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределяет метод базового класса doValidation() для проверки номера кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>проверяемый объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределяет метод базового класса <codeph>doValidation()</codeph> для проверки номера кредитной карты.
	 
	  <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CreditCardValidator:validateCreditCard"><apiName>validateCreditCard</apiName><shortdesc>
	  Удобный метод для выполнения вызова средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CreditCardValidator</apiOperationClassifier><apiDesc>Экземпляр CreditCardValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле, которое должно содержать следующие поля:
	  <ul>
	    <li><codeph>cardType</codeph>: указывает тип проверяемой кредитной карты. Используемые статические константы <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> или <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</li>
	    <li><codeph>cardNumber</codeph>: указывает номер проверяемой карты.</li></ul>
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре value. Например, если параметр <codeph>value</codeph> имеет значение value.date, то <codeph>baseField</codeph> имеет значение date.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Удобный метод для выполнения вызова средства проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CreditCardValidator:cardNumberProperty"><apiName>cardNumberProperty</apiName><shortdesc>
	  Имя свойства проверяемой кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя свойства проверяемой кредитной карты. Этот атрибут является необязательным, но если указано свойство <codeph>cardNumberSource</codeph>, следует указать также и это свойство.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeProperty"><apiName>cardTypeProperty</apiName><shortdesc>
	  Имя свойства проверяемого типа карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя свойства проверяемого типа карты. Этот атрибут является необязательным, но если определено свойство <codeph>cardTypeSource</codeph>, следует также указать это свойство.
	 
      <p>В MXML допустимыми значениями являются:</p>
      <ul>
        <li><codeph>American Express</codeph></li>
        <li><codeph>Diners Club</codeph></li>
        <li><codeph>Discover</codeph></li>
        <li><codeph>MasterCard</codeph></li>
        <li><codeph>Visa</codeph></li>
      </ul>
	 
	  <p>В ActionScript для определения этого свойства можно использовать следующие константы:</p>
	  <p><codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph>, <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph> и <codeph>CreditCardValidatorCardType.VISA</codeph>.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links></apiValue><apiValue id="mx.validators:CreditCardValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Набор символов форматирования, допустимых в поле cardNumber.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -" (space and dash)
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Набор символов форматирования, допустимых в поле <codeph>cardNumber</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberListener:get"><apiName>cardNumberListener</apiName><shortdesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля карты. Если он не указан, используется значение, указанное в свойстве <codeph>cardNumberSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberSource:get"><apiName>cardNumberSource</apiName><shortdesc> 
	  Объект, содержащий значение поля номера карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Объект, содержащий значение поля номера карты. Если для этого свойства указано значение, следует также определить значение свойства <codeph>cardNumberProperty</codeph>. Не используйте это свойство, если определены свойства <codeph>source</codeph> и <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeListener:get"><apiName>cardTypeListener</apiName><shortdesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля типа карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Компонент, прослушивающий результат проверки подчиненного поля типа карты. Если он не указан, то используется значение, указанное в свойстве <codeph>cardTypeSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeSource:get"><apiName>cardTypeSource</apiName><shortdesc> 
	  Объект, содержащий значение поля типа карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Объект, содержащий значение поля типа карты. Если для этого свойства указано значение, следует также определить значение свойства <codeph>cardTypeProperty</codeph>. Не используйте это свойство, если определены свойства <codeph>source</codeph> и <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении поля cardNumber с недопустимыми символами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your credit card number. (Enter numbers only.)"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении поля <codeph>cardNumber</codeph> с недопустимыми символами.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidNumberError:get"><apiName>invalidNumberError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении недопустимого номера кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The credit card number is invalid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении недопустимого номера кредитной карты.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noNumError:get"><apiName>noNumError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении пустого поля cardNumber.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card number is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении пустого поля <codeph>cardNumber</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noTypeError:get"><apiName>noTypeError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении пустого поля cardType.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card type is specified or the type is not valid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении пустого поля <codeph>cardType</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении поля cardNumber с неправильным количеством цифр для указанного типа кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your credit card number contains the wrong number of digits." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении поля <codeph>cardNumber</codeph> с неправильным количеством цифр для указанного типа кредитной карты.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongTypeError:get"><apiName>wrongTypeError</apiName><shortdesc> 
	  Сообщение об ошибке при обнаружении поля cardType с недопустимым типом кредитной карты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Incorrect card type is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Сообщение об ошибке при обнаружении поля <codeph>cardType</codeph> с недопустимым типом кредитной карты. Для поля <codeph>cardType</codeph> следует использовать предопределенные константы: <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> или <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
  Класс SocialSecurityValidator проверяет допустимость номера социального страхования США в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SocialSecurityValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:SocialSecurityValidator
    allowedFormatChars=" -"
    invalidCharError="You entered invalid characters in your Social Security number."
    wrongFormatError="The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
    zeroStartError="Invalid Social Security number; the number cannot start with 000."
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SocialSecurityValidator проверяет допустимость номера социального страхования США в строке. При этом фактическое существование номера социального страхования не проверяется.
 
  </apiDesc><example conref="SocialSecurityValidatorExample.mxml"><swfblock conref="examples/SocialSecurityValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:SocialSecurityValidator:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:SocialSecurityValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Переопределения метода базового класса doValidation() для проверки номера социального страхования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки.
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемый объект.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переопределения метода базового класса <codeph>doValidation()</codeph> для проверки номера социального страхования.
     
	  <p>Этот метод не вызывается напрямую; Flex вызывает его как часть выполнения проверки. Этот метод необходимо реализовывать при создании пользовательского класса Validator.</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:SocialSecurityValidator:validateSocialSecurity"><apiName>validateSocialSecurity</apiName><shortdesc>
	  Удобный метод для выполнения вызова средства проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Массив объектов ValidationResult с одним объектом ValidationResult для каждого поля, проверенного средством проверки.
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:SocialSecurityValidator</apiOperationClassifier><apiDesc>Экземпляр SocialSecurityValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Проверяемое поле.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Текстовое представление подчиненного поля определяется в параметре <codeph>value</codeph>. Например, если параметр <codeph>value</codeph> имеет значение value.social, то <codeph>baseField</codeph> имеет значение <codeph>social</codeph>.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Удобный метод для выполнения вызова средства проверки. Каждое стандартное средство проверки Flex имеет подобный удобный метод.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:SocialSecurityValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc>
	  Определяет набор допускаемых для ввода символов форматирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+" // ?????
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Определяет набор допускаемых для ввода символов форматирования.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении значения, содержащего символы, отличные от цифр и определенных в свойстве allowedFormatChars символов форматирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"You entered invalid characters in your Social Security number."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении значения, содержащего символы, отличные от цифр и определенных в свойстве <codeph>allowedFormatChars</codeph> символов форматирования.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:wrongFormatError:get"><apiName>wrongFormatError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении неправильно отформатированного значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении неправильно отформатированного значения.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:zeroStartError:get"><apiName>zeroStartError</apiName><shortdesc>
	  Сообщение об ошибке при обнаружении значения, содержащего недопустимый номер социального страхования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid Social Security number; the number cannot start with 000."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Сообщение об ошибке при обнаружении значения, содержащего недопустимый номер социального страхования.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidatorListener"><apiName>IValidatorListener</apiName><shortdesc>
  Интерфейс, компоненты которого реализуются для поддержки механизма проверки данных Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс, компоненты которого реализуются для поддержки механизма проверки данных Flex. Этот интерфейс реализуется классом UIComponent. Поэтому он реализуется также любым подклассом UIComponent.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
	  Обрабатывает события valid и invalid из средства проверки, назначенного этому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Объект события для проверки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Обрабатывает события <codeph>valid</codeph> и <codeph>invalid</codeph> из средства проверки, назначенного этому компоненту.  
	 
	  <p>Обычно обрабатываются события <codeph>valid</codeph> и <codeph>invalid</codeph>, передаваемые средству проверки путем присвоения прослушивателей событий средствам проверки. Если требуется обработка событий проверки непосредственно в проверяемом компоненте, этот метод можно переопределить для обработки событий <codeph>valid</codeph> и <codeph>invalid</codeph>. В реализации можно использовать метод <codeph>dispatchEvent()</codeph> для передачи событий <codeph>valid</codeph> и <codeph>invalid</codeph> в случае прослушивания событий средством проверки.</p>
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:errorString:get"><apiName>errorString</apiName><shortdesc>
      Текст, отображаемый рекомендацией ошибки компонента при контроле компонента классом Validator и сбое проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Текст, отображаемый рекомендацией ошибки компонента при контроле компонента классом Validator и сбое проверки.
     
      <p>Можно использовать свойство <codeph>errorString</codeph> для определения ошибки при проверке для компонента без фактического использования класса Validator. При записи строкового значения в свойство <codeph>errorString</codeph> Flex выводит красную рамку вокруг компонента для индикации ошибки при проверке, а при наведении курсора мыши на компонент строка появляется во всплывающей подсказке как сообщение об ошибке при проверке, как при обнаружении средством проверки ошибки при проверке.</p>
     
      <p>Для удаления ошибки при проверке запишите пустую строку «» в свойство <codeph>errorString</codeph>.</p>
     
      <p>Обратите внимание, что запись значения в свойство <codeph>errorString</codeph> не запускает событие valid или invalid; изменяется только цвет границы и появляется сообщение об ошибке при проверке.</p>
 	  
 	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
	  Используется средством проверки для присвоения подчиненного поля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Используется средством проверки для присвоения подчиненного поля.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>