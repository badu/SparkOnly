<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.collections"><apiName>mx.collections</apiName><apiDetail/><apiClassifier id="mx.collections:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
  Класс ItemResponder обеспечивает реализацию по умолчанию интерфейса mx.rpc.IResponder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.rpc:IResponder</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ItemResponder обеспечивает реализацию по умолчанию интерфейса <codeph>mx.rpc.IResponder</codeph>. Он представляет собой ответчик, позволяющий указывать методы, вызываемые при завершении запроса, вне зависимости от его успешности. Объект класса также позволяет предоставлять данные (маркер), используемые методами ответчика.
 
 <p>При использовании объекта <codeph>ItemResponder</codeph> в операторе <codeph>catch</codeph> блока try можно получить удаленные данные, как это показано в следующем коде:</p>
 
  <pre><codeph>
     import mx.collections.ItemResponder;
     //...
 
     try
     {
        //...
        cursor.moveNext();
     }
    catch(e:ItemPendingError)
     {
        e.addResponder(new ItemResponder(myResultFunction, myFaultFunction, {info:"..."}));
     }
  </codeph></pre>
 
  <p>Указанный метод результата должен иметь следующую подпись:</p>
 
  <codeph><pre>
     public function myResultFunction(result:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>Указанный метод ошибки должен иметь следующую подпись:</p>
 
  <codeph><pre>
     public function myFaultFunction(error:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>Использование любой другой подписи приведет к ошибке во время выполнения.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links><apiConstructor id="mx.collections:ItemResponder:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
	  Создает экземпляр ответчика с указанными данными и обработчиками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>result</apiItemName><apiType value="Function"/><apiDesc>Функция, которую требуется вызывать при успешном выполнении запроса. При этом требуется следующая подпись: <codeph><pre>
	     		    public function (result:Object, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>fault</apiItemName><apiType value="Function"/><apiDesc>Функция, которую требуется вызывать при выполнении запроса с ошибками. При этом требуется следующая подпись: <codeph><pre>
	     		    public function (error:ErrorMessage, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>token</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Дополнительная информация [не обязательно] об объекте для связи с этим запросом. Этот объект передается в функции результата и ошибки в качестве второго параметра.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Создает экземпляр ответчика с указанными данными и обработчиками.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ItemResponder:fault"><apiName>fault</apiName><shortdesc>
	  Этот метод вызывается службой при получении ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий информацию об ошибке.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Этот метод вызывается службой при получении ошибки.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ItemResponder:result"><apiName>result</apiName><shortdesc>
	  Этот метод вызывается службой при получении возвращаемого значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий информацию, возвращенную из запроса.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Этот метод вызывается службой при получении возвращаемого значения.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.collections:Sort"><apiName>Sort</apiName><shortdesc>
  Предоставляет информацию о сортировке, необходимую для сортировки в существующем представлении (интерфейс ICollectionView или класс, реализующий интерфейс).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:Sort" replacement="spark.collections.Sort" since="4.5">
	</Alternative><DefaultProperty name="fields"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sort&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:Sort
  <b>Properties</b>
  compareFunction="<em>Internal compare function</em>"
  fields="null"
  unique="false | true"
  /&gt;
  </pre>
 
  <p>In case items have inconsistent data types or items have complex data 
  types, the use of the default built-in compare functions is not recommended.
  Inconsistent sorting results may occur in such cases. To avoid such problem,
  provide a custom compare function and/or make the item types consistent.</p>
 
  <p>Just like any other <code>AdvancedStyleClient</code>-based classes, 
  the <code>Sort</code> and <code>SortField</code> classes do not have a 
  parent-child relationship in terms of event handling. Locale changes in a 
  <code>Sort</code> instance are not dispatched to its <code>SortField</code> 
  instances automatically. The only exceptional case is the internal default 
  <code>SortField</code> instance used when no explicit fields are provided.
  In this case, the internal default <code>SortField</code> instance follows 
  the locale style that the owner <code>Sort</code> instance has.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISort</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Предоставляет информацию о сортировке, необходимую для сортировки в существующем представлении (интерфейс ICollectionView или класс, реализующий интерфейс). После назначения экземпляра сортировки свойству представления <codeph>sort</codeph> следует вызвать метод представления <codeph>refresh()</codeph> для применения критериев сортировки. Обычно сортировка определяется для коллекций составных элементов, т.е. для коллекций, в которых сортировка выполняется для одного или более свойств объектов коллекции. В следующем примере показано использование этого свойства:
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     // In the real world, the collection would have more than one item.
     col.addItem({first:"Anders", last:"Dickerson"});
     // Create the Sort instance.
     var sort:Sort = new Sort();
     // Set the sort field; sort on the last name first, first name second.
     // Both fields are case-insensitive.
     sort.fields = [new SortField("last",true), new SortField("first",true)];
       // Assign the Sort object to the view.
     col.sort = sort;
     // Apply the sort to the collection.
     col.refresh();
  </codeph></pre>
 
  <p>Возможны ситуации, в которых коллекция содержит простые элементы, подобные <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph> и т. д. В этом случае следует применять сортировку непосредственно к простому типу. При создании сортировки для простых элементов следует использовать отдельное поле сортировки и указать (первый) параметр <codeph>name</codeph> как <codeph>null</codeph> в конструкторе объектов SortField. Например:
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     // There is only one sort field, so use a <codeph>null</codeph> 
     // first parameter.
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
     col.refresh();
  </codeph></pre>
  </p>
 
  <p>В реализациях Flex интерфейса ICollectionView все элементы извлекаются из удаленного местоположения перед выполнением сортировки. При использовании подкачки страниц с сортированным списком к удаленной коллекции перед извлечением данных следует применить сортировку.
  </p>
 
  <p>По умолчанию этот класс Sort не обеспечивает правильную языковую сортировку для строк. Для получения информации об этом типе сортировки см. описание классов <codeph>spark.collections.Sort</codeph> и <codeph>spark.collections.SortField</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:Sort:Sort"><apiName>Sort</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Создает новую сортировку без установленных полей и пользовательского устройства сравнения.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:Sort:findItem"><apiName>findItem</apiName><shortdesc>
      
      Поиск указанного объекта в пределах указанного массива (или места вставки при запросе); при обнаружении возвращается индекс, в противном случае – -1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>int Индекс в массиве найденного элемента. Если параметр <codeph>returnInsertionIndex</codeph> равен <codeph>false</codeph> и элемент не найден, возвращает -1. Если параметр <codeph>returnInsertionIndex</codeph> равен <codeph>true</codeph> и элемент не найден, возвращает индекс точки в сортированном массиве, где следует вставить значения.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Массив, в пределах которого выполняется поиск.
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий свойства для поиска (или сам объект для поиска). Объект должен состоять из пар «имя/значение поля», в которых имена полей определяются свойством <codeph>fields</codeph> в порядке их использования в этом свойстве. Необязательно перечислять все поля свойства <codeph>fields</codeph>, однако поле не может быть пропущено в последовательности. Поэтому если в свойстве <codeph>fields</codeph> перечисляются три поля, то можно указать только первое и второе поля, но нельзя указать первое и третье, пропустив второе.
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>Строка, содержащая тип нахождения для выполнения. Допустимые значения:
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>Возвращает любую позицию, которая является допустимой для этих значений.</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>Возвращает позицию, где найдено первое вхождение значений.</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>Возвращает позицию, где произошло последнее вхождение указанных значений.
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если метод не находит элемент, идентифицируемый параметром <codeph>values</codeph>, и этот параметр равен <codeph>true</codeph>, метод <codeph>findItem()</codeph> возвращает место вставки для значений, которое в сортированной последовательности является точкой вставки элемента.
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>функция устройства сравнения для использования при нахождении элемента. Если этот параметр не определен или указано значение <codeph>null</codeph>, функция <codeph>findItem()</codeph> использует функцию compare, определенную <codeph>ISort</codeph> в свойстве <codeph>compareFunction</codeph> экземпляра, с передачей данных в массив полей, которые определены объектом значений и текущим <codeph>SortFields</codeph>. Если указано ненулевое значение, функция <codeph>findItem()</codeph> использует его как функцию compare. Для функции, передаваемой как <codeph>compareFunction</codeph>, необходимо указать следующую подпись: <codeph>function myCompareFunction(a:Object, b:Object):int</codeph>. Обратите внимание, что в отличие от функции compare для свойства <codeph>ISort.compareFunction()</codeph> отсутствует третий аргумент.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Поиск указанного объекта в пределах определенного массива (или места вставки при запросе); при обнаружении возвращается индекс, в противном случае – -1. Используемые в классе <codeph>ListCollectionView</codeph> методы <codeph>find<i>xxx</i>()</codeph> применяют этот способ для определения запрашиваемого элемента. Как правило, проще использовать эти функции вместо <codeph>findItem()</codeph> для поиска данных в объектах на основе <codeph>ListCollectionView</codeph>. Метод <codeph>findItem()</codeph> можно вызвать непосредственно при создании класса, например новой реализации <codeph>ICollectionView</codeph>, который поддерживает сортировку. Перед вызовом этой функции необходимо выполнить сортировку входного массива элементов. В противном случае эта функция не сможет правильно определить указанное значение.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      
      Возвращает значение, показывающее используется ли указанное свойство для управления сортировкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Может ли значение свойства влиять на результат сортировки. Если при сортировке используется функция compareFunction, установленная по умолчанию, метод возвращает значение <codeph>true</codeph>, если параметр <codeph>property</codeph> определяет поле сортировки. Если сортировка или любой <codeph>ISortField</codeph> использует неизвестное пользовательское устройство сравнения, возвращается значение <codeph>true</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Имя тестируемого поля.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает значение, показывающее используется ли указанное свойство для управления сортировкой. Если сортировка использует пользовательское средство сравнения, то функция не может определить окончательный ответ и всегда возвращает значение <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:reverse"><apiName>reverse</apiName><shortdesc>
      
      Проходит через массив fields и вызывает reverse() для каждого объекта ISortField в массиве.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Проходит через массив <codeph>fields</codeph> и вызывает <codeph>reverse()</codeph> для каждого объекта <codeph>ISortField</codeph> в массиве. Поле по нисходящей теперь становится полем по восходящей и наоборот.
     
      <p>Примечание. <codeph>ICollectionView</codeph> не обновляется автоматически при изменении объектов в массиве <codeph>fields</codeph>; для обновления представления следует вызвать метод <codeph>refresh()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:sort"><apiName>sort</apiName><shortdesc>
      
      Применяет текущую сортировку к указанному массиву (не копии).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Массив сортируемых элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Применяет текущую сортировку к указанному массиву (не копии). Для предотвращения изменения массива следует создать копию в параметре <codeph>items</codeph>.
     
      <p>Реализации <codeph>ICollectionView</codeph> в Flex автоматически вызывают метод <codeph>sort</codeph> и обеспечивают выполнение сортировки в копии основных данных.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:Sort:ANY_INDEX_MODE"><apiName>ANY_INDEX_MODE</apiName><shortdesc>
      При нахождении возвращает индекс любого соответствующего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
      При нахождении возвращает индекс любого соответствующего элемента.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:FIRST_INDEX_MODE"><apiName>FIRST_INDEX_MODE</apiName><shortdesc>
      При выполнении поиска возвращает индекс первого совпадающего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>first</apiData><apiType value="String"/></apiValueDef><apiDesc>
      При выполнении поиска возвращает индекс первого совпадающего элемента.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:LAST_INDEX_MODE"><apiName>LAST_INDEX_MODE</apiName><shortdesc>
      При выполнении поиска возвращает индекс последнего совпадающего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>last</apiData><apiType value="String"/></apiValueDef><apiDesc>
      При выполнении поиска возвращает индекс последнего совпадающего элемента.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      
      Метод, используемый для сравнения элементов при сортировке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      Метод, используемый для сравнения элементов при сортировке. При указании этого свойства Flex игнорирует любые свойства <codeph>compareFunction</codeph>, которые указаны в объектах <codeph>ISortField</codeph>, используемых в этом классе.
     
      <p>Функция сравнения должна иметь следующую подпись:</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>Эта функция должна возвращать следующее значение:
      <ul>
            <li>-1, если в отсортированной последовательности <codeph>объект А</codeph> должен предшествовать <codeph>объекту B</codeph>.</li>
            <li>0, если <codeph>объект А</codeph> совпадает с <codeph>объектом B</codeph>.</li>
            <li>1, если в отсортированной последовательности <codeph>объект А</codeph> должен следовать за <codeph>объектом B</codeph>. </li>
      </ul></p>
      <p>Для возврата к внутренней функции сравнения установите значение <codeph>null</codeph>.</p>
      <p>
      Массив <codeph>fields</codeph> указывает поля объекта для сравнения. Как правило, алгоритм сравнивает свойства до тех пор, пока не будет исчерпан список полей или не будет возвращено ненулевое значение. Например:</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>Значение по умолчанию представляет собой внутреннюю функцию сравнения, которая может выполнять сравнение строк, чисел или дат в восходящем или нисходящем порядке. Собственную функцию следует указывать только в том случае, если необходим пользовательский алгоритм сравнения. Обычно он применяется только в том только случае, если в отображении используется вычисленное поле.</p>
     
      <p>Также для каждого поля сортировки можно указать отдельную функцию сравнения с помощью используемого в классе <codeph>ISortField</codeph> свойства <codeph>compareFunction</codeph>. При этом для одних полей используется сравнение по умолчанию, а для других - пользовательское сравнение.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:fields:get"><apiName>fields</apiName><shortdesc>
      
      Массив объектов ISortField, указывающий поля для сравнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="fieldsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      <codeph>Массив</codeph> объектов <codeph>ISortField</codeph>, указывающих поля для сравнения. Порядок объектов ISortField в массиве определяет приоритетный порядок полей при сортировке. Устройство сравнения сортировки по умолчанию проверяет поля сортировки в порядке массива, пока не определит порядок сортировки для двух сравниваемых полей.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#SortField"><linktext>SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:Sort:unique:get"><apiName>unique</apiName><shortdesc>
      
      Указывает, должна ли сортировка быть уникальной.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Указывает, должна ли сортировка быть уникальной. Уникальная сортировка завершается ошибкой, если какое-либо значение или объединенное значение, указанные в полях, перечисленных в свойствах полей, приводят к неопределенной или неуникальной последовательности сортировки, т. е. если два и более элемента имеют идентичные значения полей сортировки. Если сортировка не является уникальной, вызывается ошибка. Логика сортировки использует значение свойства <codeph>unique</codeph> только в случае, когда поля сортировки указаны явным образом. Если ни одно из полей сортировки не указано явным образом, ошибка не выводится даже при наличии элементов с идентичными значениями.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISortField"><apiName>ISortField</apiName><shortdesc>
  Интерфейс ISortField определяет интерфейс для классов, которые используются с классами ISort и предоставляет информацию, необходимую для сортировки определенных полей или свойств в представлении коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс <codeph>ISortField</codeph> определяет интерфейс для классов, которые используются с классами <codeph>ISort</codeph> и предоставляет информацию, необходимую для сортировки определенных полей или свойств в представлении коллекции.
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      Вспомогательная функция, которую вызывает класс Sort, чтобы установить функцию сравнения по умолчанию для сравнений на основе одного из трех условий, определяющих была ли установлена пользовательская функция, тип данных для определенного поля или значение числового свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Объект , содержащий данные. Если для указания имени поля использовалось свойство Name, то это имя будет использоваться для доступа к значению данных из этого объекта. В противном случае в качестве значения данных будет использован непосредственный объект.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вспомогательная функция, которую вызывает класс <codeph>Sort</codeph>, чтобы установить функцию сравнения по умолчанию для сравнений на основе одного из трех условий, определяющих была ли установлена пользовательская функция, тип данных для определенного поля или значение числового свойства. Если свойство <codeph>numeric</codeph> имеет значение true, то при сортировке будет выполняться числовое сравнение.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:reverse"><apiName>reverse</apiName><shortdesc>
      Задает обратный порядок критериев для данного поля сортировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Задает обратный порядок критериев для данного поля сортировки. Например, если поле сортировалось в порядке убывания, оно будет отсортировано в порядке возрастания.
           <p>ПРИМЕЧАНИЕ. <codeph>ICollectionView</codeph> не обновляется автоматически при изменении <codeph>ISortFields</codeph>; для обновления представления следует вызвать метод <codeph>refresh()</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISortField:mx.collections:ISortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph/><codeph/> Другое использование этого свойства не поддерживается. Возвращает -1, если ISortField не может использоваться в классе <codeph>Sort</codeph> для сортировки поля (отсутствует compareFunction или имя). В противном случае возвращает битовую маску параметров сортировки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Функция, сравнивающая два элемента при сортировке элементов для связанной коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, сравнивающая два элемента при сортировке элементов для связанной коллекции. При указании свойства <codeph>compareFunction</codeph> для объекта ISort Flex игнорирует любые свойства <codeph>compareFunction</codeph> объектов ISortField в ISort.
      <p>Функция сравнения должна иметь следующую подпись:</p>
           <p><codeph>функция myCompare(a:Object, b:Object):int</codeph></p>
           <p>Эта функция возвращает следующие значения:</p>
            <ul>
            <li>-1, если <codeph>a</codeph> должно появиться до <codeph>b</codeph> в сортированной последовательности;</li>
            <li>0, если <codeph>a</codeph> равно <codeph>b</codeph>;</li>
            <li>1, если <codeph>a</codeph> должно появиться после <codeph>b</codeph> в сортированной последовательности.</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:descending:get"><apiName>descending</apiName><shortdesc>
      Указывает, следует ли сортировать данное поле в порядке убывания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Указывает, следует ли сортировать данное поле в порядке убывания.
           <p>Значение по умолчанию равно <codeph>false</codeph> (в порядке возрастания).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:name:get"><apiName>name</apiName><shortdesc>
      Имя поля для сортировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Имя поля для сортировки.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      Указывает, что если сортируемое поле содержит числовые значения (number/int/uint) или строковые представления числовых значений, то средство сравнения использует числовое сравнение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
           </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, что если сортируемое поле содержит числовые значения (<codeph>number/int/uint</codeph>) или строковые представления числовых значений, то средство сравнения использует числовое сравнение.
      <p>
      Это свойство используется в классе <codeph>SortField</codeph>, если не указана пользовательская функция сравнения.
      </p>
      <p>
      Если для этого свойства установлено значение <codeph>true</codeph>, то используется встроенная функция числового сравнения. Перед сравнением каждому элементу данных присваивается функция <codeph>Number()</codeph>.
      </p>
      <p>
      Если для этого свойства установлено значение <codeph>false</codeph>, то используется встроенная функция сравнения строк. Перед сравнением каждому элементу данных присваивается функция <codeph>String()</codeph>.
      </p>
      <p>
      Если это свойство равно <codeph>null</codeph>, то анализируется первый элемент данных для определения, является он числом или строкой, после чего сортировка продолжается на основании этого анализа.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      True, если для ISortField указана пользовательская функция средства сравнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><compareFunction>      </compareFunction></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True, если <codeph>ISortField</codeph> использует пользовательскую функцию средства сравнения.
           </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayList"><apiName>ArrayList</apiName><shortdesc>
  Класс ArrayList представляет собой простую реализацию IList, которая использует вспомогательный массив в качестве источника данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ArrayList представляет собой простую реализацию IList, которая использует вспомогательный массив в качестве источника данных. Использование и обработка элементов вспомогательного массива осуществляется посредством методов и свойств интерфейса <codeph>IList</codeph>. Операции с экземпляром ArrayList изменяют источник данных; например, при использовании метода <codeph>removeItemAt()</codeph> в ArrayList элемент удаляется из основного массива. Этот базовый класс не генерирует ItemPendingErrors, однако такие ошибки могут генерироваться подклассом.
 
  <pre>
  &lt;mx:ArrayList
  <b>Properties</b>
  source="null"
  />
  </pre>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ArrayList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Передается при некоторых обновлениях IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при некоторых обновлениях IList.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ArrayList:ArrayList"><apiName>ArrayList</apiName><shortdesc>
      Создание нового ArrayList с помощью указанного массива в качестве источника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив, используемый в качестве источника для ArrayList.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Создание нового ArrayList с помощью указанного массива в качестве источника. Если источник не указан, используется пустой массив.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ArrayList:addAllAt"><apiName>addAllAt</apiName><shortdesc conref="mx.collections.ListCollectionView#addAllAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Список элементов, добавляемых к текущему списку
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Местоположение текущего списка для размещения новых элементов.
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAllAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addAll"><apiName>addAll</apiName><shortdesc conref="mx.collections.ListCollectionView#addAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Список элементов, добавляемых к текущему списку
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Добавление элемента в заданную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если индекс меньше 0 или больше длины
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, помещаемый в позицию индекса
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Позиция индекса, в которую помещается элемент
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавление элемента в заданную позицию индекса. Любой элемент, прежде находившийся после данного индекса, перемещается на одну позицию.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItem"><apiName>addItem</apiName><shortdesc>
      Добавление указанного элемента в конец списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый элемент
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавление указанного элемента в конец списка. Эквивалентен addItemAt(item, length);
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Получение элемента, расположенного в заданной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если данные для этого индекса следует загрузить из удаленного местоположения
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>если index &lt; 0 или index > = length
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент в этой позиции индекса или значение null, если элемент отсутствует
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс в списке, из которого извлекается элемент
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Значение int, указывающее как направление, так и число элементов, получаемых во время запроса, если элемент не является локальным.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получение элемента, расположенного в заданной позиции индекса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Возвращает индекс элемента, если он находится в списке, например getItemAt(index) == элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента или -1, если элемент отсутствует в списке.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый элемент
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс элемента, если он находится в списке, например getItemAt(index) == элемент. Следует отметить, что в этой реализации поиск линеен, и поэтому – O(n).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:itemUpdateHandler"><apiName>itemUpdateHandler</apiName><shortdesc>
      Вызывается при каждой отправке события ObjectChange любым из элементов в списке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:PropertyChangeEvent</apiOperationClassifier><apiDesc>Объект для события ObjectChange.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при каждой отправке события ObjectChange любым из элементов в списке. Заключает его в объект <codeph>CollectionEventKind.UPDATE</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Уведомить представление об обновлении элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент представления, который был обновлен.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Значения String, QName или int, определяющие обновленное свойство.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. (Если свойство имело значение null, это могло быть старое значение элемента.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. (Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомить представление об обновлении элемента. Это особенно важно, если содержимое представления не реализует <codeph>IEventDispatcher</codeph>. Если свойство указано, представление может оптимизировать свой механизм уведомления. В противном случае оно может выполнить простое обновление всего представления.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ArrayList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Удаляет все элементы из списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Удаляет все элементы из списка.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Удаление элемента в указанной позиции индекса и его возврат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если index &lt; 0 или index > = length.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Удаленный элемент.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, из которого необходимо удалить элемент.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаление элемента в указанной позиции индекса и его возврат. Любые элементы, прежде находившиеся после данного индекса, теперь соответствуют предыдущему индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItem"><apiName>removeItem</apiName><shortdesc>
      Удаляет указанный элемент из этого списка (при его наличии).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Логическое значение, указывающее на удаление элемента.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Ссылка на объект для элемента, подлежащего удалению.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет указанный элемент из этого списка (при его наличии).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Помещает элемент в заданную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если индекс меньше 0 либо больше или равен длине
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Замененный элемент или null при отсутствии элемента
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Новое значение индекса
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Позиция индекса, в которую помещается элемент
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Помещает элемент в заданную позицию индекса. Если элемент уже занимает данную позицию индекса, новый элемент заменит его и будет возвращен.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:startTrackUpdates"><apiName>startTrackUpdates</apiName><shortdesc> 
      Если элемент - IEventDispatcher, следите за его обновлениями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, переданный в метод <codeph>addItemAt()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Если элемент - IEventDispatcher, следите за его обновлениями. Этот метод вызывается методом <codeph>addItemAt()</codeph> и при первоначальном назначении источника.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:stopTrackUpdates"><apiName>stopTrackUpdates</apiName><shortdesc> 
      Если элемент – IEventDispatcher, следить за его обновлением не требуется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, переданный в метод <codeph>removeItemAt()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Если элемент – IEventDispatcher, следить за его обновлением не требуется. Этот метод вызывается <codeph>removeItemAt()</codeph> и <codeph>removeAll()</codeph> и перед назначением нового источника.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toArray"><apiName>toArray</apiName><shortdesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если данные еще не загружены полностью из удаленного местоположения
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>Массив, заполняемый в порядке, аналогичном реализации IList.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toString"><apiName>toString</apiName><shortdesc>
      Pretty вводит содержимое этого ArrayList в строку и возвращает ее.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка с содержимым ArrayList.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Pretty вводит содержимое этого ArrayList в строку и возвращает ее.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ArrayList:length:get"><apiName>length</apiName><shortdesc>
      Возвращает количество элементов в списке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Возвращает количество элементов в списке. ArrayList должен содержать информацию о его длине, таким образом, не должно возвращаться значение -1, однако такое поведение может быть переопределено подклассом.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:source:get"><apiName>source</apiName><shortdesc>
      Исходный массив для этого ArrayList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Исходный массив для этого ArrayList. Любые изменения, внесенные посредством интерфейса IList, будут отражены в исходном массиве. Если исходный массив не предоставлен, ArrayList создает этот массив на внутреннем уровне. Изменения, внесенные непосредственно в основной массив (например, вызов метода <codeph>theList.source.pop()</codeph>), не повлекут за собой диспетчеризацию <codeph>CollectionEvents</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:uid:get"><apiName>uid</apiName><shortdesc>
      Предоставляет доступ к уникальному идентификатору для этого списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Предоставляет доступ к уникальному идентификатору для этого списка.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:SortField"><apiName>SortField</apiName><shortdesc>
  Обеспечивает информацию о сортировке, необходимую для выполнения сортировки по полю или свойству в представлении коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:SortField" replacement="spark.collections.SortField" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SortField&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:SortField
  <b>Properties</b>
  caseInsensitive="false"
  compareFunction="<em>Internal compare function</em>"
  descending="false"
  name="null"
  numeric="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISortField</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Обеспечивает информацию о сортировке, необходимую для выполнения сортировки по полю или свойству в представлении коллекции. Класс SortField предназначен для использования с классом Sort. Обычно сортировка определяется для коллекций сложных элементов, т. е. для элементов, в которых она выполняется по свойствам этих объектов. Например:
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem({first:"Anders", last:"Dickerson"});
     var sort:Sort = new Sort();
     sort.fields = [new SortField("first", true)];
     col.sort = sort;
  </codeph></pre>
 
  Возможны ситуации, в которых коллекция содержит простые элементы, подобные <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph> и т. д. В этом случае сортировка должна применяться непосредственно к простому типу. При построении сортировки в этой ситуации необходимо наличие отдельного поля сортировки, не имеющего указанного <codeph>name</codeph>. Например:
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
  </codeph></pre>
 
  <p>По умолчанию сравнение, выполняемое с помощью класса SortField, не обеспечивает правильную языковую сортировку для строк. Для получения информации об этом типе сортировки см. описание классов <codeph>spark.collections.Sort</codeph> и <codeph>spark.collections.SortField</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#Sort"><linktext>mx.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:SortField:SortField"><apiName>SortField</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Имя свойства, используемое этим полем для сравнения. Если объект относится к простому типу, следует передать <codeph>null</codeph>.
      </apiDesc></apiParam><apiParam><apiItemName>caseInsensitive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При сортировке строк сообщает средству сравнения, следует ли игнорировать регистр значений.
      </apiDesc></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Сообщает устройству сравнения, следует ли разместить элементы в порядке убывания.
      </apiDesc></apiParam><apiParam><apiItemName>numeric</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Сообщает средству сравнения, следует ли сравнивать элементы сортировки как числовом порядке вместо алфавитного порядка.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:SortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      
      Вспомогательная функция, которую вызывает класс Sort, чтобы установить функцию сравнения по умолчанию для сравнений на основе одного из трех условий, определяющих была ли установлена пользовательская функция, тип данных для определенного поля или значение числового свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Объект , содержащий данные. Если для указания имени поля использовалось свойство Name, то это имя будет использоваться для доступа к значению данных из этого объекта. В противном случае в качестве значения данных будет использован непосредственный объект.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вспомогательная функция, которую вызывает класс <codeph>Sort</codeph>, чтобы установить функцию сравнения по умолчанию для сравнений на основе одного из трех условий, определяющих была ли установлена пользовательская функция, тип данных для определенного поля или значение числового свойства. Если свойство <codeph>numeric</codeph> имеет значение true, то при сортировке будет выполняться числовое сравнение.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:SortField:reverse"><apiName>reverse</apiName><shortdesc>
      
      Задает обратный порядок критериев для данного поля сортировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Задает обратный порядок критериев для данного поля сортировки. Например, если поле сортировалось в порядке убывания, оно будет отсортировано в порядке возрастания.
           <p>ПРИМЕЧАНИЕ. <codeph>ICollectionView</codeph> не обновляется автоматически при изменении <codeph>ISortFields</codeph>; для обновления представления следует вызвать метод <codeph>refresh()</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:SortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     
      <codeph/><codeph/> Другое использование этого свойства не поддерживается. Возвращает -1, если ISortField не может использоваться в классе <codeph>Sort</codeph> для сортировки поля (отсутствует compareFunction или имя). В противном случае возвращает битовую маску параметров сортировки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:caseInsensitive:get"><apiName>caseInsensitive</apiName><shortdesc>
      Указывает, должна ли сортировка для данного поля зависеть от регистра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caseInsensitiveChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, должна ли сортировка для данного поля зависеть от регистра.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Функция, сравнивающая два элемента при сортировке элементов для связанной коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, сравнивающая два элемента при сортировке элементов для связанной коллекции. При указании свойства <codeph>compareFunction</codeph> для объекта ISort Flex игнорирует любые свойства <codeph>compareFunction</codeph> объектов SortField в ISort.
      <p>Функция сравнения должна иметь следующую подпись:</p>
     
      <p><codeph>функция myCompare(a:Object, b:Object):int</codeph></p>
     
      <p>Эта функция должна возвращать следующие значения:</p>
     
       <ul>
            <li>-1, если <codeph>a</codeph> должно появиться до <codeph>b</codeph> в сортированной последовательности;</li>
            <li>0, если <codeph>a</codeph> равно <codeph>b</codeph>;</li>
            <li>1, если <codeph>a</codeph> должно появиться после <codeph>b</codeph> в сортированной последовательности.</li>
      </ul>
     
      <p>Значение по умолчанию представляет собой внутреннюю функцию сравнения, которая может выполнять сравнение строк, чисел или дат в восходящем или нисходящем порядке, с учетом или без учета регистра. Собственную функцию следует указывать только в том случае, если необходим пользовательский алгоритм сравнения. Обычно он применяется только в том только случае, если в отображении используется вычисленное поле.</p>
      
      Если требуется выполнить языковую сортировку, используйте класс <codeph>spark.collections.SortField</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:SortField:descending:get"><apiName>descending</apiName><shortdesc>
      
      Указывает, следует ли сортировать данное поле в порядке убывания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="descendingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Указывает, следует ли сортировать данное поле в порядке убывания.
           <p>Значение по умолчанию равно <codeph>false</codeph> (в порядке возрастания).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:name:get"><apiName>name</apiName><shortdesc>
      
      Имя поля для сортировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nameChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Имя поля для сортировки.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      
      Указывает, что если сортируемое поле содержит числовые значения (number/int/uint) или строковые представления числовых значений, то средство сравнения использует числовое сравнение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numericChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Указывает, что если сортируемое поле содержит числовые значения (<codeph>number/int/uint</codeph>) или строковые представления числовых значений, то средство сравнения использует числовое сравнение.
      <p>
      Это свойство используется в классе <codeph>SortField</codeph>, если не указана пользовательская функция сравнения.
      </p>
      <p>
      Если для этого свойства установлено значение <codeph>true</codeph>, то используется встроенная функция числового сравнения. Перед сравнением каждому элементу данных присваивается функция <codeph>Number()</codeph>.
      </p>
      <p>
      Если для этого свойства установлено значение <codeph>false</codeph>, то используется встроенная функция сравнения строк. Перед сравнением каждому элементу данных присваивается функция <codeph>String()</codeph>.
      </p>
      <p>
      Если это свойство равно <codeph>null</codeph>, то анализируется первый элемент данных для определения, является он числом или строкой, после чего сортировка продолжается на основании этого анализа.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      
      True, если для ISortField указана пользовательская функция средства сравнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True, если <codeph>ISortField</codeph> использует пользовательскую функцию средства сравнения.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
  Класс AsyncListView является реализацией интерфейса IList, который обрабатывает ошибки ItemPendingErrors, выведенные методами getItemAt(), removeItemAt() и toArray().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AsyncListView&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:AsyncListView
  <b>Properties</b>
    createFailedItemFunction="null"
    createPendingItemFunction="null"
    list="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier>mx.utils:OnDemandEventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс AsyncListView является реализацией интерфейса IList, который обрабатывает ошибки ItemPendingErrors, выведенные методами <codeph>getItemAt()</codeph>, <codeph>removeItemAt()</codeph> и <codeph>toArray()</codeph>.
 
  <p>Метод <codeph>getItemAt()</codeph> обрабатывает ItemPendingErrors при возврате временного ожидающего выполнения элемента до успешного или неудачного выполнения основного запроса. Временный элемент создается путем вызова функции, указанной свойством <codeph>createPendingItemFunction</codeph>. Если запрос успешно выполнен, то фактический элемент заменяет временный. При неудачном выполнении временный элемент заменяется элементом, возвращенным при вызове функции, указанной свойством <codeph>createFailedItemFunction</codeph>.</p>
 
  <p>Этот класс делегирует методы и свойства IList для <codeph>list</codeph>. Если список не указан, методы, видоизменяющие коллекцию, являются пустыми командами, а методы, запрашивающие коллекцию, возвращают пустое значение, например null или нуль соответственно.</p>
 
  <p>Этот класс предназначен для использования с компонентами Spark, основанными на DataGroup, например List и ComboBox Классы Spark не предоставляют встроенную поддержку для обработки ItemPendingError.</p>
 
  <p>AsyncListView не поддерживает повторную вставку ожидающих обработки или неудачно выполненных элементов. После удаления неудачно выполненного или ожидающего обработки элемента его подключение к запросу в очереди для данных прерывается. Перемещение ожидающего обработки элемента в ASyncListView путем перетаскивания или сортировка ASyncListView, который содержит ожидающие обработки или неудачно выполненные элементы, не поддерживается, поскольку эти операции удаляют и затем повторно вставляют элементы списка.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:AsyncListView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Отправляется при изменении длины списка или замене элемента списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении длины списка или замене элемента списка.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:AsyncListView:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>Начальное значение свойства списка, делегирование IList.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:AsyncListView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      
      Добавляет элемент в заданный индекс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, помещаемый в индекс.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Добавляет элемент в заданный индекс. Индекс любого элемента больше индекса добавляемого элемента, увеличенного на единицу. Если указанный индекс меньше нуля или больше длины списка, инициируется ошибка RangeError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:addItem"><apiName>addItem</apiName><shortdesc>
      
      Добавляет указанный элемент в конец списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Добавляет указанный элемент в конец списка. Эквивалентен <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Возвращает значение list.getItemAt(index).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если <codeph>index &lt; 0</codeph> или <codeph>index > = length</codeph>.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент списка с заданным индексом.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс списка, из которого необходимо извлечь элемент.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Значение <codeph>int</codeph>, указывает как направление, так и число элементов, получаемых во время запроса, если элемент не является локальным.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение <codeph>list.getItemAt(index)</codeph>.
     
      <p>Этот метод перехватывает ItemPendingErrors (IPE), созданные в результате вызова <codeph>getItemAt()</codeph>. Если IPE создается, <codeph>IResponder</codeph> добавляется к IPE, и возвращается временный элемент очереди, созданный функций <codeph>createPendingItemFunction</codeph>. Если основной запрос успешно выполнен, элемент очереди заменяется фактическим элементом. Если запрос не удалось выполнить, элемент очереди заменяется значением, созданным при вызове <codeph>createFailedItemFunction</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.rpc.xml#IResponder"><linktext>mx.rpc.IResponder</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента или -1, если элемент отсутствует в списке.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.
     
      <p>Примечание. В отличие от методов <codeph>IViewCursor.find<i>xxx</i>()</codeph> метод <codeph>getItemIndex()</codeph> не может содержать параметр, состоящий исключительно из подмножества полей искомого элемента. Данный метод всегда выполняет поиск элемента, точно соответствующего входным параметрам.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Уведомляет представление об обновлении элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент представления, который был обновлен.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Имя обновленного свойства.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. (Если свойство имело значение null, это могло быть старое значение элемента.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. (Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Уведомляет представление об обновлении элемента. Рекомендуется использовать, если содержимое представления не реализует <codeph>IEventDispatcher</codeph> и передает <codeph>PropertyChangeEvent</codeph>. Если свойство указано, представление может оптимизировать свой механизм уведомления. В противном случае оно может выполнить простое обновление всего представления.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeAll"><apiName>removeAll</apiName><shortdesc>
       
      Удаляет все элементы из списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
      Удаляет все элементы из списка.
     
      <p>Если какой-нибудь элемент не является локальным и необходимо выполнить асинхронную операцию, инициируется ошибка <codeph>ItemPendingError</codeph>.</p>
     
      <p>Для получения дополнительной информации об использовании <codeph>ItemPendingError</codeph> см. документацию по ItemPendingError, а также документацию по коллекциям.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Удаляет действительный или ожидающий обработки элемент в указанном индексе и возвращает его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если <codeph>index &lt; 0</codeph> или <codeph>index > = length</codeph>.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент, который был удален или имеет значение null.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс списка, из которого необходимо извлечь элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет действительный или ожидаемый элемент в указанном индексе и возвращает его. Индекс всех элементов с индексом, превышающим указанный индекс, уменьшается на 1.
     
      <p>Если в указанном индексе отсутствует фактический или ожидающий обработки элемент, например по причине того, что вызов <codeph>getItemAt(index)</codeph> не привел к разбивке данных на страницы, то базовый <codeph>list</codeph> может создать ItemPendingError. Данная реализация игнорирует ItemPendingError и возвращает null.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      
      Помещает элемент в заданную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Замененный элемент или <codeph>null</codeph> в случае отсутствия элемента.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Новый элемент, для размещения в указанной позиции индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Помещает элемент в заданную позицию индекса. Если элемент уже занимает данную позицию индекса, новый элемент заменит его и будет возвращен.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toArray"><apiName>toArray</apiName><shortdesc>
      Возвращает массив с теми же элементами, что и в этом AsyncListView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>массив с теми же элементами, что и в этом AsyncListView.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив с теми же элементами, что и в этом AsyncListView. Инициализация массива выполняется путем восстановления каждого элемента с <codeph>getItemAt()</codeph>, поэтому ожидающие обработки элементы заменяются в тех случаях, когда фактические значения еще не доступны. Массив не будет обновляться, когда AsyncListView заменяет ожидающие обработки элементы фактическими (или неудачно выполненными) значениями.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toString"><apiName>toString</apiName><shortdesc>
      Возвращает строку, которая содержит длину списка и количество ожидающих запросов элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Краткое описание списка.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает строку, которая содержит длину списка и количество ожидающих запросов элемента. Запросы, ожидающие обработки, не инициируются.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:AsyncListView:createFailedItemFunction:get"><apiName>createFailedItemFunction</apiName><shortdesc>
      Функция обратного вызова, используемая для создания элемента замены, если запрос, вызвавший ошибку ItemPendingError, впоследствии неудачно выполнен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция обратного вызова, используемая для создания элемента замены, если запрос, вызвавший ошибку <codeph>ItemPendingError</codeph>, впоследствии неудачно выполнен. Существующий элемент, обычно являющийся ожидающим обработки элементом, созданным функцией обратного вызова, указанной свойством <codeph>createPendingItemFunction()</codeph>, замещается неудачно выполненным элементом.
      
      <p>Значением этого свойства должна быть функция с двумя параметрами: индексом запрошенного элемента и информационным объектом сбоя, который передан из метода IResponder <codeph> fault()</codeph>. В большинстве случаев второй параметр может быть проигнорирован. Ниже приведен пример реализации функции обратного вызова:</p> 
     
      <pre>
     function createFailedItem(index:int, info:Object):Object
     {
         return "[" + index + "request failed]";        
     }
       </pre>
      
     
      <p>Установка этого свойства не влияет на неудавшиеся элементы, которые уже были созданы. Установка этого свойства на значение null препятствует созданию неудавшихся элементов.
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.rpc.xml#IResponder/fault"><linktext>mx.rpc.IResponder.fault</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:createPendingItemFunction:get"><apiName>createPendingItemFunction</apiName><shortdesc>
      Функция обратного вызова, используемая для создания временного элемента, когда начальный запрос вызывает ошибку ItemPendingError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция обратного вызова, используемая для создания временного элемента, когда начальный запрос вызывает ошибку <codeph>ItemPendingError</codeph>. Если запрос успешно выполнен, временный элемент автоматически заменяется фактическим элементом. При неудачном выполнении запроса этот элемент заменяется элементом, созданным с помощью функции обратного вызова, указанной свойством <codeph>createFailedItemFunction</codeph>.
      
      <p>Значением этого свойства должна быть функция с двумя параметрами: индексом запрошенного элемента поставщика данных и ItemPendingError. В большинстве случаев второй параметр можно проигнорировать. Ниже приведен пример реализации функции обратного вызова:
     
       <pre>
     function createPendingItem(index:int, ipe:ItemPendingError):Object
     {
         return "[" + index + "request is pending...]";        
     }
       </pre>
       </p>
     
      <p>Установка этого свойства не влияет на временные элементы очереди, которые уже были созданы. Установка этого свойства на значение null препятствует созданию временных элементов, ожидающих обработки.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:length:get"><apiName>length</apiName><shortdesc>
      
      Число элементов в данной коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Число элементов в данной коллекции. 0 означает отсутствие элементов, а -1 – неизвестную длину. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:AsyncListView:list:get"><apiName>list</apiName><shortdesc>
      Объект IList, вставляющий строки в данную коллекцию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier><apiDefaultValue>null  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Объект IList, вставляющий строки в данную коллекцию. Это означает объект, которому передаются все методы IList.
     
      <p>Если это свойство имеет значение null, методы видоизменения IList, например <codeph>setItemAt()</codeph>, являются пустыми командами. Методы запроса IList, например <codeph>getItemAt()</codeph>, возвращают null или нуль (-1 для <codeph>getItemIndex()</codeph>) соответственно.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
  Класс ArrayCollection является классом-оболочкой, представляющим массив как коллекцию, которую можно использовать и которой можно управлять с помощью методов и свойств интерфейсов ICollectionView или IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ArrayCollection&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:ArrayCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ArrayCollection является классом-оболочкой, представляющим массив как коллекцию, которую можно использовать и которой можно управлять с помощью методов и свойств интерфейсов <codeph>ICollectionView</codeph> или <codeph>IList</codeph>. Операции с экземпляром ArrayCollection изменяют источник данных; например, при использовании метода <codeph>removeItemAt()</codeph> в ArrayCollection элемент удаляется из основного массива.
 
  </apiDesc><example>Следующий код создает простой объект ArrayCollection для доступа к массиву и его обработки с отдельным элементом объекта. Он извлекает элемент (посредством метода <codeph>getItemAt</codeph> интерфейса IList) и объект IViewCursor (полученный с помощью метода <codeph>createCursor</codeph> ICollectionView).
  <pre>
  var myCollection:ArrayCollection = new ArrayCollection([ { first: 'Matt', last: 'Matthews' } ]);
  var myCursor:IViewCursor = myCollection.createCursor();
  var firstItem:Object = myCollection.getItemAt(0);
  var firstItemFromCursor:Object = myCursor.current;
  if (firstItem == firstItemFromCursor)
        doCelebration();
  </pre>
  
  </example></apiClassifierDetail><apiConstructor id="mx.collections:ArrayCollection:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Исходный массив.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Создает новый ArrayCollection с помощью указанного исходного массива. Если массив не указан, то используется пустой массив.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.collections:ArrayCollection:source:get"><apiName>source</apiName><shortdesc>
      Источник данных в ArrayCollection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Источник данных в ArrayCollection. Объект ArrayCollection не представляет изменений, выполненных непосредственно в исходном массиве. Для изменения коллекции всегда следует использовать методы ICollectionView или IList.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISort"><apiName>ISort</apiName><shortdesc>
      Интерфейс ISort определяет интерфейс для классов, которые предоставляют информацию сортировки, необходимую для сортировки данных представления коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      Интерфейс <codeph>ISort</codeph> определяет интерфейс для классов, которые предоставляют информацию сортировки, необходимую для сортировки данных представления коллекции.
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>mx.collections.ISortField</linktext></link></related-links><apiOperation id="mx.collections:ISort:mx.collections:ISort:findItem"><apiName>findItem</apiName><shortdesc>
      Поиск указанного объекта в пределах указанного массива (или места вставки при запросе); при обнаружении возвращается индекс, в противном случае – -1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если в параметрах возникают ошибки, критерии поиска несовместимы с указанной сортировкой или невозможно определить функцию средства сравнения.
     
      </apiDesc><apiItemName>SortError</apiItemName><apiOperationClassifier>SortError</apiOperationClassifier></apiException><apiReturn><apiDesc>int Индекс в массиве найденного элемента. Если параметр <codeph>returnInsertionIndex</codeph> равен <codeph>false</codeph> и элемент не найден, возвращает -1. Если параметр <codeph>returnInsertionIndex</codeph> равен <codeph>true</codeph> и элемент не найден, возвращает индекс точки в сортированном массиве, где следует вставить значения.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Массив, в пределах которого выполняется поиск.
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий свойства для поиска (или сам объект для поиска). Объект должен состоять из пар «имя/значение поля», в которых имена полей определяются свойством <codeph>fields</codeph> в порядке их использования в этом свойстве. Необязательно перечислять все поля свойства <codeph>fields</codeph>, однако поле не может быть пропущено в последовательности. Поэтому если в свойстве <codeph>fields</codeph> перечисляются три поля, то можно указать только первое и второе поля, но нельзя указать первое и третье, пропустив второе.
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>Строка, содержащая тип нахождения для выполнения. Допустимые значения:
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>Возвращает любую позицию, которая является допустимой для этих значений.</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>Возвращает позицию, где найдено первое вхождение значений.</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>Возвращает позицию, где произошло последнее вхождение указанных значений.
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если метод не находит элемент, идентифицируемый параметром <codeph>values</codeph>, и этот параметр равен <codeph>true</codeph>, метод <codeph>findItem()</codeph> возвращает место вставки для значений, которое в сортированной последовательности является точкой вставки элемента.
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>функция устройства сравнения для использования при нахождении элемента. Если этот параметр не определен или указано значение <codeph>null</codeph>, функция <codeph>findItem()</codeph> использует функцию compare, определенную <codeph>ISort</codeph> в свойстве <codeph>compareFunction</codeph> экземпляра, с передачей данных в массив полей, которые определены объектом значений и текущим <codeph>SortFields</codeph>. Если указано ненулевое значение, функция <codeph>findItem()</codeph> использует его как функцию compare. Для функции, передаваемой как <codeph>compareFunction</codeph>, необходимо указать следующую подпись: <codeph>function myCompareFunction(a:Object, b:Object):int</codeph>. Обратите внимание, что в отличие от функции compare для свойства <codeph>ISort.compareFunction()</codeph> отсутствует третий аргумент.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Поиск указанного объекта в пределах определенного массива (или места вставки при запросе); при обнаружении возвращается индекс, в противном случае – -1. Используемые в классе <codeph>ListCollectionView</codeph> методы <codeph>find<i>xxx</i>()</codeph> применяют этот способ для определения запрашиваемого элемента. Как правило, проще использовать эти функции вместо <codeph>findItem()</codeph> для поиска данных в объектах на основе <codeph>ListCollectionView</codeph>. Метод <codeph>findItem()</codeph> можно вызвать непосредственно при создании класса, например новой реализации <codeph>ICollectionView</codeph>, который поддерживает сортировку. Перед вызовом этой функции необходимо выполнить сортировку входного массива элементов. В противном случае эта функция не сможет правильно определить указанное значение.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      Возвращает значение, показывающее используется ли указанное свойство для управления сортировкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Может ли значение свойства влиять на результат сортировки. Если при сортировке используется функция compareFunction, установленная по умолчанию, метод возвращает значение <codeph>true</codeph>, если параметр <codeph>property</codeph> определяет поле сортировки. Если сортировка или любой <codeph>ISortField</codeph> использует неизвестное пользовательское устройство сравнения, возвращается значение <codeph>true</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Имя тестируемого поля.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение, показывающее используется ли указанное свойство для управления сортировкой. Если сортировка использует пользовательское средство сравнения, то функция не может определить окончательный ответ и всегда возвращает значение <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:reverse"><apiName>reverse</apiName><shortdesc>
      Проходит через массив fields и вызывает reverse() для каждого объекта ISortField в массиве.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Проходит через массив <codeph>fields</codeph> и вызывает <codeph>reverse()</codeph> для каждого объекта <codeph>ISortField</codeph> в массиве. Поле по нисходящей теперь становится полем по восходящей и наоборот.
     
      <p>Примечание. <codeph>ICollectionView</codeph> не обновляется автоматически при изменении объектов в массиве <codeph>fields</codeph>; для обновления представления следует вызвать метод <codeph>refresh()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:sort"><apiName>sort</apiName><shortdesc>
      Применяет текущую сортировку к указанному массиву (не копии).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Массив сортируемых элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Применяет текущую сортировку к указанному массиву (не копии). Для предотвращения изменения массива следует создать копию в параметре <codeph>items</codeph>.
     
      <p>Реализации <codeph>ICollectionView</codeph> в Flex автоматически вызывают метод <codeph>sort</codeph> и обеспечивают выполнение сортировки в копии основных данных.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISort:mx.collections:ISort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Метод, используемый для сравнения элементов при сортировке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Метод, используемый для сравнения элементов при сортировке. При указании этого свойства Flex игнорирует любые свойства <codeph>compareFunction</codeph>, которые указаны в объектах <codeph>ISortField</codeph>, используемых в этом классе.
     
      <p>Функция сравнения должна иметь следующую подпись:</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>Эта функция должна возвращать следующее значение:
      <ul>
            <li>-1, если в отсортированной последовательности <codeph>объект А</codeph> должен предшествовать <codeph>объекту B</codeph>.</li>
            <li>0, если <codeph>объект А</codeph> совпадает с <codeph>объектом B</codeph>.</li>
            <li>1, если в отсортированной последовательности <codeph>объект А</codeph> должен следовать за <codeph>объектом B</codeph>. </li>
      </ul></p>
      <p>Для возврата к внутренней функции сравнения установите значение <codeph>null</codeph>.</p>
      <p>
      Массив <codeph>fields</codeph> указывает поля объекта для сравнения. Как правило, алгоритм сравнивает свойства до тех пор, пока не будет исчерпан список полей или не будет возвращено ненулевое значение. Например:</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>Значение по умолчанию представляет собой внутреннюю функцию сравнения, которая может выполнять сравнение строк, чисел или дат в восходящем или нисходящем порядке. Собственную функцию следует указывать только в том случае, если необходим пользовательский алгоритм сравнения. Обычно он применяется только в том только случае, если в отображении используется вычисленное поле.</p>
     
      <p>Также для каждого поля сортировки можно указать отдельную функцию сравнения с помощью используемого в классе <codeph>ISortField</codeph> свойства <codeph>compareFunction</codeph>. При этом для одних полей используется сравнение по умолчанию, а для других - пользовательское сравнение.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:fields:get"><apiName>fields</apiName><shortdesc>
      Массив объектов ISortField, указывающий поля для сравнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>Массив</codeph> объектов <codeph>ISortField</codeph>, указывающих поля для сравнения. Порядок объектов ISortField в массиве определяет приоритетный порядок полей при сортировке. Устройство сравнения сортировки по умолчанию проверяет поля сортировки в порядке массива, пока не определит порядок сортировки для двух сравниваемых полей.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:unique:get"><apiName>unique</apiName><shortdesc>
      Указывает, должна ли сортировка быть уникальной.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, должна ли сортировка быть уникальной. Уникальная сортировка завершается ошибкой, если какое-либо значение или объединенное значение, указанные в полях, перечисленных в свойствах полей, приводят к неопределенной или неуникальной последовательности сортировки, т. е. если два и более элемента имеют идентичные значения полей сортировки. Если сортировка не является уникальной, вызывается ошибка. Логика сортировки использует значение свойства <codeph>unique</codeph> только в случае, когда поля сортировки указаны явным образом. Если ни одно из полей сортировки не указано явным образом, ошибка не выводится даже при наличии элементов с идентичными значениями.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
  Класс XMLListCollection обеспечивает применение функциональных возможностей коллекции к объекту XMLList и делает доступными некоторые методы класса XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:XMLListCollection&gt;</code> tag inherits all
  the attributes of its superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:XMLListCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс XMLListCollection обеспечивает применение функциональных возможностей коллекции к объекту XMLList и делает доступными некоторые методы класса XMLList.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.collections.XMLList.xml"><linktext>XMLList</linktext></link><link href="" invalidHref="mx.collections.XML.xml"><linktext>XML</linktext></link></related-links><apiConstructor id="mx.collections:XMLListCollection:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="XMLList"/><apiData>null</apiData><apiDesc>Объект XMLList, содержащий данные, представленные объектом XMLListCollection.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Создает новый объект XMLListCollection с помощью указанного объекта XMLList.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:XMLListCollection:attribute"><apiName>attribute</apiName><shortdesc>
      Вызывает метод attribute() каждого XML-объекта в XMLList и возвращает XMLList результатов, которые соответствуют данному attributeName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList соответствия XML-объектам.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value="Object"/><apiDesc>Атрибут соответствия XML-объектов из XMLList.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает метод <codeph>attribute()</codeph> каждого XML-объекта в XMLList и возвращает XMLList результатов, которые соответствуют данному <codeph>attributeName</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attribute()"><linktext>XML.attribute()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:attributes"><apiName>attributes</apiName><shortdesc>
      Вызывает метод attributes() каждого XML-объекта в объекте XMLList и возвращает XMList атрибутов для каждого XML-объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList, содержащий результирующие XML-объекты, которые перечисляют атрибуты.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Вызывает метод <codeph>attributes()</codeph> каждого XML-объекта в объекте XMLList и возвращает XMList атрибутов для каждого XML-объекта.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:child"><apiName>child</apiName><shortdesc>
      Вызывает метод child() каждого XML-объекта в XMLList и возвращает XMLList, содержащий нижестоящие записи с указанным именем свойства в порядке появления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList соответствующих нижестоящих элементов XML-объектов в исходном XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="Object"/><apiDesc>Искомое свойство.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает метод <codeph>child()</codeph> каждого XML-объекта в XMLList и возвращает XMLList, содержащий нижестоящие записи с указанным именем свойства в порядке появления.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/child()"><linktext>XML.child()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:children"><apiName>children</apiName><shortdesc>
      Вызывает метод children() каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList нижестоящих элементов XML-объектов в исходном XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Вызывает метод children() каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/children()"><linktext>XML.children()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:copy"><apiName>copy</apiName><shortdesc>
      Возвращает полную копию объекта XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Копия объекта XMLList.
      
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает полную копию объекта XMLList.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:XMLListCollection:descendants"><apiName>descendants</apiName><shortdesc>
      Вызывает метод descendants() каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList соответствующих нижестоящих элементов (нижестоящие записи первого уровня, второго уровня и т. д.) XML-объектов в исходном XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="Object"/><apiData>*</apiData><apiDesc>Имена искомых элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает метод <codeph>descendants()</codeph> каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты. Параметр <codeph>name</codeph> передается в метод <codeph>descendants()</codeph> XML-объекта. Если этот параметр не указан, в метод <codeph>descendants()</codeph> передается строка «~~».
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/descendants()"><linktext>XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:elements"><apiName>elements</apiName><shortdesc>
      Вызывает метод elements() каждого XML-объекта в XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList соответствующих нижестоящих элементов XML-объектов в исходном XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>*</apiData><apiDesc>Имена искомых элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает метод <codeph>elements()</codeph> каждого XML-объекта в XMLList. Параметр <codeph>name</codeph> передается в метод <codeph>elements()</codeph> XML-объекта. Если этот параметр не указан, в метод <codeph>elements()</codeph> передается строка «~~».
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/elements()"><linktext>XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:text"><apiName>text</apiName><shortdesc>
     Вызывает метод text() каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList, содержащий результат.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
     Вызывает метод <codeph>text()</codeph> каждого XML-объекта в XMLList и возвращает XMLList, содержащий результаты.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/text()"><linktext>XML.text()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toString"><apiName>toString</apiName><shortdesc>
      Возвращает строковое представление XMLList, вызывая метод toString() для каждого XML-объекта в XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строковое представление объекта XMLList.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает строковое представление XMLList, вызывая метод <codeph>toString()</codeph> для каждого XML-объекта в XMLList. Если свойство <codeph>prettyPrinting</codeph> класса <codeph>XML</codeph> установлено равным <codeph>true</codeph>, то результаты для каждого XML-объекта разделяются в XMLList символами возврата каретки. В противном случае, если значение <codeph>prettyPrinting</codeph> равно <codeph>false</codeph>, то результаты соединяются без вставки символов возврата каретки.
     
      <p>Метод <codeph>toString()</codeph> помещает в возвращаемую строку для XML-объекта с простым содержимым следующую информацию: открывающий тег, атрибуты, объявления пространства имен и закрывающий тег. Можно использовать метод <codeph>toXMLString()</codeph>, если необходимо сохранить данную информацию в возвращаемой строке для XML-объектов с простым содержимым.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toXMLString"><apiName>toXMLString</apiName><shortdesc>
      Возвращает строковое представление XMLList, вызывая метод toXMLString() для каждого XML-объекта в XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строковое представление XMLList.
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает строковое представление XMLList, вызывая метод <codeph>toXMLString()</codeph> для каждого XML-объекта в XMLList. Если свойство <codeph>prettyPrinting</codeph> класса <codeph>XML</codeph> установлено равным <codeph>true</codeph>, то результаты для каждого XML-объекта разделяются в XMLList символами возврата каретки. Если значение <codeph>prettyPrinting</codeph> равно <codeph>false</codeph>, то результаты соединяются без символов возврата каретки.
     
      <p>Метод <codeph>toXMLString()</codeph> содержит в возвращаемой строке для объекта XML с простым содержимым следующую информацию: открывающий тег, атрибуты, объявления пространства имен и закрывающий тег. Метод <codeph>toString()</codeph> следует использовать при необходимости определения данной информации из возвращаемой строки для XML-объектов с простым содержимым.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiValue id="mx.collections:XMLListCollection:source:get"><apiName>source</apiName><shortdesc>
      Основной XMLList для данной коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XMLList"/></apiValueDef><apiDesc>
      Основной XMLList для данной коллекции. Объект XMLListCollection не отображает изменений, выполненных непосредственно с исходным объектом XMLList. Для изменения коллекции следует всегда использовать методы XMLListCollection.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IList"><apiName>IList</apiName><shortdesc>
  Коллекция элементов, организованных по порядку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Коллекция элементов, организованных по порядку. Предоставляет методы получения и обработки, основанные на индексе.  
  
  <p><codeph>IList</codeph> может быть представлением данных, которые были извлечены из удаленного местоположения. При записи в коллекцию, которая может быть удаленной, важно предусмотреть возможность недоступности данных, в результате чего инициируется ошибка <codeph>ItemPendingError</codeph>.</p>
  
  <p><codeph>ICollectionView</codeph> является альтернативой <codeph>IList</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ListCollectionView"><linktext>mx.collections.ListCollectionView</linktext></link></related-links><adobeApiEvent id="mx.collections:IList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Передается при некоторых обновлениях IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при некоторых обновлениях IList.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IList:mx.collections:IList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Добавляет элемент в заданный индекс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если индекс меньше 0 или больше длины списка. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, помещаемый в индекс.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет элемент в заданный индекс. Индекс любого элемента больше индекса добавляемого элемента, увеличенного на единицу. Если указанный индекс меньше нуля или больше длины списка, инициируется ошибка RangeError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:addItem"><apiName>addItem</apiName><shortdesc>
      Добавляет указанный элемент в конец списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет указанный элемент в конец списка. Эквивалентен <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Получает элемент, расположенный по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если данные для этого индекса следует загрузить из удаленного местоположения.
     
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>если <codeph>index &lt; 0</codeph> или <codeph>index > = length</codeph>.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент в этой позиции индекса или значение <codeph>null</codeph>, если элемент отсутствует.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс в списке для извлечения элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Значение <codeph>int</codeph>, указывает как направление, так и число элементов, получаемых во время запроса, если элемент не является локальным.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает элемент, расположенный по заданному индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента или -1, если элемент отсутствует в списке.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.
     
      <p>Примечание. В отличие от методов <codeph>IViewCursor.find<i>xxx</i>()</codeph> метод <codeph>getItemIndex()</codeph> не может содержать параметр, состоящий исключительно из подмножества полей искомого элемента. Данный метод всегда выполняет поиск элемента, точно соответствующего входным параметрам.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Уведомляет представление об обновлении элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент представления, который был обновлен.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Имя обновленного свойства.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. (Если свойство имело значение null, это могло быть старое значение элемента.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. (Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомляет представление об обновлении элемента. Рекомендуется использовать, если содержимое представления не реализует <codeph>IEventDispatcher</codeph> и передает <codeph>PropertyChangeEvent</codeph>. Если свойство указано, представление может оптимизировать свой механизм уведомления. В противном случае оно может выполнить простое обновление всего представления.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Удаляет все элементы из списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Удаляет все элементы из списка.
     
      <p>Если какой-нибудь элемент не является локальным и необходимо выполнить асинхронную операцию, инициируется ошибка <codeph>ItemPendingError</codeph>.</p>
     
      <p>Для получения дополнительной информации об использовании <codeph>ItemPendingError</codeph> см. документацию по ItemPendingError, а также документацию по коллекциям.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Удаляет элемент в указанной позиции индекса и возвращает его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>индекс меньше 0 или больше длины. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, из которого необходимо удалить элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет элемент в указанной позиции индекса и возвращает его. Любые элементы, прежде находившиеся после данного индекса, теперь соответствуют предыдущему индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Помещает элемент в заданную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если индекс меньше 0 или больше длины.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Замененный элемент или <codeph>null</codeph> в случае отсутствия элемента.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Новый элемент, для размещения в указанной позиции индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Помещает элемент в заданную позицию индекса. Если элемент уже занимает данную позицию индекса, новый элемент заменит его и будет возвращен.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:toArray"><apiName>toArray</apiName><shortdesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если данные не загружены полностью из удаленного местоположения.
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>Массив.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList. Этот метод может инициировать ошибку ItemPendingError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:IList:mx.collections:IList:length:get"><apiName>length</apiName><shortdesc>
      Число элементов в данной коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Число элементов в данной коллекции. 0 означает отсутствие элементов, а -1 – неизвестную длину. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
 Класс ListCollectionView добавляет свойства и методы интерфейса ICollectionView к объекту, который соответствует интерфейсу IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ListCollectionView&gt;</code> has the following attributes,
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:ListCollectionView
  <b>Properties</b>
  filterFunction="null"
  list="null"
  sort="null"
  <b>Events</b>
  collectionChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ICollectionView</apiBaseInterface><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс ListCollectionView добавляет свойства и методы интерфейса <codeph>ICollectionView</codeph> к объекту, который соответствует интерфейсу <codeph>IList</codeph>. В итоге можно использовать объект этого класса в ситуациях, предусматривающих <codeph>IList</codeph> или <codeph>ICollectionView</codeph>.
 
 <p>Этот класс также позволяет использовать нотацию массива [] для доступа к методам <codeph>getItemAt()</codeph> и <codeph>setItemAt()</codeph>. При использовании кода, например <codeph>myListCollectionView[index]</codeph>, Flex вызывает метод <codeph>getItemAt()</codeph> или <codeph>setItemAt()</codeph> объекта <codeph>myListCollectionView</codeph>.</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ListCollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Передается при обновлении ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при обновлении ICollectionView.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ListCollectionView:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
      Конструктор ListCollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>IList этого ListCollectionView предназначен для переноса.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор ListCollectionView.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ListCollectionView:addAllAt"><apiName>addAllAt</apiName><shortdesc>
      Добавляет список элементов к текущему списку, помещая их в позиции индекса, передаваемого в функцию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если индекс меньше 0 или больше длины списка. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Список элементов, добавляемых к текущему списку
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Местоположение текущего списка для размещения новых элементов.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет список элементов к текущему списку, помещая их в позиции индекса, передаваемого в функцию. Элементы помещаются в позиции индекса в порядке их получения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addAll"><apiName>addAll</apiName><shortdesc>
      Добавляет список элементов к текущему списку, помещая их в конце списка в порядке передачи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Список элементов, добавляемых к текущему списку
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет список элементов к текущему списку, помещая их в конце списка в порядке передачи.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addEventListener"><apiName>addEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
     
      Добавляет элемент в заданный индекс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, помещаемый в индекс.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Добавляет элемент в заданный индекс. Индекс любого элемента больше индекса добавляемого элемента, увеличенного на единицу. Если указанный индекс меньше нуля или больше длины списка, инициируется ошибка RangeError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItem"><apiName>addItem</apiName><shortdesc>
     
      Добавляет указанный элемент в конец списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Добавляемый элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Добавляет указанный элемент в конец списка. Эквивалентен <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:contains"><apiName>contains</apiName><shortdesc>
      
      Возвращает значение, определяющее, содержит ли данное представление указанный объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно true, если ICollectionView содержит элемент после применения любого фильтра; в противном случае значение равно false.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый объект.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает значение, определяющее, содержит ли данное представление указанный объект. В отличие от методов <codeph>IViewCursor.find<i>xxx</i></codeph>, этот поиск будет успешным только при нахождении элемента, точно соответствующего данному параметру. При наличии фильтра, применяемого к представлению, данный метод может вернуть <codeph>false</codeph> даже в случае, если элемент действительно содержится в основной коллекции.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ListCollectionView/enableAutoUpdate()"><linktext>enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      
      Создает новый IViewCursor, работающий с данным представлением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Новая реализация IViewCursor.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Создает новый IViewCursor, работающий с данным представлением.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      
      Предотвращает передачу представлением информации об изменениях коллекции и ее элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Предотвращает передачу представлением информации об изменениях коллекции и ее элементов. Также предотвращает обновление позиций элементов в представлении при изменении позиций в коллекции. Эти изменения устанавливаются в очередь и передаются после вызова <codeph>enableAutoUpdate</codeph>. Если для отдельного элемента происходит больше событий, чем обновлений, представление может завершиться сбросом. Метод <codeph>disableAutoUpdate</codeph> действует кумулятивно; для передачи и обновления событий в представлении требуется одинаковое число вызовов <codeph>enableAutoUpdate</codeph>. Учтите, что <codeph>disableAutoUpdate</codeph> влияет только на отдельные представления; редактирование может быть обнаружено другими представлениями на базе отдельного представления.
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/enableAutoUpdate()"><linktext>mx.collections.ICollectionView.enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      
      Активирует автоматическое обновление.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Активирует автоматическое обновление. Для получения дополнительной информации см. <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>mx.collections.ICollectionView.disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
     
      Получает элемент, расположенный по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Элемент в этой позиции индекса или значение <codeph>null</codeph>, если элемент отсутствует.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс в списке для извлечения элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Значение <codeph>int</codeph>, указывает как направление, так и число элементов, получаемых во время запроса, если элемент не является локальным.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Получает элемент, расположенный по заданному индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
     
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента или -1, если элемент отсутствует в списке.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Возвращает индекс элемента, если он находится в списке, где, например getItemAt(индекс) == элемент.
     
      <p>Примечание. В отличие от методов <codeph>IViewCursor.find<i>xxx</i>()</codeph> метод <codeph>getItemIndex()</codeph> не может содержать параметр, состоящий исключительно из подмножества полей искомого элемента. Данный метод всегда выполняет поиск элемента, точно соответствующего входным параметрам.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:initialized"><apiName>initialized</apiName><shortdesc>
       Автоматически вызывается компилятором MXML при создании ListCollectionView с помощью тега MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>MXML-документ, содержащий данный ListCollectionView.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Игнорируется.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Автоматически вызывается компилятором MXML при создании ListCollectionView с помощью тега MXML. При создании ListCollectionView посредством ActionScript требуется вызвать этот метод, протекающий в документе MXML и <codeph>null</codeph> для <codeph>id</codeph>.
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Уведомляет представление об обновлении элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент представления, который был обновлен.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Имя обновленного свойства.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. (Если свойство равно null, это может быть старым значением элемента.)
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. (Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Уведомляет представление об обновлении элемента. Этот метод рекомендуется использовать, если содержимое представления не реализует <codeph>IPropertyChangeNotifier</codeph>. Если вызов этого метода включает параметр <codeph>property</codeph>, представление может оптимизировать его механизм уведомления. В противном случае оно может выполнить простое обновление всего представления.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:refresh"><apiName>refresh</apiName><shortdesc>
     
      Применяет сортировку и фильтр к представлению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph>, если refresh() был завершен; в противном случае значение равно <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Применяет сортировку и фильтр к представлению. ICollectionView не обнаруживает автоматически изменения сортировки или фильтра, поэтому для обновления представления после установки свойства <codeph>sort</codeph> или <codeph>filterFunction</codeph> следует вызвать метод <codeph>refresh()</codeph>. Если в реализации ICollectionView также используется интерфейс IMXMLObject, следует вызвать метод <codeph>refresh()</codeph> из метода <codeph>initialized()</codeph>.
	 
      <p>Возвращает <codeph>true</codeph>, если обновление было успешным, и <codeph>false</codeph>, если сортировка еще не закончена (например, элементы еще находятся в состоянии ожидания). Клиент представления должен ожидать события CollectionEvent со значением свойства <codeph>CollectionEventKind.REFRESH</codeph>, равным <codeph>kind</codeph> для обеспечения завершения операции <codeph>refresh()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeAll"><apiName>removeAll</apiName><shortdesc>
     Удаляет все элементы из списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Удаляет все элементы из списка.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
     
      Удаляет элемент в указанной позиции индекса и возвращает его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, из которого необходимо удалить элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Удаляет элемент в указанной позиции индекса и возвращает его. Любые элементы, прежде находившиеся после данного индекса, теперь соответствуют предыдущему индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
     
      Помещает элемент в заданную позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Замененный элемент или <codeph>null</codeph> в случае отсутствия элемента.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Новый элемент, для размещения в указанной позиции индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс, в который помещается элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Помещает элемент в заданную позицию индекса. Если элемент уже занимает данную позицию индекса, новый элемент заменит его и будет возвращен.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toArray"><apiName>toArray</apiName><shortdesc>
     
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
     
      Возвращает массив, заполняемый в порядке, аналогичном реализации IList. Этот метод может инициировать ошибку ItemPendingError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toString"><apiName>toString</apiName><shortdesc>
      Вводит содержимое данного представления в строку и возвращает ее.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Содержимое данного представления в виде строки.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Вводит содержимое данного представления в строку и возвращает ее.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:willTrigger"><apiName>willTrigger</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.collections:ListCollectionView:protected:localIndex"><apiName>localIndex</apiName><shortdesc>
      Если представление является отсортированным или отфильтрованным, свойство localIndex содержит массив элементов в отсортированном или отфильтрованном (упорядоченном, уменьшенном) представлении в порядке сортировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Если представление является отсортированным или отфильтрованным, свойство <codeph>localIndex</codeph> содержит массив элементов в отсортированном или отфильтрованном (упорядоченном, уменьшенном) представлении в порядке сортировки. Класс ListCollectionView использует данное свойство для доступа к элементам в представлении. Свойство <codeph>localIndex</codeph> никогда не содержит данных, отсутствующих в источнике, но может не включать все данные источника. Это свойство содержит значение <codeph>null</codeph> при отсутствии сортировки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      
      Функция, которую представление использует для устранения элементов, несоответствующих критериям функции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="filterFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      Функция, которую представление использует для устранения элементов, несоответствующих критериям функции. Ожидается следующая подпись filterFunction:
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  где возвращаемым значением является <codeph>true</codeph>, если указанный элемент следует оставить в представлении.
	 
      <p>Если фильтр не поддерживается, в Flex инициируется ошибка при доступе к данному свойству. Для обновления представления следует вызвать <codeph>refresh()</codeph> после установки свойства <codeph>filterFunction</codeph>.</p>
	 
 	  <p>Примечание. Реализации ICollectionView в Flex извлекают все элементы из удаленного местоположения перед выполнением функции фильтрации. При использовании подкачки страниц следует применить фильтр к удаленной коллекции перед извлечением данных.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ListCollectionView:length:get"><apiName>length</apiName><shortdesc>
      
      Число элементов в данном представлении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Число элементов в данном представлении. Значение 0 означает отсутствие элементов, -1 – неизвестную длину.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:list:get"><apiName>list</apiName><shortdesc>
      IList, вставляющий строки в данное представление коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier></apiValueDef><apiDesc>
      IList, вставляющий строки в данное представление коллекции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      
      ISort, применяемый к ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      
      ISort, применяемый к ICollectionView. Установка сортировки не обновляет представление автоматически, поэтому после установки данного свойства следует вызвать метод <codeph>refresh()</codeph>. Если сортировка не поддерживается, то при доступе к этому свойству инициируется ошибка.
	 
	  <p>Примечание. Реализации ICollectionView в Flex извлекают все элементы из удаленного местоположения перед выполнением сортировки. При использовании подкачки страниц с сортированным списком к удаленной коллекции перед извлечением данных следует применить сортировку.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ICollectionView"><apiName>ICollectionView</apiName><shortdesc>
  ICollectionView является представлением коллекции данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  <codeph>ICollectionView</codeph> является представлением коллекции данных. Представление может изменяться для отображения данных, отсортированных в соответствии с различными критериями или уменьшенных фильтрами без изменения основных данных. IViewCursor обеспечивает доступ к элементам в пределах коллекции. Можно изменить коллекцию с помощью методов <codeph>insert()</codeph> и <codeph>remove()</codeph> интерфейса IViewCursor.
 
  <p><codeph>ICollectionView</codeph> может представлять данные, извлеченные из удаленного местоположения. При реализации этого интерфейса для данных, которые могут быть удаленными, важно предусмотреть случай, когда данные недоступны, в результате чего инициируется ошибка <codeph>ItemPendingError</codeph>.</p>
 
  <p>Интерфейс <codeph>IList</codeph> является альтернативой интерфейсу <codeph>ICollectionView</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor"><linktext>mx.collections.IViewCursor</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link></related-links><adobeApiEvent id="mx.collections:ICollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Передается при обновлении ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при обновлении ICollectionView.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:contains"><apiName>contains</apiName><shortdesc>
      Возвращает значение, определяющее, содержит ли данное представление указанный объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно true, если ICollectionView содержит элемент после применения любого фильтра; в противном случае значение равно false.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Искомый объект.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение, определяющее, содержит ли данное представление указанный объект. В отличие от методов <codeph>IViewCursor.find<i>xxx</i></codeph>, этот поиск будет успешным только при нахождении элемента, точно соответствующего данному параметру. При наличии фильтра, применяемого к представлению, данный метод может вернуть <codeph>false</codeph> даже в случае, если элемент действительно содержится в основной коллекции.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      Создает новый IViewCursor, работающий с данным представлением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Новая реализация IViewCursor.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Создает новый IViewCursor, работающий с данным представлением.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      Предотвращает передачу представлением информации об изменениях коллекции и ее элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Предотвращает передачу представлением информации об изменениях коллекции и ее элементов. Также предотвращает обновление позиций элементов в представлении при изменении позиций в коллекции. Эти изменения устанавливаются в очередь и передаются после вызова <codeph>enableAutoUpdate</codeph>. Если для отдельного элемента происходит больше событий, чем обновлений, представление может завершиться сбросом. Метод <codeph>disableAutoUpdate</codeph> действует кумулятивно; для передачи и обновления событий в представлении требуется одинаковое число вызовов <codeph>enableAutoUpdate</codeph>. Учтите, что <codeph>disableAutoUpdate</codeph> влияет только на отдельные представления; редактирование может быть обнаружено другими представлениями на базе отдельного представления.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      Активирует автоматическое обновление.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Активирует автоматическое обновление. Для получения дополнительной информации см. <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Уведомляет представление об обновлении элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент представления, который был обновлен.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Имя обновленного свойства.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Старое значение данного свойства. (Если свойство равно null, это может быть старым значением элемента.)
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Новое значение данного свойства. (Если свойство имело значение null, его можно не указывать, поскольку предполагается, что элемент является новым значением.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомляет представление об обновлении элемента. Этот метод рекомендуется использовать, если содержимое представления не реализует <codeph>IPropertyChangeNotifier</codeph>. Если вызов этого метода включает параметр <codeph>property</codeph>, представление может оптимизировать его механизм уведомления. В противном случае оно может выполнить простое обновление всего представления.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:refresh"><apiName>refresh</apiName><shortdesc>
      Применяет сортировку и фильтр к представлению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph>, если refresh() был завершен; в противном случае значение равно <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Применяет сортировку и фильтр к представлению. ICollectionView не обнаруживает автоматически изменения сортировки или фильтра, поэтому для обновления представления после установки свойства <codeph>sort</codeph> или <codeph>filterFunction</codeph> следует вызвать метод <codeph>refresh()</codeph>. Если в реализации ICollectionView также используется интерфейс IMXMLObject, следует вызвать метод <codeph>refresh()</codeph> из метода <codeph>initialized()</codeph>.
	 
      <p>Возвращает <codeph>true</codeph>, если обновление было успешным, и <codeph>false</codeph>, если сортировка еще не закончена (например, элементы еще находятся в состоянии ожидания). Клиент представления должен ожидать события CollectionEvent со значением свойства <codeph>CollectionEventKind.REFRESH</codeph>, равным <codeph>kind</codeph> для обеспечения завершения операции <codeph>refresh()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      Функция, которую представление использует для устранения элементов, несоответствующих критериям функции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, которую представление использует для устранения элементов, несоответствующих критериям функции. Ожидается следующая подпись filterFunction:
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  где возвращаемым значением является <codeph>true</codeph>, если указанный элемент следует оставить в представлении.
	 
      <p>Если фильтр не поддерживается, в Flex инициируется ошибка при доступе к данному свойству. Для обновления представления следует вызвать <codeph>refresh()</codeph> после установки свойства <codeph>filterFunction</codeph>.</p>
	 
 	  <p>Примечание. Реализации ICollectionView в Flex извлекают все элементы из удаленного местоположения перед выполнением функции фильтрации. При использовании подкачки страниц следует применить фильтр к удаленной коллекции перед извлечением данных.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:length:get"><apiName>length</apiName><shortdesc>
      Число элементов в данном представлении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Число элементов в данном представлении. Значение 0 означает отсутствие элементов, -1 – неизвестную длину.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      ISort, применяемый к ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      ISort, применяемый к ICollectionView. Установка сортировки не обновляет представление автоматически, поэтому после установки данного свойства следует вызвать метод <codeph>refresh()</codeph>. Если сортировка не поддерживается, то при доступе к этому свойству инициируется ошибка.
	 
	  <p>Примечание. Реализации ICollectionView в Flex извлекают все элементы из удаленного местоположения перед выполнением сортировки. При использовании подкачки страниц с сортированным списком к удаленной коллекции перед извлечением данных следует применить сортировку.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
  Формирует параметры позиции курсора в ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Формирует параметры позиции курсора в <codeph>ICollectionView</codeph>. Закладки используются для возврата курсора к абсолютной позиции в пределах <codeph>ICollectionView</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor/bookmark"><linktext>mx.collections.IViewCursor.bookmark</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>mx.collections.IViewCursor.seek()</linktext></link></related-links><apiConstructor id="mx.collections:CursorBookmark:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
      Создает новый экземпляр закладки с указанным значением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Значение данной закладки.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Создает новый экземпляр закладки с указанным значением.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:CursorBookmark:getViewIndex"><apiName>getViewIndex</apiName><shortdesc>
      Получает приблизительный индекс элемента, представленный этой закладкой в ее представлении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента. Если элемент не найден в текущем представлении, данный метод возвращает -1. Данный метод также возвращает -1, если местоположение на основе индекса невозможно.
      
      </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
      Получает приблизительный индекс элемента, представленный этой закладкой в ее представлении. Если элемент разбит на страницы, метод инициирует ошибку ItemPendingError.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:CursorBookmark:CURRENT:get"><apiName>CURRENT</apiName><shortdesc>
      Закладка, представляющая текущий элемент для IViewCursor в ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Закладка, представляющая текущий элемент для <codeph>IViewCursor</codeph> в <codeph>ICollectionView</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:FIRST:get"><apiName>FIRST</apiName><shortdesc>
      Закладка для первого элемента в ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Закладка для первого элемента в <codeph>ICollectionView</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:LAST:get"><apiName>LAST</apiName><shortdesc>
      Закладка для последнего элемента в ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Закладка для последнего элемента в <codeph>ICollectionView</codeph>. Если представление не имеет элементов, курсор находится на данной закладке.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:value:get"><apiName>value</apiName><shortdesc>
      Представление основного маркера закладки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Представление основного маркера закладки. Это значение обычно распознается только реализацией <codeph>IViewCursor</codeph> или <codeph>ICollectionView</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IViewCursor"><apiName>IViewCursor</apiName><shortdesc>
  Определяет интерфейс для перечисления двунаправленных представлений коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Определяет интерфейс для перечисления двунаправленных представлений коллекции. Этот курсор обеспечивает возможности поиска, перехода и установки закладки наряду с методами изменения вставки и удаления. Если курсор сначала извлекается из представления (обычно методом <codeph>createCursor()</codeph> ICollectionView), значение свойства <codeph>current</codeph> должно быть первым элементом непустого представления.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:IViewCursor_mx.events.FlexEvent.CURSOR_UPDATE_cursorUpdate"><apiName>cursorUpdate</apiName><shortdesc>
  Передается при каждом обновлении позиции курсора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CURSOR_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при каждом обновлении позиции курсора.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findAny"><apiName>findAny</apiName><shortdesc>
      Находит в коллекции элемент с указанными свойствами и позиционирует курсор на этом элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если все данные являются локальными, то этот метод возвращает <codeph>true</codeph>, если элемент можно найти, и <codeph>false</codeph>, если нет. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Критерии поиска. Значения в объекте следует конфигурировать как пары «имя-значение», подобно ассоциативному массиву (или они будут фактическим объектом для поиска). Значения указанных имен должны соответствовать свойствам, указанным в сортировке. Например, если свойства <codeph>x</codeph>, <codeph>y</codeph> и <codeph>z</codeph> находятся в текущей сортировке, указанные значения должны быть равны <codeph>(x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Находит в коллекции элемент с указанными свойствами и позиционирует курсор на этом элементе. Если элемент не найден, то местоположение курсора не изменяется.
     
      <p>Метод <codeph>findAny()</codeph> может быть вызван только в представлениях с выполненной сортировкой; в противном случае возникает ошибка <codeph>CursorError</codeph>.</p>
      
      <p>Если связанная коллекция является удаленной и не все ее элементы кэшированы локально, этот метод начинает асинхронную выборку из удаленной коллекции. Если выборка уже обрабатывается, то этот метод ожидает завершения ее обработки перед созданием другого запроса на выборку.</p>
     
      <p>Если критериям поиска может соответствовать несколько элементов, то найденный элемент является недетерминированным. Если важно найти первое или последнее вхождение элемента в неуникальный индекс, следует использовать метод <codeph>findFirst()</codeph> или <codeph>findLast()</codeph>.</p>
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findFirst"><apiName>findFirst</apiName><shortdesc>
      Находит в пределах коллекции первый элемент с указанными свойствами и позиционирует курсор на этом элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если все данные являются локальными, то этот метод возвращает <codeph>true</codeph>, если элемент можно найти, и <codeph>false</codeph>, если нет. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Критерии поиска. Значения в объекте следует конфигурировать как пары «имя-значение», подобно ассоциативному массиву (или они будут фактическим объектом для поиска). Значения указанных имен должны соответствовать свойствам, указанным в сортировке. Например, если свойства <codeph>x</codeph>, <codeph>y</codeph> и <codeph>z</codeph> находятся в текущей сортировке, указанные значения должны быть равны <codeph>(x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Находит в пределах коллекции первый элемент с указанными свойствами и позиционирует курсор на этом элементе. Если элемент не найден, то местоположение курсора не изменяется.
     
      <p>Метод <codeph>findFirst()</codeph> можно вызвать только в представлениях с выполненной сортировкой, в противном случае инициируется ошибка <codeph>CursorError</codeph>.</p>
      
      <p>Если связанная коллекция является удаленной и не все ее элементы кэшированы локально, этот метод начинает асинхронную выборку из удаленной коллекции. Если выборка уже обрабатывается, то этот метод ожидает завершения ее обработки перед созданием другого запроса на выборку.</p>
     
      <p>Если поиск первого вхождения элемента в групповой индекс не является обязательным, используйте <codeph>findAny()</codeph>, который может оказаться немного более быстрым, чем метод <codeph>findFirst()</codeph>.</p>
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findLast"><apiName>findLast</apiName><shortdesc>
      Находит в коллекции последний элемент с указанными свойствами и позиционирует курсор на этом элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если все данные являются локальными, то этот метод возвращает <codeph>true</codeph>, если элемент можно найти, и <codeph>false</codeph>, если нет. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Критерии поиска. Значения в объекте следует конфигурировать как пары «имя-значение», подобно ассоциативному массиву (или они будут фактическим объектом для поиска). Значения указанных имен должны соответствовать свойствам, указанным в сортировке. Например, если свойства <codeph>x</codeph>, <codeph>y</codeph> и <codeph>z</codeph> находятся в текущей сортировке, указанные значения должны быть равны <codeph>(x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Находит в коллекции последний элемент с указанными свойствами и позиционирует курсор на этом элементе. Если элемент не найден, местоположение курсора не изменяется.
     
      <p>Метод <codeph>findLast()</codeph> может быть вызван только в представлениях с выполненной сортировкой; если сортировка в представлении не выполнена, инициируется ошибка <codeph>CursorError</codeph>.</p>
      
      <p>Если связанная коллекция является удаленной и не все ее элементы кэшированы локально, этот метод начинает асинхронную выборку из удаленной коллекции. Если выборка уже обрабатывается, то этот метод ожидает завершения ее обработки перед созданием другого запроса на выборку.</p>
     
      <p>Если поиск последнего вхождения элемента в групповой индекс не является обязательным, используйте метод <codeph>findAny()</codeph>, который может оказаться немного более быстрым.</p>
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:insert"><apiName>insert</apiName><shortdesc>
      Вставляет указанный элемент перед текущим расположением курсора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент, вставляемый перед текущей позицией курсора.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вставляет указанный элемент перед текущим расположением курсора. Если курсор – <codeph>afterLast</codeph>, вставка производится в конце представления. Если курсор – <codeph>beforeFirst</codeph> в непустом представлении, инициируется ошибка.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:moveNext"><apiName>moveNext</apiName><shortdesc>
      Перемещает курсор на следующий элемент коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph>, если по-прежнему в списке; <codeph>false</codeph>, если изначально значение было равно <codeph>current</codeph>, либо в данный момент равно <codeph>afterLast</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Перемещает курсор на следующий элемент коллекции. При удачном выполнении свойство <codeph>current</codeph> обновляется для ссылки на объект в новом местоположении. Возвращает <codeph>true</codeph>, если результирующее свойство <codeph>current</codeph> является действительным, или <codeph>false</codeph>, если это не так (значение свойства равно <codeph>afterLast</codeph>).
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError. Для получения дополнительной информации об использовании ItemPendingError см. документацию по ItemPendingError и документацию по коллекциям.</p>
     
      </apiDesc><example>
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      while (!cursor.afterLast)
      {
          trace(cursor.current);
          cursor.moveNext();
      }
      </pre>
      
      </example></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:movePrevious"><apiName>movePrevious</apiName><shortdesc>
      Перемещает курсор на предыдущий элемент коллекции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph>, если по-прежнему в списке; <codeph>false</codeph>, если начальное или текущее значение <codeph>current</codeph> равно <codeph>beforeFirst</codeph>. Например:
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      cursor.seek(CursorBookmark.last);
      while (!cursor.beforeFirst)
      {
          trace(current);
          cursor.movePrevious();
      }
      </pre>
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Перемещает курсор на предыдущий элемент коллекции. При удачном выполнении свойство <codeph>current</codeph> обновляется для ссылки на объект в новом местоположении. Возвращает значение <codeph>true</codeph>, если результирующее свойство <codeph>current</codeph> является действительным, или <codeph>false</codeph>, если нет (значение свойства равно <codeph>beforeFirst</codeph>).
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError. Для получения дополнительной информации об использовании ItemPendingError см. документацию по ItemPendingError и документацию по коллекциям.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:remove"><apiName>remove</apiName><shortdesc>
      Удаляет текущий элемент и возвращает его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный элемент.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет текущий элемент и возвращает его. Если местоположение курсора равно <codeph>beforeFirst</codeph> или <codeph>afterLast</codeph>, инициируется ошибка CursorError. При удалении любого элемента (кроме последнего) курсор перемещается на следующий элемент. При удалении последнего элемента курсор позиционируется на закладке AFTER_LAST.
      
      <p>Если элемент после удаленного элемента не является локальным и следует выполнить асинхронную операцию, инициируется ошибка ItemPendingError. Для получения дополнительной информации об использовании ItemPendingError см. документацию по ItemPendingError и документацию по коллекциям.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:seek"><apiName>seek</apiName><shortdesc>
      Перемещает курсор в местоположение, определяемое смещением от указанной закладки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bookmark</apiItemName><apiOperationClassifier>mx.collections:CursorBookmark</apiOperationClassifier><apiDesc>Ссылка <codeph>CursorBookmark</codeph> на информацию о маркере, которая позволяет повторно установить его в указанное местоположение. Можно настроить этот параметр на значение, возвращаемое из свойства <codeph>bookmark</codeph>, или на одно из следующих постоянных значений закладки:
      <ul>
        <li><codeph>CursorBookmark.FIRST</codeph> – поиск начинается с начала (первого элемента) коллекции;</li>
        <li><codeph>CursorBookmark.CURRENT</codeph> – поиск начинается из текущего расположения в коллекции;</li>
        <li><codeph>CursorBookmark.LAST</codeph> – поиск начинается с конца (последнего элемента) коллекции.</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Указывает глубину поиска от указанной закладки. Если указано отрицательное число, курсор перемещается от начала до указанной закладки. Если указано смещение за пределы коллекции, курсор позиционируется вне коллекции, в позиции <codeph>beforeFirst</codeph> или <codeph>afterLast</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Используется для удаленных данных. Указывает намерение выполнить итерации в определенном направлении сразу после завершения операции поиска. Это уменьшает число необходимых сетевых обходов при поиске. Если направление итерации известно во время запроса, соответствующее количество данных может быть возвращено перед запросом для его итерации.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Перемещает курсор в местоположение, определяемое смещением от указанной закладки. Если смещение является отрицательным числом, курсор позиционируется перед указанной закладкой на число элементов <codeph>offset</codeph>.
     
      <p>Если связанная коллекция является удаленной и не все ее элементы кэшированы локально, этот метод начинает асинхронную выборку из удаленной коллекции.</p>
     
      <p>Если данные не являются локальными и необходимо выполнить асинхронную операцию, инициируется ошибка ItemPendingError. Для получения дополнительной информации об использовании ItemPendingError см. документацию по ItemPendingError и документацию по коллекциям.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:afterLast:get"><apiName>afterLast</apiName><shortdesc>
      Если курсор расположен после последнего элемента в представлении, это свойство равно true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Если курсор расположен после последнего элемента в представлении, это свойство равно <codeph>true</codeph>. Если ICollectionView пуст (длина == 0), данное свойство равно <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:beforeFirst:get"><apiName>beforeFirst</apiName><shortdesc>
      Если курсор расположен перед первым элементом в представлении, это свойство равно true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Если курсор расположен перед первым элементом в представлении, это свойство равно <codeph>true</codeph>. Если ICollectionView пуст (длина == 0), данное свойство равно <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:bookmark:get"><apiName>bookmark</apiName><shortdesc>
      Предоставляет доступ к закладке, которая соответствует элементу, возвращаемому свойством current.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Предоставляет доступ к закладке, которая соответствует элементу, возвращаемому свойством <codeph>current</codeph>. Закладку можно использовать для перемещения курсора на уже просмотренный элемент или на позицию, соответствующую данному элементу. (Для получения дополнительной информации см. описание метода <codeph>seek()</codeph>)
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:current:get"><apiName>current</apiName><shortdesc>
      Предоставляет доступ к объекту в местоположении исходной коллекции, на которое ссылается данный курсор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Предоставляет доступ к объекту в местоположении исходной коллекции, на которое ссылается данный курсор. Если курсор находится за пределами коллекции (<codeph>beforeFirst</codeph>, <codeph>afterLast</codeph>), то возвращается значение <codeph>null</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link><link href="mx.collections.xml#IViewCursor/beforeFirst"><linktext>beforeFirst</linktext></link><link href="mx.collections.xml#IViewCursor/afterLast"><linktext>afterLast</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:view:get"><apiName>view</apiName><shortdesc>
      Ссылка на ICollectionView, с которым связан этот курсор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на ICollectionView, с которым связан этот курсор.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>