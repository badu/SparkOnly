<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.effects"><apiName>mx.effects</apiName><apiDetail/><apiClassifier id="mx.effects:EffectManager"><apiName>EffectManager</apiName><shortdesc>
  Класс EffectManager прослушивает события, например события show и move, отправляемые объектами в приложении Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EffectManager прослушивает события, например события <codeph>show</codeph> и <codeph>move</codeph>, отправляемые объектами в приложении Flex. Для каждого события, соответствующего триггеру события, он определяет наличие эффекта, присвоенного объекту. Если эффект определен, он воспроизводит этот эффект. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.effects:EffectManager:endEffectsForTarget"><apiName>endEffectsForTarget</apiName><shortdesc>
      Немедленно завершает любые эффекты, воспроизводящиеся для целевого объекта в настоящее время.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Целевой компонент, для которого необходимо завершить все эффекты.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Немедленно завершает любые эффекты, воспроизводящиеся для целевого объекта в настоящее время.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:resumeEventHandling"><apiName>resumeEventHandling</apiName><shortdesc>
      Позволяет классу EffectManager возобновить обработку событий после вызова метода suspendEventHandling().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Позволяет классу EffectManager возобновить обработку событий после вызова метода <codeph>suspendEventHandling()</codeph>. Используется внутренне совместно с методом <codeph>suspendEventHandling()</codeph> таким образом, что эффект, обновляющий экран, не допускает запуск другого эффекта.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:suspendEventHandling"><apiName>suspendEventHandling</apiName><shortdesc>
      После вызова этого метода класс EffectManager игнорирует все события, и до вызова resumeEventHandling() эффекты не запускаются.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      После вызова этого метода класс EffectManager игнорирует все события, и до вызова <codeph>resumeEventHandling()</codeph> эффекты не запускаются. Используется внутренне так образом, что эффект, обновляющий экран, не допускает запуска другого эффекта.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:Effect"><apiName>Effect</apiName><shortdesc>
  Класс Effect – это абстрактный базовый класс, определяющий базовые функциональные возможности всех эффектов Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Effect class defines the following properties,
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    <b>Properties</b>
    customFilter=""
    duration="500"
    filter=""
    hideFocusRing="false"
    perElementOffset="0"
    repeatCount="1"
    repeatDelay="0"
    startDelay="0"
    suspendBackgroundProcessing="false|true"
    target="<i>effect target</i>"
    targets="<i>array of effect targets</i>"
     
    <b>Events</b>
    effectEnd="<i>No default</i>"
    efectStart="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffect</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Effect – это абстрактный базовый класс, определяющий базовые функциональные возможности всех эффектов Flex. Класс Effect определяет базовый заводской класс для всех эффектов. Класс EffectInstance определяет базовый класс для всех подклассов экземпляров эффектов.
 
  <p>Экземпляр самого класса Effect в приложении не создается. Вместо этого создается экземпляр одного из подклассов, например Fade или WipeLeft.</p>
  
  </apiDesc><example conref="SimpleEffectExample.mxml"><swfblock conref="examples/SimpleEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#EffectInstance"><linktext>mx.effects.EffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Отправляется в момент начала воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется в момент начала воспроизведения эффекта.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Отправляется в момент прекращения воспроизведения эффекта, что происходит только в том случае, если воспроизведение эффекта было прервано посредством вызова метода stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется в момент прекращения воспроизведения эффекта, что происходит только в том случае, если воспроизведение эффекта было прервано посредством вызова метода <codeph>stop()</codeph>. Также отправляется событие EFFECT_END, сигнализирующее об окончании воспроизведения эффекта. Это дополнительное событие отправляется первым в качестве указателя для прослушивателей на то, что эффект не достиг своего конечного состояния.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Отправляется в момент завершения воспроизведения экземпляра эффекта, по завершении воспроизведения экземпляра или при прерывании воспроизведения эффекта посредством вызова метода end().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется в момент завершения воспроизведения экземпляра эффекта, по завершении воспроизведения экземпляра или при прерывании воспроизведения эффекта посредством вызова метода <codeph>end()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:Effect:Effect"><apiName>Effect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Запуск эффекта, как правило, состоит из трех шагов:</p>
     
      <ul>
        <li>Создайте экземпляр объекта эффекта с оператором <codeph>new</codeph>.</li>
        <li>Установите свойства для объекта эффекта, например <codeph>duration</codeph>.</li>
        <li>Вызовите метод <codeph>play()</codeph> или присвойте эффект триггеру.</li>
      </ul>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Effect:protected:applyValueToTarget"><apiName>applyValueToTarget</apiName><shortdesc>
      Используется внутренне инфраструктурой Effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Целевой объект эффекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Целевое свойство.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Значение свойства. 
     
      </apiDesc></apiParam><apiParam><apiItemName>props</apiItemName><apiType value="Object"/><apiDesc>Массив объектов, в котором каждый элемент массива содержит объекты <codeph>start</codeph> и <codeph>end</codeph> для свойств, контролируемых эффектом. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Используется внутренне инфраструктурой Effect. В случае вызова метода <codeph>captureStartValues()</codeph> Flex вызывает метод <codeph>play()</codeph>, использующий данную функцию для возврата целевых объектов в начальное состояние. Поведение по умолчанию должно состоять в принятии значения, полученного с использованием метода <codeph>getValueFromTarget()</codeph>, и его непосредственном присвоении свойству целевого объекта. Например: <pre>
      
      target[property] = value;</pre>
     
      <p>Этот метод следует переопределять только в том случае, если полученное значение необходимо применить другим способом. Следует отметить, что для установки свойств стиля целевого объекта применяется другой механизм. Для указания свойства стиля, которое требуется получить и применить, используется свойство <codeph>relevantStyles</codeph>. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc conref="mx.effects.IEffect#captureEndValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureEndValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Массив целевых объектов, для которых собираются значения
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstance"><apiName>createInstance</apiName><shortdesc conref="mx.effects.IEffect#createInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Объект экземпляра эффекта для эффекта.
      
      </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с данным эффектом.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstances"><apiName>createInstances</apiName><shortdesc conref="mx.effects.IEffect#createInstances()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Массив объектов экземпляров эффекта для эффекта, по одному объекту на каждый целевой объект.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив объектов, анимируемых с данным эффектом.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstances()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc conref="mx.effects.IEffect#deleteInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Экземпляр эффекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#deleteInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectEndHandler"><apiName>effectEndHandler</apiName><shortdesc>
      Вызывается по завершении воспроизведения экземпляра эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Объект события типа EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается по завершении воспроизведения экземпляра эффекта. В случае переопределения данного метода следует убедиться, что вызывается вышестоящий метод.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStartHandler"><apiName>effectStartHandler</apiName><shortdesc>
      Этот метод вызывается в момент начала воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Объект события типа EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Этот метод вызывается в момент начала воспроизведения эффекта. В случае переопределения данного метода следует убедиться, что вызывается вышестоящий метод. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStopHandler"><apiName>effectStopHandler</apiName><shortdesc>
      Вызывается при остановке воспроизведения экземпляра эффекта посредством вызова метода stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Объект события типа EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при остановке воспроизведения экземпляра эффекта посредством вызова метода <codeph>stop()</codeph>. В случае переопределения данного метода следует убедиться, что вызывается вышестоящий метод.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffect#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Прерываемый EffectInstance.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:filterInstance"><apiName>filterInstance</apiName><shortdesc>
      Определяет логику фильтрации экземпляра эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph> в случае необходимости воспроизведения экземпляра эффекта.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Свойства, изменяемые эффектом.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Целевой объект эффекта.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет логику фильтрации экземпляра эффекта. Данный метод переопределяется классом CompositeEffect.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc conref="mx.effects.IEffect#getAffectedProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Массив строк, указывающий имена свойств, измененных данным эффектом.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#getAffectedProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:getValueFromTarget"><apiName>getValueFromTarget</apiName><shortdesc>
      Вызывается методом captureStartValues() для получения значения свойства целевого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Значение свойства target. 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Целевой объект эффекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Целевое свойство.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается методом <codeph>captureStartValues()</codeph> для получения значения свойства целевого объекта. Данная функция должна вызваться только внутренне посредством инфраструктуры эффектов. Поведением по умолчанию является возврат <codeph>target[property]</codeph>. Разработчики эффектов могут переопределить эту функцию, если необходим другой вариант поведения. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:initInstance"><apiName>initInstance</apiName><shortdesc>
      Свойства копий эффекта для экземпляра эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Экземпляр эффекта для инициализации.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Свойства копий эффекта для экземпляра эффекта. 
     
      <p>Flex выполняет вызов этого метода из метода<codeph>Effect.createInstance()</codeph>; вам не требуется выполнять вызов самостоятельно. </p>
     
      <p>При создании пользовательского эффекта вы перезаписываете этот метод для копирования свойств из класса Effect в класс экземпляров эффектов. При изменении вызовите <codeph>super.initInstance()</codeph>. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffect#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffect#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Массив объектов EffectInstance для эффекта, по одному объекту на каждый целевой объект.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив целевых объектов, для которых воспроизводится данный эффект. Если этот параметр указан, то свойство <codeph>targets</codeph> эффекта не используется.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение равно <codeph>true</codeph>, эффект воспроизводится в обратном порядке.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffect#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffect#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffect#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Effect:protected:applyTransitionEndProperties"><apiName>applyTransitionEndProperties</apiName><shortdesc>
     Этот флаг указывает, должен ли эффект, воспроизводящийся при переходе, автоматически применить значения свойств, соответствующие конечному состоянию, или сохранить значения, установленные самим эффектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Этот флаг указывает, должен ли эффект, воспроизводящийся при переходе, автоматически применить значения свойств, соответствующие конечному состоянию, или сохранить значения, установленные самим эффектом.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:protected:endValuesCaptured"><apiName>endValuesCaptured</apiName><shortdesc>
      Флаг, содержащий значение true, если конечные значения эффекта уже определены, или значение false, если они должны быть получены из текущих свойств целевых объектов эффекта при воспроизведении эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, содержащий значение <codeph>true</codeph>, если конечные значения эффекта уже определены, или значение <codeph>false</codeph>, если они должны быть получены из текущих свойств целевых объектов эффекта при воспроизведении эффекта. Это свойство требуется для эффектов данных, так как при установке эффектов данных, таких как DefaultListEffect и DefaultTileListEffect, используется более сложная последовательность действий, чем при установке обычных эффектов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:instanceClass"><apiName>instanceClass</apiName><shortdesc>
      Объект типа Class, указывающий класс класса экземпляра эффекта для данного класса эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Объект типа Class, указывающий класс класса экземпляра эффекта для данного класса эффекта. 
      
      <p>Для всех подклассов класса Effect это свойство должно быть установлено в соответствующем конструкторе.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatCount"><apiName>repeatCount</apiName><shortdesc>
      Число повторов эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1</apiData><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число повторов эффекта. Возможные значения – это любые целые числа, которые больше или равны 0. Значение 1 соответствует однократному воспроизведению эффекта. Значение 0 соответствует бесконечному воспроизведению эффекта, пока оно не будет остановлено посредством вызова метода <codeph>end()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatDelay"><apiName>repeatDelay</apiName><shortdesc>
      Время ожидания (в миллисекундах) перед повторением эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время ожидания (в миллисекундах) перед повторением эффекта. Возможные значения – это любые целые числа, которые больше или равны 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:startDelay"><apiName>startDelay</apiName><shortdesc>
      Время ожидания (в миллисекундах) перед запуском эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время ожидания (в миллисекундах) перед запуском эффекта. Возможные значения – любые положительные целые числа или 0. Если эффект повторяется с использованием свойства <codeph>repeatCount</codeph>, <codeph>startDelay</codeph> применяется только при первом воспроизведении эффекта.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Если значение равно true, блокирует всю фоновую обработку во время воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, блокирует всю фоновую обработку во время воспроизведения эффекта. Фоновая обработка состоит из измерений, макетирования и обработки ответов, поступивших от сервера. Значение по умолчанию <codeph>false</codeph>.
     
      <p>Рекомендуется устанавливать для этого свойства значение <codeph>true</codeph> в большинстве случаев, так как оно способствует повышению производительности приложения. Однако для этого свойства необходимо установить значение <codeph>false</codeph> в следующих случаях:</p>
      <ul>
        <li>Во время воспроизведения эффекта поступают введенные пользователем данные, и приложение должно ответить на ввод пользовательских данных до завершения воспроизведения эффекта.</li>
        <li>Во время воспроизведения эффекта поступает ответ от сервера, и приложение должно обработать ответ во время продолжения воспроизведения эффекта.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffect#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:customFilter:get"><apiName>customFilter</apiName><shortdesc conref="mx.effects.IEffect#customFilter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#customFilter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffect#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffect#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:filter:get"><apiName>filter</apiName><shortdesc conref="mx.effects.IEffect#filter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#filter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffect#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc conref="mx.effects.IEffect#isPlaying">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#isPlaying">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc conref="mx.effects.IEffect#perElementOffset">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#perElementOffset">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Текущая позиция эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Текущая позиция эффекта. Значение этого свойства находится в диапазоне от 0 до значения общей продолжительности, включающей значения параметров эффекта <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> и <codeph>repeatDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc conref="mx.effects.IEffect#relevantProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc conref="mx.effects.IEffect#relevantStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffect#target"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffect#target"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:targets:get"><apiName>targets</apiName><shortdesc conref="mx.effects.IEffect#targets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#targets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffect#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffect#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
  Класс MaskEffect является абстрактным базовым классом для всех эффектов, используемых при анимации маски, например эффектов вытеснения и эффекта Iris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The MaskEffect class defines the following properties, 
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    createMaskFunction=""
    moveEasingFunction=""
    scaleEasingFunction=""
    scaleXFrom=""
    scaleXTo=""
    scaleYFrom=""
    scaleYTo=""
    show="true|false"
    xFrom=""
    xTo=""
    yFrom=""
    yTo=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс MaskEffect является абстрактным базовым классом для всех эффектов, используемых при анимации маски, например эффектов вытеснения и эффекта Iris. Этот класс инкапсулирует методы и свойства, общие для всех эффектов на основе маски.
 
  <p>Эффект маски для применения эффекта использует перекрытие, называемое маской. По умолчанию маска представляет собой прямоугольник того же размера, что и целевой компонент. </p>
 
  <p>Начальное или конечное состояние целевого компонента эффекта маски должно быть невидимым. Это означает, что эффект маски всегда приводит к появлению на экране или исчезновению с экрана целевого компонента.</p>
 
  <p>Свойства <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> и <codeph>scaleX</codeph> используются для указания начального и конечного масштаба маски, где значение 1,0 обозначает масштабирование маски в соответствии с размером целевого компонента, 2,0 –масштабирование в соответствии с удвоенным размером компонента, 0,5 –масштабирование в соответствии с половинным размером и т. д. Для использования какого-либо из этих свойств необходимо указать все четыре свойства.</p>
 
  <p>Свойства <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> и <codeph>yTo</codeph> используются для указания координат начального и конечного положения маски относительно целевого компонента, где (0, 0) соответствует верхнему левому углу целевого компонента. Для использования какого-либо из этих свойств необходимо указать все четыре свойства.</p>
 
  <p>Координаты начального и конечного положения маски зависят от типа эффекта и значения свойства <codeph>show</codeph> (<codeph>true</codeph> или <codeph>false</codeph>). Например, для эффекта WipeLeft и свойства <codeph>show</codeph> со значением <codeph>false</codeph> координаты начального положения маски равны (0, 0), что соответствует верхнему левому углу целевого компонента, а координаты конечного положения соответствуют верхнему правому углу целевого компонента и равны (width, 0), где width – ширина целевого компонента.</p>
 
  <p>Для свойства <codeph>show</codeph> со значением <codeph>true</codeph> при применении эффекта WipeLeft координаты начального положения маски равны (width, 0), а координаты конечного положения равны (0, 0).</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MaskEffectInstance"><linktext>mx.effects.effectClasses.MaskEffectInstance</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Отправляется по завершении эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении эффекта.
 
  <p>После однократного воспроизведения эффекта данное событие происходит одновременно с событием <codeph>effectEnd</codeph>. Если эффект повторяющийся, оно происходит в конце каждого повторения эффекта, а событие <codeph>endEffect</codeph> происходит после последнего воспроизведения эффекта.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Передается при каждом обновлении целевого объекта эффектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при каждом обновлении целевого объекта эффектом. Отправка данного события соответствует вызовам методов <codeph>onMoveTweenUpdate()</codeph> и <codeph>onScaleTweenUpdate()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Отправляется при запуске эффекта, что соответствует первому вызову методов onMoveTweenUpdate() и onScaleTweenUpdate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при запуске эффекта, что соответствует первому вызову методов <codeph>onMoveTweenUpdate()</codeph> и <codeph>onScaleTweenUpdate()</codeph>. Одновременно Flex также отправляет первое событие <codeph>tweenUpdate</codeph> для эффекта.
 
  <p>Событие <codeph>Effect.effectStart</codeph> отправляется перед событием <codeph>tweenStart</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:MaskEffect:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:MaskEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Возвращает свойства компонентов, измененные данным эффектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Массив строк, указывающий имена свойств, измененных данным эффектом.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает свойства компонентов, измененные данным эффектом. Этот метод возвращает массив, содержащий: <codeph>[visible, width, height]</codeph>. Так как все подклассы эффектов WipeDown, WipeLeft, WipeRight и WipeDown изменяют эти же самые свойства, в соответствующих классах данный метод не реализуются. 
     
      <p>Если создается подкласс класса MaskEffect для воспроизведения пользовательского эффекта, и этот подкласс изменяет другой набор свойств целевого объекта, метод следует переопределить и возвратить массив, содержащий список свойств, изменяемых данным подклассом.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:MaskEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Вызывается, когда TweenEffect отправляет TweenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Объект события типа TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается, когда TweenEffect отправляет TweenEvent. В случае переопределения данного метода следует убедиться, что вызывается вышестоящий метод.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:MaskEffect:createMaskFunction"><apiName>createMaskFunction</apiName><shortdesc>
      Функция, вызываемая при создании маски путем реализации эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, вызываемая при создании маски путем реализации эффекта. Значением по умолчанию является функция, возвращающая объект Rectangle с размерами, совпадающими с размерами целевого объекта. 
     
      <p>Пользовательская функция маски имеет следующую подпись:</p>
     
      <pre>
      public function createLargeMask(targ:Object, boundp:Rectangle):Shape
      {
          var myMask:Shape = new FlexShape();
     
          // Create mask.
     
          return myMask;
      }
      </pre>
     
      <p>Пользовательская функция маски принимает первый аргумент, соответствующий целевому компоненту эффекта, и второй аргумент, определяющий размеры цели, что позволяет правильно установить размеры маски. Этот аргумент используется для получения доступа к свойствам целевого компонента, таким как <codeph>width</codeph> и <codeph>height</codeph>, позволяющим создать маску с правильными размерами.</p>
     
      <p>Функция возвращает отдельный объект Shape, определяющий маску.</p>   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:moveEasingFunction"><apiName>moveEasingFunction</apiName><shortdesc>
      Функция замедления, используемая для перемещения маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция замедления, используемая для перемещения маски.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleEasingFunction"><apiName>scaleEasingFunction</apiName><shortdesc>
      Функция замедления, используемая для масштабирования маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция замедления, используемая для масштабирования маски.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXFrom"><apiName>scaleXFrom</apiName><shortdesc>
      Начальное значение scaleX для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Начальное значение scaleX для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> и <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXTo"><apiName>scaleXTo</apiName><shortdesc> 
      Конечное значение scaleX для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Конечное значение scaleX для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> и <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYFrom"><apiName>scaleYFrom</apiName><shortdesc> 
      Начальное значение scaleY для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Начальное значение scaleY для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> и <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYTo"><apiName>scaleYTo</apiName><shortdesc>
      Конечное значение scaleY для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Конечное значение scaleY для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> и <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xFrom"><apiName>xFrom</apiName><shortdesc> 
      Координата х начальной позиции для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата х начальной позиции для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> и <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xTo"><apiName>xTo</apiName><shortdesc> 
      Координата х целевой позиции для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата х целевой позиции для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> и <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yFrom"><apiName>yFrom</apiName><shortdesc>
      Координата у начальной позиции для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Координата у начальной позиции для маски. 
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> и <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yTo"><apiName>yTo</apiName><shortdesc> 
      Координата у целевой позиции для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата у целевой позиции для маски.
     
      <p>Для определения данного свойства необходимо указать все четыре свойства: <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> и <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:showTarget:get"><apiName>showTarget</apiName><shortdesc>
      Указывает, что целевой компонент становится видимым (true) или невидимым (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, что целевой компонент становится видимым (<codeph>true</codeph>) или невидимым (<codeph>false</codeph>). Если данный эффект указывается для триггера <codeph>showEffect</codeph> или <codeph>hideEffect</codeph>, Flex присваивает свойству <codeph>showTarget</codeph> или значение <codeph>true</codeph>, если компонент становится видимым, или значение <codeph>false</codeph>, если компонент становится невидимым. Если эффект используется с другими триггерами эффектов, его необходимо установить самостоятельно, как правило, в прослушивателе события <codeph>startEffect</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
  Класс SoundEffect воспроизводит звуковой файл MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SoundEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SoundEffect
    <b>Properties</b>
    id="ID"
    autoLoad="true|false"
    bufferTime="1000"
    loops="0"
    panEasingFunction=""
    panFrom="0"
    source=""
    startTime="0"
    useDuration="true|false"
    volumeEasingFunction="true|false"
    volumeTo="1"
     
    <b>Events</b>
    complete="<i>No default</i>"
    id3="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SoundEffect воспроизводит звуковой файл MP3. Например, можно воспроизводить звук при нажатии пользователем элемента управления Button. Данный эффект позволяет повторять звук, выбирать исходный файл и управлять громкостью и панорамой. 
 
  <p>Файл MP3 указывается с помощью свойства <codeph>source</codeph>. Если уже имеется встроенный файл MP3, с помощью ключевого слова <codeph>Embed</codeph> можно передать объект Class файла MP3 в свойство <codeph>source</codeph>. В противном случае, следует указать полный URL-адрес файла MP3.</p>
  
  </apiDesc><example conref="SoundEffectExample.mxml"><swfblock conref="examples/SoundEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SoundEffectInstance"><linktext>mx.effects.effectClasses.SoundEffectInstance</linktext></link><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="mx.effects:SoundEffect_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Отправляется периодически по мере загрузки звукового файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется периодически по мере загрузки звукового файла.
 
  <p>В объекте события можно получить доступ к информации о количестве загруженных в настоящее время байтов и об общем количестве байтов, которые требуется загрузить. Отправка события не является обязательной, т. е. событие <codeph>complete</codeph> может быть отправлено без отправки каких-либо событий <codeph>progress</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Отправляется, если при загрузке звукового файла произошла ошибка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, если при загрузке звукового файла произошла ошибка.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.ID3_id3"><apiName>id3</apiName><shortdesc>
  Отправляется, если для звукового файла MP3 доступны данные ID3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ID3</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, если для звукового файла MP3 доступны данные ID3.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Отправляется по завершении загрузки звукового файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении загрузки звукового файла.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:SoundEffect:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:SoundEffect:load"><apiName>load</apiName><shortdesc>
      Загружает MP3, если свойство source указывает на URL-адрес.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Загружает MP3, если свойство <codeph>source</codeph> указывает на URL-адрес.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:SoundEffect:bufferTime"><apiName>bufferTime</apiName><shortdesc> 
      Класс SoundEffect использует внутренний звуковой объект для управления файлом MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1000</apiData><apiType value="Number"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Класс SoundEffect использует внутренний звуковой объект для управления файлом MP3. Это свойство указывает минимальное количество миллисекунд воспроизведения звуковых данных, содержащихся в буфере звукового объекта. Звуковой объект ожидает, пока не будет загружен как минимум этот объем данных, прежде чем воспроизведение начнется или возобновится после прерывания подключения к сети.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:loops"><apiName>loops</apiName><shortdesc>
      Число воспроизведений звукового эффекта в цикле: при значении 0 эффект воспроизводится однократно, при значении 1 – дважды и т. д.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число воспроизведений звукового эффекта в цикле: при значении 0 эффект воспроизводится однократно, при значении 1 – дважды и т. д. Если файл MP3 повторяется, для него по-прежнему используется значение свойства <codeph>useDuration</codeph>, определяющее время воспроизведения.
     
      <p>Свойство <codeph>duration</codeph> имеет приоритет над этим свойством. Если продолжительность эффекта не достаточна для, по крайней мере, однократного воспроизведения звука, звук не образует цикла.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panEasingFunction"><apiName>panEasingFunction</apiName><shortdesc>
      Функция замедления для эффекта Pan.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция замедления для эффекта Pan. Эта функция используется для интерполяции в диапазоне между значениями <codeph>panFrom</codeph> и <codeph>panTo</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panFrom"><apiName>panFrom</apiName><shortdesc>
      Начальное значение Pan звукового объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Начальное значение Pan звукового объекта. Значение может принадлежать диапазону от -1.0 до 1.0; при значении -1.0 используется только левый канал, а при значении 1.0 – только правый канал, при значении 0.0 звук равномерно сбалансирован между этими двумя каналами.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panTo"><apiName>panTo</apiName><shortdesc>
      Конечное значение Pan звукового объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Конечное значение Pan звукового объекта. Значение может принадлежать диапазону от -1.0 до 1.0; при значении -1.0 используется только левый канал, а при значении 1.0 – только правый канал, при значении 0.0 звук равномерно сбалансирован между этими двумя каналами.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:startTime"><apiName>startTime</apiName><shortdesc> 
      Исходное положение в файле MP3 (в миллисекундах), с которого должно начинаться воспроизведение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Исходное положение в файле MP3 (в миллисекундах), с которого должно начинаться воспроизведение.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:useDuration"><apiName>useDuration</apiName><shortdesc>
      В случае значения true воспроизведение эффекта прекращается по истечении времени, указанного свойством duration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      В случае значения <codeph>true</codeph> воспроизведение эффекта прекращается по истечении времени, указанного свойством <codeph>duration</codeph>. Если значение равно <codeph>false</codeph>, воспроизведение эффекта прекращается после завершения воспроизведения файла MP3 или выполнения цикла.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeEasingFunction"><apiName>volumeEasingFunction</apiName><shortdesc>
      Функция замедления для эффекта Volume.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция замедления для эффекта Volume. Эта функция используется для интерполяции в диапазоне между значениями <codeph>volumeFrom</codeph> и <codeph>volumeTo</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeFrom"><apiName>volumeFrom</apiName><shortdesc>
      Начальное значение Volume звукового объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Начальное значение Volume звукового объекта. Допустимыми являются значения от 0,0 до 1,0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeTo"><apiName>volumeTo</apiName><shortdesc>
      Конечное значение Volume звукового объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Конечное значение Volume звукового объекта. Допустимыми являются значения от 0,0 до 1,0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:autoLoad:get"><apiName>autoLoad</apiName><shortdesc> 
      Если значение равно true, то после указания источника загружается файл MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Если значение равно <codeph>true</codeph>, то после указания источника <codeph>source</codeph> загружается файл MP3.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:isLoading:get"><apiName>isLoading</apiName><shortdesc>
      Это свойство имеет значение true, если файл MP3 загружен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Это свойство имеет значение <codeph>true</codeph>, если файл MP3 загружен. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:sound:get"><apiName>sound</apiName><shortdesc>
      Звуковой объект, в который был загружен файл MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Sound"/></apiValueDef><apiDesc>
      Звуковой объект, в который был загружен файл MP3. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:source:get"><apiName>source</apiName><shortdesc>
      URL или класс воспроизводимого файла MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      URL или класс воспроизводимого файла MP3. Если уже имеется встроенный файл MP3, с помощью ключевого слова <codeph>Embed</codeph> можно передать объект Class файла MP3 в свойство <codeph>source</codeph>. В противном случае, следует указать полный URL-адрес файла MP3.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
  Класс TweenEffect является суперклассом для всех эффектов на основе объекта Tween.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:TweenEffect" replacement="spark.effects.Animate" since="4.0">
<description>
  TweenEffect представляет собой суперкласс для анимируемых эффектов в Flex 3. В Flex 4 эффекты Spark расширяют класс spark.effects.Animate вместо TweenEffect.
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TweenEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TagName
    <b>Properties</b>
    easingFunction="<i>easing function name; no default</i>"
     
    <b>Events</b>
    tweenEnd="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TweenEffect является суперклассом для всех эффектов на основе объекта Tween. Этот класс инкапсулирует методы и свойства, общие для всех эффектов на основе объекта Tween, что позволяет избежать дублирования кода.
 
  <p>Для определения эффекта, воспроизводящего анимацию в течение некоторого интервала времени, необходимо создать подкласс класса TweenEffect. Например, эффект Resize изменяет размер целевого объекта в течение указанного интервала.</p>
 
  </apiDesc><example conref="SimpleTweenEffectExample.mxml"><swfblock conref="examples/SimpleTweenEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Отправляется по завершении эффекта анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении эффекта анимации. Это событие соответствует вызову метода <codeph>TweenEffectInstance.onTweenEnd()</codeph>.
 
  <p>При однократном воспроизведении эффекта анимации данное событие происходит одновременно с событием <codeph>effectEnd</codeph>. Если эффект анимации является повторяющимся, это событие происходит в конце каждого повторения эффекта, а событие <codeph>endEffect</codeph> происходит после последнего воспроизведения эффекта.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Отправляется при каждом обновлении целевого объекта эффектом анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при каждом обновлении целевого объекта эффектом анимации. Это событие соответствует вызову метода <codeph>TweenEffectInstance.onTweenUpdate()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Отправляется при запуске эффекта анимации, что соответствует первому вызову метода onTweenUpdate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при запуске эффекта анимации, что соответствует первому вызову метода <codeph>onTweenUpdate()</codeph>. Одновременно Flex также отправляет первое событие <codeph>tweenUpdate</codeph> для эффекта.
 
  <p>Событие <codeph>Effect.effectStart</codeph> отправляется перед событием <codeph>tweenStart</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:TweenEffect:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:TweenEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Вызывается, когда TweenEffect отправляет TweenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Объект события типа TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается, когда TweenEffect отправляет TweenEvent. В случае переопределения данного метода следует убедиться, что вызывается вышестоящий метод.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:TweenEffect:easingFunction"><apiName>easingFunction</apiName><shortdesc>
      Функция замедления для анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/></apiValueDef><apiDesc>
      Функция замедления для анимации. Функция замедления используется для интерполяции значений в диапазоне между начальным и конечным значениями. Стандартная функция замедления выполняет линейную интерполяцию, а более сложные функции замедления создают иллюзию ускорения и замедления, придающую анимации естественность.
     
      <p>Если функция замедления не указана, используется функция на основе метода <codeph>Math.sin()</codeph>.</p>
     
      <p>Функция замедления сопровождается подписью функции, популяризируемой Робертом Пеннером. Функция принимает четыре аргумента. Первый аргумент – «текущее время», где начальное время анимации равно 0. Второй аргумент – начальное значение в начале анимации (число). Третий аргумент – конечное значение минус начальное значение. Четвертый аргумент – продолжительность анимации. Возвращаемое значение – интерполированное значение для текущего времени. Как правило, это значение находится в диапазоне между начальным и конечным значениями.</p>
     
      <p>Значением этого свойства должен быть объект функции.</p>
     
      <p>Flex включает ряд функций замедления, входящих в пакет в mx.effects.easing.</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Tween"><apiName>Tween</apiName><shortdesc>
  Класс Tween определяет анимацию свойства, выполняемую для целевого объекта в течение некоторого интервала времени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Tween" replacement="spark.effects.animation.Animation" since="4.0">
<description>
  Tween представляет собой базовый класс анимации для эффектов в Flex 3. В Flex 4 для эффектов Spark используется класс spark.effects.animation.Animation, предоставляющий аналогичные функциональные возможности.
 </description>
	</Alternative></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Tween определяет анимацию свойства, выполняемую для целевого объекта в течение некоторого интервала времени. К анимации относятся изменение позиции, например выполняемое с помощью эффекта Move; изменение размеров, выполняемое с помощью эффектов Resize или Zoom; изменение видимости, выполняемое с помощью эффектов Fade или Dissolve; и другие типы анимации.
 
  <p>При определении эффектов анимации, как правило, создается экземпляр класса Tween с переопределением метода <codeph>EffectInstance.play()</codeph>. Для определения анимации экземпляр Tween принимает свойства <codeph>startValue</codeph>, <codeph>endValue</codeph> и <codeph>duration</codeph>, а также дополнительную функцию замедления.</p> 
 
  <p>Объект Tween запускает функцию обратного вызова <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> в рамках стандартного интервала для экземпляра эффекта во время воспроизведения эффекта и передает методу <codeph>onTweenUpdate()</codeph> интерполированное значение в интервале между <codeph>startValue</codeph> и <codeph>endValue</codeph>. Как правило, функция обратного вызова обновляет некоторые свойства целевого объекта, что приводит к анимации объекта во время всего воспроизведения эффекта.</p>
 
  <p>По завершении эффекта объект Tween запускает функцию обратного вызова <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph>, если она определена. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><apiConstructor id="mx.effects:Tween:Tween"><apiName>Tween</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>listener</apiItemName><apiType value="Object"/><apiDesc>Объект, получающий уведомление в каждом интервале анимации. Как правило, в качестве значения передается ключевое слово <codeph>this</codeph>. <codeph>Listener</codeph> должен определить метод <codeph>onTweenUpdate()</codeph> и, при необходимости, метод <codeph>onTweenEnd()</codeph>. Первый из двух методов вызывается для каждого интервала анимации, второй метод вызывается только после завершения анимации.
     
      </apiDesc></apiParam><apiParam><apiItemName>startValue</apiItemName><apiType value="Object"/><apiDesc>Начальное(ые) значение(я) анимации. Число или массив чисел. Если передается число, Tween интерполирует значение в диапазоне между этим числом и числом, переданным параметром <codeph>endValue</codeph>. Если передается массив чисел, интерполируется каждое число в массиве.
     
      </apiDesc></apiParam><apiParam><apiItemName>endValue</apiItemName><apiType value="Object"/><apiDesc>Последнее(ие) значение(я) анимации. Тип этого аргумента должен соответствовать параметру <codeph>startValue</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>duration</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Продолжительность анимации в миллисекундах.
     
      </apiDesc></apiParam><apiParam><apiItemName>minFps</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Минимальное количество вызовов метода <codeph>onTweenUpdate()</codeph> в секунду. Код Tween выполняет попытки вызова метода <codeph>onTweenUpdate()</codeph> настолько часто, насколько это возможно (до 100 раз в секунду). Однако если частота не превосходит <codeph>minFps</codeph>, продолжительность анимации автоматически увеличивается. В результате предварительно «замороженная» анимация (не получающая циклов ЦП) не осуществляет немедленный переход вперед, а возобновляется с момента останова. 
     
      </apiDesc></apiParam><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Указывает альтернативную функцию обратного вызова для обновления, которая должна использоваться вместо <codeph>listener.OnTweenUpdate()</codeph>
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Указывает альтернативную функцию обратного вызова для завершения, которая должна использоваться вместо <codeph>listener.OnTweenEnd()</codeph>
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>При вызове конструктора анимация воспроизводится автоматически.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Tween:endTween"><apiName>endTween</apiName><shortdesc>
      Прерывают анимацию, переходят непосредственно в конец анимации и запускают функцию обратного вызова onTweenEnd().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Прерывают анимацию, переходят непосредственно в конец анимации и запускают функцию обратного вызова <codeph>onTweenEnd()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:pause"><apiName>pause</apiName><shortdesc>
      Приостанавливает эффект до вызова метода resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Приостанавливает эффект до вызова метода <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:resume"><apiName>resume</apiName><shortdesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:reverse"><apiName>reverse</apiName><shortdesc>
      Воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:seek"><apiName>seek</apiName><shortdesc>
      Расширяет эффект анимации вплоть до указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiDesc>Положение в миллисекундах между 0 и значением свойства <codeph>duration</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Расширяет эффект анимации вплоть до указанной позиции. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:setTweenHandlers"><apiName>setTweenHandlers</apiName><shortdesc>
      По умолчанию класс Tween запускает функцию обратного вызова mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate() в рамках стандартного интервала для экземпляра эффекта во время воспроизведения эффекта и дополнительную функцию обратного вызова mx.effects.effectClasses.TweenEffectInstance.onTweenEnd() в конце воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiDesc>Указывает функцию обратного вызова для обновления.
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiDesc>Указывает функцию обратного вызова для завершения.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      По умолчанию класс Tween запускает функцию обратного вызова <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> в рамках стандартного интервала для экземпляра эффекта во время воспроизведения эффекта и дополнительную функцию обратного вызова <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph> в конце воспроизведения эффекта. 
     
      <p>Этот метод позволяет указывать другие методы в качестве функций обратного вызова для обновления и завершения.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:stop"><apiName>stop</apiName><shortdesc>
      Останавливает анимацию, заканчивает ее без отправки события или вызова функции анимации endFunction или onTweenEnd().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Останавливает анимацию, заканчивает ее без отправки события или вызова функции анимации endFunction или <codeph>onTweenEnd()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Tween:duration"><apiName>duration</apiName><shortdesc>
      Продолжительность анимации в миллисекундах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Продолжительность анимации в миллисекундах. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:listener"><apiName>listener</apiName><shortdesc>
      Объект, получающий уведомление в каждом интервале анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект, получающий уведомление в каждом интервале анимации. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:easingFunction:set"><apiName>easingFunction</apiName><shortdesc>
      Устанавливает функцию замедления для анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
      Устанавливает функцию замедления для анимации. Функция замедления используется для интерполяции в диапазоне между значениями <codeph>startValue</codeph> и <codeph>endValue</codeph>. Стандартная функция замедления выполняет линейную интерполяцию, а более сложные функции замедления создают иллюзию ускорения и замедления, придающую анимации естественность.
     
      <p>Если функция замедления не указана, используется функция на основе метода <codeph>Math.sin()</codeph>.</p>
     
      <p>Функция замедления сопровождается подписью функции, популяризируемой Робертом Пеннером. Функция принимает четыре аргумента. Первый аргумент – «текущее время», где начальное время анимации равно 0. Второй аргумент – начальное значение в начале анимации (число). Третий аргумент – конечное значение минус начальное значение. Четвертый аргумент – продолжительность анимации. Возвращаемое значение – интерполированное значение для текущего времени (как правило, это значение между начальным и конечным значениями).</p>
     
      <p>Flex включает ряд функций замедления, входящих в пакет в mx.effects.easing.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
  Класс EffectInstance представляет экземпляр эффекта, воспроизводящегося в целевом объекте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffectInstance</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EffectInstance представляет экземпляр эффекта, воспроизводящегося в целевом объекте. Каждый целевой объект имеет отдельный связанный с нею экземпляр эффекта. Время жизни экземпляра эффекта является непродолжительным. Экземпляр создается при воспроизведении эффекта для целевого объекта и удаляется по завершении воспроизведения эффекта. Если для целевого объекта одновременно воспроизводится несколько эффектов (например, эффект Parallel), то для каждого эффекта создается отдельный экземпляр эффекта.
 
  <p>Разработчики эффектов должны создать класс экземпляров для пользовательских эффектов.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiConstructor id="mx.effects:EffectInstance:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Объект UIComponent для анимации с данным эффектом.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectInstance:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffectInstance#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#finishEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#initEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event, отправленный для запуска эффекта. Например, для триггера mouseDownEffect событием является MouseEvent с типом MouseEvent.MOUSEDOWN. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#initEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffectInstance#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffectInstance#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffectInstance#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffectInstance#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#startEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#startEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffectInstance#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectInstance:protected:playCount"><apiName>playCount</apiName><shortdesc> 
      Число воспроизведений экземпляра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc> 
      Число воспроизведений экземпляра.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffectInstance#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffectInstance#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effect:get"><apiName>effect</apiName><shortdesc conref="mx.effects.IEffectInstance#effect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Текущая позиция эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Текущая позиция эффекта. Значение этого свойства находится в диапазоне от 0 до значения общей продолжительности, включающей значения параметров эффекта <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> и <codeph>repeatDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc conref="mx.effects.IEffectInstance#propertyChanges">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#propertyChanges">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#startDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#startDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffectInstance#target">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#target">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffectInstance#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Zoom"><apiName>Zoom</apiName><shortdesc>
  Эффект Zoom увеличивает или уменьшает объект относительно центральной точки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Zoom" replacement="spark.effects.Scale" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Zoom&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Zoom
    id="ID"
    captureRollEvents="false|true"
    originX="Calculated"
    originY="Calculated"
    zoomWidthFrom="0.01"
    zoomWidthTo="1.0"
    zoomHeightFrom="0.01"
    zoomHeightTo="1.0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Zoom увеличивает или уменьшает объект относительно центральной точки.
 
  <p>При применении эффекта Zoom к тексту, визуализируемому с использованием системного шрифта, Flex применяет масштабирование текста в соответствии с целыми размерами кегля. Несмотря на то что использование встроенных шрифтов нежелательно при применении эффекта Zoom к тексту, после применения Zoom к встроенным шрифтам текст выглядит более ровным. </p>
 
  <p><b>Примечание.</b> Эффект Zoom не работает, если свойство <codeph>Container.autoLayout</codeph> имеет значение <codeph>false</codeph>.</p>
  
  </apiDesc><example conref="ZoomEffectExample.mxml"><swfblock conref="examples/ZoomEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ZoomInstance"><linktext>mx.effects.effectClasses.ZoomInstance</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><apiConstructor id="mx.effects:Zoom:Zoom"><apiName>Zoom</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Zoom:captureRollEvents"><apiName>captureRollEvents</apiName><shortdesc>
	  Если значение равно true, предотвращает отправку из Flex событий rollOut и rollOver при отсутствии перемещения мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Если значение равно <codeph>true</codeph>, предотвращает отправку из Flex событий <codeph>rollOut</codeph> и <codeph>rollOver</codeph> при отсутствии перемещения мыши. Устанавливает для этого свойства значение <codeph>true</codeph> при использовании эффекта Zoom для уменьшения и увеличения размера целевого объекта. 
	  
	  <p>Например, <codeph>rollOverEffect</codeph> используется для запуска эффекта Zoom с целью уменьшения размера целевого объекта. Поскольку размер целевого объекта уменьшается, курсор мыши больше не помещается на целевом объекте, при этом запускается событие <codeph>rollOut</codeph> и соответствующий <codeph>rollOutEffect</codeph>. Установка для свойства <codeph>captureRollEvents</codeph> значения <codeph>true</codeph> предотвращает отправку из Flex события <codeph>rollOut</codeph>, если только этого не произошло вследствие перемещения мыши. </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originX"><apiName>originX</apiName><shortdesc>
	  Число, представляющее позицию по оси x начала масштабирования, если целевой объект эффекта находится в контейнере с абсолютным позиционированием, например в контейнере Canvas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее позицию по оси x начала масштабирования, если целевой объект эффекта находится в контейнере с абсолютным позиционированием, например в контейнере Canvas. Начало масштабирования – это позиция в целевом объекте, относительно которой выполняется центрирование эффекта Zoom 
	 
	  <p>Значение должно находиться в диапазоне от 0 до величины, соответствующей ширине целевого компонента.</p> 
	 
	  По умолчанию используется значение <codeph>target.width</codeph> / 2, соответствующее центру целевого объекта.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originY"><apiName>originY</apiName><shortdesc>
	  Число, представляющее позицию по оси y начала масштабирования, если целевой объект эффекта находится в контейнере с абсолютным позиционированием, например в контейнере Canvas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее позицию по оси y начала масштабирования, если целевой объект эффекта находится в контейнере с абсолютным позиционированием, например в контейнере Canvas. Начало масштабирования – это позиция в целевом объекте, относительно которой выполняется центрирование эффекта Zoom 
	 
	  <p>Значение должно находиться в диапазоне от 0 до величины, соответствующей высоте целевого компонента.</p> 
	 
	  По умолчанию используется значение <codeph>target.height</codeph> / 2, соответствующее центру целевого объекта.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightFrom"><apiName>zoomHeightFrom</apiName><shortdesc>
	  Число, представляющее масштаб, с которого начинается масштабирование высоты, в виде процентного значения от 0,01 до 1,0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее масштаб, с которого начинается масштабирование высоты, в виде процентного значения от 0,01 до 1,0. Значением по умолчанию является 0,01, которое является очень маленьким.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightTo"><apiName>zoomHeightTo</apiName><shortdesc>
	  Число, представляющее масштаб, которым завершается масштабирование высоты, в виде процентного значения от 0,01 до 1,0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее масштаб, которым завершается масштабирование высоты, в виде процентного значения от 0,01 до 1,0. Значением по умолчанию является 1,0, которое соответствует объекту нормального размера.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthFrom"><apiName>zoomWidthFrom</apiName><shortdesc>
	  Число, представляющее масштаб, с которого начинается масштабирование ширины, в виде процентного значения от 0,01 до 1,0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее масштаб, с которого начинается масштабирование ширины, в виде процентного значения от 0,01 до 1,0. Значением по умолчанию является 0,01, которое является очень маленьким.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthTo"><apiName>zoomWidthTo</apiName><shortdesc>
	  Число, представляющее масштаб, которым завершается масштабирование ширины, в виде процентного значения от 0,01 до 1,0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Число, представляющее масштаб, которым завершается масштабирование ширины, в виде процентного значения от 0,01 до 1,0. Значением по умолчанию является 1,0, которое соответствует объекту нормального размера.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
  Эффект AnimateProperty анимирует свойство или стиль компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AnimateProperty&gt;</code> tag
  inherits all the tag attributes of its superclass
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:AnimateProperty 
    id="ID"
   fromValue="0"
    isStyle="false|true"	 
    property="<i>required</i>"
    roundValue="false|true"
    toValue="0" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект AnimateProperty анимирует свойство или стиль компонента. Для анимации необходимо указать имя свойства, начальное и конечное значения свойства. Эффект устанавливает свойство на начальное значение, а затем обновляет значение свойства во время воспроизведения эффекта, пока оно не достигнет конечного значения. 
 
  <p>Например, для эффекта изменения ширины элемента управления Button можно указать <codeph>width</codeph> в качестве имени анимируемого свойства, а также определить начальные и конечные значения ширины.</p> 
 
  </apiDesc><example conref="AnimatePropertyEffectExample.mxml"><swfblock conref="examples/AnimatePropertyEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#AnimatePropertyInstance"><linktext>mx.effects.effectClasses.AnimatePropertyInstance</linktext></link></related-links><apiConstructor id="mx.effects:AnimateProperty:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:AnimateProperty:fromValue"><apiName>fromValue</apiName><shortdesc>
	  Начальное значение свойства для эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Начальное значение свойства для эффекта. Значением по умолчанию является текущее значение свойства целевого объекта.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:isStyle"><apiName>isStyle</apiName><shortdesc>
	  В случае значения true атрибутом свойства является стиль, этот атрибут устанавливается при использовании метода setStyle().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  В случае значения <codeph>true</codeph> атрибутом свойства является стиль, этот атрибут устанавливается при использовании метода <codeph>setStyle()</codeph>. 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:property"><apiName>property</apiName><shortdesc>
	  Имя свойства целевого объекта, которое используется для анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Имя свойства целевого объекта, которое используется для анимации. Этот атрибут является обязательным.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:roundValue"><apiName>roundValue</apiName><shortdesc>
	  В случае значения true интерполированное значение для анимации округляется до ближайшего целого числа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  В случае значения <codeph>true</codeph> интерполированное значение для анимации округляется до ближайшего целого числа. Это свойство рекомендуется применять, если свойство, используемое для анимации, имеет значение int или uint.
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:toValue"><apiName>toValue</apiName><shortdesc>
	  Конечное значение для эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Конечное значение для эффекта. Значением по умолчанию является текущее значение свойства целевого объекта.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Move"><apiName>Move</apiName><shortdesc>
  Эффект Move изменяет положение компонента в указанный интервал времени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Move" replacement="spark.effects.Move" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Move&gt;</code> tag
  inherits all of the tag attributes of its of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Move
    id="ID"
    xFrom="val" 
    yFrom="val"
    xTo="val"
    yTo="val"
    xBy="val"
    yBy="val"
   /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Move изменяет положение компонента в указанный интервал времени. Можно указать начальную позицию с помощью значений <codeph>xFrom</codeph> и <codeph>yFrom</codeph>, конечную позицию с помощью <codeph>xTo</codeph> и <codeph>yTo</codeph> или число пикселей для перемещения компонента посредством <codeph>xBy</codeph> и <codeph>yBy</codeph>. 
 
  <p>При указании любых двух пар значений (начальная позиция, место назначения или расстояние) Flex вычисляет третью пару. Если указаны все три пары значений, Flex игнорирует значения <codeph>xBy</codeph> и <codeph>yBy</codeph>. Если указаны только значения <codeph>xTo</codeph> и <codeph>yTo</codeph> или <codeph>xBy</codeph> и <codeph>yBy</codeph>, Flex назначает текущей позицией объекта значения <codeph>xFrom</codeph> и <codeph>yFrom</codeph>.</p>
  
  <p>Если для триггера <codeph>moveEffect</codeph> указан эффект Move, а шесть значений для свойств From, To и By не установлены, их устанавливает Flex с целью создания плавного перехода между старой и новой позициями объекта.</p>
 
  <p>Как правило, этот эффект применяется к целевому объекту в контейнере, использующем абсолютное позиционирование, таком как Canvas, или в контейнере с <codeph>layout=absolute</codeph>, таком как Application или Panel. Если этот эффект применить к целевому объекту в контейнере с автоматическим макетом, таком как VBox или Grid, перемещение произойдет, но в следующий раз при обновлении собственного макета контейнер переместит цель обратно в первоначальную позицию. Для свойства <codeph>autoLayout</codeph> контейнера можно установить значение <codeph>false</codeph> с целью блокировки обратного перемещения, но это приведет к блокировке всех управляющих элементов в контейнере.</p>
  
  </apiDesc><example conref="MoveEffectExample.mxml"><swfblock conref="examples/MoveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MoveInstance"><linktext>mx.effects.effectClasses.MoveInstance</linktext></link></related-links><apiConstructor id="mx.effects:Move:Move"><apiName>Move</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Move:xBy"><apiName>xBy</apiName><shortdesc> 
      Число пикселей для перемещения компонентов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Число пикселей для перемещения компонентов по оси X. Значения могут быть отрицательными. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xFrom"><apiName>xFrom</apiName><shortdesc> 
      Координата х начальной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата х начальной позиции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xTo"><apiName>xTo</apiName><shortdesc> 
      Координата х целевой позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата х целевой позиции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yBy"><apiName>yBy</apiName><shortdesc> 
      Число пикселей для перемещения компонентов вдоль оси y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Число пикселей для перемещения компонентов вдоль оси y. Значения могут быть отрицательными.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yFrom"><apiName>yFrom</apiName><shortdesc>
      Координата у начальной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Координата у начальной позиции.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yTo"><apiName>yTo</apiName><shortdesc> 
      Координата у целевой позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Координата у целевой позиции.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Iris"><apiName>Iris</apiName><shortdesc>
  Эффект Iris анимирует целевой объект эффекта путем развертывания или сжатия прямоугольной маски, выровненной по центру целевого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Iris&gt;</code> tag
  inherits all of the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Iris
    id="ID"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:MaskEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Iris анимирует целевой объект эффекта путем развертывания или сжатия прямоугольной маски, выровненной по центру целевого объекта. Эффект может или увеличить маску из центра целевого объекта для представления целевого объекта или сжать маску к центру для скрытия целевого объекта.
 
  </apiDesc><example conref="IrisEffectExample.mxml"><swfblock conref="examples/IrisEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#IrisInstance"><linktext>mx.effects.effectClasses.IrisInstance</linktext></link></related-links><apiConstructor id="mx.effects:Iris:Iris"><apiName>Iris</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.effects:Sequence"><apiName>Sequence</apiName><shortdesc>
  Эффект Sequence воспроизводит по очереди несколько нижестоящих эффектов в порядке их добавления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sequence&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Sequence id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Sequence&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Sequence воспроизводит по очереди несколько нижестоящих эффектов в порядке их добавления.
  
  <p>Эффект Sequence можно создать в MXML следующим образом:</p>
 
  <pre>
  &lt;mx:Sequence id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Sequence>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Следует отметить, что тег <codeph>&lt;mx:children></codeph> является необязательным.</p>
  
  <p>Запуск комбинированного эффекта в ActionScript, как правило, состоит из пяти шагов:</p>
 
  <ol>
    <li>Создайте экземпляры объектов эффекта, которые требуется объединить, например: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Установите свойства, такие как <codeph>duration</codeph>, для отдельных объектов эффекта.</li>
    <li>Создайте экземпляр объекта эффекта Sequence; например: 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Вызовите метод <codeph>addChild()</codeph> для каждого из объектов эффекта; например: 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Вызовите метод <codeph>play()</codeph> эффекта Sequence; например: 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc><example conref="SequenceEffectExample.mxml"><swfblock conref="examples/SequenceEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SequenceInstance"><linktext>mx.effects.effectClasses.SequenceInstance</linktext></link></related-links><apiConstructor id="mx.effects:Sequence:Sequence"><apiName>Sequence</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Этот аргумент для эффектов Sequence игнорируется. Эта функция включена только для обеспечения соответствия с другими типами эффектов.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Sequence:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов. Учитывает startDelay и информацию о повторении для всех нижестоящих эффектов наряду с их продолжительностью и возвращает соответствующий результат.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Dissolve"><apiName>Dissolve</apiName><shortdesc>
  Анимирует компонент из прозрачного в непрозрачный или из матового в прозрачный.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Dissolve&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Dissolve
    id="ID"
    alphaFrom="val"
    alphaTo="val"
    color="val"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Анимирует компонент из прозрачного в непрозрачный или из матового в прозрачный. При воспроизведении эффекта Dissolve выполняется следующее:
  
  <ol>
    <li>При запуске эффекта создает непрозрачный прямоугольник. Прямоугольник располагается над целевым компонентом, его цвет соответствует свойству <codeph>Dissolve.color</codeph>, а свойство <codeph>alpha</codeph> первоначально устанавливается на значение (1,0 - <codeph>Dissolve.alphaFrom</codeph>).</li>
    <li>По мере воспроизведения эффекта свойство <codeph>alpha</codeph> прямоугольника анимируется от (1,0 – <codeph>alphaFrom</codeph>) до (1,0 – <codeph>alphaTo</codeph>). Поскольку прямоугольник становится непрозрачным, содержимое под ним постепенно исчезает.</li>
    <li>По завершении эффекта прямоугольник удаляется.</li>
  </ol>
  
  <p>Если целевой объект является контейнером, эффект Dissolve применяется к области содержимого контейнера. Область содержимого – это область, в которой отображается цвет фона контейнера.</p>
 
  <p><b>Примечание</b>. Для использования эффекта Dissolve с триггером <codeph>creationCompleteEffect</codeph> элемента управления DataGrid необходимо определить поставщика данных элемента управления с помощью нижестоящего тега элемента управления DataGrid или с использованием привязки данных. Эта проблема возникает в результате того, что поставщик данных не определяется до тех пор, пока не будет отправлено событие <codeph>creationComplete</codeph>. Поэтому при запуске эффекта в Flex установка размеров элемента управления DataGrid оказывается незавершенной. </p>
  
  </apiDesc><example conref="DissolveEffectExample.mxml"><swfblock conref="examples/DissolveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#DissolveInstance"><linktext>mx.effects.effectClasses.DissolveInstance</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><apiConstructor id="mx.effects:Dissolve:Dissolve"><apiName>Dissolve</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Dissolve:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
	  Начальный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Начальный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность. 
	 
	  <p>Если эффект вызывает исчезновение целевого компонента, то значением по умолчанию является текущее значение свойства <codeph>alpha</codeph> целевого объекта. Если эффект вызывает появление целевого компонента, то значение по умолчанию равно 0,0.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
	  Конечный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Конечный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность. 
	 
	  <p>Если эффект вызывает исчезновение целевого компонента, то значение по умолчанию равно 0,0. Если эффект вызывает появление целевого компонента, то значением по умолчанию является текущее значение свойства <codeph>alpha</codeph> целевого объекта.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:color"><apiName>color</apiName><shortdesc> 
	  Шестнадцатеричное значение, представляющее цвет выпадающего прямоугольника, который отображается в результате эффекта для целевого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFFFFFFF</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
	  Шестнадцатеричное значение, представляющее цвет выпадающего прямоугольника, который отображается в результате эффекта для целевого объекта. Значение по умолчанию – цвет, указанный свойством стиля <codeph>backgroundColor</codeph> целевого компонента, или 0xFFFFFF, если <codeph>backgroundColor</codeph> не установлен.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:targetArea"><apiName>targetArea</apiName><shortdesc>
	  Область целевого объекта для воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.geom:RoundedRectangle</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Область целевого объекта для воспроизведения эффекта. Область перекрытия эффекта Dissolve отображается с использованием размеров, определяемых этим свойством. UIComponents создают область перекрытия, охватывающую весь компонент. Контейнеры создают область перекрытия, охватывающую соответствующую область содержимого, но не стиль оформления. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Blur"><apiName>Blur</apiName><shortdesc>
  Эффект Blur позволяет применить к компоненту визуальный эффект размывки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Blur" replacement="spark.effects.AnimateFilter" since="4.0">
<description>
  В Flex 4 эффект AnimateFilter следует использовать с растровым фильтром Blur.
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Blur&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Blur
    id="ID"
    blurXFrom="val"
    blurXTo="val"
    blurYFrom="val"
    blurYTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Blur позволяет применить к компоненту визуальный эффект размывки. Эффект размытия смягчает контуры изображения. Можно создавать различные размытия: от мягкого и расфокусированного до размытия по Гауссу – дымчатого изображения, которое зритель видит будто бы через полупрозрачное стекло. 
 
  <p>Эффект Blur использует класс FlashBlurFilter как часть реализации. Для получения дополнительной информации см.  flash.filters.BlurFilter.</p>
  
  <p>Если к компоненту применяется эффект Blur, то к нему невозможно применить эффект BlurFilter или второй эффект Blur. </p> 
 
  </apiDesc><example conref="BlurEffectExample.mxml"><swfblock conref="examples/BlurEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link><link href="mx.effects.effectClasses.xml#BlurInstance"><linktext>mx.effects.effectClasses.BlurInstance</linktext></link></related-links><apiConstructor id="mx.effects:Blur:Blur"><apiName>Blur</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Blur:blurXFrom"><apiName>blurXFrom</apiName><shortdesc> 
	  Начальная степень размытия по горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Начальная степень размытия по горизонтали. Действительны значения от 0.0 до 255.0. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurXTo"><apiName>blurXTo</apiName><shortdesc> 
	  Конечная степень размытия по горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Конечная степень размытия по горизонтали. Действительны значения от 0.0 до 255.0.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYFrom"><apiName>blurYFrom</apiName><shortdesc> 
	  Начальная степень размытия по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Начальная степень размытия по вертикали. Действительны значения от 0.0 до 255.0. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYTo"><apiName>blurYTo</apiName><shortdesc> 
	  Конечная степень размытия по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Конечная степень размытия по вертикали. Действительны значения от 0.0 до 255.0.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffect"><apiName>IEffect</apiName><shortdesc>
  Интерфейс IEffect определяет основной интерфейс всех эффектов Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IAbstractEffect</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IEffect определяет основной интерфейс всех эффектов Flex. Интерфейс IEffectInstance определяет основной интерфейс для всех подклассов экземпляров эффектов.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffectInstance"><linktext>mx.effects.IEffectInstance</linktext></link></related-links><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc>
      Обеспечивает сбор текущих значений соответствующих свойств целевых объектов эффекта и сохраняет их как конечные значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Обеспечивает сбор текущих значений соответствующих свойств целевых объектов эффекта и сохраняет их как конечные значения.
      
      <p>Если эффект является частью эффекта изменения данных, Flex автоматически вызывает метод <codeph>captureEndValues()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc>
      Обеспечивает сбор текущих значений соответствующих свойств дополнительного набора целевых объектов. Flex использует эту функцию при воспроизведении эффекта изменения данных.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Массив целевых объектов, для которых собираются значения
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает сбор текущих значений соответствующих свойств дополнительного набора целевых объектов
     
      <p>Flex использует эту функцию при воспроизведении эффекта изменения данных.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc>
      Обеспечивает сбор текущих значений соответствующих свойств для целевых объектов эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Обеспечивает сбор текущих значений соответствующих свойств для целевых объектов эффекта. Если эффект является частью перехода, Flex автоматически вызывает метод <codeph>captureStartValues()</codeph>.
      
      <p>Эта функция используется при необходимости вычисления эффектом начального и конечного значений эффекта. Для использования этой функции необходимо выполнить следующие действия:</p>
      
      <ol>
        <li>Вызовите метод <codeph>captureStartValues()</codeph>. Эффект осуществляет сбор начальных значений эффекта.</li>
        <li>Внесите изменения в целевые объекты эффекта, например добавьте/удалите нижестоящие элементы, измените свойства, местоположение или размеры.</li>
        <li>Вызовите метод <codeph>play()</codeph>. Эффект осуществляет сбор конечных значений. Эта функция заполняет свойство <codeph>EffectInstance.propertyChanges</codeph> для каждого экземпляра эффекта, созданного данным эффектом. Для извлечения начальных и конечных значений эффекта разработчики эффектов могут использовать свойство <codeph>propertyChanges</codeph>.</li>
      </ol>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstance"><apiName>createInstance</apiName><shortdesc>
      Создает отдельный экземпляр эффекта и инициализирует его.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект экземпляра эффекта для эффекта.
      
      </apiDesc><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с данным эффектом.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает отдельный экземпляр эффекта и инициализирует его. Этот метод используется вместо метода <codeph>play()</codeph> для управления свойствами экземпляра эффекта перед воспроизведением экземпляра эффекта. 
      
      <p>Экземпляр эффекта создается с типом, указанным в свойстве <codeph>instanceClass</codeph>. Затем он инициализируется с использованием метода <codeph>initInstance()</codeph>. Если экземпляр был создан с помощью EffectManager (при запуске эффекта посредством триггера эффекта), эффект далее инициализируется посредством вызова метода <codeph>EffectInstance.initEffect()</codeph>.</p>
     
      <p>Вызов метода <codeph>createInstance()</codeph> не приводит к воспроизведению эффекта. Для возвращаемого экземпляра эффекта необходимо вызвать метод <codeph>startEffect()</codeph>. </p>
     
      <p>Эта функция вызывается автоматически методом <codeph>Effect.play()</codeph>. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstances"><apiName>createInstances</apiName><shortdesc>
      Принимает массив целевых объектов и вызывает метод createInstance() для каждой цели.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив объектов экземпляров эффекта для эффекта, по одному объекту на каждый целевой объект.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив объектов, анимируемых с данным эффектом.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Принимает массив целевых объектов и вызывает метод <codeph>createInstance()</codeph> для каждой цели. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc>
      Удаляет прослушиватели событий из экземпляра и удаляет экземпляр из списка экземпляров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Экземпляр эффекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет прослушиватели событий из экземпляра и удаляет экземпляр из списка экземпляров.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:end"><apiName>end</apiName><shortdesc>
      Прерывает эффект, воспроизводящийся в настоящее время, и осуществляет немедленный переход в конец эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Прерываемый EffectInstance.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Прерывает эффект, воспроизводящийся в настоящее время, и осуществляет немедленный переход в конец эффекта. Вызов этого метода запускает выполнение метода <codeph>EffectInstance.end()</codeph>.
     
      <p>Когда этот метод вызывается как часть завершения эффекта, экземпляр эффекта отправляет событие <codeph>effectEnd</codeph>.</p>
     
      <p>Если экземпляр эффекта передается в качестве аргумента, то прерывается только этот экземпляр. Если аргумент не передается, прерываются все экземпляры эффекта, порожденные эффектом к настоящему времени.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#EffectInstance/end()"><linktext>mx.effects.EffectInstance.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Возвращает массив строк, где каждая строка представляет собой имя свойства, которое было изменено данным эффектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив строк, указывающий имена свойств, измененных данным эффектом.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив строк, где каждая строка представляет собой имя свойства, которое было изменено данным эффектом. Например, эффект Move возвращает массив, содержащий <codeph>x</codeph> и <codeph>y</codeph>.
     
      <p>Каждый подкласс Effect должен реализовывать этот метод. Данный метод используется EffectManager для предотвращения одновременной анимации какими-либо двумя эффектами одного и того же свойства одного объекта.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:pause"><apiName>pause</apiName><shortdesc>
      Приостанавливает эффект до вызова метода resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Приостанавливает эффект до вызова метода <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:play"><apiName>play</apiName><shortdesc>
      Начинает воспроизведение эффекта</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив объектов EffectInstance для эффекта, по одному объекту на каждый целевой объект.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив целевых объектов, для которых воспроизводится данный эффект. Если этот параметр указан, то свойство <codeph>targets</codeph> эффекта не используется.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение равно <codeph>true</codeph>, эффект воспроизводится в обратном порядке.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Начинает воспроизведение эффекта Как правило, метод <codeph>end()</codeph> вызывается перед вызовом метода <codeph>play()</codeph>, что позволяет убедиться в завершении всех предыдущих экземпляров эффекта перед запуском нового экземпляра.
     
      <p>Этот метод необходимо реализовать во всех подклассах.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:resume"><apiName>resume</apiName><shortdesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:reverse"><apiName>reverse</apiName><shortdesc>
      Если эффект воспроизводится в настоящее время, воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Если эффект воспроизводится в настоящее время, воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:stop"><apiName>stop</apiName><shortdesc>
      Останавливает эффект, оставляя целевые объекты эффекта в текущем состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Останавливает эффект, оставляя целевые объекты эффекта в текущем состоянии. В отличие от вызова метода <codeph>pause()</codeph> метод <codeph>resume()</codeph> невозможно вызвать после вызова метода <codeph>stop()</codeph>. Однако для перезапуска эффекта можно вызвать метод <codeph>play()</codeph>.
     
      <p>Когда этот метод вызывается как часть завершения эффекта, экземпляр эффекта отправляет событие <codeph>effectEnd</codeph>.</p>
     
      <p>Что касается эффектов маски, то после завершения эффекта маска не удаляется автоматически. Выполнение других эффектов маски для тех же самых целевых объектов без предварительного удаления маски может привести к непредвиденным результатам.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffect:mx.effects:IEffect:className:get"><apiName>className</apiName><shortdesc>
      Имя класса эффекта, например Fade.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Имя класса эффекта, например <codeph>Fade</codeph>.
     
      <p>Это короткое или неполное имя класса, в которое не входит имя пакета. Если требуется полное имя, следует воспользоваться методом <codeph>getQualifiedClassName()</codeph> из пакета flash.utils.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:customFilter:get"><apiName>customFilter</apiName><shortdesc>
      Указывает пользовательский объект фильтра типа EffectTargetFilter, используемый эффектом для определения целевых объектов, для которых должен воспроизводиться эффект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает пользовательский объект фильтра типа EffectTargetFilter, используемый эффектом для определения целевых объектов, для которых должен воспроизводиться эффект. 
      
      <p>Фильтрация целевых объектов выполняется только в том случае, если перед воспроизведением эффекта вызывается метод <codeph>captureStartValues()</codeph>. Если эффект является частью перехода, Flex автоматически вызывает метод <codeph>captureStartValues()</codeph>.</p>
      
      <p>Для простой фильтрации следует использовать свойство <codeph>filter</codeph>. Если свойство <codeph>customFilter</codeph> имеет значение, отличное от null, то свойство <codeph>filter</codeph> игнорируется.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#EffectTargetFilter"><linktext>mx.effects.EffectTargetFilter</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:duration:get"><apiName>duration</apiName><shortdesc> 
      Продолжительность эффекта в миллисекундах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Продолжительность эффекта в миллисекундах. 
     
      <p>В эффекте Parallel или Sequence свойство <codeph>duration</codeph> устанавливает продолжительность каждого эффекта. Например, если для эффекта Sequence свойство <codeph>duration</codeph> имеет значение 3000, каждый эффект в эффекте Sequence воспроизводится в течение 3000 мс.</p>
     
      <p>Для повторяющегося эффекта свойство <codeph>duration</codeph> указывает продолжительность одного экземпляра эффекта. Следовательно, если свойство <codeph>duration</codeph> эффекта имеет значение 2000, а свойство <codeph>repeatCount</codeph> имеет значение 3, в общей сложности эффект воспроизводится в течение 6000 мс (6 секунд).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Свойства, позволяющие получить доступ к целевому элементу управления на основе списка для эффекта данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Свойства, позволяющие получить доступ к целевому элементу управления на основе списка для эффекта данных. Это свойство активирует экземпляр класса эффекта для взаимодействия с элементом управления на основе списка, в котором воспроизводится эффект. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:filter:get"><apiName>filter</apiName><shortdesc>
      Указывает алгоритм фильтрации целевых объектов для эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает алгоритм фильтрации целевых объектов для эффекта. Значение <codeph>null</codeph> означает отсутствие фильтрации.
      
      <p>Фильтрация целевых объектов выполняется только в том случае, если перед воспроизведением эффекта вызывается метод <codeph>captureStartValues()</codeph>. Если эффект является частью перехода или частью эффекта данных для элемента управления на основе списка, Flex автоматически вызывает метод <codeph>captureStartValues()</codeph>.</p>
      
      <p>Это свойство используется для простой фильтрации. Для более сложной фильтрации следует воспользоваться свойством <codeph>customFilter</codeph>. Если свойство <codeph>customFilter</codeph> имеет значение, отличное от null, это свойство игнорируется.</p> 
     
      <p>Для свойства <codeph>filter</codeph> можно использовать следующие значения:</p>
     
      <ul>
        <li>Значение <codeph>add</codeph> воспроизводит эффект для любых целевых объектов, добавленных в качестве нижестоящих элементов к контейнеру.</li>
        <li>Значение <codeph>addItem</codeph> воспроизводит эффект в средстве визуализации элемента для любых элементов списка, добавленных к элементу управления List или TileList.</li>
        <li>Значение <codeph>hide</codeph> воспроизводит эффект для любых целей, свойство visible которых изменило значение с <codeph>true</codeph> на <codeph>false</codeph>.</li>
        <li>Значение <codeph>move</codeph> воспроизводит эффект для любых целевых объектов, у которых изменилось свойство <codeph>x</codeph> или <codeph>y</codeph>.</li>
        <li>Значение <codeph>remove</codeph> воспроизводит эффект для любых целевых объектов, удаленных как нижестоящие элементы контейнера.</li>
        <li>Значение <codeph>removeItem</codeph> воспроизводит эффект в средстве визуализации элемента для любых элементов списка, удаленных из элемента управления List или TileList.</li>
        <li>Значение <codeph>replacedItem</codeph> воспроизводит эффект в средстве визуализации элемента для любых элементов списка, замененных в элементе управления List или TileList новым элементом.</li>
        <li>Значение <codeph>replacementItem</codeph> воспроизводит эффект в средстве визуализации элемента для любых элементов списка, добавленных к элементу управления List или TileList, и заменивших существующие элементы.</li>
        <li>Значение <codeph>resize</codeph> воспроизводит эффект для любых целей, у которых изменилось свойство <codeph>width</codeph> или <codeph>height</codeph>.</li>
        <li>Значение <codeph>show</codeph> воспроизводит эффект для любых целевых объектов, значение свойства visible у которых изменилось с <codeph>false</codeph> на <codeph>true</codeph>.</li>
        <li>Пустое значение <codeph>""</codeph> означает отсутствие фильтрации.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Определяет, должен ли эффект скрыть кольцо фокуса при запуске.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Определяет, должен ли эффект скрыть кольцо фокуса при запуске. За сокрытие кольца фокуса несет ответственность целевой объект эффекта. Подклассы класса UIComponent скрывают кольцо фокуса автоматически. Если целевой объект эффекта не является подклассом класса UIComponent, к нему необходимо добавить функциональные возможности скрытия кольца фокуса.
     
      <p>Для скрытия кольца фокуса во время воспроизведения эффекта следует установить для этого свойства значение <codeph>true</codeph>.</p>
      
      <p>Для подклассов Effect значением по умолчанию является значение <codeph>false</codeph>. Для подклассов MaskEffect значением по умолчанию является значение <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc>
      Флаг только для чтения, принимающий значение true, если какой-либо экземпляр эффекта воспроизводится в настоящее время, и false в противном случае.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг только для чтения, принимающий значение true, если какой-либо экземпляр эффекта воспроизводится в настоящее время, и false в противном случае.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc>
      Дополнительная задержка (в миллисекундах) для целевых объектов эффекта, обрабатываемых после первого целевого объекта эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Дополнительная задержка (в миллисекундах) для целевых объектов эффекта, обрабатываемых после первого целевого объекта эффекта. Это значение добавляется к значению свойства <codeph>startDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Текущая позиция эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Текущая позиция эффекта. Значение этого свойства находится в диапазоне от 0 до значения общей продолжительности, включающей значения параметров эффекта <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> и <codeph>repeatDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc>
      Массив имен свойств, используемых при выполнении фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив имен свойств, используемых при выполнении фильтрации. Это свойство используется внутренне и не должно устанавливаться пользователями эффекта. 
     
      <p>Значением по умолчанию является массив, возвращенный методом <codeph>getAffectedProperties()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
      Массив имен стилей, используемых при выполнении фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив имен стилей, используемых при выполнении фильтрации. Это свойство используется внутренне и не должно устанавливаться пользователями эффекта. 
     
      <p>Значением по умолчанию является массив, возвращенный методом <codeph>getAffectedProperties()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:target:get"><apiName>target</apiName><shortdesc> 
      Объект, к которому применяется данный эффект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
      Объект, к которому применяется данный эффект. Если эффект запускается триггером эффекта, свойство <codeph>target</codeph> автоматически становится объектом, запускающим эффект.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:targets:get"><apiName>targets</apiName><shortdesc>
      Массив объектов, являющихся целевыми объектами эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив объектов, являющихся целевыми объектами эффекта. При воспроизведении эффекта выполняет эффект параллельно для каждого целевого объекта. Установка свойства <codeph>target</codeph> заменяет все объекты данного массива. После установки свойства <codeph>targets</codeph> свойство <codeph>target</codeph> возвращает первый элемент массива. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Объект Event, переданный в Effect с помощью EffectManager при запуске эффекта, или null, если эффект воспроизводится без EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Объект Event, переданный в Effect с помощью EffectManager при запуске эффекта, или <codeph>null</codeph>, если эффект воспроизводится без EffectManager.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Pause"><apiName>Pause</apiName><shortdesc>
  Эффект Pause используется для последовательных эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Pause&gt;</code> tag
  inherits all the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Pause 
    id="ID" 
    eventName="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Pause используется для последовательных эффектов. Бездействует до указанного периода времени или пока целевым объектом не будет отправлено указанное событие. Если добавить эффект Pause в качестве нижестоящего элемента эффекта Sequence, можно создать паузу между двумя другими эффектами.
  
  </apiDesc><example conref="PauseEffectExample.mxml"><swfblock conref="examples/PauseEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#PauseInstance"><linktext>mx.effects.effectClasses.PauseInstance</linktext></link></related-links><apiConstructor id="mx.effects:Pause:Pause"><apiName>Pause</apiName><shortdesc>
     Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Этот аргумент игнорируется в случае эффекта Pause, если не присвоен атрибут <codeph>eventName</codeph>. Если атрибут <codeph>eventName</codeph> присвоен, то целевой объект должен быть объектом типа IEventDispatcher, поскольку от него ожидается отправка события с указанным именем. Этот эффект допускает целевой объект со значением null, поскольку эффект Pause со свойством <codeph>duration</codeph> не оказывает воздействия на какие-либо конкретные цели, и, следовательно, необходимость в них отсутствует.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Конструктор.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Pause:eventName"><apiName>eventName</apiName><shortdesc> 
     Имя события, ожидаемого эффектом Pause перед завершением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
     Имя события, ожидаемого эффектом Pause перед завершением. Этот параметр следует использовать совместно со свойством <codeph>target</codeph>, которое должно иметь тип IEventDispatcher; инициатором всех событий должен являться определенный диспетчер.
     
     <p>Прослушивание <codeph>eventName</codeph> также связано со свойством <codeph>duration</codeph>, которое действует как тайм-аут для события. Если событие не будет получено в рамках временного интервала, указанного свойством <codeph>duration</codeph>, воспроизведение эффекта завершается в любом случае.</p>
     
     <p>Это свойство не является обязательным; под стандартным действием подразумевается воспроизведение без ожидания какого-либо события.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Pause:duration:get"><apiName>duration</apiName><shortdesc> 
     Свойство duration определяет продолжительность паузы для данного эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
     
     </apiDefaultValue></apiValueDef><apiDesc> 
     Свойство duration определяет продолжительность паузы для данного эффекта. Если для этого эффекта был установлен атрибут <codeph>eventName</codeph>, продолжительность также используется в качестве тайм-аута при ожидании запуска события. Если продолжительность имеет значение меньше 0, то эффект будет ожидать запуск события бесконечно долго. Если установлено любое другое значение, включая 0, то эффект завершится или после истечения указанного интервала времени или после запуска указанного события, в зависимости от того, что произойдет раньше.
     
     </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#IEffect/duration"><linktext>mx.effects.IEffect.duration</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
  Класс CompositeEffect является вышестоящим классом для классов Parallel и Sequence, определяющих теги MXML &amp;lt;mx:Parallel&amp;gt; и &amp;lt;mx:Sequence&amp;gt;.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The CompositeEffect class adds the following tag attributes,
  and all the subclasses of the CompositeEffect class
  inherit these tag attributes:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс CompositeEffect является вышестоящим классом для классов Parallel и Sequence, определяющих теги MXML <codeph>&lt;mx:Parallel></codeph> и <codeph>&lt;mx:Sequence></codeph>. В Flex поддерживается два метода объединения (комбинирования) эффектов: параллельный и последовательный. При параллельном объединении эффектов эффекты воспроизводятся одновременно. При последовательном объединении эффектов первый эффект должен завершиться до запуска следующего эффекта.
 
  <p>Комбинированный эффект можно создать в MXML следующим образом:</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
   
  &lt;mx:VBox id="myBox" hideEffect="WipeRightUp">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Тег <codeph>&lt;mx:children></codeph> является необязательным.</p>
  
  <p>Запуск комбинированного эффекта в ActionScript, как правило, состоит из пяти шагов:</p>
 
  <ol>
    <li>Создайте экземпляры объектов эффекта, которые требуется объединить, например: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Установите свойства, такие как <codeph>duration</codeph>, для отдельных объектов эффекта.</li>
    <li>Создайте экземпляр объекта эффекта Parallel или Sequence; например: 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Вызовите метод <codeph>addChild()</codeph> для каждого из объектов эффекта; например: 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Вызовите метод комбинированного эффекта <codeph>play()</codeph>; например: 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:CompositeEffect:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Этот аргумент игнорируется для комбинированных эффектов. Эта функция включена только для обеспечения соответствия с другими типами эффектов.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:CompositeEffect:addChild"><apiName>addChild</apiName><shortdesc>
      Добавляет новый нижестоящий эффект к данному комбинированному эффекту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childEffect</apiItemName><apiOperationClassifier>mx.effects:IEffect</apiOperationClassifier><apiDesc>Нижестоящий эффект, который требуется добавить к комбинированному эффекту.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет новый нижестоящий эффект к данному комбинированному эффекту. Эффект Sequence воспроизводит по очереди каждый из нижестоящих эффектов в порядке их добавления. Эффект Parallel воспроизводит все нижестоящие эффекты одновременно; порядок их добавления не имеет значения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:CompositeEffect:children:get"><apiName>children</apiName><shortdesc>
      Массив, содержащий нижестоящие эффекты этого CompositeEffect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий нижестоящие эффекты этого CompositeEffect.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:CompositeEffect:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов. Учитывает startDelay и информацию о повторении для всех нижестоящих эффектов наряду с их продолжительностью и возвращает соответствующий результат.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffectTargetHost"><apiName>IEffectTargetHost</apiName><shortdesc>
  Интерфейс IEffectTargetHost определяет интерфейс, позволяющий получить доступ к целевому элементу управления на основе списка для воспроизводимого эффекта данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IEffectTargetHost определяет интерфейс, позволяющий получить доступ к целевому элементу управления на основе списка для воспроизводимого эффекта данных. Данный интерфейс реализуют все элементы управления на основе списка. Этот интерфейс активирует экземпляр класса эффекта для взаимодействия с элементом управления на основе списка, в котором воспроизводится эффект. Этот интерфейс позволяет также определить, должен ли эффект воспроизводиться на основе добавления, удаления или замены элемента данных в целевом элементе управления. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.listClasses.ListBase.xml"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:addDataEffectItem"><apiName>addDataEffectItem</apiName><shortdesc>
      Добавляет средство визуализации элементов при выполнении эффекта изменения данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Средство визуализации элементов для добавления к макету элемента управления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет средство визуализации элементов при выполнении эффекта изменения данных. Средство визуализации элемента должно соответствовать недавно добавленному элементу данных в коллекции поставщика данных, который еще не отображается.
     
      <p>Функция вызывается эффектом <codeph>AddItemAction</codeph> в составе эффекта изменения данных для установки момента начала отображения добавленного в коллекцию элемента элементом управления с помощью средства визуализации.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:getRendererSemanticValue"><apiName>getRendererSemanticValue</apiName><shortdesc>
      Возвращает true или false и указывает, должен ли звуковой эффект воспроизводиться в целевом объекте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> или <codeph>false</codeph> для указания, должен ли звуковой эффект воспроизводиться в цели. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Средство визуализации элементов
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticProperty</apiItemName><apiType value="String"/><apiDesc>Семантическое свойство средства визуализации, значение которого будет возвращено.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph> или <codeph>false</codeph> для указания, должен ли воспроизводиться звуковой эффект. Класс EffectTargetFilter выполняет вызов этого метода, если свойство <codeph>filter</codeph> установлено на эффект данных. Например, свойство <codeph>filter</codeph> устанавливается на <codeph>addItem</codeph> или <codeph>removeItem</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:removeDataEffectItem"><apiName>removeDataEffectItem</apiName><shortdesc>
      Удаляет средство визуализации элементов при выполнении эффекта изменения данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Средство визуализации элементов для удаления из макета элемента управления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет средство визуализации элементов при выполнении эффекта изменения данных. Средство визуализации элементов должно соответствовать данным, которые уже были удалены из коллекции поставщика данных. Эта функция вызывается эффектом <codeph>AddItemAction</codeph> в составе эффекта изменения данных для указания точки, в которой прекращается отображение элемента данных в элементе управления с помощью средства визуализации.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:unconstrainRenderer"><apiName>unconstrainRenderer</apiName><shortdesc>
      Вызывается эффектом UnconstrainItemAction в качестве элемента эффекта изменения данных, если средства визуализации элементов, соответствующие определенным элементам данных, следует переместить за пределы стандартных позиций средств визуализации элементов в элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Средство визуализации элемента, являющееся целью эффекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается эффектом <codeph>UnconstrainItemAction</codeph> в качестве элемента эффекта изменения данных, если средства визуализации элементов, соответствующие определенным элементам данных, следует переместить за пределы стандартных позиций средств визуализации элементов в элементе управления. Элемент управления не выполняет попытку установить средство визуализации элемента для продолжительности эффекта.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
  Класс SetStyleAction определяет эффект действия, соответствующий свойству SetStyle в определении состояния представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="duration"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SetStyleAction&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SetStyleAction
    <b>Properties</b>
    id="ID"
    style=""
    value=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SetStyleAction определяет эффект действия, соответствующий свойству SetStyle в определении состояния представления. Эффект SetStyleAction используется в определении перехода для управления во время перехода моментом изменения состояния представления, указанного в свойстве <codeph>SetStyle</codeph>.
  
  </apiDesc><example conref="TransitionExample.mxml"><swfblock conref="../states/examples/TransitionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SetStyleActionInstance"><linktext>mx.effects.effectClasses.SetStyleActionInstance</linktext></link><link href="mx.states.xml#SetStyle"><linktext>mx.states.SetStyle</linktext></link></related-links><apiConstructor id="mx.effects:SetStyleAction:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:SetStyleAction:name"><apiName>name</apiName><shortdesc> 
	  Имя изменяемого свойства style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
	  Имя изменяемого свойства style. По умолчанию Flex определяет это значение по свойству <codeph>SetStyle</codeph> в определении состояния представления.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:value"><apiName>value</apiName><shortdesc> 
	  Новое значение для свойства стиля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
	  Новое значение для свойства стиля. По умолчанию Flex определяет это значение по свойству <codeph>SetStyle</codeph> в определении состояния представления.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
	  Содержит свойства стиля, измененные данным эффектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Содержит свойства стиля, измененные данным эффектом. Этот метод получателя изменяет метод суперкласса.
	 
	  <p>Если для создания пользовательского эффекта создается подкласс этого класса, следует переопределить данный метод и возвратить массив, содержащий список свойств стиля, изменяемых подклассом.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:Rotate"><apiName>Rotate</apiName><shortdesc>
  Эффект Rotate вращает компонент вокруг указанной точки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Rotate" replacement="spark.effects.Rotate" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Rotate&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Rotate
    id="ID"
    angleFrom="0"
    angleTo="360"
    originX="0"
    originY="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Rotate вращает компонент вокруг указанной точки. Можно указать координаты центра поворота, а также начальный и конечный углы поворота Для углов можно указывать как положительные, так и отрицательные значения. 
 
  <p><b>Примечание.</b> Для использования эффекта Rotate с текстом необходим встроенный шрифт, а не шрифт устройства.</p> 
 
  </apiDesc><example conref="RotateEffectExample.mxml"><swfblock conref="examples/RotateEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#RotateInstance"><linktext>mx.effects.effectClasses.RotateInstance</linktext></link></related-links><apiConstructor id="mx.effects:Rotate:Rotate"><apiName>Rotate</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Rotate:angleFrom"><apiName>angleFrom</apiName><shortdesc> 
	  Начальный угол вращения целевого объекта (в градусах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Начальный угол вращения целевого объекта (в градусах). Допустимыми являются значения от 0 до 360.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:angleTo"><apiName>angleTo</apiName><shortdesc> 
	  Конечный угол вращения целевого объекта (в градусах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>360</apiData><apiType value="Number"/><apiDefaultValue>360
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Конечный угол вращения целевого объекта (в градусах). Значения могут быть как положительными, так и отрицательными.
	 
	  <p>Если значение <codeph>angleTo</codeph> меньше значения <codeph>angleFrom</codeph>, то целевой объект поворачивается против часовой стрелки. В противном случае вращение производится по часовой стрелке. Если требуется задать многократное вращение целевого объекта, в качестве этого значения следует установить большое положительное или малое отрицательное число.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originX"><apiName>originX</apiName><shortdesc>
	  Координата x центра вращения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Координата x центра вращения. Целевой объект вращается вокруг этой точки. Допустимые значения принадлежат диапазону от 0 до величины, соответствующей ширине целевого объекта.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originY"><apiName>originY</apiName><shortdesc>
	  Координата y центра вращения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Координата y центра вращения. Целевой объект вращается вокруг этой точки. Допустимые значения принадлежат диапазону от 0 до величины, соответствующей высоте целевого объекта.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:hideFocusRing:set"><apiName>hideFocusRing</apiName><shortdesc>
	  Определяет, должен ли эффект скрыть кольцо фокуса при запуске.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Определяет, должен ли эффект скрыть кольцо фокуса при запуске. За фактическое скрытие кольца фокуса несет ответственность сам целевой объект. 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
  Класс EffectTargetFilter определяет пользовательский фильтр, используемый при каждом эффекте перехода для каждого целевого объекта эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EffectTargetFilter определяет пользовательский фильтр, используемый при каждом эффекте перехода для каждого целевого объекта эффекта. 
 
  <p>Класс EffectTargetFilter содержит метод <codeph>defaultFilterFunction()</codeph>, использующий свойства <codeph>filterProperties</codeph> и <codeph>filterStyles</codeph> для определения необходимости воспроизведения эффекта в каждом целевом объекте эффекта.</p>
  
  <p>Для реализации собственной логики фильтрации можно также определить пользовательскую функцию фильтрации. Для этого следует определить функцию фильтрации, а затем указать эту функцию в объекте EffectTargetFilter с помощью свойства <codeph>filterFunction</codeph>.</p>
  
  <p>Для настройки эффекта на использование пользовательского фильтра необходимо передать объект EffectTargetFilter в свойство <codeph>Effect.customFilter</codeph> эффекта.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:EffectTargetFilter:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectTargetFilter:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      Функция фильтрации по умолчанию для класса EffectTargetFilter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph> для разрешения воспроизведения экземпляра эффекта. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Массив объектов PropertyChanges. Свойство <codeph>target</codeph> каждого объекта PropertyChanges соответствует целевой объект эффекта. Если свойство целевого объекта не изменяется при переходе, соответствующий объект PropertyChanges не включается в этот массив.
      
      </apiDesc></apiParam><apiParam><apiItemName>instanceTarget</apiItemName><apiType value="Object"/><apiDesc>Целевой объект экземпляра EffectInstance, вызывающего данную функцию. Если у эффекта имеется несколько целевых объектов, эта функция вызывается для каждого целевого объекта. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Функция фильтрации по умолчанию для класса EffectTargetFilter. Если <codeph>instanceTarget</codeph> имеет разные начальное и конечное значения для любого из значений, указанных в свойствах <codeph>filterProperties</codeph> или <codeph>filterStyles</codeph>, эффект для цели воспроизводится.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:EffectTargetFilter:filterInstance"><apiName>filterInstance</apiName><shortdesc> 
      Определяет необходимость фильтрации целевого объекта; возвращает true, если целевой объект должен быть включен в эффект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает <codeph>true</codeph>, если целевой объект должен быть включен в эффект; в противном случае возвращается <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Массив объектов PropertyChanges. Свойство target каждого объекта PropertyChanges соответствует целевому объекту эффекта. Если свойство целевого объекта не изменяется при переходе, соответствующий объект PropertyChanges не включается в этот массив.
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticsProvider</apiItemName><apiOperationClassifier>mx.effects:IEffectTargetHost</apiOperationClassifier><apiDesc>IEffectTargetHost используется для анализа свойств, указанных в requiredSemantics для целевого объекта, как правило, это effectTargetHost эффекта. Для эффектов изменения элементов, когда целевыми объектами эффекта являются средства визуализации элементов, это список List или TileList, содержащий средства визуализации элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Целевой объект экземпляра EffectInstance, вызывающего данную функцию. Если у эффекта имеется несколько целевых объектов, эта функция вызывается для каждого целевого объекта.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Определяет необходимость фильтрации целевого объекта; возвращает true, если целевой объект должен быть включен в эффект. Определение выполняется путем вызова функций filterFunction и semanticFilterFunction с возвратом true в том и только в том случае, если обе эти функции возвращают true. Функции по умолчанию со значениями по умолчанию всегда возвращают true. Как правило, EffectTargetFilter использует один из двух типов фильтра, но не оба.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectTargetFilter:filterFunction"><apiName>filterFunction</apiName><shortdesc>
      Функция, определяющая пользовательскую логику фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, определяющая пользовательскую логику фильтрации. Flex вызывает этот метод для каждого целевого объекта эффекта. Если функция возвращает <codeph>true</codeph>, для целевого объекта воспроизводится эффект; если она возвращает <codeph>false</codeph>, целевой объект пропускается. Пользовательская функция фильтрации предоставляет больше возможностей для управления фильтрацией, чем свойство <codeph>Effect.filter</codeph>. 
     
      <p>Функция фильтрации имеет следующую подпись:</p>
     
      <pre>
      filterFunc(propChanges:Array, instanceTarget:Object):Boolean
      {
          // Return true to play the effect on instanceTarget, 
          // or false to not play the effect.
      } 
      </pre>
     
      <p>где:</p>
      
      <p><codeph>propChanges</codeph> – массив объектов PropertyChanges, по одному объекту на каждый целевой компонент эффекта. Если свойство целевого объекта при переходе не изменяется, соответствующий объект в этот массив не включается.</p>
      
      <p><codeph>instanceTarget</codeph> – определенный целевой компонент эффекта, который требуется отфильтровать. В пользовательской функции фильтрации сначала в массиве <codeph>propChanges</codeph> осуществляется поиск объекта PropertyChanges, соответствующего аргументу <codeph>instanceTarget</codeph>, путем сравнения аргумента <codeph>instanceTarget</codeph> со свойством <codeph>propChanges.target</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterProperties"><apiName>filterProperties</apiName><shortdesc> 
      Массив строк, определяющий свойства компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Массив строк, определяющий свойства компонента. Если какое-либо из указанных в массиве свойств в целевом компоненте изменяется, воспроизводится эффект для целевого объекта. 
     
      <p>Если определена пользовательская функция фильтрации, свойство <codeph>filterProperties</codeph> можно проанализировать в этой функции.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterStyles"><apiName>filterStyles</apiName><shortdesc> 
      Массив строк, определяющий свойства стиля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Массив строк, определяющий свойства стиля. Если какое-либо из указанных в массиве свойств стиля в целевом компоненте изменяется, воспроизводится эффект для целевого объекта. 
     
      <p>Если определена пользовательская функция фильтрации, свойство <codeph>filterStyles</codeph> можно проанализировать в этой функции.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:requiredSemantics"><apiName>requiredSemantics</apiName><shortdesc>
      Совокупность свойств и соответствующих значений, которые должны быть связаны с целевым объектом воспроизводимого эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      Совокупность свойств и соответствующих значений, которые должны быть связаны с целевым объектом воспроизводимого эффекта.
     
      <p>При работе с эффектами данных это свойство можно использовать для фильтрации эффектов. Если требуется воспроизвести эффект данных для всех целевых объектов из элемента управления list, не добавляемых эффектом, т. е. целевых объектов, удаляемых, замещаемых, перемещаемых или обрабатываемых любым другим способом, можно создать описание эффекта следующим образом: </p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur> </pre>
     
      <p>Для воспроизведения эффекта данных для всех целевых объектов, не добавляемых или удаляемых эффектом, можно создать определение эффекта следующим образом:</p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}, {'removed':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur></pre>
     
      <p>В список допустимых для определения свойств входят свойства <codeph>added</codeph>, <codeph>removed</codeph>, <codeph>replaced</codeph> и <codeph>replacement</codeph>. Допустимыми значениями для свойств являются <codeph>true</codeph> и <codeph>false</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Fade"><apiName>Fade</apiName><shortdesc>
  Эффект Fade анимирует свойство alpha компонента или из прозрачного в непрозрачное или из непрозрачного в прозрачное.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Fade" replacement="spark.effects.Fade" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Fade&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Fade 
    id="ID"
    alphaFrom="val"
    alphaTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Fade анимирует свойство <codeph>alpha</codeph> компонента или из прозрачного в непрозрачное или из непрозрачного в прозрачное  
  
  <p>Если эффект Fade устанавливается для триггера <codeph>showEffect</codeph> или <codeph>hideEffect</codeph> и если значения для свойств <codeph>alphaFrom</codeph> и <codeph>alphaTo</codeph> не указаны, эффект автоматически заменяет для <codeph>alpha</codeph> значение 0 на текущее значение <codeph>alpha</codeph> целевого объекта в триггере <codeph>showEffect</codeph> и текущее значение <codeph>alpha</codeph> целевого объекта на значение 0 в триггере <codeph>hideEffect</codeph>.</p> 
 
  <p><b>Примечание.</b> Для использования эффекта Fade с текстом необходим встроенный шрифт, а не шрифт устройства. </p> 
 
  </apiDesc><example conref="FadeEffectExample.mxml"><swfblock conref="examples/FadeEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#FadeInstance"><linktext>mx.effects.effectClasses.FadeInstance</linktext></link></related-links><apiConstructor id="mx.effects:Fade:Fade"><apiName>Fade</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект, анимируемый с использованием данного эффекта.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Fade:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
      Начальный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Начальный уровень прозрачности соответствует значению в диапазоне от 0,0 до 1,0; где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность. 
     
      <p>Если эффект вызывает исчезновение целевого компонента, то значением по умолчанию является текущее значение свойства <codeph>alpha</codeph> целевого объекта. Если эффект вызывает появление целевого компонента, то значение по умолчанию равно 0,0.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Fade:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
      Конечный уровень прозрачности, где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Конечный уровень прозрачности, где 0,0 означает полную прозрачность, а 1,0 – полную непрозрачность.
     
      <p>Если эффект вызывает исчезновение целевого компонента, то значение по умолчанию равно 0,0. Если эффект вызывает появление целевого компонента, то значением по умолчанию является текущее значение свойства <codeph>alpha</codeph> целевого объекта.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Parallel"><apiName>Parallel</apiName><shortdesc>
  Эффект Parallel одновременно воспроизводит несколько нижестоящих эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;mx:Parallel&gt; tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Parallel id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Parallel&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Эффект Parallel одновременно воспроизводит несколько нижестоящих эффектов.
  
  <p>Эффект Paralell можно создать в MXML следующим образом:</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}" >
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Следует отметить, что тег <codeph>&lt;mx:children></codeph> является необязательным.</p>
  
  <p>Запуск эффекта Parallel в ActionScript, как правило, состоит из пяти шагов:</p>
 
  <ol>
    <li>Создайте экземпляры объектов эффекта, которые требуется объединить, например: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Установите свойства, такие как <codeph>duration</codeph>, для отдельных объектов эффекта.</li>
    <li>Создайте экземпляр объекта эффекта Parallel; например: 
    <pre>myParallelEffect = new mx.effects.Parallel();</pre></li>
    <li>Вызовите метод <codeph>addChild()</codeph> для каждого из объектов эффекта; например: 
    <pre>myParallelEffect.addChild(myFadeEffect);</pre></li>
    <li>Вызовите метод <codeph>play()</codeph> эффекта Parallel; например: 
    <pre>myParallelEffect.play();</pre></li>
  </ol>
 
  </apiDesc><example conref="ParallelEffectExample.mxml"><swfblock conref="examples/ParallelEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ParallelInstance"><linktext>mx.effects.effectClasses.ParallelInstance</linktext></link></related-links><apiConstructor id="mx.effects:Parallel:Parallel"><apiName>Parallel</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Этот аргумент игнорируется в случае эффектов Parallel. Эта функция включена только для обеспечения соответствия с другими типами эффектов.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Parallel:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Возвращает продолжительность данного эффекта, определяемую продолжительностью всех нижестоящих эффектов. Учитывает startDelay и информацию о повторении для всех нижестоящих эффектов наряду с их продолжительностью и возвращает соответствующий результат.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IAbstractEffect"><apiName>IAbstractEffect</apiName><shortdesc>
  Интерфейс IAbstractEffect используется для обозначения того, что свойство или параметр должно иметь тип Effect при фактическом отсутствии реализации API-интерфейсов интерфейса IEffect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IAbstractEffect используется для обозначения того, что свойство или параметр должно иметь тип Effect при фактическом отсутствии реализации API-интерфейсов интерфейса IEffect. Класс UIComponent распознает изменение свойства, реализующего интерфейс AbstractEffect, и передает это свойство в класс EffectManager для обработки.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffect"><linktext>mx.effects.IEffect</linktext></link></related-links></apiClassifier><apiClassifier id="mx.effects:IEffectInstance"><apiName>IEffectInstance</apiName><shortdesc>
  Интерфейс IEffectInstance представляет экземпляр эффекта, воспроизводящийся для целевого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IEffectInstance представляет экземпляр эффекта, воспроизводящийся для целевого объекта. Каждый целевой объект имеет отдельный связанный с нею экземпляр эффекта. Время жизни экземпляра эффекта является непродолжительным. Экземпляр создается при воспроизведении эффекта для целевого объекта и удаляется по завершении воспроизведения эффекта. Если для целевого объекта одновременно воспроизводится несколько эффектов (например, эффект Parallel), то для каждого эффекта создается отдельный экземпляр эффекта.
 
  <p>Разработчики эффектов должны создать класс экземпляров для пользовательских эффектов.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:end"><apiName>end</apiName><shortdesc>
      Прерывает экземпляр эффекта, воспроизводящийся в настоящее время, и осуществляет немедленный переход в конец эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Прерывает экземпляр эффекта, воспроизводящийся в настоящее время, и осуществляет немедленный переход в конец эффекта. Данный метод запускается посредством вызова метода <codeph>Effect.end()</codeph>. В качестве части собственной реализации он вызывает метод <codeph>finishEffect()</codeph>.
     
      <p>Когда этот метод вызывается как часть завершения эффекта, экземпляр эффекта отправляет событие <codeph>effectEnd</codeph>.</p>
     
      <p>Этот метод можно дополнительно переопределить в подклассе EffectInstance. В качестве части переопределения в конце переопределения после логики необходим вызов метода <codeph>super.end()</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/end()"><linktext>mx.effects.Effect.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc>
      Вызывается методом end() по завершении воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается методом <codeph>end()</codeph> по завершении воспроизведения эффекта. Эта функция отправляет событие <codeph>endEffect</codeph> для целевого объекта эффекта
     
      <p>Переопределение данного метода в подклассе невозможно. Необходимость в вызове данного метода при использовании эффектов отсутствует, но его вызов может потребоваться при создании подкласса эффекта.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc>
      Вызывается после завершения воспроизведения повторяющегося эффекта при каждой итерации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается после завершения воспроизведения повторяющегося эффекта при каждой итерации.
     
      <p>Переопределение данного метода в подклассе невозможно. Вызов данного метода при использовании эффектов не требуется.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc>
      Этот метод вызывается в случае запуска эффекта посредством EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event, отправленный для запуска эффекта. Например, для триггера mouseDownEffect событием является MouseEvent с типом MouseEvent.MOUSEDOWN. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Этот метод вызывается в случае запуска эффекта посредством EffectManager. Эта версия базового класса сохраняет событие, запустившее эффект, в свойстве <codeph>triggerEvent</codeph>. Данный метод должен переопределяться в каждом подклассе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:pause"><apiName>pause</apiName><shortdesc>
      Приостанавливает эффект до вызова метода resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Приостанавливает эффект до вызова метода <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:play"><apiName>play</apiName><shortdesc>
      Воспроизводит экземпляр эффекта для целевого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Воспроизводит экземпляр эффекта для целевого объекта. Вызывает метод <codeph>startEffect()</codeph> вместо запуска эффекта в EffectInstance.
     
      <p>В подклассе EffectInstance этот метод необходимо переопределить. В переопределении необходимо вызвать метод <codeph>super.play()</codeph> для отправки из целевого объекта события <codeph>effectStart</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:resume"><apiName>resume</apiName><shortdesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Продолжает воспроизведение эффекта после установки паузы путем вызова метода <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:reverse"><apiName>reverse</apiName><shortdesc>
      Воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Воспроизводит эффект в обратном порядке, начиная с текущей позиции эффекта.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc>
      Воспроизводит экземпляр эффекта для целевого объекта после истечения периода startDelay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Воспроизводит экземпляр эффекта для целевого объекта после истечения периода <codeph>startDelay</codeph>. Вызывается классом Effect. При запуске EffectInstance эта функция используется вместо метода <codeph>play()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:stop"><apiName>stop</apiName><shortdesc>
      Останавливает эффект, оставляя целевой объект в текущем состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Останавливает эффект, оставляя целевой объект в текущем состоянии. Этот метод запускается вызовом метода <codeph>Effect.stop()</codeph>. В качестве части собственной реализации он вызывает метод <codeph>finishEffect()</codeph>.
     
      <p>Когда этот метод вызывается как часть завершения эффекта, экземпляр эффекта отправляет событие <codeph>effectEnd</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:className:get"><apiName>className</apiName><shortdesc>
      Имя класса эффекта, например FadeInstance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Имя класса эффекта, например <codeph>FadeInstance</codeph>.
     
      <p>Это короткое или неполное имя класса, в которое не входит имя пакета. Если требуется полное имя, следует воспользоваться методом <codeph>getQualifiedClassName()</codeph> из пакета flash.utils.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:duration:get"><apiName>duration</apiName><shortdesc> 
      Продолжительность эффекта, в миллисекундах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Продолжительность эффекта, в миллисекундах.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Свойства, позволяющие получить доступ к целевому элементу управления на основе списка для эффекта данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Свойства, позволяющие получить доступ к целевому элементу управления на основе списка для эффекта данных. Это свойство активирует экземпляр класса эффекта для взаимодействия с элементом управления на основе списка, в котором воспроизводится эффект. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effect:get"><apiName>effect</apiName><shortdesc>
      Объект IEffect, создавший данный объект IEffectInstance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc>
      Объект IEffect, создавший данный объект IEffectInstance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Определяет, должен ли эффект скрыть кольцо фокуса при запуске.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Определяет, должен ли эффект скрыть кольцо фокуса при запуске. За сокрытие кольца фокуса несет ответственность целевой объект эффекта. Подклассы класса UIComponent скрывают кольцо фокуса автоматически. Если целевой объект эффекта не является подклассом класса UIComponent, к нему необходимо добавить функциональные возможности скрытия кольца фокуса.
     
      <p>Для скрытия кольца фокуса во время воспроизведения эффекта следует установить для этого свойства значение <codeph>true</codeph>.</p>
      
      <p>Для подклассов Effect значением по умолчанию является значение <codeph>false</codeph>. Для подклассов MaskEffect значением по умолчанию является значение <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Текущая позиция эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Текущая позиция эффекта. Значение этого свойства находится в диапазоне от 0 до значения общей продолжительности, включающей значения параметров эффекта <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> и <codeph>repeatDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc>
      Указывает объект PropertyChanges, содержащий начальные и конечные значения для набора свойств, относящихся к целевым объектам эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc>
      Указывает объект PropertyChanges, содержащий начальные и конечные значения для набора свойств, относящихся к целевым объектам эффекта. Это свойство устанавливается только в том случае, если для эффекта, создавшего данный экземпляр эффекта, был вызван метод <codeph>captureStartValues()</codeph>. 
      
      <p>Как правило, свойство <codeph>propertyChanges</codeph> используется для создания эффекта, применяемого в качестве части перехода. При запуске перехода Flex автоматически вызывает метод <codeph>captureStartValues()</codeph>. В переопределении метода <codeph>Effectinstance.play()</codeph> для инициализации начальных и конечных значений эффекта можно проанализировать информацию в методе <codeph>propertyChanges()</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc>
      Число повторов эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Число повторов эффекта. Возможные значения – это любые целые числа, которые больше или равны 0.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatCount"><linktext>mx.effects.Effect.repeatCount</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc>
      Время ожидания (в миллисекундах) перед повторением эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Время ожидания (в миллисекундах) перед повторением эффекта.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatDelay"><linktext>mx.effects.Effect.repeatDelay</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc>
      Время ожидания (в миллисекундах) перед запуском эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Время ожидания (в миллисекундах) перед запуском эффекта. Возможные значения – любые положительные целые числа или 0. Если эффект повторяется с использованием свойства <codeph>repeatCount</codeph>, свойство <codeph>startDelay</codeph> применяется только при первом воспроизведении эффекта.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Если значение равно true, блокирует всю фоновую обработку во время воспроизведения эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, блокирует всю фоновую обработку во время воспроизведения эффекта. Фоновая обработка состоит из измерений, макетирования и обработки ответов, поступивших от сервера.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/suspendBackgroundProcessing"><linktext>mx.effects.Effect.suspendBackgroundProcessing</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:target:get"><apiName>target</apiName><shortdesc>
      Объект UIComponent, к которому применяется данный эффект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект UIComponent, к которому применяется данный эффект.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/target"><linktext>mx.effects.Effect.target</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Событие (при наличии), запускающее воспроизведение эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Событие (при наличии), запускающее воспроизведение эффекта. Использование этого свойства рекомендовано в случае присвоения эффекту нескольких событий запуска.
     
      <p>Если эффект был воспроизведен программно с помощью вызова метода <codeph>play()</codeph>, а не был запущен событием, это свойство имеет значение <codeph>null</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>