<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.validators"><apiName>mx.validators</apiName><apiDetail/><apiClassifier id="mx.validators:CurrencyValidatorAlignSymbol"><apiName>CurrencyValidatorAlignSymbol</apiName><shortdesc>
  Die CurrencyValidatorAlignSymbol-Klasse gibt Wertkonstanten für die Ausrichtung der Währungssymbole an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CurrencyValidatorAlignSymbol-Klasse gibt Wertkonstanten für die Ausrichtung der Währungssymbole an. Diese Werte werden in der <codeph>CurrencyValidator.alignSymbol</codeph>-Eigenschaft verwendet.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidator"><linktext>mx.validators.CurrencyValidator</linktext></link></related-links><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:ANY"><apiName>ANY</apiName><shortdesc>
	  Gibt „any“ als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt <codeph>"any"</codeph> als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Gibt „left“ als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt <codeph>"left"</codeph> als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Gibt „right“ als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt <codeph>"right"</codeph> als Ausrichtung des Währungssymbols für die CurrencyValidator-Klasse an.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:DateValidator"><apiName>DateValidator</apiName><shortdesc>
  Die DateValidator-Klasse überprüft, ob ein String, Datum oder Objekt ein zulässiges Datum und ein vorgeschriebenes Format aufweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>  
  
  <pre>
  &lt;mx:DateValidator 
    allowedFormatChars="/\-. " 
    dayListener="<i>Object specified by daySource</i>"
    dayProperty="<i>No default</i>"
    daySource="<i>No default</i>"
    formatError= "Configuration error: Incorrect formatting string." 
    inputFormat="MM/DD/YYYY" 
    invalidCharError="The date contains invalid characters."
    monthListener="<i>Object specified by monthSource</i>"
    monthProperty="<i>No default</i>"
    monthSource="<i>No default</i>"
    validateAsString="true|false"
    wrongDayError="Enter a valid day for the month."
    wrongLengthError="Type the date in the format <i>inputFormat</i>." 
    wrongMonthError="Enter a month between 1 and 12."
    wrongYearError="Enter a year between 0 and 9999."
    yearListener="<i>Object specified by yearSource</i>"
    yearProperty="<i>No default</i>"
    yearSource="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DateValidator-Klasse überprüft, ob ein String, Datum oder Objekt ein zulässiges Datum und ein vorgeschriebenes Format aufweist. Die Benutzer können eine oder zwei Ziffern für Monat, Tag und Jahr eingeben. Standardmäßig sorgt der Validator für die Einhaltung der folgenden Formate:
 
  <ul>
    <li>Der Monat ist eine Zahl von 1 bis 12 (oder 0-11 für <codeph>Date</codeph>-Objekte)</li>
    <li>Der Tag ist eine Zahl von 1 bis 31</li>
    <li>Das Jahr ist eine Zahl</li>
  </ul>
 
  <p>Sie haben für die Angabe des Datums in der DateValidator-Klasse zwei Möglichkeiten:</p>
  <ul>
    <li>Einzelner String mit dem Datum - Verwenden Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften, um den String anzugeben. Der String kann Ziffern und die Formatierungszeichen enthalten, die in der <codeph>allowedFormatChars</codeph>-Eigenschaft angegeben sind; einschließlich der Zeichen „/\-. “. Standardmäßig ist das Eingabeformat des Datums in einem Stringfeld „MM/TT/JJJ“, wobei „MM“, der Monat ist, „TT“ der Tag und „JJ“ das Jahr Sie können die <codeph>inputFormat</codeph>-Eigenschaft verwenden, um ein anderes Format anzugeben.</li>
 	  <li><codeph>Date-Objekt.</codeph></li>
    <li>Objekt oder mehrere Felder, die Tag, Monat und Jahr enthalten. Verwenden Sie alle nachstehenden Parameter für Tages-, Monats- und Jahresangaben: <codeph>daySource</codeph>, <codeph>dayProperty</codeph>, <codeph>monthSource</codeph>, <codeph>monthProperty</codeph>, <codeph>yearSource</codeph> und <codeph>yearProperty</codeph>.</li>
  </ul>
  
  </apiDesc><example conref="DateValidatorExample.mxml"><swfblock conref="examples/DateValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:DateValidator:DateValidator"><apiName>DateValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:DateValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung eines Datums.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Entweder ein String oder ein Objekt zur Überprüfung.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung eines Datums.
	 
	  <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:DateValidator:validateDate"><apiName>validateDate</apiName><shortdesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:DateValidator</apiOperationClassifier><apiDesc>Die DateValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im Wertparameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.date angegeben ist, ist der <codeph>baseField</codeph>-Wert „date“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:DateValidator:dayProperty"><apiName>dayProperty</apiName><shortdesc>
	  Name der zu überprüfenden Tageseigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Name der zu überprüfenden Tageseigenschaft. Diese Eigenschaft ist optional, aber wenn Sie die <codeph>daySource</codeph>-Eigenschaft angeben, müssen Sie auch diese Eigenschaft einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthProperty"><apiName>monthProperty</apiName><shortdesc>
	  Name der zu überprüfenden Monatseigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Name der zu überprüfenden Monatseigenschaft. Diese Eigenschaft ist optional, aber wenn Sie die <codeph>monthSource</codeph>-Eigenschaft angeben, müssen Sie auch diese Eigenschaft einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearProperty"><apiName>yearProperty</apiName><shortdesc>
	  Name der zu überprüfenden Jahreseigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Name der zu überprüfenden Jahreseigenschaft. Diese Eigenschaft ist optional, aber wenn Sie die <codeph>yearSource</codeph>-Eigenschaft angeben, müssen Sie auch diese Eigenschaft einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Der Formatierungszeichensatz, der zum Trennen von Monats-, Tages- und Jahreswerten zulässig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"/\-. "
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Formatierungszeichensatz, der zum Trennen von Monats-, Tages- und Jahreswerten zulässig ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:dayListener:get"><apiName>dayListener</apiName><shortdesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Tagesunterfeld abwartet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Tagesunterfeld abwartet. Wenn nichts angegeben ist, verwenden Sie den Wert, der für die <codeph>daySource</codeph>-Eigenschaft angegeben ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:daySource:get"><apiName>daySource</apiName><shortdesc> 
	  Objekt, das den Wert des Tagesfelds enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objekt, das den Wert des Tagesfelds enthält. Wenn Sie einen Wert für diese Eigenschaft angeben, müssen Sie auch einen Wert für die <codeph>dayProperty</codeph>-Eigenschaft angeben. Verwenden Sie diese Eigenschaft nicht, wenn Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften setzen. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:formatError:get"><apiName>formatError</apiName><shortdesc> 
	  Fehlermeldung, wenn das Format der inputFormat-Eigenschaft falsch ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Configuration error: Incorrect formatting string." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das Format der <codeph>inputFormat</codeph>-Eigenschaft falsch ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:inputFormat:get"><apiName>inputFormat</apiName><shortdesc> 
	  Das Datumsformat für die Überprüfung des Werts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"MM/DD/YYYY"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Das Datumsformat für die Überprüfung des Werts. „MM“ ist der Monat, „TT“ der Tag und „JJ“ das Jahr. Dieser String unterscheidet zwischen Groß- und Kleinbuchstaben.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Fehlermeldung, wenn das Datum ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your date."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das Datum ungültige Zeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthListener:get"><apiName>monthListener</apiName><shortdesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Monatsunterfeld abwartet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Monatsunterfeld abwartet. Wenn nichts angegeben ist, verwenden Sie den Wert, der für die <codeph>monthSource</codeph>-Eigenschaft angegeben ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthSource:get"><apiName>monthSource</apiName><shortdesc> 
	  Objekt, das den Wert des Monatsfelds enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objekt, das den Wert des Monatsfelds enthält. Wenn Sie einen Wert für diese Eigenschaft angeben, müssen Sie auch einen Wert für die <codeph>monthProperty</codeph>-Eigenschaft angeben. Verwenden Sie diese Eigenschaft nicht, wenn Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften setzen. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:validateAsString:get"><apiName>validateAsString</apiName><shortdesc> 
	  Bestimmt, wie der Wert überprüft wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true	 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Bestimmt, wie der Wert überprüft wird. Wenn auf <codeph>true</codeph> gesetzt, kontrolliert der Validator den Wert als String, unabhängig davon, ob der Wert eine <codeph>month</codeph>, <codeph>day</codeph> oder <codeph>year</codeph>-Eigenschaft ist. Wenn auf <codeph>false</codeph> gesetzt, kontrolliert der Validator den Wert als Datumsobjekt. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongDayError:get"><apiName>wrongDayError</apiName><shortdesc> 
	  Fehlermeldung, wenn der Tag ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a valid day for the month." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn der Tag ungültig ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Fehlermeldung, wenn die Länge des Datums nicht mit der inputFormat-Eigenschaft übereinstimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Type the date in the format &lt;i>inputFormat&lt;/i>." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn die Länge des Datums nicht mit der <codeph>inputFormat</codeph>-Eigenschaft übereinstimmt.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongMonthError:get"><apiName>wrongMonthError</apiName><shortdesc> 
	  Fehlermeldung, wenn der Monat ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a month between 1 and 12."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn der Monat ungültig ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongYearError:get"><apiName>wrongYearError</apiName><shortdesc> 
	  Fehlermeldung, wenn das Jahr ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a year between 0 and 9999."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das Jahr ungültig ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearListener:get"><apiName>yearListener</apiName><shortdesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Jahresunterfeld abwartet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Jahresunterfeld abwartet. Wenn nichts angegeben ist, verwenden Sie den Wert, der für die <codeph>yearSource</codeph>-Eigenschaft angegeben ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearSource:get"><apiName>yearSource</apiName><shortdesc> 
	  Objekt, das den Wert des Jahresfelds enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objekt, das den Wert des Jahresfelds enthält. Wenn Sie einen Wert für diese Eigenschaft angeben, müssen Sie auch einen Wert für die <codeph>yearProperty</codeph>-Eigenschaft angeben. Verwenden Sie diese Eigenschaft nicht, wenn Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften setzen. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
  Die ZipCodeValidator-Klasse überprüft, ob die Länge und das Format des Strings für eine fünfstellige PLZ, eine fünfstellige + vierstellige PLZ der USA oder eine kanadische PLZ richtig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ZipCodeValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:ZipCodeValidator
    allowedFormatChars=" -" 
    domain="US Only | US or Canada | Canada Only"
    invalidCharError="The ZIP code contains invalid characters." 
    invalidDomainError="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." 
    wrongCAFormatError="The Canadian postal code must be formatted 'A1B 2C3'." 
    wrongLengthError="The ZIP code must be 5 digits or 5+4 digits." 
    wrongUSFormatError="The ZIP+4 code must be formatted '12345-6789'." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ZipCodeValidator-Klasse überprüft, ob die Länge und das Format des Strings für eine fünfstellige PLZ, eine fünfstellige + vierstellige PLZ der USA oder eine kanadische PLZ richtig sind.
  
  </apiDesc><example conref="ZipCodeValidatorExample.mxml"><swfblock conref="examples/ZipCodeValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidatorDomainType"><linktext>mx.validators.ZipCodeValidatorDomainType</linktext></link></related-links><apiConstructor id="mx.validators:ZipCodeValidator:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:ZipCodeValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse, um eine PLZ zu überprüfen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse, um eine PLZ zu überprüfen.
     
      <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:ZipCodeValidator:validateZipCode"><apiName>validateZipCode</apiName><shortdesc>
      Vereinfachungsmethode zum Aufrufen eines Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:ZipCodeValidator</apiOperationClassifier><apiDesc>Die ZipCodeValidator-Instanz.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.zipCode angegeben ist, lautet der <codeph>baseField</codeph>-Wert <codeph>zipCode</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vereinfachungsmethode zum Aufrufen eines Validators. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:ZipCodeValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
      Der für eine PLZ zulässige Satz von Formatierungszeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -". 
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Der für eine PLZ zulässige Satz von Formatierungszeichen. Es sind keine Ziffern oder Buchstaben zulässig [a-z A-Z].
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:domain:get"><apiName>domain</apiName><shortdesc> 
      Zu überprüfender PLZ-Typ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ZipCodeValidatorDomainType.US_ONLY
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Zu überprüfender PLZ-Typ. In MXML sind die gültigen Werte: <codeph>"US or Canada"</codeph>, <codeph>"US only"</codeph> und <codeph>"Canada only"</codeph>.
     
      <p>In ActionScript können Sie die nachstehenden Konstantenverwenden, um diese Eigenschaft zu setzen: <codeph>ZipCodeValidatorDomainType.US_ONLY</codeph>, <codeph>ZipCodeValidatorDomainType.US_OR_CANADA</codeph>, oder <codeph>ZipCodeValidatorDomainType.CANADA_ONLY</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
      Fehlermeldung, wenn die PLZ ungültig Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung, wenn die PLZ ungültig Zeichen enthält.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc> 
      Fehlermeldung, wenn die domain-Eigenschaft einen ungültigen Wert enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain parameter is invalid. It must be either 'US Only' or 'US or Canada'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung, wenn die <codeph>domain</codeph>-Eigenschaft einen ungültigen Wert enthält.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongCAFormatError:get"><apiName>wrongCAFormatError</apiName><shortdesc> 
      Fehlermeldung für eine ungültige kanadische PLZ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Canadian postal code must be formatted 'A1B 2C3'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung für eine ungültige kanadische PLZ.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
      Fehlermeldung für eine ungültige USA-PLZ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code must be 5 digits or 5+4 digits."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung für eine ungültige USA-PLZ.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongUSFormatError:get"><apiName>wrongUSFormatError</apiName><shortdesc> 
      Fehlermeldung für eine falsch formatierte PLZ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP+4 code must be formatted '12345-6789'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung für eine falsch formatierte PLZ.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidator"><apiName>IValidator</apiName><shortdesc>
  Diese Schnittstelle legt die Methoden und Eigenschaften fest, die ein Validator-Objekt implementieren muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Diese Schnittstelle legt die Methoden und Eigenschaften fest, die ein Validator-Objekt implementieren muss. 
  <p>Über diese Schnittstelle können mehrere Datentypen wie Zahlen, Währungen, Telefonnummern, Postleitzahlen usw, die in mx- und spark-Namespaces definiert sind, überprüft werden. Die Klassen mx:Validator und spark:GlobaliationValidatorBase implementieren diese Schnittstelle. Die validateAll()-Methode in diesen Klassen verwendet diesen Schnittstellentyp zum Aufrufen der validate()-Methode für mehrere Validator-Objekte.</p>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link><link href="" invalidHref="spark.validators.GlobalizationValidatorBase.xml"><linktext>spark.validators.GlobalizationValidatorBase</linktext></link></related-links><apiOperation id="mx.validators:IValidator:mx.validators:IValidator:validate"><apiName>validate</apiName><shortdesc>
      Führt eine Überprüfung aus und teilt optional den Listenern das Ergebnis mit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das ValidationResultEvent-Objekt, das die Ergebnisse der Überprüfung enthält. Für eine erfolgreiche Überprüfung ist die <codeph>ValidationResultEvent.results</codeph>-Array-Eigenschaft leer. Für einen Überprüfungsfehler enthält die <codeph>ValidationResultEvent.results</codeph>-Array-Eigenschaft ein ValidationResult-Objekt für jedes vom Validator geprüfte Feld – unabhängig vom Ergebnis der Prüfung. Überprüfen Sie die <codeph>ValidationResult.isError</codeph>-Eigenschaft, um zu bestimmen, ob die Prüfung erfolgreich verlief oder nicht. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Optionaler zu überprüfender Wert. Wenn null, verwendet der Validator die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften, um den Wert zu bestimmen. Wenn Sie dieses Argument angeben, sollten Sie auch die <codeph>listener</codeph>-Eigenschaft setzen, um die Zielkomponente für alle Überprüfungsfehlermeldungen anzugeben.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>false</codeph>, wird nach der Überprüfung dem Listener das Ergebnis mitgeteilt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt eine Überprüfung aus und teilt optional den Listenern das Ergebnis mit. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidator:mx.validators:IValidator:enabled:get"><apiName>enabled</apiName><shortdesc>
      Eigenschaft zum Aktivieren/Deaktivieren des Überprüfungsvorgangs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eigenschaft zum Aktivieren/Deaktivieren des Überprüfungsvorgangs.
      <p>Wird dieser Wert auf <codeph>false</codeph> eingestellt, werden für diesen Validator keine weiteren Überprüfungen mehr ausgeführt. Wenn ein Validator deaktiviert ist, werden keine Ereignisse ausgelöst und die <codeph>validate()</codeph>-Methode gibt null zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
  Die CurrencyValidator-Klasse überprüft, ob ein String einen gültigen Währungsausdruck darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:CurrencyValidator" replacement="spark.validators.CurrencyValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CurrencyValidator&gt;</code> tag
  inherits all of the tag properties of its superclass,
  and adds the following tag properties:</p>
 
  <pre>
  &lt;mx:CurrencyValidator
    alignSymbol="left|right|any"
    allowNegative="true|false"
    currencySymbol="$"
    currencySymbolError="The currency symbol occurs in an invalid location."
    decimalPointCountError="The decimal separator can occur only once."
    decimalSeparator="."
    exceedsMaxError="The amount entered is too large."
    invalidCharError="The input contains invalid characters."
    invalidFormatCharsError="One of the formatting parameters is invalid."
    lowerThanMinError="The amount entered is too small."
    maxValue="NaN"
    minValue="NaN"
    negativeError="The amount may not be negative."
    precision="2"
    precisionError="The amount entered has too many digits beyond the decimal point."
    separationError="The thousands separator must be followed by three digits."
    thousandsSeparator=","
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CurrencyValidator-Klasse überprüft, dass ein String einen gültigen Währungsausdruck darstellt. Sie kann sicherstellen, dass die Eingabe innerhalb des (von <codeph>minValue</codeph> und <codeph>maxValue</codeph>) angegebenen Bereichs liegt, (gemäß <codeph>allowNegative</codeph>) nicht negativ ist und die angegebene <codeph>precision</codeph> nicht überschreitet. Die CurrencyValidator-Klasse überprüft ordnungsgemäß formatierte und unformatierte Währungsausdrücke, z. B. „$12,345.00“ und „12345“. Sie können die <codeph>currencySymbol</codeph>-, <codeph>alignSymbol</codeph>-, <codeph>thousandsSeparator</codeph>- und <codeph>decimalSeparator</codeph>-Eigenschaften für die Internationalisierung anpassen.
 
  </apiDesc><example conref="CurrencyValidatorExample.mxml"><swfblock conref="examples/CurrencyValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links><apiConstructor id="mx.validators:CurrencyValidator:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CurrencyValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung eines Währungsausdrucks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung eines Währungsausdrucks.
     
      <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CurrencyValidator:validateCurrency"><apiName>validateCurrency</apiName><shortdesc>
      Vereinfachungsmethode zum Aufrufen eines Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CurrencyValidator</apiOperationClassifier><apiDesc>Die CurrencyValidator-Instanz.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Das zu überprüfende Objekt.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.currency angegeben ist, ist der baseField-Wert „currency“.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vereinfachungsmethode zum Aufrufen eines Validators. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CurrencyValidator:alignSymbol:get"><apiName>alignSymbol</apiName><shortdesc>
      Gibt die Ausrichtung des currencySymbol im Verhältnis zum Rest des Ausdrucks an. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CurrencyValidatorAlignSymbol.LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Ausrichtung des <codeph>currencySymbol</codeph> im Verhältnis zum Rest des Ausdrucks an. Zulässige Werte in ActionScript sind <codeph>CurrencyValidatorAlignSymbol.LEFT</codeph>, <codeph>CurrencyValidatorAlignSymbol.RIGHT</codeph> und <codeph>CurrencyValidatorAlignSymbol.ANY</codeph>. Zulässige Werte in MXML sind <codeph>"left"</codeph>, <codeph>"right"</codeph> und <codeph>"any"</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links></apiValue><apiValue id="mx.validators:CurrencyValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Gibt an, ob negative Zahlen zulässig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob negative Zahlen zulässig sind. Kann <codeph>true</codeph> oder <codeph>false</codeph> sein.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbolError:get"><apiName>currencySymbolError</apiName><shortdesc>
      Fehlermeldung, wenn sich das von currencySymbol definierte Währungssymbol in einer falschen Position befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The currency symbol occurs in an invalid location."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn sich das von <codeph>currencySymbol</codeph> definierte Währungssymbol in einer falschen Position befindet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbol:get"><apiName>currencySymbol</apiName><shortdesc>
      Der Zeichenstring, der für die Angabe des Währungssymbols verwendet wird, wie z. B. „$“, „R$“ oder „&amp;#163;“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"$"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Zeichenstring, der für die Angabe des Währungssymbols verwendet wird, wie z. B. „$“, „R$“ oder „£“. Darf keine Ziffer sein und muss verschieden vom <codeph>thousandsSeparator</codeph> und vom <codeph>decimalSeparator</codeph> sein.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Fehlermeldung, wenn das Dezimaltrennzeichen mehr als einmal vorkommt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can only occur once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn das Dezimaltrennzeichen mehr als einmal vorkommt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Das Zeichen, das die Ganzzahl vom Bruchteil der Zahl trennt. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Zeichen, das die Ganzzahl vom Bruchteil der Zahl trennt. Darf keine Ziffer sein und muss verschieden vom <codeph>currencySymbol</codeph> und dem <codeph>thousandsSeparator</codeph> sein.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert größer als der maxValue ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert größer als der <codeph>maxValue</codeph> ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Fehlermeldung, wenn die Währung ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn die Währung ungültige Zeichen enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert ein ungültiges Formatierungszeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert ein ungültiges Formatierungszeichen enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert kleiner als der minValue ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert kleiner als der <codeph>minValue</codeph> ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Höchstwert für eine gültige Zahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Höchstwert für eine gültige Zahl. Der Wert NaN bedeutet, dass die Eigenschaft ignoriert wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Mindestwert für eine gültige Zahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Mindestwert für eine gültige Zahl. Der Wert NaN bedeutet, dass die Eigenschaft ignoriert wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert negativ ist und die allowNegative-Eigenschaft auf false gesetzt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert negativ ist und die <codeph>allowNegative</codeph>-Eigenschaft auf <codeph>false</codeph> eingestellt ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Fehlermeldung, wenn die Genauigkeit des Werts den in der precision-Eigenschaft angegebenen Wert überschreitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond 
      the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn die Genauigkeit des Werts den in der <codeph>precision</codeph>-Eigenschaft angegebenen Wert überschreitet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Die maximale zulässige Anzahl von Ziffern nach dem Dezimalzeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die maximale zulässige Anzahl von Ziffern nach dem Dezimalzeichen. Kann eine beliebige nicht negative Ganzzahl sein. Hinweis: Die Einstellung <codeph>0</codeph> hat dieselbe Wirkung wie das Festlegen von <codeph>NumberValidator.domain</codeph> auf <codeph>int</codeph>. Die Einstellung -1 bedeutet, dass sie ignoriert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Fehlermeldung, wenn das Tausendertrennzeichen falsch platziert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn das Tausendertrennzeichen falsch platziert wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Das Zeichen, das die Tausender trennt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Zeichen, das die Tausender trennt. Darf keine Ziffer sein und muss verschieden vom <codeph>currencySymbol</codeph> und vom <codeph>decimalSeparator</codeph> sein.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidatorDomainType"><apiName>NumberValidatorDomainType</apiName><shortdesc>
  Die NumberValidatorDomainType-Klasse definiert die Werte für die domain-Eigenschaft der NumberValidator-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die NumberValidatorDomainType-Klasse definiert die Werte für die <codeph>domain</codeph>-Eigenschaft der NumberValidator-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#NumberValidator"><linktext>mx.validators.NumberValidator</linktext></link></related-links><apiValue id="mx.validators:NumberValidatorDomainType:INT"><apiName>INT</apiName><shortdesc>
	  Gibt die Überprüfung einer Ganzzahl an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>int</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt die Überprüfung einer Ganzzahl an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidatorDomainType:REAL"><apiName>REAL</apiName><shortdesc>
	  Gibt die Überprüfung einer reellen Zahl an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>real</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt die Überprüfung einer reellen Zahl an.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:StringValidator"><apiName>StringValidator</apiName><shortdesc>
  Die StringValidator-Klasse überprüft, ob die Länge eines Strings innerhalb eines angegebenen Bereichs liegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:StringValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and add the following tag attributes:</p>
  
  <pre>
  &lt;mx:StringValidator
    maxLength="NaN" 
    minLength="NaN" 
    tooLongError="This string is longer than the maximum allowed length. This must be less than {0} characters long." 
    tooShortError="This string is shorter than the minimum allowed length. This must be at least {0} characters long." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die StringValidator-Klasse überprüft, ob die Länge eines Strings innerhalb eines angegebenen Bereichs liegt. 
  
  </apiDesc><example conref="StringValidatorExample.mxml"><swfblock conref="examples/StringValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:StringValidator:StringValidator"><apiName>StringValidator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:StringValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung eines Strings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung eines Strings.
     
      <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:StringValidator:validateString"><apiName>validateString</apiName><shortdesc>
      Vereinfachungsmethode zum Aufrufen eines Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:StringValidator</apiOperationClassifier><apiDesc>Die StringValidator-Instanz.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.mystring angegeben ist, ist der Wert von <codeph>baseField</codeph><codeph>"mystring"</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vereinfachungsmethode zum Aufrufen eines Validators. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:StringValidator:maxLength:get"><apiName>maxLength</apiName><shortdesc> 
      Maximale Länge für einen gültigen String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Höchstlänge für einen gültigen String. Der Wert NaN bedeutet, dass diese Eigenschaft ignoriert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:minLength:get"><apiName>minLength</apiName><shortdesc> 
      Mindestlänge für einen gültigen String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Mindestlänge für einen gültigen String. Der Wert NaN bedeutet, dass diese Eigenschaft ignoriert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooLongError:get"><apiName>tooLongError</apiName><shortdesc> 
      Fehlermeldung, wenn der String länger als die maxLength-Eigenschaft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is longer than the maximum allowed length. This must be less than {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung, wenn der String länger als die <codeph>maxLength</codeph>-Eigenschaft ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooShortError:get"><apiName>tooShortError</apiName><shortdesc> 
      Fehlermeldung, wenn der String kürzer als die minLength-Eigenschaft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is shorter than the minimum allowed length. This must be at least {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fehlermeldung, wenn der String kürzer als die <codeph>minLength</codeph>-Eigenschaft ist.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidatorDomainType"><apiName>ZipCodeValidatorDomainType</apiName><shortdesc>
  Die ZipCodeValidatorDomainType-Klasse definiert die Werte für die domain-Eigenschaft der ZipCodeValidator-Klasse, die zur Angabe des zu überprüfunden PLZ-Codes verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ZipCodeValidatorDomainType-Klasse definiert die Werte für die <codeph>domain</codeph>-Eigenschaft der ZipCodeValidator-Klasse an, die verwendet wird, um den zu überprüfenden PLZ-Typ anzugeben.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidator"><linktext>mx.validators.ZipCodeValidator</linktext></link></related-links><apiValue id="mx.validators:ZipCodeValidatorDomainType:CANADA_ONLY"><apiName>CANADA_ONLY</apiName><shortdesc>
	  Gibt an, dass eine kanadische PLZ zu überprüfen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Canada Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass eine kanadische PLZ zu überprüfen ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_ONLY"><apiName>US_ONLY</apiName><shortdesc>
	  Gibt an, dass eine USA-PLZ zu überprüfen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass eine USA-PLZ zu überprüfen ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_OR_CANADA"><apiName>US_OR_CANADA</apiName><shortdesc>
	  Gibt an, dass eine USA- oder kanadische PLZ zu überprüfen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US or Canada</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass eine USA- oder kanadische PLZ zu überprüfen ist.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
  Mit der RegExpValidator-Klasse kann ein regulärer Ausdruck zur Überprüfung eines Felds verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RegExpValidator&gt;</code> tag 
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:RegExpValidator
    expression="<i>No default</i>" 
    flags="<i>No default</i>" 
    noExpressionError="The expression is missing." 
    noMatchError="The field is invalid." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Mit der RegExpValidator-Klasse kann ein regulärer Ausdruck zur Überprüfung eines Felds verwendet werden. Sie übergeben dem Validator einen regulären Ausdruck mithilfe der <codeph>expression</codeph>-Eigenschaft und unter Verwendung der <codeph>flags</codeph>-Eigenschaft zusätzliche Flags zur Steuerung der Übereinstimmung des regulären Ausdrucksmusters. 
 
  <p>Die Überprüfung ist erfolgreich, wenn der Validator im zu überprüfenden Feld eine Übereinstimmung für den regulären Ausdruck findet. Ein Überprüfungsfehler wird ausgegeben, wenn der Validator kein Ergebnis findet.</p>
 
  <p>Die RegExpValidator-Klasse löst die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse aus. Für ein <codeph>invalid</codeph>-Ereignis ist das Ereignisobjekt eine Instanz der ValidationResultEvent-Klasse und enthält ein Array von ValidationResult-Objekten.</p>
 
  <p>Für ein <codeph>valid</codeph>-Ereignis hingegen enthält das ValidationResultEvent-Objekt ein Array von RegExpValidationResult-Objekten. Die RegExpValidationResult-Klasse ist eine Unterklasse der ValidationResult-Klasse und enthält zusätzliche Eigenschaften, die mit regulären Ausdrücken verwendet werden, einschließlich den folgenden:</p>
  <ul>
    <li><codeph>matchedIndex</codeph> Eine Ganzzahl, die die Anfangsindexposition im Eingabestring der Übereinstimmung enthält.</li>
    <li><codeph>matchedString</codeph> Ein String, der den untergeordneten String eines Eingabestrings enthält, der mit dem regulären Ausdruck übereinstimmt.</li>
    <li><codeph>matchedSubStrings</codeph> Ein Stringarray, das (wenn überhaupt) übereinstimmende untergeordnete Strings in Klammern enthält. Wenn keine übereinstimmenden untergeordneten Strings gefunden werden, ist die Länge dieses Arrays 0. Verwenden Sie matchedSubStrings[0], um auf die erste Übereinstimmung eines untergeordneten Strings zuzugreifen.</li>
  </ul>
  
  </apiDesc><example conref="RegExValidatorExample.mxml"><swfblock conref="examples/RegExValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="" invalidHref="mx.validators.RegExp.xml"><linktext>RegExp</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidator:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
      Konstruktor
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      Konstruktor
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:RegExpValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung eines regulären Ausdrucks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Für ein ungültiges Ergebnis: ein Array von ValidationResult-Objekten mit einem ValidationResult-Objekt für jedes vom Validator überprüfte Feld. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung eines regulären Ausdrucks.
     
      <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.validators:RegExpValidator:expression:get"><apiName>expression</apiName><shortdesc>
      Der für die Überprüfung zu verwendende reguläre Ausdruck.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der für die Überprüfung zu verwendende reguläre Ausdruck. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:flags:get"><apiName>flags</apiName><shortdesc>
      Die für die Überprüfung zu verwendenden Flags des regulären Ausdrucks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Die für die Überprüfung zu verwendenden Flags des regulären Ausdrucks.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noExpressionError:get"><apiName>noExpressionError</apiName><shortdesc> 
      Fehlermeldung, wenn kein regulärer Ausdruck angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Fehlermeldung, wenn kein regulärer Ausdruck angegeben wird. Der Standardwert ist: „Der Ausdruck fehlt“.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noMatchError:get"><apiName>noMatchError</apiName><shortdesc> 
      Fehlermeldung, wenn keine Übereinstimmungen für den regulären Ausdruck vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Fehlermeldung, wenn keine Übereinstimmungen für den regulären Ausdruck vorhanden sind. Der Standardwert ist: „Das Feld ist ungültig.“
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
  Die NumberValidator-Klasse stellt sicher, dass ein String eine gültige Zahl darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:NumberValidator" replacement="spark.validators.NumberValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:NumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:NumberValidator 
    allowNegative="true|false" 
    decimalPointCountError="The decimal separator can only occur once." 
    decimalSeparator="." 
    domain="real|int" 
    exceedsMaxError="The number entered is too large." 
    integerError="The number must be an integer." 
    invalidCharError="The input contains invalid characters." 
    invalidFormatCharsError="One of the formatting parameters is invalid." 
    lowerThanMinError="The amount entered is too small." 
    maxValue="NaN" 
    minValue="NaN" 
    negativeError="The amount may not be negative." 
    precision="-1" 
    precisionError="The amount entered has too many digits beyond the decimal point." 
    separationError="The thousands separator must be followed by three digits." 
    thousandsSeparator="," 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die NumberValidator-Klasse stellt sicher, dass ein String eine gültige Zahl darstellt. Sie kann sicherstellen, dass die Eingabe innerhalb eines bestimmten Bereichs (zwischen <codeph>minValue</codeph> und <codeph>maxValue</codeph>) liegt, eine Ganzzahl ist (festgelegt durch <codeph>domain</codeph>), nicht negativ ist (festgelegt durch <codeph>allowNegative</codeph>) und die angegebene <codeph>precision</codeph> nicht überschreitet. Der Validator überprüft formatierte Zahlen (z. B. „12.345,67“) und Sie können die <codeph>thousandsSeparator</codeph> und <codeph>decimalSeparator</codeph>-Eigenschaften für die Internationalisierung anpassen.
  
  </apiDesc><example conref="NumberValidatorExample.mxml"><swfblock conref="examples/NumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:NumberValidator:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:NumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung einer Zahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung einer Zahl.
     
	  <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:NumberValidator:validateNumber"><apiName>validateNumber</apiName><shortdesc>
      Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:NumberValidator</apiOperationClassifier><apiDesc>Die NumberValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
	 
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.number angegeben ist, ist der <codeph>baseField</codeph>-Wert „number“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:NumberValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Gibt an, ob negative Zahlen zulässig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob negative Zahlen zulässig sind. Gültige Werte sind <codeph>true</codeph> oder <codeph>false</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Fehlermeldung, wenn das Dezimaltrennzeichen mehr als einmal vorkommt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can occur only once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn das Dezimaltrennzeichen mehr als einmal vorkommt.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Das Zeichen, das die Ganzzahl vom Bruchteil der Zahl trennt. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Zeichen, das die Ganzzahl vom Bruchteil der Zahl trennt. Darf keine Ziffer sein und muss verschieden vom <codeph>thousandsSeparator</codeph> sein.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:domain:get"><apiName>domain</apiName><shortdesc>
      Zu überprüfender Zahlentyp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"real"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zu überprüfender Zahlentyp. Zulässige Werte sind <codeph>"real"</codeph> und <codeph>"int"</codeph>.
	 
	  <p>In ActionScript können Sie die folgenden Konstanten zum Festlegen dieser Eigenschaft verwenden: <codeph>NumberValidatorDomainType.REAL</codeph> oder <codeph>NumberValidatorDomainType.INT</codeph>.</p>
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert größer als die maxValue-Eigenschaft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert größer als die <codeph>maxValue</codeph>-Eigenschaft ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:integerError:get"><apiName>integerError</apiName><shortdesc>
      Fehlermeldung, wenn die Zahl eine Ganzzahl sein muss, wie in der domain-Eigenschaft definiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number must be an integer."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn die Zahl eine Ganzzahl sein muss, wie in der <codeph>domain</codeph>-Eigenschaft definiert.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert ungültige Zeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert ungültige Formatzeichen enthält, d. h. er enthält eine Ziffer oder ein Minuszeichen (-) als Trennzeichen bzw. zwei oder mehr aufeinanderfolgende Trennzeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert ungültige Formatzeichen enthält, d. h. er enthält eine Ziffer oder ein Minuszeichen (-) als Trennzeichen bzw. zwei oder mehr aufeinanderfolgende Trennzeichen.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert kleiner als der minValue ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert kleiner als der <codeph>minValue</codeph> ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Höchstwert für eine gültige Zahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Höchstwert für eine gültige Zahl. Der Wert NaN bedeutet, dass es keinen Höchstwert gibt.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Mindestwert für eine gültige Zahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Mindestwert für eine gültige Zahl. Der Wert NaN bedeutet, dass es keinen Mindestwert gibt.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Fehlermeldung, wenn der Wert negativ ist und die allowNegative-Eigenschaft auf false gesetzt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn der Wert negativ ist und die <codeph>allowNegative</codeph>-Eigenschaft auf <codeph>false</codeph> eingestellt ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Fehlermeldung, wenn die Genauigkeit des Werts den in der precision-Eigenschaft angegebenen Wert überschreitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn die Genauigkeit des Werts den in der precision-Eigenschaft angegebenen Wert überschreitet.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Die maximale zulässige Anzahl von Ziffern nach dem Dezimalzeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die maximale zulässige Anzahl von Ziffern nach dem Dezimalzeichen. Kann eine beliebige nicht negative Ganzzahl sein. Hinweis: Die Einstellung <codeph>0</codeph> hat dieselbe Wirkung wie das Festlegen von <codeph>domain</codeph> auf <codeph>"int"</codeph>. Der Wert -1 bedeutet, dass die Eigenschaft ignoriert wird.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Fehlermeldung, wenn sich das Tausendertrennzeichen in einer falschen Position befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn sich das Tausendertrennzeichen in einer falschen Position befindet.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Das Zeichen, das zur Trennung der Tausender in der Ganzzahl dient.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Zeichen, das zur Trennung der Tausender in der Ganzzahl dient. Darf keine Ziffer sein und muss verschieden vom <codeph>decimalSeparator</codeph> sein.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
  Die PhoneNumberValidator-Klasse stellt sicher, dass ein String eine gültige Telefonnummer ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:PhoneNumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PhoneNumberValidator 
    allowedFormatChars="()- .+" 
    invalidCharError="Your telephone number contains invalid characters."
 	  minDigits="10"
    wrongLengthError="Your telephone number must contain at least 10 digits."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die PhoneNumberValidator-Klasse stellt sicher, dass ein String eine gültige Telefonnummer ist. Eine gültige Telefonnummer enthält mindestens 10 Ziffern plus zusätzliche Formatierungszeichen. Der Validator überprüft nicht, ob die Telefonnummer eine tatsächlich aktive Telefonnummer ist.
  
  </apiDesc><example conref="PhoneNumberValidatorExample.mxml"><swfblock conref="examples/PhoneNumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:PhoneNumberValidator:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:PhoneNumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung einer Telefonnummer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung einer Telefonnummer.
     
	  <p>Normalerweise wird diese Methode nicht direkt, sondern von Flex als Teil einer Überprüfung aufgerufen. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:PhoneNumberValidator:validatePhoneNumber"><apiName>validatePhoneNumber</apiName><shortdesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:PhoneNumberValidator</apiOperationClassifier><apiDesc>Die PhoneNumberValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.phone angegeben ist, ist der <codeph>baseField</codeph>-Wert „phone“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:PhoneNumberValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Der Satz zulässiger Formatierungszeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Satz zulässiger Formatierungszeichen.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Fehlermeldung, wenn der Wert ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number contains invalid characters."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn der Wert ungültige Zeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:minDigits:get"><apiName>minDigits</apiName><shortdesc> 
      Die Mindestanzahl von Ziffern für eine gültige Telefonnummer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Die Mindestanzahl von Ziffern für eine gültige Telefonnummer. Der Wert NaN bedeutet, dass diese Eigenschaft ignoriert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Fehlermeldung, wenn der Wert weniger als 10 Ziffern enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number must contain at least 10 digits."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn der Wert weniger als 10 Ziffern enthält.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
  Die EmailValidator-Klasse überprüft, ob ein String ein einzelnes &amp;#64;-Zeichen sowie einen Punkt im Domänennamen aufweist und ob das Domänensuffix der höchsten Ebene zwei, drei, vier oder sechs Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:EmailValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:EmailValidator 
    invalidCharError="Your e-mail address contains invalid characters."
    invalidDomainError= "The domain in your e-mail address is incorrectly formatted." 
    invalidIPDomainError="The IP domain in your e-mail address is incorrectly formatted." 
    invalidPeriodsInDomainError="The domain in your e-mail address has consecutive periods." 
    missingAtSignError="An at sign (&64;) is missing in your e-mail address."
    missingPeriodInDomainError="The domain in your e-mail address is missing a period." 
    missingUsernameError="The username in your e-mail address is missing." 
    tooManyAtSignsError="Your e-mail address contains too many &64; characters."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EmailValidator-Klasse überprüft, dass ein String ein einzelnes @-Zeichen sowie einen Punkt im Domänennamen aufweist und ob das Domänensuffix der höchsten Ebene zwei, drei, vier oder sechs Zeichen enthält. IP-Domänennamen sind gültig, wenn sie in eckigen Klammern stehen. Der Validator überprüft nicht, ob die Domäne und der Benutzername wirklich existieren.
 
  <p>Sie können IP-Domänennamen verwenden, wenn sie in eckigen Klammern stehen, beispielsweise meinname@[206.132.22.1]. Sie können einzelne IP-Nummern von 0 bis 255 verwenden.</p>
  
  </apiDesc><example conref="EmailValidatorExample.mxml"><swfblock conref="examples/EmailValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:EmailValidator:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:EmailValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung einer E-Mail-Adresse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Entweder ein String oder ein Objekt zur Überprüfung.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung einer E-Mail-Adresse.
	 
	  <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:EmailValidator:validateEmail"><apiName>validateEmail</apiName><shortdesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:EmailValidator</apiOperationClassifier><apiDesc>Die EmailValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im Wertparameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.email angegeben ist, ist der <codeph>baseField</codeph>-Wert „email“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators aus einer benutzerdefinierten Überprüfungsfunktion. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:EmailValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Fehlermeldung, wenn die E-Mail-Adresse ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn die E-Mail-Adresse ungültige Zeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc>
	  Fehlermeldung, wenn das Suffix (die Domäne der höchsten Ebene) nicht 2, 3, 4 oder 6 Zeichen lang ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn das Suffix (die Domäne der höchsten Ebene) nicht 2, 3, 4 oder 6 Zeichen lang ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidIPDomainError:get"><apiName>invalidIPDomainError</apiName><shortdesc>
	  Fehlermeldung, wenn die IP-Domäne ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The IP domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn die IP-Domäne ungültig ist. Die IP-Domäne muss in eckigen Klammern stehen.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidPeriodsInDomainError:get"><apiName>invalidPeriodsInDomainError</apiName><shortdesc>
	  Fehlermeldung, wenn die Domäne eine Sequenz von Punkten enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address has continous periods."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn die Domäne eine Sequenz von Punkten enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingAtSignError:get"><apiName>missingAtSignError</apiName><shortdesc>
	  Fehlermeldung, wenn das @-Zeichen in der E-Mail-Adresse fehlt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"An at sign (&amp;64;) is missing in your e-mail address."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn das @-Zeichen in der E-Mail-Adresse fehlt.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingPeriodInDomainError:get"><apiName>missingPeriodInDomainError</apiName><shortdesc>
	  Fehlermeldung, wenn die Domäne keinen Punkt enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is missing a period."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn die Domäne keinen Punkt enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingUsernameError:get"><apiName>missingUsernameError</apiName><shortdesc>
	  Fehlermeldung, wenn kein Benutzername vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The username in your e-mail address is missing."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn kein Benutzername vorhanden ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:tooManyAtSignsError:get"><apiName>tooManyAtSignsError</apiName><shortdesc>
	  Fehlermeldung, wenn die E-Mail-Adresse mehr als ein @-Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains too many &amp;64; characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn die E-Mail-Adresse mehr als ein @-Zeichen enthält. Diese Eigenschaft ist optional. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc>
  Die RegExpValidator-Klasse löst die valid- und invalid-Ereignisse aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:ValidationResult</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die RegExpValidator-Klasse löst die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse aus. Für ein <codeph>invalid</codeph>-Ereignis ist das Ereignisobjekt eine Instanz der ValidationResultEvent-Klasse und die <codeph>ValidationResultEvent.results</codeph>-Eigenschaft enthält ein Array von ValidationResult-Objekten.
 
  <p>Für ein <codeph>valid</codeph>-Ereignis hingegen enthält die <codeph>ValidationResultEvent.results</codeph>-Eigenschaft ein Array von RegExpValidationResult-Objekten. Die RegExpValidationResult-Klasse ist eine Unterklasse der ValidationResult-Klasse und enthält zusätzliche Eigenschaften, die mit regulären Ausdrücken verwendet werden.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidationResult:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc> 
	  Konstruktor
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>übergeben, wenn ein Überprüfungsfehler erzeugt wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Name des Unterfelds des überprüften Objekts.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Überprüfungsfehlercode.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Überprüfungsfehlermeldung.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedString</apiItemName><apiType value="String"/><apiData/><apiDesc>Übereinstimmender untergeordneter String.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Indexposition des übereinstimmenden Strings.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedSubstrings</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von übereinstimmenden Strings.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc> 
	  Konstruktor
	  
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:RegExpValidationResult:matchedIndex"><apiName>matchedIndex</apiName><shortdesc> 
	  Eine Ganzzahl, die die Anfangsindexposition im Eingabestring der Übereinstimmung enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> 
	  Eine Ganzzahl, die die Anfangsindexposition im Eingabestring der Übereinstimmung enthält.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedString"><apiName>matchedString</apiName><shortdesc>
	  Ein String, der den untergeordneten String eines Eingabestrings enthält, der mit dem regulären Ausdruck übereinstimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Ein String, der den untergeordneten String eines Eingabestrings enthält, der mit dem regulären Ausdruck übereinstimmt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedSubstrings"><apiName>matchedSubstrings</apiName><shortdesc>
	  Ein Stringarray, das (wenn überhaupt) Übereinstimmungen untergeordneter Strings in Klammern enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
	  Ein Stringarray, das (wenn überhaupt) Übereinstimmungen untergeordneter Strings in Klammern enthält. Wenn keine übereinstimmenden untergeordneten Strings gefunden werden, ist die Länge dieses Arrays 0. Verwenden Sie <codeph>matchedSubStrings[0]</codeph>, um auf den ersten übereinstimmenden untergeordneten String zuzugreifen.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
  Die ValidationResult-Klasse enthält die Ergebnisse einer Überprüfung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ValidationResult-Klasse enthält die Ergebnisse einer Überprüfung. 
 
  <p>Die ValidationResultEvent-Klasse bestimmt das Ereignisobjekt, das an den Ereignis-Listener für die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Validator-Ereignisse übergeben wird. Die Klasse definiert auch die <codeph>results</codeph>-Eigenschaft, die ein Array von ValidationResult-Objekten enthält: eines für jedes vom Validator überprüfte Feld. Sie können somit von einem Ereignis-Listener auf ValidationResult-Objekte zugreifen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:ValidationResult:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
	  Konstruktor
	 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>übergeben, wenn ein Überprüfungsfehler erzeugt wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Name des Unterfelds des überprüften Objekts.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Überprüfungsfehlercode.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Überprüfungsfehlermeldung.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor
	 
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:ValidationResult:errorCode"><apiName>errorCode</apiName><shortdesc>
	  Der Überprüfungsfehlercode, wenn der Wert der isError-Eigenschaft true ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Der Überprüfungsfehlercode, wenn der Wert der <codeph>isError</codeph>-Eigenschaft <codeph>true</codeph> ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:errorMessage"><apiName>errorMessage</apiName><shortdesc>
	  Die Überprüfungsfehlermeldung, wenn der Wert der isError-Eigenschaft true ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Die Überprüfungsfehlermeldung, wenn der Wert der <codeph>isError</codeph>-Eigenschaft <codeph>true</codeph> ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:isError"><apiName>isError</apiName><shortdesc>
	  Enthält true, wenn das Feld einen Überprüfungsfehler generiert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Enthält <codeph>true</codeph>, wenn das Feld einen Überprüfungsfehler generiert hat.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:subField"><apiName>subField</apiName><shortdesc>
	  Der Name des Unterfelds, mit dem das Ergebnis verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Der Name des Unterfelds, mit dem das Ergebnis verknüpft ist. Einige Validatoren, wie z. B. CreditCardValidator und DateValidator, überprüfen mehrere Unterfelder gleichzeitig.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidatorCardType"><apiName>CreditCardValidatorCardType</apiName><shortdesc>
  Die CreditCardValidatorCardType-Klasse definiert Konstanten für die Angabe der zu überprüfenden Kreditkarte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CreditCardValidatorCardType-Klasse definiert Konstanten für die Angabe der zu überprüfenden Kreditkarte. Diese Werte werden in der <codeph>CreditCardValidator.cardType</codeph>-Eigenschaft verwendet.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidator"><linktext>mx.validators.CreditCardValidator</linktext></link></related-links><apiValue id="mx.validators:CreditCardValidatorCardType:AMERICAN_EXPRESS"><apiName>AMERICAN_EXPRESS</apiName><shortdesc>
	  Gibt den Kartentyp als Americn Express an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>American Express</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Kartentyp als Americn Express an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DINERS_CLUB"><apiName>DINERS_CLUB</apiName><shortdesc>
	  Gibt den Kartentyp als Diners Club an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Diners Club</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Kartentyp als Diners Club an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DISCOVER"><apiName>DISCOVER</apiName><shortdesc>
	  Gibt den Kartentyp als Discover an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Discover</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Kartentyp als Discover an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:MASTER_CARD"><apiName>MASTER_CARD</apiName><shortdesc>
	  Gibt den Kartentyp als MasterCard an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>MasterCard</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Kartentyp als MasterCard an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:VISA"><apiName>VISA</apiName><shortdesc>
	  Gibt den Kartentyp als Visa an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Visa</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Kartentyp als Visa an.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:Validator"><apiName>Validator</apiName><shortdesc>
  Die Validator-Klasse ist eine Basisklasse für alle Flex-Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Validator class defines the following tag attributes, 
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:Validator 
    enabled="true|false" 
    listener="<i>Value of the source property</i>" 
    property="<i>No default</i>" 
    required="true|false" 
    requiredFieldError="This field is required." 
    source="<i>No default</i>" 
    trigger="<i>Value of the source property</i>" 
    triggerEvent="valueCommit" 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseInterface>mx.validators:IValidator</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Validator-Klasse ist eine Basisklasse für alle Flex-Validators. Diese Klasse implementiert die Möglichkeit, dass der Validator ein Feld erforderlich macht, d. h., dass der Benutzer in das Feld einen Wert eingeben muss, anderenfalls schlägt die Überprüfung fehl.
 
  </apiDesc><example conref="SimpleValidatorExample.mxml"><swfblock conref="examples/SimpleValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link></related-links><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc> 
  Wird ausgelöst, wenn eine Überprüfung fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  Wird ausgelöst, wenn eine Überprüfung fehlschlägt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Wird ausgelöst, wenn eine Überprüfung erfolgreich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine Überprüfung erfolgreich ist.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.validators:Validator:Validator"><apiName>Validator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:Validator:protected:addListenerHandler"><apiName>addListenerHandler</apiName><shortdesc>
      Richtet alle Listener für die gültigen und ungültigen Ereignisse ein, die vom Validator ausgelöst werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Richtet alle Listener für die <codeph>valid </codeph>und <codeph>invalid</codeph> Ereignisse ein, die vom Validator ausgelöst werden. Unterklassen der Validator-Klasse sollten zunächst die <codeph>removeListenerHandler()</codeph>-Methode und dann die <codeph>addListenerHandler()</codeph>-Methode aufrufen, wenn der Wert eines Listeners oder einer Quelle geändert wurde. Die CreditCardValidator- und DateValidator-Klassen verwenden diese Funktion intern. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Führt die Überprüfungslogik dieses Validators aus, einschließlich der Überprüfung, ob ein fehlender oder leerer Wert einen Überprüfungsfehler verursacht, wie vom Wert der erforderlichen Eigenschaft definiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Für ein ungültiges Ergebnis: ein Array von ValidationResult-Objekten mit einem ValidationResult-Objekt für jedes vom Validator geprüfte Feld, bei dem die Überprüfung fehlschlug.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfender Wert.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt die Überprüfungslogik dieses Validators aus, einschließlich der Überprüfung, ob ein fehlender oder leerer Wert einen Überprüfungsfehler verursacht, wie vom Wert der <codeph>required</codeph>-Eigenschaft definiert.
     
      <p>Wenn Sie eine Validator-Unterklasse erstellen, müssen Sie diese Methode überschreiben. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiOperation id="mx.validators:Validator:protected:getValueFromSource"><apiName>getValueFromSource</apiName><shortdesc>
      Gibt das zu überprüfende Objekt zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Das zu überprüfende Objekt.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Gibt das zu überprüfende Objekt zurück. Unterklassen, wie z. B. CreditCardValidator- und DateValidator-Klassen, überschreiben diese Methode, weil sie von mehreren Unterfeldern auf die Werte zugreifen müssen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:handleResults"><apiName>handleResults</apiName><shortdesc>
      Gibt ein ValidationResultEvent vom Array der Fehlerergebnisse zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Das von der <codeph>validate()</codeph>-Methode zurückgegebene ValidationResultEvent. 
      
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>errorResults</apiItemName><apiType value="Array"/><apiDesc>Array von ValidationResult-Objekten.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt ein ValidationResultEvent vom Array der Fehlerergebnisse zurück. Intern entnimmt diese Funktion die Ergebnisse der <codeph>doValidation()</codeph>-Methode und stellt sie in ein ValidationResultEvent-Objekt. Unterklassen, wie z. B. die RegExpValidator-Klasse, sollten diese Funktion überschreiben, wenn sie eine Unterklasse von ValidationResultEvent-Objekten ausgeben, wie z. B. RegExpValidationResult-Objekte, und das Objekt mit zusätzlichen Informationen gefüllt werden muss. Diese Funktion wird nie direkt aufgerufen und sollte nur ausnahmesweise überschrieben werden. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:initialized"><apiName>initialized</apiName><shortdesc>
       Wird automatisch vom MXML-Compiler aufgerufen, wenn der Validator mithilfe eines MXML-Tags erstellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das diesen Validator enthält.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Werden ignoriert.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Wird automatisch vom MXML-Compiler aufgerufen, wenn der Validator mithilfe eines MXML-Tags erstellt wird.  
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:isRealValue"><apiName>isRealValue</apiName><shortdesc>
      Gibt true zurück, wenn der Wert ungleich null ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph>, wenn <codeph>value</codeph> ungleich null ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Der zu testende Wert.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn <codeph>value</codeph> ungleich null ist. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:removeListenerHandler"><apiName>removeListenerHandler</apiName><shortdesc>
      Trennt alle Listener für die gültigen und ungültigen Ereignisse, die vom Validator ausgelöst werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Trennt alle Listener für die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse, die vom Validator ausgelöst werden. Unterklassen sollten zuerst die <codeph>removeListenerHandler()</codeph>-Methode und dann die <codeph>addListenerHandler()</codeph>-Methode aufrufen, wenn der Wert eines Listeners oder einer Quelle geändert wurde. Die CreditCardValidator- und DateValidator-Klassen verwenden diese Funktion intern. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Diese Methode wird aufgerufen, wenn ein Validator erzeugt wird und jedes Mal, wenn ein ResourceManager ein „change“-Ereignis auslöst, um anzugeben, dass die lokalisierten Ressourcen eine Änderung erfahren haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Diese Methode wird aufgerufen, wenn ein Validator erzeugt wird und jedes Mal wenn ein ResourceManager ein <codeph>change</codeph>-Ereignis auslöst, um anzugeben, dass die lokalisierten Ressourcen eine Änderung erfahren haben.
     
      <p>Dieses Ereignis wird ausgelöst, wenn Sie die <codeph>localeChain</codeph>-Eigenschaft des ResourceManager setzen, wenn ein Ressourcenmodul den Ladevorgang abgeschlossen hat und wenn Sie die <codeph>update()</codeph>-Methode des ResourceManager aufrufen.</p>
     
      <p>Unterklassen sollten diese Methode überschreiben und nach dem Aufruf von <codeph>super.resourcesChanged()</codeph> einen als Antwort auf die neuen Ressourcenwerte angemessenen Vorgang ausführen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validateAll"><apiName>validateAll</apiName><shortdesc>
      Ruft alle Validators im Array der Validators auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Array von ValidationResultEvent-Objekten, wobei das Array für jede fehlgeschlagene Überprüfung ein ValidationResultEvent-Objekt enthält. Das Array ist leer, wenn alle Überprüfungen erfolgreich abgeschlossen wurden.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validators</apiItemName><apiType value="Array"/><apiDesc>Ein Array, das die auszuführenden Validator-Objekte enthält. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft alle Validators im Array der <codeph>validators</codeph> auf. Gibt ein Array zurück, das für jede fehlgeschlagene Überprüfung ein ValidationResultEvent-Objekt enthält. Gibt ein leeres Array zurück, wenn alle Überprüfungen erfolgreich abgeschlossen wurden. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validate"><apiName>validate</apiName><shortdesc>
      Führt eine Überprüfung aus und teilt optional den Listenern das Ergebnis mit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das ValidationResultEvent-Objekt, das die Ergebnisse der Überprüfung enthält. Für eine erfolgreiche Überprüfung ist die <codeph>ValidationResultEvent.results</codeph>-Array-Eigenschaft leer. Für einen Überprüfungsfehler enthält die <codeph>ValidationResultEvent.results</codeph>-Array-Eigenschaft ein ValidationResult-Objekt für jedes vom Validator geprüfte Feld – unabhängig vom Ergebnis der Prüfung. Überprüfen Sie die <codeph>ValidationResult.isError</codeph>-Eigenschaft, um zu bestimmen, ob die Prüfung erfolgreich verlief oder nicht. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Optionaler zu überprüfender Wert. Wenn null, verwendet der Validator die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften, um den Wert zu bestimmen. Wenn Sie dieses Argument angeben, sollten Sie auch die <codeph>listener</codeph>-Eigenschaft setzen, um die Zielkomponente für alle Überprüfungsfehlermeldungen anzugeben.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>false</codeph>, wird nach der Überprüfung dem Listener das Ergebnis mitgeteilt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt eine Überprüfung aus und teilt optional den Listenern das Ergebnis mit. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:Validator:protected:DECIMAL_DIGITS"><apiName>DECIMAL_DIGITS</apiName><shortdesc>
      Ein String, der die Dezimalzahlen 0 bis 9 enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>0123456789</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, der die Dezimalzahlen 0 bis 9 enthält.    
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:ROMAN_LETTERS"><apiName>ROMAN_LETTERS</apiName><shortdesc>
      Ein String, der die Groß- und Kleinbuchstaben des römischen Alphabets (von „A“ bis „Z“ und von „a“ bis „z“) enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, der die Groß- und Kleinbuchstaben des römischen Alphabets (von „A“ bis „Z“ und von „a“ bis „z“) enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:required"><apiName>required</apiName><shortdesc>
      Wenn true: gibt an, dass ein fehlender oder leerer Wert einen Überprüfungsfehler erzeugt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>: gibt an, dass ein fehlender oder leerer Wert einen Überprüfungsfehler erzeugt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:subFields"><apiName>subFields</apiName><shortdesc>
      Ein Array von Strings mit den Namen der Eigenschaften, die im value-Objekt enthalten sind, das der validate()-Methode übergeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Strings mit den Namen der Eigenschaften, die im <codeph>value</codeph>-Objekt enthalten sind, das der <codeph>validate()</codeph>-Methode übergeben wurde. CreditCardValidator setzt diese Eigenschaft z. B. auf <codeph>[ "cardNumber", "cardType" ]</codeph>. Dieser Wert bedeutet, dass das <codeph>value</codeph>-Objekt, das der <codeph>validate()</codeph>-Methode übergeben wurde, eine <codeph>cardNumber</codeph>- und eine <codeph>cardType</codeph>-Eigenschaft enthalten sollte. 
     
      <p>Unterklassen der Validator-Klasse, die mehrere Datenfelder überprüfen (wie z. B. CreditCardValidator und DateValidator), sollten diese Eigenschaft in ihrem Konstruktor zuweisen. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualListeners:get"><apiName>actualListeners</apiName><shortdesc>
      Enthält ein Array von Listener-Objekten (wenn vorhanden) oder das Quellobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Enthält ein Array von Listener-Objekten (wenn vorhanden) oder das Quellobjekt. Wird verwendet, um zu bestimmen, welchem Objekt das Überprüfungsergebnis mitzuteilen ist
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualTrigger:get"><apiName>actualTrigger</apiName><shortdesc>
      Enthält das Auslöserobjekt (wenn überhaupt) oder das Quellobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Enthält das Auslöserobjekt (wenn überhaupt) oder das Quellobjekt. Wird verwendet, um zu bestimmen, welchem Objekt das <codeph>triggerEvent</codeph> mitgeteilt werden soll. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:enabled:get"><apiName>enabled</apiName><shortdesc> 
      Wird dieser Wert auf false eingestellt, werden für diesen Validator keine weiteren Überprüfungen mehr ausgeführt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Wird dieser Wert auf <codeph>false</codeph> eingestellt, werden für diesen Validator keine weiteren Überprüfungen mehr ausgeführt. Wenn ein Validator deaktiviert ist, werden keine Ereignisse ausgelöst und die <codeph>validate()</codeph>-Methode gibt null zurück
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:listener:get"><apiName>listener</apiName><shortdesc>
      Gibt den Überprüfungs-Listener an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Gibt den Überprüfungs-Listener an.
     
      <p>Wird kein Listener angegeben, verwendet Flex den Wert der <codeph>source</codeph>-Eigenschaft. Nachdem Flex die Quellkomponente bestimmt hat, wird die Rahmenfarbe der Komponente geändert und eine Fehlermeldung angezeigt bzw. eine bestehende Fehlermeldung für eine erfolgreiche Überprüfung ausgeblendet.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:property:get"><apiName>property</apiName><shortdesc>
      Ein String, der den Namen der Eigenschaft des Quellobjekts angibt, das den zu prüfenden Wert enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein String, der den Namen der Eigenschaft des <codeph>source</codeph>-Objekts angibt, das den zu prüfenden Wert enthält. Diese Eigenschaft ist optional, aber wenn Sie die <codeph>source</codeph>-Eigenschaft angeben, sollten Sie auch einen Wert für diese Eigenschaft einstellen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:requiredFieldError:get"><apiName>requiredFieldError</apiName><shortdesc>
      Fehlermeldung, wenn ein Wert fehlt und die erforderliche Eigenschaft true ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This field is required."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fehlermeldung, wenn ein Wert fehlt und die <codeph>required</codeph>-Eigenschaft <codeph>true</codeph> ist. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc conref="mx.core.UIComponent#resourceManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#resourceManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:source:get"><apiName>source</apiName><shortdesc>
      Gibt den Namen des Objekts an, das in der zu überprüfenden Eigenschaft enthalten ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Namen des Objekts an, das in der zu überprüfenden Eigenschaft enthalten ist. Setzt dies auf eine Instanz einer Komponente oder eines Datenmodells. Verwenden Sie Datenbindungssyntax in MXML, um den Wert anzugeben. Diese Eigenschaft unterstützt durch Punkte getrennte Strings zur Angabe verschachtelter Eigenschaften. Wenn Sie für die <codeph>source</codeph>-Eigenschaft einen Wert angeben, sollten Sie auch einen Wert für die <codeph>property</codeph>-Eigenschaft angeben. Die <codeph>source</codeph>-Eigenschaft ist optional.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Gibt das Ereignis an, das die Überprüfung auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt das Ereignis an, das die Überprüfung auslöst. Wenn es fehlt, verwendet Flex das <codeph>valueCommit</codeph>-Ereignis. Flex löst das <codeph>valueCommit</codeph>-Ereignis aus, wenn ein Benutzer eine Dateneingabe in ein Steuerelement abschließt. Dies ist normalerweise der Fall, wenn der Benutzer die Komponente ausblendet oder wenn ein Eigenschaftswert programmgesteuert geändert wird. Wenn Sie möchten, dass alle Ereignisse ignoriert werden, setzen Sie <codeph>triggerEvent</codeph> auf einen leeren String.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:trigger:get"><apiName>trigger</apiName><shortdesc>
      Gibt die Komponente an, die das Ereignis generiert, das den Validator auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Gibt die Komponente an, die das Ereignis generiert, das den Validator auslöst. Wenn unterdrückt, verwendet Flex standardmäßig diesen Wert der <codeph>source</codeph>-Eigenschaft. Wenn der <codeph>trigger</codeph> eine <codeph>triggerEvent</codeph>-Überprüfung auslöst. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
  Die CreditCardValidator-Klasse überprüft die Länge der Kreditkartennummer sowie die Richtigkeit des Präfix und übergibt den Luhn mod10-Algorithmus für den jeweiligen Kartentyp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CreditCardValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:CreditCardValidator
    allowedFormatChars=" -" 
    cardNumberListener="<i>Object specified by cardNumberSource</i>"
    cardNumberProperty="<i>No default</i>"
    cardNumberSource="<i>No default</i>"
    cardTypeListener="<i>Object specified by cardTypeSource</i>"
    cardTypeProperty="<i>No default</i>"
    cardTypeSource="<i>No default</i>"
    invalidCharError= "Invalid characters in your credit card number. (Enter numbers only.)"
    invalidNumberError="The credit card number is invalid." 
    noNumError="No credit card number is specified."
    noTypeError="No credit card type is specified or the type is not valid." 
    wrongLengthError="Your credit card number contains the wrong number of digits." 
    wrongTypeError="Incorrect card type is specified." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CreditCardValidator-Klasse überprüft die Länge der Kreditkartennummer sowie die Richtigkeit des Präfix und übergibt den Luhn mod10-Algorithmus für den jeweiligen Kartentyp. Der Validator überprüft nicht, ob die Kreditkarte tatsächlich ein aktives Kreditkartenkonto ist.
 
  <p>Sie haben für die Eingabe im CreditCardValidator zwei Möglichkeiten:</p>
  <ul>
    <li>Verwenden Sie die <codeph>cardNumberSource</codeph>- und <codeph>cardNumberProperty</codeph>-Eigenschaften, um die Position der Kreditkartennummer anzugeben, und die <codeph>cardTypeSource</codeph>- und <codeph>cardTypeProperty</codeph>-Eigenschaften, um die Position des zu überprüfenden Kreditkartentyps anzugeben.</li>
    <li>Verwenden Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften, um ein einzelnes Objekt anzugeben. Das Objekt sollte die nachstehenden Felder enthalten:
    <ul>
        <li><codeph>cardType</codeph> - Gibt den Typ der zu überprüfenden Kreditkarte an. 
         <p>In MXML verwenden Sie die Werte: <codeph>"American Express"</codeph>, <codeph>"Diners Club"</codeph>, <codeph>"Discover"</codeph>, <codeph>"MasterCard"</codeph> oder <codeph>"Visa"</codeph>.</p>
         <p>In ActionScript verwenden Sie die statischen Konstanten <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph> oder <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph> <codeph>CreditCardValidatorCardType.DISCOVER</codeph> oder <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</p>
          </li>
       <li><codeph>cardNumber</codeph> - Gibt die Nummer der zu überprüfenden Karte an.</li>
     </ul>
    </li>
  </ul>
  
  <p>Für eine Überprüfung werden die nachstehenden Richtlinien verwendet: </p>
  <p>Länge:</p>
  <ol>
    <li>Visa: 13 oder 16 Ziffern</li> 
    <li>MasterCard: 16 Ziffern</li> 
    <li>Discover: 16 Ziffern</li> 
    <li>American Express: 15 Ziffern</li> 
    <li>Diners Club: 14 Ziffern oder 16 Ziffern, wenn sie auch als MasterCard verwendet werden kann</li>
  </ol>
  Präfix:
  <ol>
    <li>Visa: 4</li> 
    <li>MasterCard: 51 bis 55</li>
    <li>Discover: 6011</li>
    <li>American Express: 34 oder 37</li>
    <li>Diners Club: 300 bis 305, 36 oder 38, 51 bis 55</li>
  </ol>
  
  </apiDesc><example conref="CreditCardValidatorExample.mxml"><swfblock conref="examples/CreditCardValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links><apiConstructor id="mx.validators:CreditCardValidator:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CreditCardValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung einer Kreditkartennummer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>ein zu überprüfendes Objekt.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung einer Kreditkartennummer.
	 
	  <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CreditCardValidator:validateCreditCard"><apiName>validateCreditCard</apiName><shortdesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CreditCardValidator</apiOperationClassifier><apiDesc>Die CreditCardValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld, das die nachstehenden Felder enthalten muss:
	  <ul>
	    <li><codeph>cardType</codeph> - Gibt den Typ der zu überprüfenden Kreditkarte an. Verwenden Sie die statischen Konstanten <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> oder <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</li>
	    <li><codeph>cardNumber</codeph> - Gibt die Nummer der zu überprüfenden Karte an.</li></ul>
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im Wertparameter angegebenen Unterfelds. Wenn zum Beispiel im <codeph>value</codeph>-Parameter value.date angegeben ist, ist der <codeph>baseField</codeph>-Wert „date“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CreditCardValidator:cardNumberProperty"><apiName>cardNumberProperty</apiName><shortdesc>
	  Name der zu überprüfenden Kartennummerneigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Name der zu überprüfenden Kartennummerneigenschaft. Dieses Attribut ist optional, aber wenn Sie die <codeph>carNumberSource</codeph>-Eigenschaft angeben, sollten Sie auch diese Eigenschaft einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeProperty"><apiName>cardTypeProperty</apiName><shortdesc>
	  Name der zu überprüfenden Kartentypeigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Name der zu überprüfenden Kartentypeigenschaft. Dieses Attribut ist optional, aber wenn Sie die <codeph>carTypeSource</codeph>-Eigenschaft angeben, sollten Sie auch diese Eigenschaft einstellen.
	 
      <p>In MXML lauten die zulässigen Werte:</p>
      <ul>
        <li><codeph>"American Express"</codeph></li>
        <li><codeph>"Diners Club"</codeph></li>
        <li><codeph>"Discover"</codeph></li>
        <li><codeph>"MasterCard"</codeph></li>
        <li><codeph>"Visa"</codeph></li>
      </ul>
	 
	  <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen:</p>
	  <p><codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph>, <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph> und <codeph>CreditCardValidatorCardType.VISA</codeph>.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links></apiValue><apiValue id="mx.validators:CreditCardValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Satz der im cardNumber-Feld zulässigen Formatierungszeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -" (space and dash)
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Satz der im <codeph>cardNumber</codeph>-Feld zulässigen Formatierungszeichen.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberListener:get"><apiName>cardNumberListener</apiName><shortdesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Unterfeld der Kartennummer abwartet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Unterfeld der Kartennummer abwartet. Fehlt eine Angabe, ist der Wert zu verwenden, der für die <codeph>cardNumberSource</codeph>-Eigenschaft angegeben ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberSource:get"><apiName>cardNumberSource</apiName><shortdesc> 
	  Objekt, das den Wert des Kartennummernfelds enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objekt, das den Wert des Kartennummernfelds enthält. Wenn Sie einen Wert für diese Eigenschaft angeben, müssen Sie auch einen Wert für die <codeph>cardNumberProperty</codeph>-Eigenschaft angeben. Verwenden Sie diese Eigenschaft nicht, wenn Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften setzen. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeListener:get"><apiName>cardTypeListener</apiName><shortdesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Unterfeld des Kartentyps abwartet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Die Komponente, die das Überprüfungsergebnis für das Unterfeld des Kartentyps abwartet. Fehlt eine Angabe, ist der Wert zu verwenden, der für die <codeph>cardTypeSource</codeph>-Eigenschaft angegeben ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeSource:get"><apiName>cardTypeSource</apiName><shortdesc> 
	  Objekt, das den Wert des Kartentypfelds enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objekt, das den Wert des Kartentypfelds enthält. Wenn Sie einen Wert für diese Eigenschaft angeben, müssen Sie auch einen Wert für die <codeph>cardTypeProperty</codeph>-Eigenschaft angeben. Verwenden Sie diese Eigenschaft nicht, wenn Sie die <codeph>source</codeph>- und <codeph>property</codeph>-Eigenschaften setzen. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Fehlermeldung, wenn das cardNumber-Feld ungültige Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your credit card number. (Enter numbers only.)"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das <codeph>cardNumber</codeph>-Feld ungültige Zeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidNumberError:get"><apiName>invalidNumberError</apiName><shortdesc> 
	  Fehlermeldung, wenn die Kreditkartennummer ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The credit card number is invalid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn die Kreditkartennummer ungültig ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noNumError:get"><apiName>noNumError</apiName><shortdesc> 
	  Fehlermeldung, wenn das cardNumber-Feld leer ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card number is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das <codeph>cardNumber</codeph>-Feld leer ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noTypeError:get"><apiName>noTypeError</apiName><shortdesc> 
	  Fehlermeldung, wenn das cardType-Feld leer ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card type is specified or the type is not valid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das <codeph>cardType</codeph>-Feld leer ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc>
	  Fehlermeldung, wenn das cardNumber-Feld die falsche Anzahl von Ziffern für den angegebenen Kartentyp enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your credit card number contains the wrong number of digits." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn das <codeph>cardNumber</codeph>-Feld die falsche Anzahl von Ziffern für den angegebenen Kartentyp enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongTypeError:get"><apiName>wrongTypeError</apiName><shortdesc> 
	  Fehlermeldung, wenn das cardType-Feld einen ungültigen Kreditkartentyp enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Incorrect card type is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Fehlermeldung, wenn das <codeph>cardType</codeph>-Feld einen ungültigen Kreditkartentyp enthält. Sie sollten die vordefinierten Konstanten für das <codeph>cardType</codeph>-Feld verwenden: <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> oder <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
  Die SocialSecurityValidator-Klasse überprüft, ob ein String eine gültige deutsche Sozialversicherungsnummer ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SocialSecurityValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:SocialSecurityValidator
    allowedFormatChars=" -"
    invalidCharError="You entered invalid characters in your Social Security number."
    wrongFormatError="The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
    zeroStartError="Invalid Social Security number; the number cannot start with 000."
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SocialSecurityValidator-Klasse überprüft, ob ein String eine gültige deutsche Sozialversicherungsnummer ist. Der Validator überprüft nicht, ob die Sozialversicherungsnummer auch tatsächlich existiert.
 
  </apiDesc><example conref="SocialSecurityValidatorExample.mxml"><swfblock conref="examples/SocialSecurityValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:SocialSecurityValidator:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:SocialSecurityValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Überschreiben der doValidation()-Methode der Basisklasse für die Überprüfung einer Sozialversicherungsnummer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld.
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Zu überprüfendes Objekt.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben der <codeph>doValidation()</codeph>-Methode der Basisklasse für die Überprüfung einer Sozialversicherungsnummer.
     
	  <p>Diese Methode wird nicht direkt aufgerufen; Flex ruft sie als Teil einer Überprüfung auf. Wenn Sie eine benutzerdefinierte Validator-Klasse erstellen, müssen Sie diese Methode implementieren.</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:SocialSecurityValidator:validateSocialSecurity"><apiName>validateSocialSecurity</apiName><shortdesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von ValidationResult-Objekten mit einem validationResult-Objekt für jedes vom Validator geprüfte Feld.
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:SocialSecurityValidator</apiOperationClassifier><apiDesc>Die SocialSecurityValidator-Instanz.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Ein zu überprüfendes Feld.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Textdarstellung des im <codeph>value</codeph>-Parameter angegebenen Unterfelds. Wenn z. B. der <codeph>value</codeph>-Parameter value.social angibt, ist der <codeph>baseField</codeph>-Wert <codeph>social</codeph>.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Vereinfachungsmethode zum Aufrufen eines Validators. Für jeden Standard-Flex-Validator gibt es eine ähnliche Vereinfachungsmethode.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:SocialSecurityValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc>
	  Gibt den Satz der für die Eingabe zulässige Formatierungszeichen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+" // ?????
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt den Satz der für die Eingabe zulässige Formatierungszeichen an.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Fehlermeldung, wenn der Wert andere Zeichen als Ziffern und in der allowedFormatChars-Eigenschaft angegebene Formatierungszeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"You entered invalid characters in your Social Security number."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn der Wert andere Zeichen als Ziffern und in der <codeph>allowedFormatChars</codeph>-Eigenschaft angegebene Formatierungszeichen enthält.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:wrongFormatError:get"><apiName>wrongFormatError</apiName><shortdesc>
	  Fehlermeldung, wenn der Wert falsch formatiert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn der Wert falsch formatiert ist.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:zeroStartError:get"><apiName>zeroStartError</apiName><shortdesc>
	  Fehlermeldung, wenn der Wert eine ungültige Sozialversicherungsnummer enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid Social Security number; the number cannot start with 000."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Fehlermeldung, wenn der Wert eine ungültige Sozialversicherungsnummer enthält.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidatorListener"><apiName>IValidatorListener</apiName><shortdesc>
  Von den Komponenten implementierte Schnittstelle zur Unterstützung des Flex-Datenüberprüfungsmechanismus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Von den Komponenten implementierte Schnittstelle zur Unterstützung des Flex-Datenüberprüfungsmechanismus. Die UIComponent-Klasse implementiert diese Schnittstelle. Folglich wird sie auch von allen Unterklassen der UIComponent-Klasse implementiert.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
	  Verwaltet sowohl die gültigen als auch die ungültigen Ereignisse eines Validators, der dieser Komponente zugewiesen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Das Ereignisobjekt für die Überprüfung.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Verwaltet sowohl die <codeph>valid</codeph>- als auch die <codeph>invalid</codeph>-Ereignisse eines Validators, der dieser Komponente zugewiesen wurde.  
	 
	  <p>Normalerweise verwalten Sie die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse, die von einem Validator ausgelöst wurden, indem Sie den Validators Ereignis-Listener zuweisen. Wenn Sie Überprüfungsereignisse direkt in der Komponente verwalten möchten, die überprüft wird, können Sie diese Methode für die Verwaltung der <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse überschreiben. Sie können in der Implementierung die <codeph>dispatchEvent()</codeph>-Methode verwenden, um die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse aufzurufen, in dem Fall, dass sie auch von einem Validator abgewartet werden.</p>
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:errorString:get"><apiName>errorString</apiName><shortdesc>
      Der Text, der von einer Komponentenfehlerinfo angezeigt wird, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Text, der von einer Komponentenfehlerinfo angezeigt wird, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.
     
      <p>Sie können die <codeph>errorString</codeph>-Eigenschaft verwenden, um einen Überprüfungsfehler einer Komponente anzuzeigen, ohne tatsächlich eine Validator-Klasse zu verwenden. Wenn Sie einen Stringwert in die <codeph>errorString</codeph>-Eigenschaft schreiben, zeichnet Flex einen roten Rahmen um die Komponente, um auf den Überprüfungsfehler hinzuweisen. Der String wird in einem Quickinfo als Überprüfungsfehlermeldung angezeigt, wenn Sie mit der Maus über die Komponente fahren, genau wie bei Erkennung eines Überprüfungsfehlers durch einen Validator.</p>
     
      <p>Um den Überprüfungsfehler zu löschen, schreiben Sie einen leeren String ("") in die <codeph>errorString</codeph>-Eigenschaft.</p>
     
      <p>Beachten Sie, dass beim Schreiben eines Werts in die <codeph>errorString</codeph>-Eigenschaft keine gültigen oder ungültigen Ereignisse ausgelöst werden; es wird nur die Rahmenfarbe geändert und die Überprüfungsfehlermeldung angezeigt.</p>
 	  
 	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
	  Von einem Validator verwendet, um ein Unterfeld zuzuweisen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Von einem Validator verwendet, um ein Unterfeld zuzuweisen.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>