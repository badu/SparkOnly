<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.containers"><apiName>mx.containers</apiName><apiDetail/><apiClassifier id="mx.containers:Canvas"><apiName>Canvas</apiName><shortdesc>
  Ein Halo Canvas-Layoutcontainer definiert einen rechteckigen Bereich, in den Sie untergeordnete Container und Steuerelemente legen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingRight"/><Exclude kind="style" name="paddingLeft"/><Exclude kind="style" name="paddingBottom"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Canvas" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Canvas" replacement="spark.components.Group" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Canvas&gt;</code> tag inherits all the tag attributes
  of its superclass. Use the following syntax:</p>
 
  <p>
  <pre>
  &lt;mx:Canvas&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Canvas&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein Halo Canvas-Layoutcontainer definiert einen rechteckigen Bereich, in den Sie untergeordnete Container und Steuerelemente legen. Dies ist der einzige Container, in dem Sie explizit die Position seiner untergeordneten Objekte im Container festlegen können, indem Sie die <codeph>x</codeph>- und <codeph>y</codeph>-Eigenschaften jedes untergeordneten Objekts angeben.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich die Spark-Container mit BasicLayout anstelle des Halo Canvas-Containers zu verwenden.</p>
 
  <p>Flex legt die untergeordneten Objekte eines Canvas-Layoutcontainers mit ihren bevorzugten Breiten und Höhen fest. Sie können den Wert für die bevorzugte Breite eines untergeordneten Objekts überschreiben, indem Sie seine <codeph>Breite</codeph>-Eigenschaft mit einem fixen Pixelwert oder einem Prozentsatz der Containergröße festlegen. Sie können die bevorzugte Höhe auf ähnliche Weise festlegen.</p>
 
  <p>Wenn Sie die Größenbestimmung als Prozentwert in einem Canvas-Container verwenden, könnten einige Komponenten einander überlagern. Wenn Sie diesen Effekt nicht erzielen möchten, planen Sie die Positionen und Größen Ihrer Komponenten entsprechend.</p>
 
  <p>Der Canvas-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Groß genug, damit alle untergeordneten Objekte mit ihrer Standardgröße darin Platz finden</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleCanvasExample.mxml"><swfblock conref="examples/SimpleCanvasExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Canvas:Canvas"><apiName>Canvas</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Canvas:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die bevorzugten Minimal- und Maximalgrößen des Canvas-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die bevorzugten Minimal- und Maximalgrößen des Canvas-Containers.
     
      <p>Die <codeph>measuredWidth</codeph> des Canvas-Containers ist gerade breit genug, um alle untergeordneten Objekte mit ihren bevorzugten Breiten anzuzeigen, ohne dass sie einander überlagern. Diese <codeph>measure()</codeph>-Methode berechnet die Position des am weitesten rechts liegenden untergeordneten Objekts und dann den rechten Rand dieses untergeordneten Objekts. Danach fügt sie entsprechend viel Platz für die Stärke des Canvas-Containerrahmens und zum Auffüllen am rechten Rand hinzu. Die <codeph>measuredHeight</codeph> wird ähnlich berechnet.</p>
     
      <p>Die <codeph>minWidth</codeph>- und <codeph>minHeight</codeph>-Eigenschaften des Canvas-Containers werden nicht berechnet, daher verwendet Flex den Standardwert 0.</p>
     
      <p>Die <codeph>maxWidth</codeph>- und <codeph>maxHeight</codeph>-Eigenschaften des Canvas-Containers werden nicht berechnet. Es wird angenommen, dass der Container eine unendliche maximale Breite und Höhe hat.</p>
     
      <p>Alle vorstehend beschriebenen Werte sind <i>gemessene</i> Breiten und Höhen des Canvas-Containers. Der Benutzer kann die gemessenen Werte überschreiben, indem er explizit einen Wert für die folgenden Eigenschaften festlegt:</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p>Sie sollten diese Methode nicht direkt aufrufen. Der Flex-LayoutManager ruft sie zum erforderlichen Zeitpunkt auf. Beim Start der Anwendung versucht der Flex-LayoutManager, alle Komponenten - von den untergeordneten bis zu den übergeordneten Objekten - zu messen, bevor er sie auf ihre endgültigen Größen festlegt.</p>
     
      <p>Dies ist eine erweiterte Methode für die Verwendung von Unterklassen. Wenn Sie diese Methode überschreiben, muss Ihre Implementierung entweder die <codeph>super.measure()</codeph>-Methode oder die <codeph>measuredHeight</codeph>- und <codeph>measuredWidth</codeph>-Eigenschaften aufrufen. Sie können optional auch die folgenden Eigenschaften festlegen:
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
      Diese Eigenschaften entsprechen den weiter oben angeführten Layouteigenschaften und werden daher nicht eigens dokumentiert.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Canvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Legt die Größe jedes untergeordneten Objekts des Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Größe jedes untergeordneten Objekts des Containers fest.
     
      <p>Der Canvas-Container ändert die Positionen seiner untergeordneten Objekte nicht. Jedes untergeordnete Objekt wird gemäß den Werten seiner <codeph>x</codeph>- und <codeph>y</codeph>-Eigenschaften platziert.</p>
     
      <p>Der Canvas-Container richtet die Breite und Höhe jedes untergeordneten Objekts so ein, dass sie den <codeph>measuredWidth</codeph>- und <codeph>measuredHeight</codeph>-Werten dieses untergeordneten Objekts entsprechen, wenn keine <codeph>width</codeph>- und <codeph>height</codeph>-Werte festgelegt wurden. Das untergeordnete Objekt kann auch in der Größe veränderbar gemacht werden, indem die Werte für <codeph>width</codeph> und/oder <codeph>height</codeph> mit einem Prozentwert festgelegt werden. In der Größe veränderbare untergeordnete Objekte sind an den rechten und unteren Rand des Canvas-Containers gebunden. In diesem Fall werden die Werte <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>maxWidth</codeph> und <codeph>maxHeight</codeph> des untergeordneten Objekts berücksichtigt.</p>
     
      <p>Sie sollten diese Methode nicht direkt aufrufen. Der Flex-LayoutManager ruft sie zum erforderlichen Zeitpunkt auf. Wenn die Anwendung startet, ruft der Flex-LayoutManager die <codeph>updateDisplayList()</codeph>-Methode für jede Komponente auf, wobei mit dem Application-Objekt begonnen und ab da weiterverarbeitet wird.</p>
     
      <p>Dies ist eine erweiterte Methode für die Verwendung von Unterklassen. Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.updateDisplayList()</codeph>-Methode und dann für jedes untergeordnete Objekt die <codeph>move()</codeph>- und <codeph>setActualSize()</codeph>-Methoden aufrufen. Für Layoutzwecke sollten Sie die Größe dieses Containers aus den <codeph>unscaledWidth</codeph>- und <codeph>unscaledHeight</codeph>-Eigenschaften abrufen und nicht aus den <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften. Die <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften berücksichtigen den Wert der <codeph>scaleX</codeph>- und <codeph>scaleY</codeph>-Eigenschaften für diesen Container nicht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Canvas:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Canvas:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormItemDirection"><apiName>FormItemDirection</apiName><shortdesc>
  Die FormItemDirection-Klasse definiert die Konstantenwerte für die direction-Eigenschaft der FormItem-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FormItemDirection-Klasse definiert die Konstantenwerte für die <codeph>direction</codeph>-Eigenschaft der FormItem-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiValue id="mx.containers:FormItemDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      Legt fest, dass die untergeordneten Objekte des FormItem-Containers horizontal angeordnet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass die untergeordneten Objekte des FormItem-Containers horizontal angeordnet werden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItemDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      Legt fest, dass die untergeordneten Objekte des FormItem-Containers vertikal angeordnet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass die untergeordneten Objekte des FormItem-Containers vertikal angeordnet werden.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:DividedBox"><apiName>DividedBox</apiName><shortdesc>
  Ein DividedBox-Container vermisst und platziert seine untergeordneten Objekte horizontal oder vertikal auf dieselbe Weise wie ein Box-Container, fügt aber ziehbare Trennlinien in die Lücken zwischen den untergeordneten Objekten ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style inherit="no" name="verticalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Die Cursor-Skin für eine vertikale DividedBox. Der Standardwert ist das „mx.skins.cursor.VBoxDivider“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Die Cursor-Skin für eine horizontale DividedBox. Der Standardwert ist das „mx.skins.cursor.HBoxDivider“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerThickness" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Die in Pixeln angegebene Stärke der Trennlinien, wenn sie vom Benutzer angeklickt oder gezogen werden, sofern die <codeph>liveDragging</codeph>-Eigenschaft mit <codeph>false</codeph> festgelegt ist. (Wenn die <codeph>liveDragging</codeph>-Eigenschaft mit <codeph>true</codeph> festgelegt ist, wird nur der Ziehpunkt der Trennlinie gezeigt.) Die sichtbare Stärke kann nicht auf einen höheren Wert als die Affordance (Angebotscharakter) festgelegt werden.
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerSkin" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Die Trennlinien-Skin. Der Standardwert ist das „mx.skin.BoxDividerSkin“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dividerColor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="uint">
<description>
  Die Farbe der Trennlinien, wenn sie vom Benutzer angeklickt oder gezogen werden, sofern die <codeph>liveDragging</codeph>-Eigenschaft mit <codeph>false</codeph> festgelegt ist. Wenn die <codeph>liveDragging</codeph>-Eigenschaft mit <codeph>true</codeph> festgelegt ist, wird nur der Ziehpunkt der Trennlinie gezeigt.
 
  </description>
<default>0x6F7777
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerAlpha" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Der Alphawert, der die Transparenz der Trennlinien bestimmt. Der Wert <codeph>0.0</codeph> bedeutet vollständige Transparenz, der Wert <codeph>1.0</codeph> vollständige Undurchsichtigkeit.
  
  </description>
<default>0.75
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerAffordance" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Die Stärke des Bereichs in Pixeln, auf den ein Benutzer klicken kann, um eine Trennlinie zu ziehen. Dieser Bereich ist in den Lücken zwischen den untergeordneten Objekten des Containers zentriert, wobei diese Lücken durch die <codeph>horizontalGap</codeph>- oder <codeph>verticalGap</codeph>-Stileigenschaft bestimmt werden. Die Affordance (Angebotscharakter) kann nicht auf einen größeren Wert als die Lückengröße festgelegt werden. Ein Größenänderungscursor erscheint, wenn der Mauszeiger über diesem Bereich steht.
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:DividedBox
    <strong>Properties</strong>
    liveDragging="false|true"
    resizeToContent="false|true"
  
    <strong>Styles</strong>
    dividerAffordance="6"
    dividerAlpha="0.75"
    dividerColor="0x6F7777"
    dividerSkin="<i>'mx.skins.BoxDividerSkin' symbol in Assets.swf</i>"
    dividerThickness="3"
    horizontalDividerCursor="<i>'mx.skins.cursor.HBoxDivider' symbol in Assets.swf</i>"
    verticalDividerCursor="<i>'mx.skins.cursor.VBoxDivider' symbol in Assets.swf</i>"
 
    <strong>Events</strong>
    dividerPress="<i>No default</i>"
    dividerDrag="<i>No default</i>"
    dividerRelease="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:DividedBox&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein DividedBox-Container vermisst und platziert seine untergeordneten Objekte horizontal oder vertikal auf dieselbe Weise wie ein Box-Container, fügt aber ziehbare Trennlinien in die Lücken zwischen den untergeordneten Objekten ein. Der Benutzer kann eine Trennlinie ziehen, um die Größe der untergeordneten Objekte auf beiden Seiten zu ändern.
  
  <p>Die DividedBox-Klasse ist die Basisklasse für die häufiger verwendeten HDividedBox- VDividedBox-Klassen.</p>
 
  <p>Die <codeph>direction</codeph>-Eigenschaft eines DividedBox-Containers, die vom Box-Container geerbt wird, bestimmt, ob ein horizontales oder vertikales Layout vorliegt.</p>
  
  <p>Ein DividedBox-, HDividedBox- oder VDividedBox-Container hat folgende Standardgrößeneigenschaften:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry><b>Vertical DividedBox</b> Die Höhe reicht aus, damit alle untergeordneten Objekte mit ihren Standardhöhenwerten oder expliziten Höhenwerten plus vertikale Lücken zwischen den untergeordneten Objekten plus oberer und unterer Auffüllbereich des Containers untergebracht werden können. Die Breite ist die Standardbreite oder explizite Breite des breitesten untergeordneten Objekts plus der Auffüllbereich des Containers auf der linken und rechten Seite. <b>Horizontal DividedBox</b> Die Breite reicht aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten oder expliziten Breitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Auffüllbereich des Containers untergebracht werden können. Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Auffüllbereich des Containers.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row><row>
           <entry>Standardlückengröße</entry>
           <entry>10 Pixel für die horizontalen und vertikalen Lücken.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DividedBoxExample.mxml"><swfblock conref="examples/DividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_RELEASE_dividerRelease"><apiName>dividerRelease</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer eine Trennlinie freigibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer eine Trennlinie freigibt. Das <codeph>dividerRelease</codeph>-Ereignis wird nach den <codeph>dividerDrag</codeph>-Ereignissen ausgelöst, aber bevor die Größen der untergeordneten Objekte des Containers angepasst werden. Die x- und y-Eigenschaften der Trennlinie werden erst aktualisiert, wenn das Ereignis ausgelöst wurde. Daher gibt ein Aufruf von <codeph>hDividerBox.getDividerAt(0).x</codeph> den Wert der ursprünglichen x-Position der ersten Trennlinie zurück. Wenn Sie die Position der Trennlinie nach der Bewegung ermitteln möchten, können Sie sie abrufen, nachdem das updateComplete-Ereignis der DividerBox ausgelöst wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_PRESS_dividerPress"><apiName>dividerPress</apiName><shortdesc>
  Ausgelöst, wenn der Benutzer eine Trennlinie in diesem Behälter anklickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_PRESS</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Ausgelöst, wenn der Benutzer eine Trennlinie in diesem Behälter anklickt. Das <codeph>dividerPress</codeph>-Ereignis wird vor allen <codeph>dividerDrag</codeph>-Ereignissen ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_DRAG_dividerDrag"><apiName>dividerDrag</apiName><shortdesc>
  Wird mehrere Male ausgelöst, wenn der Benutzer Trennlinien zieht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_DRAG</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird mehrere Male ausgelöst, wenn der Benutzer Trennlinien zieht. Das <codeph>dividerDrag</codeph>-Ereignis wird nach dem <codeph>dividerPress</codeph>-Ereignis und vor dem <codeph>dividerRelease</codeph>-Ereignis ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:DividedBox:DividedBox"><apiName>DividedBox</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:DividedBox:getDividerAt"><apiName>getDividerAt</apiName><shortdesc>
	  Gibt einen Verweis auf das angegebene BoxDivider-Objekt in diesem DividedBox-Container zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein BoxDivider-Objekt.
	  
	  </apiDesc><apiOperationClassifier>mx.containers.dividedBoxClasses:BoxDivider</apiOperationClassifier></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>Auf null basierende Indexposition einer Trennlinie, gerechnet von der linken Seite einer horizontalen DividedBox oder vom oberen Rand einer vertikalen DividedBox.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Gibt einen Verweis auf das angegebene BoxDivider-Objekt in diesem DividedBox-Container zurück. 
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:DividedBox:moveDivider"><apiName>moveDivider</apiName><shortdesc>
	  Verschiebt eine gegebene Trennlinie um die angegebene Anzahl von Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>Auf null basierende Indexposition einer Trennlinie, gerechnet von der linken Seite einer horizontalen DividedBox oder vom oberen Rand einer vertikalen DividedBox.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>amt</apiItemName><apiType value="Number"/><apiDesc>Die Anzahl von Pixeln, um die die Trennlinie verschoben werden soll. Eine negative Zahl kann angegeben werden, um die Trennlinie nach oben oder nach links zu verschieben. Die Bewegung der Trennlinie ist genau so beschränkt wie wenn der Benutzer sie verschoben hätte.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Verschiebt eine gegebene Trennlinie um die angegebene Anzahl von Pixeln.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:DividedBox:protected:dividerClass"><apiName>dividerClass</apiName><shortdesc>
	  Die Klasse für die Trennlinie zwischen den untergeordneten Objekten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/><apiDefaultValue>mx.containers.dividedBoxClasses.BoxDivider
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Die Klasse für die Trennlinie zwischen den untergeordneten Objekten.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:liveDragging"><apiName>liveDragging</apiName><shortdesc>
	  Wenn „true“, wird die Größe von untergeordneten Objekten neben einer Trennlinie fortlaufend verändert, während der Benutzer sie zieht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Wenn <codeph>true</codeph>, wird die Größe von untergeordneten Objekten neben einer Trennlinie fortlaufend verändert, während der Benutzer sie zieht. Wenn <codeph>false</codeph>, wird die Größe erst verändert, wenn der Benutzer die Trennlinie ablegt.
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:numDividers:get"><apiName>numDividers</apiName><shortdesc>
 	  Die Anzahl von Trennlinien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
 	  Die Anzahl von Trennlinien. Die Anzahl ist immer <codeph>numChildren</codeph> - 1.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
	  Wenn „true“, wird die Größe von DividedBox automatisch auf die Größe der untergeordneten Objekte angepasst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Wenn <codeph>true</codeph>, wird die Größe von DividedBox automatisch auf die Größe der untergeordneten Objekte angepasst.
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
  Der ApplicationControlBar-Container enthält Komponenten, die globale Navigations- und Anwendungsbefehle für den Halo Application-Container bereitstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ApplicationControlBar" replacement="none" since="4.0">
<description>
  Ab Flex 4 ist die ApplicationControlBar-Komponente nicht mehr erforderlich. Verwenden Sie die <codeph>controlBarContent</codeph>-Eigenschaft der Spark Application-Klasse für das Festlegen der in den Steuerleistenbereich einzuschließenden Komponenten. Verwenden Sie die <codeph>controlBarLayout</codeph>-Eigenschaft der Spark Application-Klasse für das Festlegen des Layouts des Steuerleistenbereichs. 
 </description>
	</Alternative><styles><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  Farben für die Tönung des Hintergrunds des Containers. Legen Sie dieselbe Farbe für beide Werte fest, wenn das Steuerelement ein flaches Aussehen haben soll. Der Standardwert ist <codeph>[0xFFFFFF,0xFFFFFF]</codeph>.
 
  <p>Sie sollten auch die <codeph>fillAlphas</codeph>-Eigenschaft auf einen nicht mit dem Standardwert identischen Wert setzen, weil ihr Standardwert <codeph>[0,0]</codeph> die Farben unsichtbar macht.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  Alphawerte für die Hintergrundfüllung des Containers. Der Standardwert ist <codeph>[0,0]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ApplicationControlBar&gt;</code> tag 
  inherits all of the tag attributes of its superclass, and adds the
  following tag attributes.
  Unlike the ControlBar container, it is possible to set the
  <code>backgroundColor</code> style for an ApplicationControlBar
  container.</p>
 
  <pre>
  &lt;mx:ApplicationControlBar
    <strong>Properties</strong>
    dock="false|true"
  
    <strong>Styles</strong>
    fillAlphas="[0, 0]"
    fillColors="[0xFFFFFF, 0xFFFFFF]"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ApplicationControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:ControlBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der ApplicationControlBar-Container enthält Komponenten, die globale Navigations- und Anwendungsbefehle für den Halo Application-Container bereitstellen. Ein ApplicationControlBar-Container für einen Editor könnte beispielsweise Button-Steuerelemente zum Einstellen der Schriftstärke, ein ComboBox-Steuerelement zur Auswahl der Schriftart und ein MenuBar-Steuerelement zur Auswahl des Bearbeitungsmodus enthalten. In der Regel platziert Sie einen ApplicationControlBar-Container über dem Halo Application-Container.
 
  <p><b>Hinweis:</b> Der Spark Application-Container unterstützt den ApplicationControlBar-Container nicht. Modifizieren Sie die Skin des Spark Application-Containers, um diese Funktionalität hinzuzufügen.</p>
 
  <p>Der ApplicationControlBar-Container kann in einem der folgenden Modi sein:</p> 
  <ul>
    <li>Angedockter Modus: Die Leiste steht immer am oberen Rand des Zeichenbereichs der Anwendung und wird Teil des Chroms der Anwendung. Bildlaufleisten der Anwendung gelten nicht für die Komponente, daher bleibt sie immer über dem sichtbaren Bereich und die Leiste dehnt sich so aus, dass sie immer über die gesamte Breite der Anwendung läuft. Um eine angedockte Leiste zu erstellen, legen Sie den Wert der <codeph>dock</codeph>-Eigenschaft mit <codeph>true</codeph> fest.</li>
      
    <li>Normaler Modus: Die Leiste kann überall in der Anwendung platziert werden, wird wie jede andere Komponente in der Größe angepasst und platziert und der Bildlauf erfolgt mit der Anwendung. Um eine normale Leiste zu erstellen, legen Sie den Wert der <codeph>dock</codeph>-Eigenschaft mit <codeph>false</codeph> fest (Standardwert).</li>
  </ul>
 
  <p>Der ApplicationControlBar-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Auffüllbereich des Containers. Im normalen Modus reicht die Breite aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten oder expliziten Breitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Auffüllbereich des Containers untergebracht werden können. Im angedockten Modus entspricht die Breite der Anwendungsbreite. Wenn die Anwendung nicht breit genug ist, um alle Steuerelemente des ApplicationControlBar-Containers aufzunehmen, wird die Leiste abgeschnitten.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>5 Pixel für den Wert oben. 4 Pixel für den Wert unten. 8 Pixel für den Wert links und rechts.
           </entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleApplicationControlBarExample.mxml"><swfblock conref="examples/SimpleApplicationControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link></related-links><apiConstructor id="mx.containers:ApplicationControlBar:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:ApplicationControlBar:dock:get"><apiName>dock</apiName><shortdesc>
      Wenn „true“, wird damit festgelegt, dass der ApplicationControlBar-Container oben in der Anwendung angedockt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dockChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, wird damit festgelegt, dass der ApplicationControlBar-Container oben in der Anwendung angedockt sein soll. Wenn <codeph>false</codeph>, wird damit festgelegt, dass der ApplicationControlBar-Container wie jede andere Komponente in der Größe angepasst und platziert wird. Diese Eigenschaft wird unterstützt, wenn die Anwendung den Typ <codeph>Application</codeph> aufweist, sonst hat der Wert von <codeph>dock</codeph> keine Auswirkung.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
  Der HDividedBox-Container ordnet seine untergeordneten Objekte horizontal auf dieselbe Weise an wie der HBox-Container, fügt aber eine ziehbare Trennlinie in die Lücke zwischen jedem untergeordneten Objekt ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass except <code>direction</code> and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der HDividedBox-Container ordnet seine untergeordneten Objekte horizontal auf dieselbe Weise an wie der HBox-Container, fügt aber eine ziehbare Trennlinie in die Lücke zwischen jedem untergeordneten Objekt ein. Ein Benutzer kann eine Trennlinie ziehen, um den Bereich neu zu dimensionieren, der den untergeordneten Objekten zugewiesen wird. Das <codeph>&lt;mx:HDividedBox/></codeph>-Tag entspricht <codeph>&lt;mx:DividedBox direction=„horizontal“/></codeph>.
  
  <p>Ein HDividedBox-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Breite reicht aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten oder expliziten Breitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Auffüllbereich des Containers untergebracht werden können. Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Auffüllbereich des Containers.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row><row>
           <entry>Standardlückengröße</entry>
           <entry>10 Pixel für die horizontalen und vertikalen Lücken.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HDividedBoxExample.mxml"><swfblock conref="examples/HDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:HDividedBox:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:Grid"><apiName>Grid</apiName><shortdesc>
  Ein Grid-Container ermöglicht Ihnen die Anordnung von untergeordneten Objekten als Zeilen und Spalten von Zellen, ähnlich wie in einer HTML-Tabelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert ist 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert ist 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except the <code>Box.direction</code>
  property, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Grid
    <strong>Styles</strong>
    horizontalGap="8"
    verticalGap="6"
    &gt;
      ...
    <i>These child tags are examples only:</i>
       &lt;mx:GridRow id="row1"&gt;
        &lt;mx:GridItem
          rowSpan="1"
          colSpan="1">
            &lt;mx:Button label="Button 1"/&gt;
        &lt;/mx:GridItem&gt;
        ...
       &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein Grid-Container ermöglicht Ihnen die Anordnung von untergeordneten Objekten als Zeilen und Spalten von Zellen, ähnlich wie in einer HTML-Tabelle. Der Grid-Container enthält mindestens eine Zeile und jede Zeile enthält mindestens eine Zelle (oder mindestens ein Element). Sie verwenden die folgenden Tags, um ein Grid-Steuerelement zu definieren:
 
  <ul>
     <li>Das <codeph>&lt;mx:Grid></codeph>-Tag definiert einen Grid-Container.</li>
 
     <li>Das <codeph>&lt;mx:GridRow></codeph>-Tag definiert eine Rasterzeile, die mindestens eine Zelle hat. Die Rasterzeile muss ein untergeordnetes Objekt des <codeph>&lt;Grid></codeph>-Tags sein.</li>
 
     <li>Das <codeph>&lt;mx:GridItem></codeph>-Tag definiert eine Rasterzelle und muss ein untergeordnetes Objekt des <codeph>&lt;GridRow></codeph>-Tags sein. Das <codeph>&lt;mx:GridItem></codeph>-Tag kann eine Anzahl von untergeordneten Objekten enthalten.</li>
  </ul>
 
  <p>Die Zellen in einer bestimmten Zeile sind gleich hoch, aber die Zeilen können unterschiedliche Höhen aufweisen. Die Zellen in einer bestimmten Spalte sind gleich breit, aber die Spalten können unterschiedliche Breiten aufweisen. Sie können eine unterschiedliche Anzahl von Zellen für jede Zeile oder Spalte des Grid-Containers definieren. Außerdem kann sich eine Zelle über mehrere Spalten oder Zeilen des Containers erstrecken.</p>
  
  <p>Die Grid-, GridRow- und GridItem-Containers weisen folgende Merkmale für ihre Größenbestimmung auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Höhe des Rasters</entry>
           <entry>Die Summe der Standardhöhenwerte oder expliziten Höhenwerte aller Zeilen plus die Lücken zwischen Zeilen.</entry>
        </row><row>
           <entry>Breite des Rasters</entry>
           <entry>Die Summe der Standardbreitenwerte oder expliziten Breitenwerte aller Spalten plus die Lücken zwischen Spalten.</entry>
        </row><row>
           <entry>Höhe jeder Zeile und jeder Zelle</entry>
           <entry>Die Standardhöhe oder explizite Höhe des größten Elements in der Zeile. Wenn ein GridItem-Container keine explizite Höhe hat, entspricht seine Standardhöhe der Standardhöhe oder der expliziten Höhe des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Breite jeder Spalte und jeder Zelle</entry>
           <entry>Die Standardbreite oder explizite Breite des größten Elements in der Spalte. Wenn ein GridItem-Container keine explizite Breite hat, entspricht seine Standardbreite der Standardbreite oder der expliziten Breite des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Lücke zwischen Zeilen und Spalten</entry>
           <entry>Bestimmt durch die horizontalGap- und verticalGap-Eigenschaften für die Grid-Klasse. Der Standardwert für beide Lücken ist 6 Pixel.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für die Werte oben, unten, links und rechts, für alle drei Containerklassen.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Grid:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des Grid-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des Grid-Containers.

      <p>Diese Methode sollten Sie nicht direkt aufrufen. Es handelt sich um eine erweiterte Methode für die Verwendung bei Unterklassen. Der Flex-LayoutManger ruft die <codeph>measure()</codeph>-Methode zum geeigneten Zeitpunkt auf. Beim Start der Anwendung versucht der Flex-LayoutManager, alle Komponenten - von den untergeordneten bis zu den übergeordneten Objekten - zu messen, bevor er sie auf ihre endgültigen Größen festlegt.</p>
     
      <p>Zum Verständnis der Berechnung der Messwerte durch den Grid-Container können Sie davon ausgehen, dass jeder GridItem-Container seine <codeph>rowSpan</codeph>-Eigenschaft und <codeph>colSpan</codeph>-Eigenschaft auf 1 gesetzt hat. Die gemessene Breite der ersten Spalte des Grid-Containers entspricht dem Maximum der gemessenen Breiten aller GridItem-Container in der ersten Spalte. Ebenso gilt: Die gemessene Breite der zweiten Spalte ist das Maximum aller gemessenen Breiten unter den GridItem-Containern in der zweiten Spalte, und so weiter. Die <codeph>measuredWidth</codeph>-Eigenschaft des gesamten Grid-Containers ist die Summe der gemessenen Breiten aller Spalten plus die Rahmenstärke, plus linker und rechter Auffüllbereich, plus der Raum für die horizontale Lücke zwischen nebeneinander liegenden Rasterzellen.</p>
     
      <p>Die Eigenschaftswerte für <codeph>measuredHeight</codeph>, <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>maxWidth</codeph> und <codeph>maxHeight</codeph> werden alle auf ähnliche Weise berechnet, indem die Werte der Eigenschaften <codeph>measuredHeight</codeph>, <codeph>minWidth</codeph> etc. der GridItem-Container zusammengerechnet werden.</p>
     
      <p>Wenn die <codeph>colSpan</codeph>-Eigenschaft eines GridItem-Containers 3 beträgt, wird die <codeph>measuredWidth</codeph>-Eigenschaft dieses GridItem-Containers über 3 Spalten geteilt. Wenn die <codeph>measuredWidth</codeph>-Eigenschaft gleichmäßig unterteilt wird, berechnet jede der drei Spalten ihre gemessene Breite so, als wäre der GridItem-Container nur in dieser Spalte und die <codeph>measuredWidth</codeph>-Eigenschaft des GridItem-Containers ein Drittel ihres aktuellen Werts.</p>
     
      <p>Allerdings ist die <codeph>measuredWidth</codeph>-Eigenschaft des GridItem-Containers nicht immer gleichmäßig unter allen Spalten aufgeteilt, über die er sich erstreckt. Wenn einige Spalten eine Eigenschaft mit einem Prozentwert von <codeph>width</codeph> aufweisen, wird die <codeph>measuredWidth</codeph>-Eigenschaft des GridItem-Containers entsprechend geteilt, wobei versucht wird, jeder Spalte den angeforderten Prozentanteil des Grid-Containers zuzuweisen.</p>
     
      <p>Alle vorstehend beschriebenen Werte sind <i>gemessene</i> Breiten und Höhen des Grid-Containers. Der Benutzer kann die gemessenen Werte überschreiben, indem er explizit einen Wert für die folgenden Eigenschaften festlegt:</p>
     
      <ul>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>width</codeph></li>
      </ul>
     
      <p>Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.measure()</codeph>-Methode oder die <codeph>measuredHeight</codeph>- und <codeph>measuredWidth</codeph>-Eigenschaften aufrufen. Sie können optional auch die folgenden Eigenschaften festlegen:</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>Diese Eigenschaften entsprechen den weiter oben angeführten Layouteigenschaften und werden daher nicht eigens dokumentiert.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Grid:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Legt die Größe und Position jedes untergeordneten Objekts des Grid-Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Größe und Position jedes untergeordneten Objekts des Grid-Containers fest.
     
      <p>Diese Methode sollten Sie nicht direkt aufrufen. Es handelt sich um eine erweiterte Methode für die Verwendung bei Unterklassen. Der Flex-LayoutManger ruft die <codeph>updateDisplayList</codeph>-Methode zum geeigneten Zeitpunkt auf. Wenn die Anwendung startet, ruft der Flex-LayoutManager die <codeph>updateDisplayList()</codeph>-Methode für jede Komponente auf, wobei mit dem Root-Objekt begonnen und ab da weiterverarbeitet wird.</p>
     
      <p>Der Grid-Container befolgt dieselben Layoutregeln wie der VBox-Container. Die Positionen und Größen der GridRow-Container werden auf dieselbe Art berechnet wie ein VBox-Container die Positionen und Größen seiner untergeordneten Objekte ermittelt. Ein GridRow-Container platziert daher seine GridItem-Container mit einem ähnlichen Layout-Algorithmus wie ein HBox-Container.</p>
     
      <p>Der einzige Unterschied besteht darin, dass die GridRow-Containers untereinander koordinieren, sodass sie alle dieselben Positionen und Größen für ihre untergeordneten Objekte wählen (damit die Spalten des Grid-Containers ausgerichtet sind). </p>
     
      <p>Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.updateDisplayList()</codeph>-Methode und dann für jedes untergeordnete Objekt die <codeph>move()</codeph>- und <codeph>setActualSize()</codeph>-Methoden aufrufen. Für Layoutzwecke sollten Sie die Größe dieses Containers aus den <codeph>unscaledWidth</codeph>- und <codeph>unscaledHeight</codeph>-Eigenschaften abrufen und nicht aus den <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften. Die <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften berücksichtigen die Werte der <codeph>scaleX</codeph>- und <codeph>scaleY</codeph>-Eigenschaften für diesen Container nicht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:TileDirection"><apiName>TileDirection</apiName><shortdesc>
  Die TileDirection-Klasse definiert die Konstantenwerte für die direction-Eigenschaft des Tile-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TileDirection-Klasse definiert die Konstantenwerte für die <codeph>direction</codeph>-Eigenschaft des Tile-Containers.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Tile"><linktext>mx.containers.Tile</linktext></link></related-links><apiValue id="mx.containers:TileDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Legt fest, dass die untergeordneten Objekte des Tile-Containers horizontal angeordnet werden, also mit der ersten Zeile beginnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Legt fest, dass die untergeordneten Objekte des Tile-Containers horizontal angeordnet werden, also mit der ersten Zeile beginnen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TileDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Legt fest, dass die untergeordneten Objekte des Tile-Containers vertikal angeordnet werden, also mit der ersten Spalte beginnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Legt fest, dass die untergeordneten Objekte des Tile-Containers vertikal angeordnet werden, also mit der ersten Spalte beginnen.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
  Der MX TabNavigator-Container erweitert den MX ViewStack-Container, indem ein TabBar-Container für die Navigation zwischen seinen untergeordneten Containern einbezogen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><styles><style format="Length" inherit="no" name="tabOffset" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Der horizontale Offset der Registerkartenleiste in Pixeln vom linken Rand des TabNavigator-Containers. Ein positiver Wert verschiebt die Registerkartenleiste nach rechts. Ein negativer Wert verschiebt die Registerkartenleiste nach links. 
 
  </description>
<default>0 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabWidth" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Breite der einzelnen Registerkarten in Pixeln. Der Standardwert ist <codeph>undefined</codeph>. Wenn diese Eigenschaft <codeph>undefined</codeph> ist, wird die Breite der einzelnen Registerkarten durch die Breite ihres Beschriftungstexts unter Berücksichtigung der Schriftartstile für diesen TabNavigator-Container bestimmt. Wenn die Gesamtbreite der Registerkarten die Breite des TabNavigator-Containers übersteigt, wird die berechnete Registerkartenbreite verringert, aber nur bis auf ein Minimum von 30 Pixeln. Wenn Sie diese Eigenschaft festlegen, überschreibt der festgelegte Wert diese Berechnung.
 
  <p>Der Beschriftungstext auf einer Registerkarte wird gekürzt, wenn er nicht auf die Registerkarte passt. Wenn die Beschriftung einer Registerkarte gekürzt wird, erscheint bei Rollover über die Registerkarte eine QuickInfo mit dem vollständigen Beschriftungstext.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die Stile für die Registerkarten festlegt.
  
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabHeight" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Höhe der einzelnen Registerkarten in Pixeln. Der Standardwert ist <codeph>undefined</codeph>. Wenn diese Eigenschaft <codeph>undefined</codeph> ist, wird die Höhe jeder Registerkarte durch die Schriftstile bestimmt, die auf diesen TabNavigator-Container angewendet werden. Wenn Sie diese Eigenschaft festlegen, überschreibt der festgelegte Wert diese Berechnung.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedTabTextStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die Stile für den Text der ausgewählten Registerkarte festlegt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die Stile für die letzte Registerkarte festlegt. Wenn diese Angabe nicht erfolgt, wird der Standardwert der <codeph>tabStyleName</codeph>-Stileigenschaft verwendet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Trennung zwischen Registerkarten in Pixeln. Der Standardwert ist -1, sodass die Rahmenlinien nebeneinander liegender Registerkarten einander überlappen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Horizontale Platzierung von Registerkarten am oberen Rand dieses TabNavigator-Containers. Zulässige Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Der Standardwert ist <codeph>„left“</codeph>.
 
  <p>Wenn der Wert <codeph>„left“</codeph> ist, wird der linke Rand der ersten Registerkarte mit dem linken Rand des TabNavigator-Containers ausgerichtet. Wenn der Wert <codeph>„right“</codeph> ist, wird der rechte Rand der letzten Registerkarte mit dem rechten Rand des TabNavigator-Containers ausgerichtet. Wenn der Wert <codeph>„center“</codeph> ist, werden die Registerkarten am oberen Rand des TabNavigator-Containers zentriert.</p>
 
  <p>Um einen Unterschied zwischen den Ausrichtungen zu erkennen, muss die Gesamtbreite aller Registerkarten geringer sein als die Breite des TabNavigator-Containers.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die Stile für die erste Registerkarte festlegt. Wenn diese Angabe nicht erfolgt, wird der Standardwert der <codeph>tabStyleName</codeph>-Stileigenschaft verwendet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Gibt an, welche Ecken des Fokusrechtecks gerundet werden sollen. Dieser Wert ist ein durch Leerschritte getrennter String, der folgende Werte in beliebigen Kombinationen enthalten kann: <codeph>„tl“</codeph>, <codeph>„tr“</codeph>, <codeph>„bl“</codeph> und <codeph>„br“</codeph>. Beispiel: Um festzulegen, dass die Ecken auf der rechten Seite gerundet werden sollen, die linken Ecken aber spitz bleiben, geben Sie <codeph>„tr br“</codeph> an. Die <codeph>cornerRadius</codeph>-Stileigenschaft legt den Radius der abgerundeten Ecken fest. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert <codeph>„tl tr bl br“</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Legt den Alphatransparenzwert der Fokus-Skin fest. Der Standardwert für das Halo-Design beträgt <codeph>0.4</codeph>. Der Standardwert für das Spark-Design beträgt <codeph>0.55</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Legt die Farben fest, die für die Hintergrundfüllung der Komponente verwendet werden. Sie müssen diesen Wert auf ein Array aus zwei oder vier uint-Werte festlegen, die RGB-Farben definieren. Die Elemente 0 und 1 legen den Start- und Endwert für einen Farbverlauf fest. Wenn die Elemente 2 und 3 vorhanden sind, werden sie anstelle der Elemente 0 und 1 verwendet, wenn sich die Komponente in einem Mouseover-Status befindet. Um ein Steuerelement mit einem flachen Aussehen zu gestalten, legen Sie dieselbe Farbe für die Elemente 0 und 1 sowie für die Elemente 2 und 3 fest. Der Standardwert ist <codeph>[ 0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE ]</codeph>.
  <p>Einige Komponenten, wie beispielsweise der ApplicationControlBar-Container, haben einen anderen Standardwert. Für den ApplicationControlBar-Container ist der Standardwert <codeph>[ 0xFFFFFF, 0xFFFFFF ]</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Legt die Alphatransparenzwerte für die Hintergrundfüllung von Komponenten fest. Die Werte müssen auf ein Array von zwei oder vier Zahlen eingestellt werden. Die Elemente 0 und 1 legen den Start- und Endwert für einen Alphatransparenzverlauf fest. Wenn die Elemente 2 und 3 vorhanden sind, werden sie anstelle der Elemente 0 und 1 verwendet, wenn sich die Komponente in einem Mouseover-Status befindet. Der globale Standardwert ist <codeph>[ 0.60, 0.40, 0.75, 0.65 ]</codeph>. Einige Komponenten, wie beispielsweise der ApplicationControlBar-Container, haben einen anderen Standardwert. Für den ApplicationControlBar-Container ist der Standardwert <codeph>[ 0.0, 0.0 ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TabNavigator&gt;</code> tag inherits all of the
  tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:TabNavigator
    <b>Styles</b>
    fillAlphas="[0.60, 0.40, 0.75, 0.65]"
    fillColors="[0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE]"
    firstTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    focusAlpha="0.4"
    focusRoundedCorners="tl tr bl br"
    horizontalAlign="left|center|right"
    horizontalGap="-1"
    lastTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    selectedTabTextStyleName="undefined"
    tabHeight="undefined"
    tabOffset="0"
    tabStyleName="<i>Name of CSS style declaration that specifies styles for the tabs</i>"
    tabWidth="undefined"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:TabNavigator&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.containers:ViewStack</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der MX TabNavigator-Container erweitert den MX ViewStack-Container, indem ein TabBar-Container für die Navigation zwischen seinen untergeordneten Containern einbezogen wird.
 
  <p><b>Hinweis:</b> Die direkt untergeordneten Elemente von MX-Navigatorcontainern müssen entweder MX-Layout- oder MX-Navigatorcontainer sein oder aber Spark-NavigatorContent-Container. Innerhalb eines Navigators können Sie nur den Spark-NavigatorContent-Container direkt verschachteln, nicht jedoch sonstige Steuerelemente oder Spark-Container. Es muss sich um untergeordnete Elemente eines untergeordneten MX-Containers handeln.</p>
 
  <p>Wie bei einem ViewStack-Container enthält ein TabNavigator-Container eine Sammlung von untergeordneten Containern, in der jeweils nur ein untergeordnetes Objekt sichtbar ist. Flex erstellt automatisch einen TabBar-Container am oberen Rand des TabNavigator-Containers, wobei jeweils eine Registerkarte einem untergeordneten Container entspricht. Jede Registerkarte kann ihre eigene Beschriftung und ihr eigenes Symbol haben. Wenn der Benutzer auf eine Registerkarte klickt, wird der zugeordnete untergeordnete Container als ausgewähltes untergeordnetes Objekt des TabNavigator-Containers sichtbar.</p>
 
  <p>Wenn Sie den aktuell sichtbaren untergeordneten Container ändern, können Sie die <codeph>hideEffect</codeph>-Eigenschaft des auszublendenden Containers und die <codeph>showEffect</codeph>-Eigenschaft des einzublendenden untergeordneten Containers verwenden, um einen Effekt auf die untergeordneten Container anzuwenden. Der TabNavigator-Container wartet den Abschluss des <codeph>hideEffect</codeph>-Vorgangs des auszublendenden untergeordneten Containers ab und blendet erst dann den neuen untergeordneten Container ein. Sie können einen laufenden Effekt abbrechen, indem Sie die <codeph>selectedIndex</codeph>-Eigenschaft des TabNavigator-Containers ändern, während ein Effekt läuft. </p>
  
  <p>Um das Aussehen von Registerkarten in einem TabNavigator-Container zu definieren, können Sie Stileigenschaften in einem Tab-Selektor wie in dem folgenden Beispiel festlegen:</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|Tab {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }  
  &lt;/fx:Style>
  </pre>
 
  <p>Der Tab-Selektor definiert Werte in der verborgenen mx.controls.tabBarClasses.Tab-Klasse. Die Standardwerte für den Tab-Selektor werden in der Datei defaults.css definiert.</p>
 
  <p>Sie können die Stile auch in einem Klassenselektor definieren, den Sie mit der <codeph>tabStyleName</codeph>-Stileigenschaft festlegen, zum Beispiel:</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|TabNavigator {
       tabStyleName:myTabStyle;
    }
 
    .myTabStyle {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }
  &lt;/fx:Style>
  </pre>
 
  <p>Ein TabNavigator-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Standardwerte oder expliziten Werte für Breite und Höhe des ersten untergeordneten Objekts plus die Registerkarten mit ihren Standardwerten oder expliziten Werten für Höhe und Breite. Die Standardhöhe der Registerkarte wird durch Schriftart, Schriftstil und Skin bestimmt, die auf den TabNavigator-Container angewendet sind.</entry>
        </row><row>
           <entry>Regeln für die Größenänderung von Containern</entry>
           <entry>Standardmäßig wird die Größe der TabNavigator-Container nur einmal festgelegt, um sie an die Größe des ersten untergeordneten Containers anzupassen. Die Größe ändert sich nicht, wenn Sie zu anderen untergeordneten Objekten navigieren. Um eine Größenänderung eines TabNavigator-Containers zu erzwingen, wenn Sie zu einem anderen untergeordneten Container navigieren, müssen Sie die resizeToContent-Eigenschaft auf „true“ setzen.</entry>
        </row><row>
           <entry>Layoutregeln für untergeordnete Objekte</entry>
           <entry>Wenn das untergeordnete Objekt größer ist als der TabNavigator-Container, wird es abgeschnitten. Wenn das untergeordnete Objekt kleiner ist als der TabNavigator-Container, wird es in der linken oberen Ecke des TabNavigator-Container angefügt.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabNavigatorExample.mxml"><swfblock conref="examples/TabNavigatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link></related-links><apiConstructor id="mx.containers:TabNavigator:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:TabNavigator:getTabAt"><apiName>getTabAt</apiName><shortdesc>
      Gibt die Registerkarte des TabBar-Steuerelements des Navigators an der angegebenen Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Registerkarte an der angegebenen Indexposition.
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition im TabBar-Steuerelement des Navigators.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Registerkarte des TabBar-Steuerelements des Navigators an der angegebenen Indexposition zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte dieses TabNavigator-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte dieses TabNavigator-Containers. Im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode finden Sie weitere Hinweise zur <codeph>measure()</codeph>-Methode.
     
      <p>Der TabNavigator-Container benutzt dieselbe Messlogik wie der <codeph>ViewStack</codeph>-Container, mit zwei Änderungen: Zunächst wird der Wert der <codeph>measuredHeight</codeph>- und <codeph>measuredMinHeight</codeph>-Eigenschaften erhöht, um die Registerkarten unterzubringen. Zweitens wird der Wert der <codeph>measuredWidth</codeph>-Eigenschaft erforderlichenfalls erhöht, um sicherzustellen, dass jede Registerkarte mindestens 30 Pixel breit seit kann.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link><link href="mx.containers.xml#ViewStack/measure()"><linktext>mx.containers.ViewStack.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der Registerkarten und untergeordneten Objekte dieses Containers festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der Registerkarten und untergeordneten Objekte dieses Containers festgelegt werden. Weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode.
     
      <p>Ein TabNavigator-Container platziert seinen TabBar-Container am oberen Rand. Die Breite des TabBar-Containers wird mit der Breite des TabNavigator-Containers festgelegt und die Höhe des TabBar-Containers wird an die <codeph>tabHeight</codeph>-Eigenschaft angepasst.</p>
     
      <p>Ein TabNavigator-Container platziert und dimensioniert seine untergeordneten Container unter dem TabBar-Container und verwendet dabei dieselbe Logik wie im ViewStack-Container.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:TabNavigator:protected:tabBar"><apiName>tabBar</apiName><shortdesc>
      Ein Verweis auf den TabBar-Container in diesem TabNavigator-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls:TabBar</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf den TabBar-Container in diesem TabNavigator-Container.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TabNavigator:protected:tabBarStyleFilters:get"><apiName>tabBarStyleFilters</apiName><shortdesc>
      Die Gruppen von Stilen, die von TabNavigator an tabBar übergeben werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die Gruppen von Stilen, die von TabNavigator an tabBar übergeben werden.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.containers:HBox"><apiName>HBox</apiName><shortdesc>
  Der Halo HBox-Container ordnet seine untergeordneten Objekte in einer einzelnen horizontalen Zeile an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:HBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:HBox" replacement="spark.components.HGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Halo HBox-Container ordnet seine untergeordneten Objekte in einer einzelnen horizontalen Zeile an. Sie verwenden das <codeph>&lt;mx:HBox></codeph>-Tag anstelle des <codeph>&lt;mx:Box></codeph>-Tags als Kurzbefehl, um das Festlegen der <codeph>direction</codeph>-Eigenschaft auf <codeph>„horizontal“</codeph> zu vermeiden.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich die Spark-Container mit HorizontalLayout anstelle des Halo HBox-Containers zu verwenden.</p>
 
  <p>Ein HBox-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Breite reicht aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten oder expliziten Breitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Füllbereich des Containers untergebracht werden können. Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Füllbereich des Containers.
           </entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HBoxExample.mxml"><swfblock conref="examples/HBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:HBox:HBox"><apiName>HBox</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:VBox"><apiName>VBox</apiName><shortdesc>
  Der Halo VBox-Container ordnet seine untergeordneten Objekte in einer einzelnen vertikalen Spalte an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:VBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:VBox" replacement="spark.components.VGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p></p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Halo VBox-Container ordnet seine untergeordneten Objekte in einer einzelnen vertikalen Spalte an. Sie verwenden das <codeph>&lt;mx:VBox></codeph>-Tag anstelle des <codeph>&lt;mx:Box></codeph>-Tags als Kurzbefehl, um das Festlegen der <codeph>direction</codeph>-Eigenschaft auf <codeph>„vertical“</codeph> zu vermeiden.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich die Spark-Container mit VerticalLayout anstelle des Halo VBox-Containers zu verwenden.</p>
 
  <p>Ein VBox-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe reicht aus, damit alle untergeordneten Objekte mit ihren Standardhöhenwerten oder expliziten Höhenwerten plus vertikale Lücken zwischen den untergeordneten Objekten plus oberer und unterer Füllbereich des Containers untergebracht werden können. Die Breite ist die Standardbreite oder explizite Breite des breitesten untergeordneten Objekts plus Auffüllbereich des Containers auf der linken und rechten Seite.
           </entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VBoxExample.mxml"><swfblock conref="examples/VBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link></related-links><apiConstructor id="mx.containers:VBox:VBox"><apiName>VBox</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  Ein TitleWindow-Layoutcontainer enthält eine Titelleiste, einen Titeltext, einen Rahmen und einen Inhaltsbereich für sein untergeordnetes Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:TitleWindow" replacement="spark.components.TitleWindow" since="4.0">
	</Alternative><styles><style inherit="no" name="closeButtonUpSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Die Skin für den „Up“-Status der Schaltfläche „Schließen“. Der Standardwert ist das „CloseButtonUp“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonOverSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Die Skin für den „Over“-Status der Schaltfläche „Schließen“. Der Standardwert ist das „CloseButtonOver“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDownSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Die Skin für den „Down“-Status der Schaltfläche „Schließen“. Der Standardwert ist das „CloseButtonDown“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDisabledSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Die Skin für den „Disabled“-Status der Schaltfläche „Schließen“. Der Standardwert ist das „CloseButtonDisabled“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Die Standardskin für die Schaltfläche „Schließen“.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TitleWindow
   <b>Properties</b>
   showCloseButton="false|true"
 
   <b>Styles</b>
   closeButtonDisabledSkin="<i>'CloseButtonDisabled' symbol in Assets.swf</i>"
   closeButtonDownSkin="<i>'CloseButtonDown' symbol in Assets.swf</i>"
   closeButtonOverSkin="<i>'CloseButtonOver' symbol in Assets.swf</i>"
   closeButtonUpSkin="<i>'CloseButtonUp' symbol in Assets.swf</i>"
  
   <strong>Events</strong>
   close="<i>No default</i>"
   &gt;
    ...
      child tags
    ...
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein TitleWindow-Layoutcontainer enthält eine Titelleiste, einen Titeltext, einen Rahmen und einen Inhaltsbereich für sein untergeordnetes Objekt. Im Allgemeinen verwenden Sie TitleWindow-Container, um Anwendungsmodule einzuschließen, die selbst Container sind. Formulare werden beispielsweise in einen TitleWindow-Container gesetzt. Wenn der Benutzer das Formular ausfüllt, können Sie den TitleWindow-Container programmgesteuert schließen oder dies dem Benutzer überlassen, indem er die Schaltfläche „Schließen“ betätigt.
  
  <p>Der TitleWindow-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe reicht aus, um alle untergeordneten Objekte im Inhaltsbereich mit den Standardhöhenwerten oder expliziten Höhenwerten der untergeordneten Objekte aufzunehmen, plus Titelleiste und Rahmen, plus vertikale Lücken zwischen den untergeordneten Objekten, plus oberer und unterer Füllbereich des Containers. Die Breite ist die Standardbreite oder die explizite Breite des breitesten untergeordneten Objekts, je nachdem, welche Breite größer ist, plus linker und rechter Füllbereich am Containerrahmen oder die Breite des Titeltexts.</entry>
        </row><row>
           <entry>borders</entry>
           <entry>10 Pixel für den Wert links und rechts. 2 Pixel für den Wert oben. 0 Pixel für den Wert unten.
           </entry>
        </row><row>
           <entry>padding</entry>
           <entry>4 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><adobeApiEvent id="mx.containers:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Ausgelöst, wenn der Benutzer die Schaltfläche „Schließen“ betätigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3985
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>close-Ereignis
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  Ausgelöst, wenn der Benutzer die Schaltfläche „Schließen“ betätigt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:TitleWindow:showCloseButton:get"><apiName>showCloseButton</apiName><shortdesc>
      Ob eine Schaltfläche „Schließen“ im TitleWindow-Container angezeigt werden soll oder nicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3986
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue><apiTipTexts><apiTipText>Wenn „true“, wird die Schaltfläche „Schließen“ angezeigt.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Ob eine Schaltfläche „Schließen“ im TitleWindow-Container angezeigt werden soll oder nicht. Der Standardwert lautet <codeph>false</codeph>. Auf <codeph>true</codeph> eingestellt, um die Schaltfläche „Schließen“ anzuzeigen. Beim Klick auf die Schaltfläche „Schließen“ wird ein <codeph>close</codeph>-Ereignis ausgelöst, der TitleWindow-Container wird aber nicht geschlossen. Sie müssen eine Prozedur für das <codeph>close</codeph>-Ereignis programmieren und den TitleWindow-Container darin schließen.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Der FormHeading-Container wird verwendet, um eine Überschrift für eine Gruppe von Steuerelementen in einem Form-Container anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln über dem Text der Überschrift.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Breite der Beschriftungen im Formular. Der Standardwert ist die Länge der längsten Beschriftung im Formular. Für den FormHeading-Container ist die <codeph>labelWidth</codeph>-Eigenschaft der Raum links neben dem Überschrifttext.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen dem Beschriftungsraum und dem Überschrifttext.
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Der Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.containers:FormHeading" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die IUITextField implementiert, das von dieser Komponente für die Darstellung von Text verwendet wird.
 
  <p>Sie kann auf die mx.core.UITextField-Klasse (zur Verwendung der in Flash Player integrierten klassischen TextField-Klasse) oder die mx.core.UIFTETextField-Klasse (zur Verwendung des Text Layout Frameworks, um verbesserte Textdarstellungen, einschließlich bidirektionalem Layout, zu erhalten) eingestellt werden.</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des von dieser Komponente angezeigten Texts.
 
  <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen. Ein positiver Wert erhöht den normalen Zeichenabstand, ein negativer Wert reduziert ihn.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Kerning reduziert den Abstand zwischen bestimmten Zeichenpaaren, um die Lesbarkeit zu verbessern, und sollte nur verwendet werden, wenn dies wirklich nötig ist, etwa bei Titeln mit großer Schrift. Kerning wird nur für eingebettete Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Legt die <codeph>thickness</codeph>-Eigenschaft von internen TextFields-Elementen fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft definiert die Stärke der Glyphenkanten. Die möglichen Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkung auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft definiert die Bildschärfe der Glyphenkanten. Die möglichen Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Die möglichen Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Name der zu verwendenden Schriftart. Anders als bei einer reinen CSS-Implementierung werden kommagetrennte Listen nicht unterstützt. Sie können eine beliebige Schriftfamilienbezeichnung verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Stellt die <codeph>antiAliasType</codeph>-Eigenschaften interner TextFields-Elemente ein. Die möglichen Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert ist <codeph>„advanced“</codeph>, wodurch ein Anti-Aliasing für die Schriftart aktiviert wird. Auf <codeph>„normal“</codeph> eingestellt, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf alle Texte in einem TextField-Substeuerelement angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  Die Laufrichtung des von dieser Komponente angezeigten Texts.
 
  <p>Zulässige Werte sind <codeph>"ltr"</codeph> für den von links nach rechts verlaufenden Text lateinischer Schriften und <codeph>"rtl"</codeph> für den von rechts nach links laufenden Text z. B. des Arabischen oder Hebräischen.</p>
 
  <p>FTE und TLF verwenden diesen Wert in ihrem bidirektionalen Textlayoutalgorithmus, der die Unicode-Zeichenfolge der Glyphenfolge zuordnet.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  <p>Die <codeph>direction</codeph> wirkt sich auch auf die Ausrichtung des Texts an den Grenzen des TLFTextField aus. Sie beeinflusst jedoch nicht die Platzierung des TLFTextField innerhalb der Komponente.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie der Komponente und dem rechten Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie der Komponente und dem linken Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  <p>Der Standardwert für das Tree-Steuerelement ist 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
 
  <p>Der Standardwert ist 2.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormHeading&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Styles</strong>
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|subpixel|none"
    fontSharpness="0"
    fontSize="12"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    textAlign="<i>Calculated</i>"
    textDecoration="none|underline"
    textIndent="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der FormHeading-Container wird verwendet, um eine Überschrift für eine Gruppe von Steuerelementen in einem Form-Container anzuzeigen. Die linke Seite der Überschrift ist mit der linken Seite der Steuerelemente im Formular ausgerichtet. Sie können mehrere FormHeading-Container in einen Form-Container einschließen.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:FormHeading:label:get"><apiName>label</apiName><shortdesc>
	  Überschrifttext des Formulars.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Überschrifttext des Formulars.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Accordion"><apiName>Accordion</apiName><shortdesc>
  MX Accordion-Navigatorcontainer haben eine Sammlung von untergeordneten MX-Containern oder Spark-NavigatorContent-Containern, es ist jedoch jeweils nur einer sichtbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="clipContent"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert ist -1 und daher überlappen sich die oberen und unteren Rahmenlinien nebeneinander liegender Überschriften.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  Farbe des ausgewählten Texts. Der Standardwert für das Halo-Design ist <codeph>0x2B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  Die Farbe des Überschrifttexts bei Rollover. Der Standardwert für das Halo-Design ist <codeph>0x2B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der oberen Rahmenlinie des Containers und seinem Inhaltsbereich. Der Standardwert ist -1 und daher überlagert die obere Rahmenlinie der ersten Überschrift die obere Rahmenlinie des Accordion-Containers.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der unteren Rahmenlinie des Containers und seinem Inhaltsbereich. Der Standardwert ist -1 und daher überlagert die untere Rahmenlinie der letzten Überschrift die untere Rahmenlinie des Accordion-Containers.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.containers:Accordion" playerVersion="Flash9" type="Function">
<description>
  Die Tweeningfunktion, die von der Animation für den Übergang von einem untergeordneten Objekt zu einem anderen verwendet wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Dauer der Animation des Übergangs von einem untergeordneten Objekt zum anderen in Millisekunden. Der Standardwert für das Halo-Design beträgt 250. Der Standardwert für das Spark-Design beträgt 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Höhe jeder Überschrift des Accordion-Containers in Pixeln. Der Standardwert wird auf der Grundlage der Schriftstile für die Überschrift automatisch berechnet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert ist 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.containers:Accordion" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die Stile für die Überschriften des Accordion-Containers festlegt (Registerkarten).
 
  <p>Sie können diesen Klassenselektor verwenden, um die Werte aller Stileigenschaften der AccordionHeader-Klasse festzulegen, darunter: <codeph>fillAlphas</codeph>, <codeph>fillColors</codeph>, <codeph>focusAlpha</codeph>, <codeph>focusRounderCorners</codeph>, <codeph>focusSkin</codeph>, <codeph>focusThickness</codeph> und <codeph>selectedFillColors</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Accordion&gt;</code> tag inherits all of the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Accordion
    <strong>Properties</strong>
    headerRenderer="<i>IFactory</i>"
    historyManagementEnabled="true|false"
    resizeToContent="false|true"
    selectedChild"<i>A reference to the first child</i>"
    selectedIndex="undefined"
  
    <strong>Styles</strong>
    headerHeight="depends on header font styles"
    headerStyleName="<i>No default</i>"
    horizontalGap="8"
    openDuration="250"
    openEasingFunction="undefined"
    paddingBottom="-1"
    paddingTop="-1"
    textRollOverColor="0xB333C"
    textSelectedColor="0xB333C"
    verticalGap="-1"
  
    <strong>Events</strong>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Accordion&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Mit dem Accordion-Container ist die Navigation zwischen verschiedenen untergeordneten Ansichten möglich
  </apiTipText></apiTipTexts><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  MX Accordion-Navigatorcontainer haben eine Sammlung von untergeordneten MX-Containern oder Spark-NavigatorContent-Containern, es ist jedoch jeweils nur einer sichtbar. Er erstellt und verwaltet Navigatorschaltflächen (Überschriften des Accordion-Containers), die Sie für die Navigation zwischen den untergeordneten Objekten verwenden. Eine Navigatorschaltfläche ist jeweils mit einem untergeordneten Container verknüpft und jede Navigatorschaltfläche gehört zu dem Accordion-Container, nicht zum untergeordneten Objekt. Wenn der Benutzer auf eine Navigatorschaltfläche klickt, wird der verknüpfte untergeordnete Container angezeigt. Für den Übergang zum neuen untergeordneten Objekt wird eine Animation verwendet, damit der Benutzer sieht, dass ein untergeordnetes Objekt aus- und ein anderes eingeblendet wird.
 
  <p><b>Hinweis:</b> Die direkt untergeordneten Elemente von MX-Navigatorcontainern müssen entweder MX-Layout- oder MX-Navigatorcontainer sein oder aber Spark-NavigatorContent-Container. Innerhalb eines Navigators können Sie nur den Spark-NavigatorContent-Container direkt verschachteln, nicht jedoch sonstige Steuerelemente oder Spark-Container. Es muss sich um untergeordnete Elemente eines untergeordneten MX-Containers handeln.</p>
 
  <p>Der Accordion-Container erweitert nicht den ViewStack-Container, implementiert aber alle seine Eigenschaften, Methoden, Stile und Ereignisse, wie <codeph>selectedIndex</codeph> und <codeph>selectedChild</codeph>.</p>
 
  <p>Ein Accordion-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Breite und Höhe des derzeit aktiven untergeordneten Objekts.</entry>
        </row><row>
           <entry>Regeln für die Größenänderung von Containern</entry>
           <entry>Accordion-Container werden standardmäßig nur einmal dimensioniert, um sie an die Größe des ersten untergeordneten Containers anzupassen. Die Größe ändert sich standardmäßig nicht, wenn Sie zu anderen untergeordneten Objekten navigieren. Um eine Größenänderung eines Accordion-Containers zu erzwingen, wenn Sie zu einem anderen untergeordneten Container navigieren, müssen Sie die resizeToContent-Eigenschaft auf „true“ setzen.</entry>
        </row><row>
           <entry>Regeln für die Größenanpassung von untergeordneten Objekten</entry>
           <entry>Die Größe der untergeordneten Objekte ist ihre Standardgröße. Das untergeordnete Objekt wird abgeschnitten, wenn es größer ist als der Accordion-Container. Wenn das untergeordnete Objekt kleiner ist als der Accordion-Container, wird es in der linken oberen Ecke des Accordion-Containers angefügt.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>-1 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="AccordionExample.mxml"><swfblock conref="examples/AccordionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links><adobeApiEvent id="mx.containers:Accordion_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der ausgewählte untergeordnete Container ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3012
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>change-Ereignis
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der ausgewählte untergeordnete Container ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:Accordion:Accordion"><apiName>Accordion</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Accordion:getHeaderAt"><apiName>getHeaderAt</apiName><shortdesc>
      Gibt einen Verweis auf die Navigator-Schaltfläche für einen untergeordneten Container zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Button-Objekt, das eine Navigatorschaltfläche darstellt.
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Auf null basierende Indexposition des untergeordneten Objekts.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Verweis auf die Navigator-Schaltfläche für einen untergeordneten Container zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Status dieses Objekts zum Laden. Der Wert ist null, wenn der ursprüngliche Status der Anwendung geladen wird.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Der Status dieses Objekts.
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Accordion:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Die Höhe des Bereichs, in dem Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe des Bereichs, in dem Inhalt angezeigt wird, in Pixeln. Sie können diese Abrufmethode überschreiben, wenn Ihr Inhalt nicht den gesamten Bereich des Containers ausfüllt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Die Breite des Bereichs, in dem Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite des Bereichs, in dem Inhalt angezeigt wird, in Pixeln. Sie können diese Abrufmethode überschreiben, wenn Ihr Inhalt nicht den gesamten Bereich des Containers ausfüllt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      Eine Factory zum Erstellen der Navigationsschaltflächen für jedes untergeordnete Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      Eine Factory zum Erstellen der Navigationsschaltflächen für jedes untergeordnete Objekt. Der Standardwert ist eine Factory, die eine <codeph>mx.containers.accordionClasses.AccordionHeader</codeph>-Klasse erstellt. Das erstellte Objekt muss eine Unterklasse der Button-Klasse sein und die <codeph>mx.core.IDataRenderer</codeph>-Schnittstelle implementieren. Die <codeph>data</codeph>-Eigenschaft wird auf den Inhalt eingestellt, der mit der Überschrift verknüpft ist.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      Wenn „true“, ermöglicht diese Eigenschaft die Verwaltung von Verlaufdaten in diesem Accordion-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, ermöglicht diese Eigenschaft die Verwaltung von Verlaufdaten in diesem Accordion-Container. Wenn der Benutzer von einem untergeordneten Objekt zu einem anderen navigiert, merkt sich der Browser, welche untergeordneten Objekte angesteuert wurden. Der Benutzer kann dann die Zurück- und Weiter-Schaltflächen des Browsers benutzen, um sich durch den Navigationsverlauf durchzuklicken.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      Wenn „true“, ändert dieser Accordion-Container seine Größe automatisch entsprechend der Größe des untergeordneten Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, ändert dieser Accordion-Container seine Größe automatisch entsprechend der Größe des untergeordneten Objekts.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      Ein Verweis auf den derzeit sichtbaren untergeordneten Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3401
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier><apiTipTexts><apiTipText>Legt die untergeordnete Ansicht fest, die gerade angezeigt wird
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Ein Verweis auf den derzeit sichtbaren untergeordneten Container. Der Standardwert ist ein Verweis auf das erste untergeordnete Objekt. Wenn keine untergeordneten Objekte vorhanden sind, ist diese Eigenschaft <codeph>null</codeph>.
     
      <p><b>Hinweis:</b> Sie können diese Eigenschaft nur in einer ActionScript-Anweisung einstellen, nicht in MXML.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Die auf null basierende Indexposition des derzeit sichtbaren untergeordneten Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3402
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Gibt die Indexposition der untergeordneten Ansicht an, die gerade angezeigt wird
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Die auf null basierende Indexposition des derzeit sichtbaren untergeordneten Containers. Indexpositionen von untergeordneten Objekten bewegen sich im Bereich 0, 1, 2, ..., n - 1, wobei n die Anzahl untergeordneter Objekte ist. Der Standardwert ist 0 und entspricht dem ersten untergeordneten Objekt. Wenn keine untergeordneten Objekte vorhanden sind, ist diese Eigenschaft <codeph>-1</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ControlBar"><apiName>ControlBar</apiName><shortdesc>
  Mit dem ControlBar-Container können Sie Steuerelemente an den unteren Rand von Halo Panel- oder Halo TitleWindow-Containern platzieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ControlBar" replacement="none" since="4.0">
<description>
  Ab Flex 4 ist die ControlBar-Komponente nicht mehr erforderlich. Verwenden Sie die <codeph>controlBarContent</codeph>-Eigenschaft der Spark Panel-Klasse für das Festlegen der in den Steuerleistenbereich einzuschließenden Komponenten. Verwenden Sie die <codeph>controlBarLayout</codeph>-Eigenschaft der Spark Panel-Klasse für das Festlegen des Layouts des Steuerleistenbereichs. 
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ControlBar&gt;</code> tag inherits all the tag
  attributes but adds no additional attributes:</p>
 
  <pre>
  &lt;mx:ControlBar&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem ControlBar-Container können Sie Steuerelemente an den unteren Rand von Halo Panel- oder Halo TitleWindow-Containern platzieren. Das <codeph>&lt;mx:ControlBar></codeph>-Tag muss das letzte untergeordnete Tag des schließenden Tags für den Halo Panel- oder Halo TitleWindow-Container sein.
 
  <p><b>Hinweis:</b> Der Spark Panel-Container unterstützt den ControlBar-Container nicht. Modifizieren Sie die Skin des Spark Panel-Containers, um diese Funktionalität hinzuzufügen.</p>
 
  <p>Der ControlBar-Container ist ein Box-Objekt mit einem Hintergrund und Standardstileigenschaften.</p>
 
  <p>Ein ControlBar-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Füllbereich des Containers. Die Breite reicht aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten oder expliziten Breitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Füllbereich des Containers untergebracht werden können.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>10 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleControlBarExample.mxml"><swfblock conref="examples/SimpleControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.containers:ControlBar:ControlBar"><apiName>ControlBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:GridItem"><apiName>GridItem</apiName><shortdesc>
  Der GridItem-Container definiert eine Rasterzelle in einem GridRow-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridItem&gt;</code> tag must be a child of the 
  <code>&lt;GridRow&gt;</code> tag, which defines a grid row.
  The <code>&lt;mx:GridItem&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes.</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow&gt;
      &lt;mx:GridItem
        rowSpan="1"
        colSpan="1">
          <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der GridItem-Container definiert eine Rasterzelle in einem GridRow-Container. (Der GridRow-Container definiert hingegen eine Zeile in einem Grid-Container.) Der GridItem-Container kann eine beliebige Anzahl von untergeordneten Objekten enthalten, die wie in einem HBox-Container angeordnet sind. Wenn Sie das HBox-Layout nicht akzeptieren, erstellen Sie einen Container, beispielsweise einen VBox-Container, als untergeordnetes Objekt des GridItem-Steuerelements und setzen Sie andere Komponenten in diesen untergeordneten Container.
 
  <p>GridItem-Container haben die folgenden Merkmale für Standardgrößen:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Höhe jeder Zeile und jeder Zelle</entry>
           <entry>Die Standardhöhe oder explizite Höhe des größten Elements in der Zeile. Wenn ein GridItem-Container keine explizite Höhe hat, entspricht seine Standardhöhe der Standardhöhe oder der expliziten Höhe des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Breite jeder Spalte und jeder Zelle</entry>
           <entry>Die Standardbreite oder explizite Breite des größten Elements in der Spalte. Wenn ein GridItem-Container keine explizite Breite hat, entspricht seine Standardbreite der Standardbreite oder der expliziten Breite des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Lücke zwischen Zeilen und Spalten</entry>
           <entry>Bestimmt durch die horizontalGap- und verticalGap-Eigenschaften für die Grid-Klasse. Der Standardwert für beide Lücken ist 6 Pixel.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für die Werte oben, unten, links und rechts, für alle drei Containerklassen.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link></related-links><apiConstructor id="mx.containers:GridItem:GridItem"><apiName>GridItem</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:GridItem:colSpan:get"><apiName>colSpan</apiName><shortdesc>
      Anzahl der Spalten des Grid-Containers, über die sich die Zelle erstreckt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Anzahl der Spalten des Grid-Containers, über die sich die Zelle erstreckt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:GridItem:rowSpan:get"><apiName>rowSpan</apiName><shortdesc>
      Anzahl der Zeilen des Grid-Containers, über die sich die Zelle erstreckt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Anzahl der Zeilen des Grid-Containers, über die sich die Zelle erstreckt. Sie können eine Zelle nicht über die Anzahl der Zeilen im Raster hinaus erweitern.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Panel"><apiName>Panel</apiName><shortdesc>
  Ein Halo Panel-Container enthält eine Titelleiste, einen Titeltext, einen Rahmen und einen Inhaltsbereich für seine untergeordneten Objekte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Panel" replacement="spark.components.Panel" since="4.0">
	</Alternative><effects><effect event="resizeStart" name="resizeStartEffect" owner="mx.containers:Panel">
<description>
  Legt den Effekt fest, der ausgeführt werden soll, bevor ein Resize-Effekt startet. Um den Standard-Dissolve-Effekt zu deaktivieren, damit die untergeordneten Objekte sofort ausgeblendet werden, legen Sie die <codeph>resizeStartEffect</codeph>-Eigenschaft mit <codeph>„none“</codeph> fest.  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resizeEnd" name="resizeEndEffect" owner="mx.containers:Panel">
<description>
  Legt den Effekt fest, der ausgeführt werden soll, nachdem ein Resize-Effekt abgeschlossen wird. Um den Standard-Dissolve-Effekt zu deaktivieren, damit die untergeordneten Objekte sofort ausgeblendet werden, legen Sie die <codeph>resizeEndEffect</codeph>-Eigenschaft mit <codeph>„none“</codeph> fest.  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style inherit="no" name="titleStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Der Style-Deklarationsname für den Text in der Titelleiste. Der Standardwert ist <codeph>„windowStyles“</codeph> und der Titel erscheint daher in Fettdruck.
 
  </description>
<default>"windowStyles"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="titleBackgroundSkin" owner="mx.containers:Panel" playerVersion="Flash9" type="Class">
<description>
  Die Hintergrundskin für den Titel. Der Standardwert für das Halo-Design lautet <codeph>mx.skins.halo.TitleBackground</codeph>. Der Standardwert für das Spark-Design lautet <codeph>mx.core.UIComponent</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="statusStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Der Style-Deklarationsname für den Status in der Titelleiste.
 
  </description>
<default>"windowStatus"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Abstand des Schlagschattens. Negative Werte verschieben den Schatten über den Panel-Container.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="String">
<description>
  Richtung des Schlagschattens. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="roundedBottomCorners" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Flag zum Deaktivieren des Abrundens der beiden unteren Ecken des Containers. Wirkt sich auf die beiden oberen Ecken nicht aus, weil diese normalerweise rund sind. Um die oberen Ecken ohne Rundung festzulegen, stellen Sie <codeph>cornerRadius</codeph> auf 0.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der oberen Rahmenlinie des Containers und seinem Inhaltsbereich.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der unteren Rahmenlinie des Containers und seinem Inhaltsbereich.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Alphawerte für die Glanzlichtfüllung der Kopfleiste.
 
  </description>
<default>[0.3,0]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Höhe der Kopfleiste. Der Standardwert basiert auf dem Stil des Titeltexts.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Array von zwei Farben, die zum Zeichnen der Kopfleiste verwendet werden. Die erste Farbe ist die obere Farbe. Die zweite Farbe ist die untere Farbe. Die Standardwerte sind <codeph>null</codeph>, sodass der Hintergrund der Kopfleiste dieselbe Farbe hat wie der Panel-Hintergrund.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="footerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Array von zwei Farben, die für das Zeichnen des Hintergrunds der Fußleiste verwendet werden (Bereich für den ControlBar-Container). Die erste Farbe ist die obere Farbe. Die zweite Farbe ist die untere Farbe. Die Standardwerte sind <codeph>null</codeph>, sodass der Hintergrund der Steuerleiste dieselbe Farbe hat wie der Panel-Hintergrund.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Eine boolesche Eigenschaft, die die Sichtbarkeit des Schlagschattens des Panel-Containers steuert.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Radius der Ecken des Fensterrahmens. Der Standardwert für das Halo-Design beträgt <codeph>4</codeph>. Der Standardwert für das Spark-Design beträgt <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="controlBarStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration, die die Stile für Substeuerelemente eines untergeordneten Objekts der Steuerleiste festlegt.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessTop" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke der oberen Rahmenlinie des Panel-Containers.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessRight" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke der rechten Rahmenlinie des Panel-Containers.
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessLeft" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke der linken Rahmenlinie des Panel-Containers.
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessBottom" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke der unteren Rahmenlinie des Panel-Steuerelements. Wenn dieses Element nicht festgelegt ist und das Panel-Steuerelement ein ControlBar-Steuerelement enthält, entspricht die Stärke der unteren Rahmenlinie dem oberen Rand des Panel-Containers, sonst entspricht die Stärke der unteren Rahmenlinie der Stärke der linken Rahmenlinie.
 
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Alphawert der Titelleiste, der Steuerleiste und der Seiten des Bedienfelds. Der Standardwert für das Halo-Design beträgt <codeph>0.4</codeph>. Der Standardwert für das Spark-Design beträgt <codeph>0.5</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  In Millisekunden angegebene Dauer des modalen Transparenzeffekts, der ausgelöst wird, wenn ein modales Fenster geöffnet oder geschlossen wird.
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.containers:Panel" playerVersion="Flash9" type="uint">
<description>
  Farbe der modalen Überlagerungsebene. Dieser Stil wird in Verbindung mit dem <codeph>modalTransparency</codeph>-Stil verwendet, um die Farbgebung zu bestimmen, die für die Anwendung angewendet werden soll, wenn ein modales Fenster offen ist.
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Der Weichzeichnungseffekt, der auf die Anwendung angewendet wird, wenn ein modales Fenster offen ist. Ein Blur-Effekt bewirkt ein Weichzeichnen der Details eines Bilds. 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Die Modalität von Komponenten, die vom PopUp Manager aufgerufen werden, wird simuliert, indem eine große, durchscheinende Überlagerung unter die Komponente gelegt wird. Aufgrund der Art, wie durchscheinende Objekte gerendert werden, ist möglicherweise eine leichte Dämpfung der Objekte unter der Überlagerung zu erkennen. Die effektive Transparenz kann eingestellt werden, indem Sie den <codeph>modalTransparency</codeph>-Wert von 0.0 (voll transparent) auf 1.0 (vollständig undurchsichtig) einstellen. Sie können auch die Farbe der Überlagerung einstellen, indem Sie den <codeph>modalTransparencyColor</codeph>-Stil ändern.
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Vertikale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Der Standardwert ist <codeph>„top“</codeph>, aber manche Container wie ButtonBar, ControlBar, LinkBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Der Standardwert ist <codeph>„links“</codeph>, aber manche Container wie ButtonBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Panel
   <strong>Properties</strong>
   layout="vertical|horizontal|absolute"
   status=""
   title=""
   titleIcon="null"
  
   <strong>Styles</strong>
   borderAlpha="0.4"
   borderThicknessBottom="NaN"
   borderThicknessLeft="10"
   borderThicknessRight="10"
   borderThicknessTop="2"
   controlBarStyleName="null"
   cornerRadius="4"
   dropShadowEnabled="true|false"
   footerColors="null"
   headerColors="null"
   headerHeight="<i>Based on style of title</i>"
   highlightAlphas="[0.3,0]"
   horizontalAlign="left|center|right"
   horizontalGap="8"
   modalTransparency="0.5"
   modalTransparencyBlur="3"
   modalTransparencyColor="#DDDDDD"
   modalTransparencyDuration="100"
   paddingBottom="0"
   paddingTop="0"
   roundedBottomCorners="false|true"
   shadowDirection="center|left|right"
   shadowDistance="2"
   statusStyleName="windowStatus"
   titleBackgroundSkin="TitleBackground"
   titleStyleName="windowStyles"
   verticalAlign="top|middle|bottom"
   verticalGap="6"
  
   <strong>Effects</strong>
   resizeEndEffect="Dissolve"
   resizeStartEffect="Dissolve"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Panel&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein Halo Panel-Container enthält eine Titelleiste, einen Titeltext, einen Rahmen und einen Inhaltsbereich für seine untergeordneten Objekte. Im Allgemeinen verwenden Sie Panel-Container, um oberste Anwendungsmodule einzuschließen. In einen Panel-Container können Sie beispielsweise einen Einkaufswagen setzen.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich den Spark Panel-Container anstelle des Halo Panel-Containers zu verwenden.</p>
 
  <p>Der Panel-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe ist groß genug, um alle untergeordneten Objekte mit ihrer Standardhöhe aufzunehmen, plus vertikale Lücken zwischen den untergeordneten Objekten, obere und untere Auffüllung, obere und untere Rahmenlinien und Titelleiste. Die Breite ist entweder der Wert der Standardbreite des breitesten untergeordneten Objekts plus linke und rechte Auffüllung des Containers, oder die Breite des Titeltexts, je nachdem, welcher Wert größer ist, plus Rahmen.</entry>
        </row><row>
           <entry>Auffüllen</entry>
           <entry>4 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimplePanelExample.mxml"><swfblock conref="examples/SimplePanelExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Panel.xml"><linktext>spark.components.Panel</linktext></link><link href="mx.containers.xml#ControlBar"><linktext>mx.containers.ControlBar</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Panel:protected:getHeaderHeight"><apiName>getHeaderHeight</apiName><shortdesc>
      Gibt die Höhe der Kopfleiste zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Höhe der Kopfleiste in Pixeln.     
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Höhe der Kopfleiste zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standard-Minimal- und Maximalgrößen des Panel-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standard-Minimal- und Maximalgrößen des Panel-Containers. Weitere Hinweise zur <codeph>measure()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode.
     
      <p>Die <codeph>measure()</codeph>-Methode ruft erst die <codeph>VBox.measure()</codeph>-Methode auf und gewährleistet dann, dass die <codeph>measuredWidth</codeph>- und <codeph>measuredMinWidth</codeph>-Eigenschaften breit genug sind, um den Titel und das ControlBar-Objekt anzuzeigen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Panel:protected:startDragging"><apiName>startDragging</apiName><shortdesc>
      Wird aufgerufen, wenn der Benutzer mit dem Ziehen eines Panel-Containers beginnt, der vom PopUpManager aufgerufen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn der Benutzer mit dem Ziehen eines Panel-Containers beginnt, der vom PopUpManager aufgerufen wurde.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:stopDragging"><apiName>stopDragging</apiName><shortdesc>
      Wird aufgerufen, wenn der Benutzer das Ziehen eines Panel-Containers beendet, der vom PopUpManager aufgerufen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn der Benutzer das Ziehen eines Panel-Containers beendet, der vom PopUpManager aufgerufen wurde.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Panel:protected:controlBar"><apiName>controlBar</apiName><shortdesc>
      Ggf. ein Verweis auf die Steuerleiste dieses Panel-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Ggf. ein Verweis auf die Steuerleiste dieses Panel-Containers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:statusTextField"><apiName>statusTextField</apiName><shortdesc>
      Das UITextField-Substeuerelement, das den Status anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Das UITextField-Substeuerelement, das den Status anzeigt. Das Statusfeld ist ein untergeordnetes Objekt des <codeph>titleBar</codeph>-Substeuerelements.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:titleBar"><apiName>titleBar</apiName><shortdesc>
      Das TitleBar-Substeuerelement, das die Titelleiste dieses Panel-Containers anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:UIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Das TitleBar-Substeuerelement, das die Titelleiste dieses Panel-Containers anzeigt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:titleTextField"><apiName>titleTextField</apiName><shortdesc>
      Das UITextField-Substeuerelement, das den Titel anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Das UITextField-Substeuerelement, das den Titel anzeigt. Das Titelfeld ist ein untergeordnetes Objekt des <codeph>titleBar</codeph>-Substeuerelements.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:closeButtonStyleFilters:get"><apiName>closeButtonStyleFilters</apiName><shortdesc>
      Die Gruppen von Stilen, die vom Panel-Container an die Schaltfläche „Schließen“ übergeben werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die Gruppen von Stilen, die vom Panel-Container an die Schaltfläche „Schließen“ übergeben werden.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      Die Modul-Factory, die den Schriftartkontext für diese Komponente bereitstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      Die Modul-Factory, die den Schriftartkontext für diese Komponente bereitstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:layout:get"><apiName>layout</apiName><shortdesc>
      Legt den Layoutmechanismus für diesen Container fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt den Layoutmechanismus für diesen Container fest. Panel-Container können die Platzierung <codeph>"vertical"</codeph>, <codeph>"horizontal"</codeph> oder <codeph>"absolute"</codeph> verwenden. Mit der vertikalen Platzierung werden die untergeordneten Komponenten vertikal vom oberen Rand des Containers bis zu seinem unteren Rand in der festgelegten Reihenfolge angeordnet. Mit der horizontalen Platzierung werden die untergeordneten Komponenten horizontal vom linken Rand des Containers bis zu seinem rechten Rand in der festgelegten Reihenfolge angeordnet. Bei der absoluten Platzierung wird kein automatisches Layout verwendet und Sie legen explizit den Standort jeder untergeordneten Komponente fest. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:status:get"><apiName>status</apiName><shortdesc>
      Text im Statusbereich der Titelleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="statusChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Text im Statusbereich der Titelleiste.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:titleIcon:get"><apiName>titleIcon</apiName><shortdesc>
      Das in der Titelleiste angezeigte Symbol.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleIconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das in der Titelleiste angezeigte Symbol.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:title:get"><apiName>title</apiName><shortdesc>
      Titel oder Beschriftung in der Titelleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3991
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue><apiTipTexts><apiTipText>Ruft den Titel oder die Beschriftung ab, die im Titel angezeigt werden, oder legt sie fest
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Titel oder Beschriftung in der Titelleiste.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Tile"><apiName>Tile</apiName><shortdesc>
  Ein Halo Tile-Container ordnet seine untergeordneten Objekte in einem Raster mit gleich großen Zellen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Tile" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Tile" replacement="spark.components.TileGroup" since="4.0">
<description>
  Die layoutspezifischen Container-Komponenten in Flex 3 wurden durch eine allgemeinere Group-Komponente mit einem generischen Layout ersetzt. Um ein ähnliches Verhalten von der neuen Group-Komponente zu erhalten, setzen Sie die <codeph>layout</codeph>-Eigenschaft auf <codeph>TileLayout</codeph> oder verwenden Sie den TileGroup-Container.
 </description>
	</Alternative><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung.
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  Vertikale Ausrichtung jedes untergeordneten Objekts in seiner Tile-Zelle. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Wenn der Wert <codeph>„top“</codeph> lautet, befindet sich der obere Rand jedes untergeordneten Objekts am oberen Rand seiner Zelle. Wenn der Wert <codeph>„middle“</codeph> lautet, wird jedes untergeordnete Objekt vertikal in der Zelle zentriert. Wenn der Wert <codeph>„bottom“</codeph> lautet, befindet sich der untere Rand jedes untergeordneten Objekts am unteren Rand seiner Zelle.
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der oberen Rahmenlinie des Containers und seinem Inhaltsbereich.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der unteren Rahmenlinie des Containers und seinem Inhaltsbereich.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung.
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung jedes untergeordneten Objekts in seiner Tile-Zelle. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Wenn der Wert <codeph>„left“</codeph> lautet, befindet sich der linke Rand jedes untergeordneten Objekts am linken Rand seiner Zelle. Wenn der Wert <codeph>„center“</codeph> lautet, wird jedes untergeordnete Objekt horizontal in der Zelle zentriert. Wenn der Wert <codeph>„rechts“</codeph> lautet, befindet sich der rechte Rand jedes untergeordneten Objekts am rechten Rand seiner Zelle.
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Tile&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Tile
    <b>Properties</b>
    direction="horizontal|vertical"
    tileHeight="NaN"
    tileWidth="NaN"
 
    <b>Sttles</b>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
      ...
      <i>child tags</i>
     ...
  &lt;/mx:Tile&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein Halo Tile-Container ordnet seine untergeordneten Objekte in einem Raster mit gleich großen Zellen an. Sie können die Größe der Zelle festlegen, indem Sie die <codeph>tileWidth</codeph>- und <codeph>tileHeight</codeph>-Eigenschaften verwenden, oder Sie können es dem Tile-Container überlassen, die Zellengröße basierend auf dem größten untergeordneten Objekt zu bestimmen. Die <codeph>direction</codeph>-Eigenschaft eines Tile-Containers bestimmt, ob seine Zellen horizontal oder vertikal angeordnet werden, wobei immer in der linken oberen Ecke des Tile-Containers begonnen wird.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich die Spark-Container mit TileLayout anstelle des Halo Tile-Containers zu verwenden.</p>
 
  <p>Ein Tile-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Richtung</entry>
           <entry>horizontal</entry>
        </row><row>
           <entry>Standardgröße aller Zellen</entry>
           <entry>Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts. Breite ist die Standardbreite oder explizite Breite des breitesten untergeordneten Objekts. Alle Zellen haben dieselbe Standardgröße.</entry>
        </row><row>
           <entry>Standardgröße des Tile-Containers</entry>
           <entry>Flex berechnet die Quadratwurzel der Anzahl von untergeordneten Objekten und rundet auf die nächste Ganzzahl auf. Beispiel: Wenn 26 untergeordnete Objekte vorhanden sind, ist die Quadratwurzel 5,1 und daher erfolgt ein Aufrunden auf 6. Flex ordnet dann den Tile-Container mit einem Raster von 6 mal 6. Die Standardhöhe des Tile-Containers ist gleich (Tile-Zellenstandardhöhe) <b>x</b> (aufgerundete Quadratwurzel aus der Anzahl der untergeordneten Objekte), plus eventuelle Lücken zwischen den untergeordneten Objekten plus eventuelle Füllpixel. Die Standardbreite ist gleich (Tile-Zellenstandardbreite) <b>x</b> (aufgerundete Quadratwurzel aus der Anzahl der untergeordneten Objekte), plus eventuelle Lücken zwischen den untergeordneten Objekten plus eventuelle Füllpixel.</entry>
        </row><row>
           <entry>Mindestgröße des Tile-Containers</entry>
           <entry>Die Standardgröße einer einzelnen Zelle. Flex weist immer genügend Speicherplatz zu, um mindestens eine Zelle anzuzeigen.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileLayoutExample.mxml"><swfblock conref="examples/TileLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Tile:Tile"><apiName>Tile</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Tile:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standard-Minimal- und Maximalgrößen des Tile-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standard-Minimal- und Maximalgrößen des Tile-Containers. Weitere Hinweise zur <codeph>measure()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode.
      
      <p>Diese Methode berechnet zuerst die Größe jeder einzelnen Zelle im Tile-Container. In den Abschnitten über die <codeph>tileWidth</codeph>- und <codeph>tileHeight</codeph>-Eigenschaften finden Sie eine Erklärung, wie diese Zellengröße bestimmt wird.</p>
      
     <p>Die gemessene Größe eines Tile-Containers mit untergeordneten Objekten reicht aus, um die Zellen in einem n-mal-n-Raster mit einer gleichen Anzahl von Zeilen und Spalten anzuzeigen, plus Raum für die Füllpixel und die Rahmenlinien des Tile-Containers. Es gibt aber Sonderfälle wie in den nachfolgenden Beispielen:</p>
     
      <ul>
      <li>Wenn für einen horizontalen Tile-Container eine explizite Breite eingestellt ist, legt dieser Wert fest, wie viele Zellen horizontal darin untergebracht werden können. Die erforderliche Höhe, damit alle untergeordneten Objekte hineinpassen, wird berechnet. Daraus ergibt sich ein M-mal-N-Raster.</li>
     
      <li>Wenn für einen vertikalen Tile-Container eine explizite Höhe eingestellt ist, legt dieser Wert fest, wie viele Zellen vertikal darin untergebracht werden können. Die erforderliche Breite, damit alle untergeordneten Objekte untergebracht werden können, wird berechnet. Daraus ergibt sich ein M-mal-N-Raster.</li>
      </ul>
     
      <p>Wenn keine untergeordneten Objekte vorhanden sind, ist die gemessene Größe gerade groß genug, um die Füllung und den Rahmen unterzubringen.</p>
      
      <p>Die gemessene Mindestgröße eines Tile-Containers mit untergeordneten Objekten ist gerade groß genug für eine einzelne Tile-Zelle, plus Füllung und Rahmen. Wenn keine untergeordneten Objekte vorhanden sind, ist die gemessene Mindestgröße gerade groß genug, um die Füllung und den Rahmen unterzubringen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Tile:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Legt die Positionen und Größen der untergeordneten Objekte dieses Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Positionen und Größen der untergeordneten Objekte dieses Containers fest. Weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode.
      
      <p>Diese Methode platziert die untergeordneten Objekte im Schachbrettmuster mit gleich großen Zellen im Inhaltsbereich des Tile-Containers (also im Bereich innerhalb der Auffüllung). In den Abschnitten über die <codeph>tileWidth</codeph>- und <codeph>tileHeight</codeph>-Eigenschaften finden Sie eine Erklärung, wie diese Zellengröße ermittelt wird.</p>
      
      <p>Die Trennung zwischen den Zellen wird durch die <codeph>horizontalGap</codeph>- und <codeph>verticalGap</codeph>-Stile festgelegt. Die Platzierung der einzelnen untergeordneten Objekte in ihrer Zelle wird durch die <codeph>horizontalAlign</codeph>- und <codeph>verticalAlign</codeph>-Stile festgelegt.</p>
      
      <p>Der Fluss der untergeordneten Objekte wird durch die <codeph>direction</codeph>-Eigenschaft festgelegt. Die erste Zelle wird immer links oben in den Inhaltsbereich gesetzt. Wenn <codeph>direction</codeph> auf <codeph>„horizontal“</codeph> eingestellt ist, werden die Zellen von links nach rechts in der obersten Zeile angeordnet, dann von links nach rechts in der zweiten Zeile, und so weiter. Wenn <codeph>direction</codeph> auf <codeph>„vertikal“</codeph> eingestellt ist, werden die Zellen von oben nach unten in der äußerst linken Spalte angeordnet, dann von oben nach unten in der zweiten Spalte, und so weiter.</p>
      
      <p>Wenn ein untergeordnetes Objekt einen <codeph>percentWidth</codeph>- oder <codeph>percentHeight</codeph>-Wert hat, wird es dieser Richtung neu dimensioniert, um den festgelegten Prozentsatz seiner Zelle auszufüllen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:Tile:direction:get"><apiName>direction</apiName><shortdesc>
      Bestimmt, wie untergeordnete Objekte in den Container platziert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt, wie untergeordnete Objekte in den Container platziert werden. Mögliche MXML-Werte sind <codeph>„horizontal“</codeph> und <codeph>„vertical“</codeph>. In ActionScript können Sie die Richtung mit den Werten TileDirection.HORIZONTAL oder TileDirection.VERTICAL einrichten. Der Standardwert ist <codeph>„horizontal“</codeph>. (Wenn der Container ein Legend-Container und damit eine Unterklasse von Tile ist, lautet der Standardwert <codeph>„vertical“</codeph>.)
     
      <p>Das erste untergeordnete Objekt wird immer in die linke obere Ecke des Tile-Containers gesetzt. Wenn <codeph>direction</codeph> auf <codeph>„horizontal“</codeph> eingestellt ist, werden die untergeordneten Objekte von links nach rechts in der obersten Zeile angeordnet, dann von links nach rechts in der zweiten Zeile, und so weiter. Wenn <codeph>direction</codeph> auf „vertikal“ eingestellt ist, werden die untergeordneten Objekte von oben nach unten in der äußerst linken Spalte angeordnet, dann von oben nach unten in der zweiten Spalte, und so weiter.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#TileDirection"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:Tile:tileHeight:get"><apiName>tileHeight</apiName><shortdesc>
      Die Höhe jeder Tile-Zelle in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Höhe jeder Tile-Zelle in Pixeln. Wenn diese Eigenschaft <codeph>NaN</codeph> lautet, wird der Standardwert für die Höhe jeder Zelle durch die Höhe des größten untergeordneten Objekts bestimmt. Wenn Sie diese Eigenschaft festlegen, überschreibt der festgelegte Wert diese Berechnung.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Tile:tileWidth:get"><apiName>tileWidth</apiName><shortdesc>
      Die Breite jeder Tile-Zelle in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Breite jeder Tile-Zelle in Pixeln. Wenn diese Eigenschaft <codeph>NaN</codeph> lautet, wird die Breite jeder Zelle durch die Breite des größten untergeordneten Objekts bestimmt. Wenn Sie diese Eigenschaft festlegen, überschreibt der festgelegte Wert diese Berechnung.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
  Der VDividedBox-Container ordnet seine untergeordneten Objekte vertikal auf dieselbe Weise an wie der VBox-Container, fügt aber eine ziehbare Trennlinie in die Lücke zwischen jedem untergeordneten Objekt ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der VDividedBox-Container ordnet seine untergeordneten Objekte vertikal auf dieselbe Weise an wie der VBox-Container, fügt aber eine ziehbare Trennlinie in die Lücke zwischen jedem untergeordneten Objekt ein. Ein Benutzer kann eine Trennlinie ziehen, um den Bereich neu zu dimensionieren, der den untergeordneten Objekten zugewiesen wird. Das <codeph>&lt;mx:VDividedBox/></codeph>-Tag entspricht dem <codeph>&lt;mx:DividedBox direction=„vertical“/></codeph>-Tag.
  
  <p>Ein VDividedBox-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe reicht aus, damit alle untergeordneten Objekte mit ihren Standardhöhenwerten oder expliziten Höhenwerten plus vertikale Lücken zwischen den untergeordneten Objekten plus oberer und unterer Auffüllbereich des Containers untergebracht werden können. Die Breite ist die Standardbreite oder explizite Breite des breitesten untergeordneten Objekts plus Auffüllbereich des Containers auf der linken und rechten Seite.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row><row>
           <entry>Standardlückengröße</entry>
           <entry>10 Pixel für die horizontalen und vertikalen Lücken.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VDividedBoxExample.mxml"><swfblock conref="examples/VDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:VDividedBox:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:BoxDirection"><apiName>BoxDirection</apiName><shortdesc>
  Die BoxDirection-Klasse legt Konstantenwerte für die „direction“-Eigenschaft des Box-Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die BoxDirection-Klasse legt Konstantenwerte für die <codeph>direction</codeph>-Eigenschaft des Box-Containers fest.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link></related-links><apiValue id="mx.containers:BoxDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Legt fest, dass die untergeordneten Objekte des Box-Containers horizontal angeordnet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Legt fest, dass die untergeordneten Objekte des Box-Containers horizontal angeordnet werden.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:BoxDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Legt fest, dass die untergeordneten Objekte des Box-Containers vertikal angeordnet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Legt fest, dass die untergeordneten Objekte des Box-Containers vertikal angeordnet werden.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Form"><apiName>Form</apiName><shortdesc>
  Mit dem Form-Container können Sie das Layout eines Formulars steuern, Formularfelder als erforderlich oder optional markieren, Fehlermeldungen verarbeiten und Ihre Formulardaten an das Flex-Datenmodell binden, um die Prüfung und Überprüfung von Daten vorzunehmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der oberen Rahmenlinie des Containers und dem oberen Rand seines Inhaltsbereichs. Der Standardwert ist 16.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der unteren Rahmenlinie des Containers und dem unteren Rand seines Inhaltsbereichs. Der Standardwert ist 16.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Breite der Beschriftungen im Formular. Der Standardwert ist die Länge der längsten Beschriftung im Formular.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der Beschriftung und den untergeordneten Objekten. Der Standardwert ist 14.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Form
    <strong>Styles</strong>
    horizontalGap="8"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    paddingBottom="16"
    paddingTop="16"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem Form-Container können Sie das Layout eines Formulars steuern, Formularfelder als erforderlich oder optional markieren, Fehlermeldungen verarbeiten und Ihre Formulardaten an das Flex-Datenmodell binden, um die Prüfung und Überprüfung von Daten vorzunehmen. Sie können dabei auch Stylesheets verwenden, um die Darstellung Ihrer Formulare zu konfigurieren.
 
  <p>Die folgende Tabelle beschreibt die Komponenten, die Sie für die Erstellung von Formularen in Flex verwenden:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="3"><thead><row><entry>Komponente</entry><entry>Tag</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;mx:Form></codeph></entry>
           <entry>Definiert den Container für das gesamte Formular, einschließlich des allgemeinen Formularlayouts. Verwenden Sie das FormHeading-Steuerelement und den FormItem-Container, um den Inhalt zu definieren. Sie können auch andere Arten von Komponenten in einen Form-Container einfügen.</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;mx:FormHeading></codeph></entry>
           <entry>Definiert eine Überschrift in Ihrem Formular. Sie können mehrere FormHeading-Container in ein Form-Steuerelement aufnehmen.</entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;mx:FormItem></codeph></entry>
           <entry>Enthält mindestens ein horizontal oder vertikal angeordnetes untergeordnetes Formularobjekt. Untergeordnete Objekte können Steuerelemente oder andere Container sein. Ein einzelner Form-Container kann mehrere FormItem-Container enthalten.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:Form:Form"><apiName>Form</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Form:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des Form-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des Form-Containers. Weitere Hinweise zur <codeph>measure</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode.
      <p>Die <codeph>Form.measure()</codeph>-Methode legt die <codeph>measuredWidth</codeph>-Eigenschaft mit der Breite des größten untergeordneten Objekts fest, plus die Werte der Stileigenschaften <codeph>paddingLeft</codeph> und <codeph>paddingRight</codeph> und die Breite des Rahmens.</p>
     
      <p>Die <codeph>measuredHeight</codeph>-Eigenschaft wird mit der Summe der <codeph>measuredHeight</codeph>-Werte aller untergeordneten Objekte festgelegt, plus ein <codeph>verticalGap</codeph>-Zwischenraum zwischen jedem untergeordneten Objekt. Die Stileigenschaften <codeph>paddingTop</codeph> und <codeph>paddingBottom</codeph> sowie die Höhe des Rahmens werden ebenfalls hinzugefügt.</p>
     
      <p>Die <codeph>measuredMinWidth</codeph>-Eigenschaft wird auf die größte Mindestbreite der untergeordneten Objekte eingestellt. Wenn das untergeordnete Objekt einen Prozentwert für <codeph>width</codeph> hat, wird die <codeph>minWidth</codeph>-Eigenschaft verwendet, sonst die <codeph>measuredWidth</codeph>-Eigenschaft. Die Werte der <codeph>paddingLeft</codeph>- und <codeph>paddingRight</codeph>-Stileigenschaften und die Breite des Rahmens werden ebenfalls hinzugefügt.</p>
     
      <p>Die <codeph>measuredMinHeight</codeph>-Eigenschaft wird auf denselben Wert eingestellt wie die <codeph>measuredHeight</codeph>-Eigenschaft.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Form:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden. Weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode. 
     
      <p>Die <codeph>Form.updateDisplayList()</codeph>-Methode platziert die untergeordneten Objekte in einer vertikalen Spalte, mit einem nach der <codeph>verticalGap</codeph>-Stileigenschaft festgelegten Zwischenraum. Die Stileigenschaften <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph> und <codeph>paddingBottom</codeph> werden angewendet.</p>
     
      <p>Wenn ein untergeordnetes Objekt eine Prozentwertbreite hat, wird sie horizontal bis zum festgelegten Prozentsatz des Form-Containers gedehnt. Sonst wird sie mit ihrer <codeph>measuredWidth</codeph>-Eigenschaft eingestellt. Jedes untergeordnete Objekt wird auf seine <codeph>measuredHeight</codeph>-Eigenschaft eingestellt.</p>
     
      <p>Diese Methode ruft zunächst und vor allem Anderen die <codeph>super.updateDisplayList()</codeph>-Methode auf.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Form:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
      Die Maximalbreite der Beschriftungen in den FormItems-Containern dieses Form-Containers in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="updateComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Maximalbreite der Beschriftungen in den FormItems-Containern dieses Form-Containers in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ViewStack"><apiName>ViewStack</apiName><shortdesc>
  Ein MX ViewStack-Navigatorcontainer besteht aus einer Sammlung von untergeordneten Containern, die übereinandergestapelt sind, wobei immer nur ein untergeordneter Container sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der oberen Rahmenlinie des Containers und seinem Inhaltsbereich. Der Standardwert ist 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der unteren Rahmenlinie des Containers und seinem Inhaltsbereich. Der Standardwert ist 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ViewStack&gt;</code> tag inherits the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ViewStack
    <b>Properties</b>
    historyManagementEnabled="false|true"
    resizeToContent="false|true"
    selectedIndex="0"
    
    <b>Styles</b>
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalGap="6"
    
    <b>Events</b>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:ViewStack&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein MX ViewStack-Navigatorcontainer besteht aus einer Sammlung von untergeordneten Containern, die übereinandergestapelt sind, wobei immer nur ein untergeordneter Container sichtbar ist. Wenn ein anderer untergeordneter Container ausgewählt wird, scheint er den alten zu ersetzen, weil er an derselben Stelle erscheint. Der alte Container existiert aber immer noch. Er ist nur unsichtbar.
 
  <p><b>Hinweis:</b> Die direkt untergeordneten Elemente von MX-Navigatorcontainern müssen entweder MX-Layout- oder MX-Navigatorcontainer sein oder aber Spark-NavigatorContent-Container. Innerhalb eines Navigators können Sie nur den Spark-NavigatorContent-Container direkt verschachteln, nicht jedoch sonstige Steuerelemente oder Spark-Container. Es muss sich um untergeordnete Elemente eines untergeordneten MX-Containers handeln.</p>
 
  <p>Ein ViewStack-Container bietet keine Benutzeroberfläche für die Auswahl an, welcher untergeordnete Container gerade sichtbar ist. In der Regel legen Sie dies mit der <codeph>selectedIndex</codeph>- oder <codeph>selectedChild</codeph>-Eigenschaft in ActionScript als Reaktion auf eine Benutzereingabe fest. Für die Bereitstellung einer Navigationsschnittstelle können Sie auch einem ViewStack-Container ein MX LinkBar-, TabBar-, ButtonBar- oder ToggleButtonBar-Steuerelement oder ein Spark ButtonBar-Steuerelement zuordnen. Dazu legen Sie den ViewStack-Container als Wert der <codeph>dataProvider</codeph>-Eigenschaft des LinkBar-, TabBar- oder ToggleButtonBar-Containers fest.</p>
 
  <p>Sie können entscheiden, einen komplexeren Navigatorcontainer als den ViewStack-Container zu verwenden, wie beispielsweise einen TabNavigator-Container oder einen Accordion-Container. Diese Container haben nicht nur eine Sammlung von untergeordneten Containern, sondern auch eigene Steuerelemente für die Navigation des Benutzers zwischen den untergeordneten Containern.</p>
 
  <p>Wenn Sie den aktuell sichtbaren untergeordneten Container ändern, können Sie die <codeph>hideEffect</codeph>-Eigenschaft des auszublendenden Containers und die <codeph>showEffect</codeph>-Eigenschaft des einzublendenden untergeordneten Containers verwenden, um einen Effekt auf die untergeordneten Container anzuwenden. Der ViewStack-Container wartet den Abschluss des <codeph>hideEffect</codeph>-Vorgangs des auszublendenden untergeordneten Containers ab und blendet erst dann den neuen untergeordneten Container ein. Sie können einen laufenden Effekt abbrechen, indem Sie die <codeph>selectedIndex</codeph>-Eigenschaft des ViewStack-Containers ändern, während ein Effekt läuft.</p>
 
  <p>Der ViewStack-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Breite und Höhe des ursprünglich aktiven untergeordneten Objekts.</entry>
        </row><row>
           <entry>Regeln für die Größenänderung von Containern</entry>
           <entry>Standardmäßig wird die Größe der ViewStack-Containers nur einmal festgelegt, um sie an die Größe des ersten untergeordneten Containers anzupassen. Die Größe ändert sich nicht, wenn Sie zu anderen untergeordneten Objekten navigieren. Um eine Größenänderung eines ViewStack-Containers zu erzwingen, wenn Sie zu einem anderen untergeordneten Container navigieren, müssen Sie die resizeToContent-Eigenschaft auf „true“ setzen.</entry>
        </row><row>
           <entry>Regeln für die Größenanpassung von untergeordneten Objekten</entry>
           <entry>Die Größe der untergeordneten Objekte ist ihre Standardgröße. Wenn das untergeordnete Objekt größer ist als der ViewStack-Container, wird es abgeschnitten. Wenn das untergeordnete Objekt kleiner ist als der ViewStack-Container, wird es in der linken oberen Ecke des ViewStack-Container angefügt.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewStackExample.mxml"><swfblock conref="examples/ViewStackExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="" invalidHref="spark.components.ButtonBar.xml"><linktext>spark.components.ButtonBar</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><adobeApiEvent id="mx.containers:ViewStack_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der ausgewählte untergeordnete Container ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der ausgewählte untergeordnete Container ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:ViewStack:ViewStack"><apiName>ViewStack</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:ViewStack:protected:commitSelectedIndex"><apiName>commitSelectedIndex</apiName><shortdesc>
      Übernimmt die ausgewählte Indexposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Übernimmt die ausgewählte Indexposition. Diese Funktion wird während der Phase der Übernahme der Indexposition aufgerufen, wenn die Eigenschaft selectedIndex (oder selectedItem) geändert wurde.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Status dieses Objekts zum Laden. Der Wert ist null, wenn der ursprüngliche Status der Anwendung geladen wird.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte des ViewStack-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte des ViewStack-Containers. Weitere Hinweise zur <codeph>measure()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode.
     
      <p>Die Standardgröße eines ViewStack-Containers ist die Standardgröße seines gerade ausgewählten untergeordneten Containers zuzüglich Auffüllung und Rahmen. Wenn der ViewStack-Container keine untergeordneten Container hat, ist seine Standardgröße gerade groß genug, um die Auffüllung und den Rahmen unterzubringen.</p>
     
      <p>Die Mindestgröße eines ViewStack-Containers ist die Mindestgröße seines gerade ausgewählten untergeordneten Containers zuzüglich Auffüllung und Rahmen. Wenn der ViewStack-Container keine untergeordneten Container hat, ist seine Mindestgröße gerade groß genug, um die Auffüllung und Rahmen unterzubringen.</p>
     
      <p>Diese Methode ändert die Maximalgröße eines ViewStack-Containers nicht - sie bleibt ohne Grenzen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:ViewStack:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Der Status dieses Objekts.
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden. Weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode finden Sie im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode.
     
      <p>Es ist immer nur eines der untergeordneten Objekte sichtbar und daher platziert und dimensioniert ein ViewStack-Container nur dieses untergeordnete Objekt.</p>
     
      <p>Das ausgewählte untergeordnete Objekt ist in der linken oberen Ecke des ViewStack-Containers platziert und enthält genügend Raum für die Auffüllung und Rahmen des ViewStack-Containers. </p>
     
      <p>Wenn das ausgewählte untergeordnete Objekt einen Prozentsatz für <codeph>width</codeph> oder <codeph>height</codeph> hat, wird es in der Richtung neu dimensioniert, um den angegebenen Prozentsatz des Inhaltsbereichs des ViewStack-Containers (also der Bereich einschließlich des Ausfüllbereichs) auszufüllen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:ViewStack:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Die Höhe des Bereichs, in dem Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe des Bereichs, in dem Inhalt angezeigt wird, in Pixeln. Sie können diese Abrufmethode überschreiben, wenn Ihr Inhalt nicht den gesamten Bereich des ViewStack-Containers ausfüllt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Die Breite des Bereichs, in dem Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite des Bereichs, in dem Inhalt angezeigt wird, in Pixeln. Sie können diese Abrufmethode überschreiben, wenn Ihr Inhalt nicht den gesamten Bereich des ViewStack-Containers ausfüllt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentX:get"><apiName>contentX</apiName><shortdesc>
      Die x-Koordinate des Bereichs des ViewStack-Containers, in dem der Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die x-Koordinate des Bereichs des ViewStack-Containers, in dem der Inhalt angezeigt wird, in Pixeln. Der Standardwert ist gleich dem Wert der <codeph>paddingLeft</codeph>-Stileigenschaft, die den Standardwert 0 hat. Überschreiben Sie die <codeph>get()</codeph>-Methode, wenn Sie nicht möchten, dass Ihr Inhalt an der Layoutposition x = 0 beginnt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentY:get"><apiName>contentY</apiName><shortdesc>
      Die y-Koordinate des Bereichs des ViewStack-Containers, in dem der Inhalt angezeigt wird, in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die y-Koordinate des Bereichs des ViewStack-Containers, in dem der Inhalt angezeigt wird, in Pixeln. Der Standardwert ist gleich dem Wert der <codeph>paddingTop</codeph>-Stileigenschaft, die den Standardwert 0 hat. Überschreiben Sie die <codeph>get()</codeph>-Methode, wenn Sie nicht möchten, dass Ihr Inhalt an der Layoutposition y = 0 beginnt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      Wenn „true“, wird die Verlaufverwaltung in diesem ViewStack-Container aktiviert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, wird die Verlaufverwaltung in diesem ViewStack-Container aktiviert. Wenn der Benutzer von einem untergeordneten Objekt zu einem anderen navigiert, merkt sich der Browser, welche untergeordneten Objekte angesteuert wurden. Der Benutzer kann dann die Zurück- und Weiter-Schaltflächen des Browsers benutzen, um sich durch den Navigationsverlauf durchzuklicken.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:ViewStack:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      Wenn „true“, passt der ViewStack-Container seine Größe automatisch auf die Größe seines aktuellen untergeordneten Objekts an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, passt der ViewStack-Container seine Größe automatisch auf die Größe seines aktuellen untergeordneten Objekts an.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      Ein Verweis auf den derzeit sichtbaren untergeordneten Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf den derzeit sichtbaren untergeordneten Container. Der Standardwert ist ein Verweis auf das erste untergeordnete Objekt. Wenn keine untergeordneten Objekte vorhanden sind, ist diese Eigenschaft <codeph>null</codeph>.
     
      <p><b>Hinweis:</b> Sie können diese Eigenschaft nur in einer ActionScript-Anweisung einstellen, nicht in MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Die auf null basierende Indexposition des derzeit sichtbaren untergeordneten Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die auf null basierende Indexposition des derzeit sichtbaren untergeordneten Containers. Indexpositionen von untergeordneten Objekten bewegen sich im Bereich 0, 1, 2, ..., n - 1, wobei <i>n</i> die Anzahl untergeordneter Objekte ist. Der Standardwert ist 0 und entspricht dem ersten untergeordneten Objekt. Wenn keine untergeordneten Objekte vorhanden sind, ist der Wert dieser Eigenschaft <codeph>-1</codeph>.
     
      <p><b>Hinweis:</b> Wenn Sie ein neues untergeordnetes Objekt einem ViewStack-Container hinzufügen, wird die <codeph>selectedIndex</codeph>-Eigenschaft erforderlichenfalls automatisch angepasst, damit das ausgewählte untergeordnete Objekt ausgewählt bleibt.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:GridRow"><apiName>GridRow</apiName><shortdesc>
  Der GridRow-Container definiert eine Zeile in einem Grid-Container und enthält GridCell-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/><Exclude kind="property" name="clipContent"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  Vertikale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Der Standardwert ist <codeph>„top“</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Der Standardwert ist <codeph>„left“</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridRow&gt;</code> must be a child of the 
  <code>&lt;mx:Grid&gt;</code> tag, and has one or more child 
  <code>&lt;mx:GridItem&gt;</code> tags that define the grid cells.</p>
 
  <p>The <code>&lt;mx:GridRow&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow
    <strong>Styles</strong>
      horizontalAlign="left|center|right"
      verticalAlign="top|middle|bottom"
    &gt;
      &lt;mx:GridItem
        <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der GridRow-Container definiert eine Zeile in einem Grid-Container und enthält GridCell-Container.
 
  <p>GridRow-Container haben die folgenden Merkmale für Standardgrößen:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Höhe jeder Zeile und jeder Zelle</entry>
           <entry>Die Standardhöhe oder explizite Höhe des größten Elements in der Zeile. Wenn ein GridItem-Container keine explizite Höhe hat, entspricht seine Standardhöhe der Standardhöhe oder der expliziten Höhe des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Breite jeder Spalte und jeder Zelle</entry>
           <entry>Die Standardbreite oder explizite Breite des größten Elements in der Spalte. Wenn ein GridItem-Container keine explizite Breite hat, entspricht seine Standardbreite der Standardbreite oder der expliziten Breite des untergeordneten Objekts in der Zelle.</entry>
        </row><row>
           <entry>Lücke zwischen Zeilen und Spalten</entry>
           <entry>Bestimmt durch die horizontalGap- und verticalGap-Eigenschaften für die Grid-Klasse. Der Standardwert für beide Lücken ist 6 Pixel.</entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für die Werte oben, unten, links und rechts, für alle drei Containerklassen.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:GridRow:GridRow"><apiName>GridRow</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:GridRow:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Legt die Größe und Position jedes untergeordneten Objekts des GridRow-Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Größe und Position jedes untergeordneten Objekts des GridRow-Containers fest. Weitere Hinweise zum Grid-Layoutalgorithmus finden Sie unter der Beschreibung der <xref href="Grid.html#updateDisplayList()">Grid.updateDisplayList()</xref>-Methode.
     
      <p>Sie sollten diese Methode nicht direkt aufrufen. Der Flex-LayoutManager ruft sie zum erforderlichen Zeitpunkt auf. Wenn die Anwendung startet, ruft der Flex-LayoutManager die <codeph>updateDisplayList()</codeph>-Methode für jede Komponente auf, wobei mit dem Root-Objekt begonnen und ab da weiterverarbeitet wird.</p>
     
      <p>Dies ist eine erweiterte Methode für die Verwendung von Unterklassen. Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.updateDisplayList()</codeph>-Methode und dann für jedes untergeordnete Objekt die <codeph>move()</codeph>- und <codeph>setActualSize()</codeph>-Methoden aufrufen. Für Layoutzwecke sollten Sie die Größe dieses Containers aus den <codeph>unscaledWidth</codeph>- und <codeph>unscaledHeight</codeph>-Eigenschaften abrufen und nicht aus den <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften. Die <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften berücksichtigen den Wert der <codeph>scaleX</codeph>- und <codeph>scaleY</codeph>-Eigenschaften für diesen Container nicht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:FormItem"><apiName>FormItem</apiName><shortdesc>
  Der FormItem-Container definiert eine Beschriftung und mindestens ein untergeordnetes horizontal oder vertikal angeordnetes Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der oberen Rahmenlinie des Containers und dem oberen Rand seines Inhaltsbereichs.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie des Containers und dem rechten Rand seines Inhaltsbereichs.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der unteren Rahmenlinie des Containers und dem unteren Rand seines Inhaltsbereichs.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Breite der Beschriftungen im Formular. Der Standardwert ist die Länge der längsten Beschriftung im Formular.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelStyleName" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  Name der CSS-Stildeklaration für die Stile in der Beschriftung von FormItem. Standardmäßig verwendet die Beschriftung die erbbaren Stile von FormItem oder die von FormItemLabel deklarierten Stile. Dieser Stil muss anstelle von FormItemLabel verwendet werden.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indicatorSkin" owner="mx.containers:FormItem" playerVersion="Flash9" type="Class">
<description>
  Gibt die Skin an, die für den erforderlichen Feldindikator zu verwenden ist. Der Standardwert ist das „mx.containers.FormItem.Required“-Symbol in der Datei Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen der Beschriftung und den untergeordneten Komponenten des Form-Elements.
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>.
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>paddingLeft</code>,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormItem
    <strong>Properties</strong>
    direction="vertical|horizontal"
    label=""
    required="false|true"
  
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    indicatorGap="14"
    indicatorSkin="<i>'mx.containers.FormItem.Required' symbol in Assets.swf</i>"
    labelStyleName=""
    labelWidth="<i>Calculated</i>"
    paddingBottom="0"
    paddingRight="0"
    paddingTop="0"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:FormItem&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der FormItem-Container definiert eine Beschriftung und mindestens ein untergeordnetes horizontal oder vertikal angeordnetes Objekt. Untergeordnete Objekte können Steuerelemente oder andere Container sein. Ein einzelner Form-Container kann mehrere FormItem-Container enthalten.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.controls.xml#FormItemLabel"><linktext>mx.controls.FormItemLabel</linktext></link></related-links><apiConstructor id="mx.containers:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:FormItem:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des FormItem-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die bevorzugten, Minimal- und Maximalgrößen des FormItem-Containers. Im Abschnitt über die <codeph>UIComponent.measure()</codeph>-Methode finden Sie weitere Hinweise zur <codeph>measure()</codeph>-Methode.
     
      <p>Die <codeph>FormItem.measure()</codeph>-Methode bestimmt zuerst die Anzahl der zu verwendenden Spalten. Wenn die <codeph>direction</codeph>-Eigenschaft <codeph>FormItemDirection.HORIZONTAL</codeph> lautet, werden alle Steuerelemente in eine Zeile gesetzt, wenn dies möglich ist. Wenn die Steuerelemente nicht in eine einzige Zeile passen, werden sie in zwei Spalten aufgeteilt. Wenn dies nicht funktioniert, verwenden Sie eine einzelne Spalte. Wenn die <codeph>direction</codeph>-Eigenschaft <codeph>FormItemDirection.VERTICAL</codeph> lautet, werden die Steuerelemente in eine einzelne Spalte gesetzt (wie <codeph>VBox</codeph>).</p>
     
      <p>Ein FormItem-Container enthält zwei Bereiche: Den Beschriftungsbereich und den Steuerelementbereich. Die Größe des Beschriftungsbereichs ist unabhängig von der Richtung der Steuerelemente identisch. Die Größe des Steuerelementbereichs hängt davon ab, wie viele Zeilen und Spalten verwendet werden.</p>
     
      <p>Die Breite des Beschriftungsbereichs wird durch die <codeph>labelWidth</codeph>-Stileigenschaft bestimmt. Wenn diese Eigenschaft <codeph>undefined</codeph> ist (Standardvorgabe), wird die Breite der breitesten Beschriftung im übergeordneten Form-Container verwendet.</p>
     
      <p>Wenn alle untergeordneten Objekte in einer einzigen Zeile stehen, ist die Breite des Steuerelementbereichs die Summe der Breiten aller untergeordneten Objekte zuzüglich des <codeph>horizontalGap</codeph>-Zwischenraums zwischen den untergeordneten Objekten.</p>
     
      <p>Wenn sich die untergeordneten Objekte in einer einzigen Spalte befindet, ist die Breite des Steuerelementbereichs die Breite des breitesten untergeordneten Objekts.</p>
     
      <p>Wenn sich die untergeordneten Objekte in mehreren Zeilen und Spalten befinden, ist die Breite des breitesten untergeordneten Objekts die Spaltenbreite und die Breite des Steuerelementbereichs ist die Spaltenbreite, multipliziert mit der Anzahl der Spalten zuzüglich des <codeph>horizontalGap</codeph>-Zwischenraums zwischen den Spalten.</p>
     
      <p><codeph>measuredWidth</codeph> wird auf die Breite des Beschriftungsbereichs plus die Breite des Steuerelementbereichs plus den Wert der <codeph>indicatorGap</codeph>-Stileigenschaft eingestellt. Die Werte der <codeph>paddingLeft</codeph>- und <codeph>paddingRight</codeph>-Stileigenschaften und die Breite des Rahmens werden ebenfalls hinzugefügt.</p>
     
      <p><codeph>measuredHeight</codeph> wird auf die Summe der bevorzugten Höhen aller Zeilen der untergeordneten Objekte plus <codeph>verticalGap</codeph>-Zwischenraum zwischen jedem untergeordneten Objekt eingestellt. Die Stileigenschaften <codeph>paddingTop</codeph> und <codeph>paddingBottom</codeph> sowie die Höhe des Rahmens werden ebenfalls hinzugefügt.</p>
     
      <p><codeph>measuredMinWidth</codeph> wird auf die Breite des Beschriftungsbereichs plus die Minimalbreite des Steuerelementbereichs plus den Wert der <codeph>indicatorGap</codeph>-Stileigenschaft eingestellt. Die Werte der <codeph>paddingLeft</codeph>- und <codeph>paddingRight</codeph>-Stileigenschaften und die Breite des Rahmens werden ebenfalls hinzugefügt.</p>
     
      <p><codeph>measuredMinHeight</codeph> wird auf die Summe der Minimalhöhen aller Zeilen der untergeordneten Objekte plus <codeph>verticalGap</codeph>-Zwischenraum zwischen jedem untergeordneten Objekt eingestellt. Die Stileigenschaften <codeph>paddingTop</codeph> und <codeph>paddingBottom</codeph> sowie die Höhe des Rahmens werden ebenfalls hinzugefügt.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:FormItem:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Objekte dieses Container festgelegt werden. Im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode finden Sie weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode.
     
      <p>Weitere Hinweise zur Platzierung der FormItem-Steuerelemente finden Sie unter der Beschreibung der <codeph>FormItem.measure()</codeph>-Methode.</p>
     
      <p>Die Beschriftung wird im Beschriftungsbereich gemäß der <codeph>textAlign</codeph>-Stileigenschaft zentriert. Alle Beschriftungen in einem Formular sind aneinander ausgerichtet.</p>
     
      <p>Wenn die <codeph>required</codeph>-Eigenschaft auf <codeph>true</codeph> eingestellt ist, wird ein Symbol, das das Feld als erforderlich kennzeichnet, zwischen die Beschriftung und die Steuerelemente gesetzt.</p>
     
      <p>Die Steuerelemente sind in Spalten platziert, wie dies in der Dokumentation für die <codeph>measure()</codeph>-Methode beschrieben wird. Die <codeph>horizontalAlign</codeph>-Stileigenschaft bestimmt, wo die Steuerelemente horizontal platziert werden.</p>
     
      <p>Wenn die <codeph>direction</codeph>-Eigenschaft <codeph>„vertical“</codeph> lautet, verwendet jedes untergeordnete Objekt, für das <codeph>width</codeph> nicht festgelegt ist, die <codeph>measuredWidth</codeph>-Eigenschaft, aufgerundet auf die nächste 1/4-Breite des Steuerelementbereichs. Dies erfolgt, um am rechten Rand von Steuerelementen Zickzack-Muster zu vermeiden.</p>
     
      <p>Diese Methode ruft zunächst und vor allem Anderen die <codeph>super.updateDisplayList()</codeph>-Methode auf.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:FormItem:direction:get"><apiName>direction</apiName><shortdesc>
      Richtung der FormItem-Subkomponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FormItemDirection.VERTICAL
      </apiDefaultValue></apiValueDef><apiDesc>
      Richtung der FormItem-Subkomponenten. Zulässige MXML-Werte sind <codeph>„vertical“</codeph> oder <codeph>„horizontal“</codeph>. Der Standard-MXML-Wert ist <codeph>„vertical“</codeph>. Zulässige ActionScript-Werte sind <codeph>FormItemDirection.VERTICAL</codeph> oder <codeph>FormItemDirection.HORIZONTAL</codeph>.
     
      <p>Wenn <codeph>direction</codeph> auf <codeph>„vertical“</codeph> eingestellt ist, werden die untergeordneten Objekte von FormItem vertikal rechts von der FormItem-Beschriftung gestapelt. Wenn <codeph>direction</codeph> auf <codeph>„horizontal“</codeph> eingestellt ist, werden die untergeordneten Objekte in eine einzelne Zeile gesetzt (wenn sie passen) oder in zwei gleich große Spalten.</p>
     
      <p>Wenn Sie das Layout von untergeordneten FormItem-Objekten besser steuern möchten, können Sie einen Container wie Grid oder Tile als direktes untergeordnetes Objekt von FormItem verwenden und die gewünschten Steuerelemente hineinsetzen.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:FormItem:itemLabel:get"><apiName>itemLabel</apiName><shortdesc>
      Ein schreibgeschützter Verweis auf die FormItemLabel-Subkomponente, die die Beschriftung von FormItem anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls:Label</apiValueClassifier></apiValueDef><apiDesc>
      Ein schreibgeschützter Verweis auf die FormItemLabel-Subkomponente, die die Beschriftung von FormItem anzeigt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:label:get"><apiName>label</apiName><shortdesc>
      Textbeschriftung für FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Textbeschriftung für FormItem. Diese Beschriftung erscheint links von den untergeordneten Komponenten im Formularelement. Die Position der Beschriftung wird durch die <codeph>textAlign</codeph>-Stileigenschaft gesteuert 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:required:get"><apiName>required</apiName><shortdesc>
      Wenn auf „true“ gesetzt, wird mit einem Indikator angezeigt, dass für die untergeordneten Objekte des FormItem-Objekts Benutzereingaben erforderlich sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn auf <codeph>true</codeph> gesetzt, wird mit einem Indikator angezeigt, dass für die untergeordneten Objekte des FormItem-Objekts Benutzereingaben erforderlich sind. Wenn auf <codeph>false</codeph> gesetzt, wird kein Indikator angezeigt.
     
      <p>Diese Eigenschaft steuert nur die Anzeige des Indikators. Sie müssen den untergeordneten Objekten einen Validator anfügen, wenn Sie eine Überprüfung der Eingaben verlangen.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Box"><apiName>Box</apiName><shortdesc>
  Ein Halo Box-Container ordnet seine untergeordneten Objekte in einer einzigen vertikalen Spalte oder einer einzigen horizontalen Zeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Box" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.VGroup" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.HGroup" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der oberen Rahmenlinie des Containers und dem oberen Rand seines Inhaltsbereichs. Der Standardwert ist 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der unteren Rahmenlinie des Containers und dem unteren Rand seines Inhaltsbereichs. Der Standardwert ist 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Anzahl von Pixeln zwischen untergeordneten Objekten in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  Vertikale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Der Standardwert ist <codeph>„top“</codeph>, aber manche Container wie ButtonBar, ControlBar, LinkBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  Horizontale Ausrichtung von untergeordneten Objekten im Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Der Standardwert ist <codeph>„links“</codeph>, aber manche Container wie ButtonBar und ToggleButtonBar haben andere Standardwerte.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Box&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <p>
  <pre>
  &lt;mx:Box
    <strong>Properties</strong>
    direction="vertical|horizontal"
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Box&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein Halo Box-Container ordnet seine untergeordneten Objekte in einer einzigen vertikalen Spalte oder einer einzigen horizontalen Zeile. Die <codeph>direction</codeph>-Eigenschaft bestimmt, ob ein vertikales (Standardvorgabe) oder ein horizontales Layout verwendet wird.
 
  <p><b>Hinweis:</b> Adobe empfiehlt, wenn immer möglich die Spark-Container mit HorizontalLayout oder VerticalLayout anstelle des Halo Box-Containers zu verwenden.</p>
 
  <p>Die Box-Klasse ist die Basisklasse für die VBox- und HBox-Klassen. Sie verwenden die Tags <codeph>&lt;mx:Box></codeph>, <codeph>&lt;mx:VBox></codeph> und <codeph>&lt;mx:HBox></codeph> zur Definition der Box-Container.</p>
 
  <p>Ein Box-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry><b>Vertical Box</b> Die Höhe reicht aus, damit alle untergeordneten Objekte mit ihren Standardhöhenwerten oder expliziten Höhenwerten plus vertikale Lücken zwischen den untergeordneten Objekten plus oberer und unterer Füllbereich des Containers untergebracht werden können. Die Breite ist die Standardbreite oder explizite Breite des breitesten untergeordneten Objekts plus Auffüllbereich des Containers auf der linken und rechten Seite. <b>Horizontal Box</b> Die Breite reicht aus, damit alle untergeordneten Objekte mit ihren Standardbreitenwerten plus horizontale Lücken zwischen den untergeordneten Objekten plus linker und rechter Auffüllbereich des Containers untergebracht werden können. Die Höhe ist die Standardhöhe oder explizite Höhe des größten untergeordneten Objekts plus oberer und unterer Füllbereich des Containers.
           </entry>
        </row><row>
           <entry>Standardwert für die Auffüllung</entry>
           <entry>0 Pixel für oben, unten, links und rechts.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleBoxExample.mxml"><swfblock conref="examples/SimpleBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Box:Box"><apiName>Box</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Box:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte des Box-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standardgrößen und die Minimal- sowie Maximalwerte des Box-Containers.
     
      <p>Wenn die <codeph>direction</codeph>-Eigenschaft des Box-Containers auf <codeph>BoxDirection.HORIZONTAL</codeph> eingestellt ist, entspricht seine <codeph>measuredWidth</codeph>-Eigenschaft der Summe der Standardbreiten aller seiner untergeordneten Objekte, plus die Rahmenstärke, plus der linke und rechte Auffüllbereich, plus die horizontale Lücke zwischen den einzelnen untergeordneten Objekten. Der Wert der <codeph>measuredHeight</codeph>-Eigenschaft ist das Maximum aller Standardhöhen der untergeordneten Objekte, plus Raum für Rahmen und Auffüllung. Wenn die <codeph>direction</codeph>-Eigenschaft des Box-Containers auf <codeph>BoxDirection.VERTICAL</codeph> eingestellt ist, werden diese beiden Werte umgekehrt.</p>
     
      <p>Die <codeph>minWidth</codeph>- und <codeph>minHeight</codeph>-Eigenschaften des Box-Containers werden ähnlich berechnet, indem die Mindestbreiten und Mindesthöhen der untergeordneten Objekte kombiniert werden. Wenn die <codeph>width</codeph>-Eigenschaft des untergeordneten Objekts ein Prozentwert ist, entspricht die Minimalbreite des Box-Containers dem Wert der <codeph>minWidth</codeph>-Eigenschaft des untergeordneten Objekts. Wenn die <codeph>width</codeph>-Eigenschaft des untergeordneten Objekts gelöscht oder auf einen festen Wert gesetzt ist, vergrößert oder verkleinert sich das untergeordnete Objekt nicht, daher ist die Mindestbreite des Box-Containers gleich dem Wert der <codeph>explicitWidth</codeph>-Eigenschaft des untergeordneten Objekts. Die Minimalhöhe des untergeordneten Objekts wird ähnlich berechnet.</p>
     
      <p>Die <codeph>maxWidth</codeph>- und <codeph>maxHeight</codeph>-Eigenschaften des Box-Containers werden nicht berechnet. Die Maximalbreite und Maximalhöhe des Box-Containers wird als unbegrenzt angesehen.</p>
     
      <p>Alle vorstehend beschriebenen Werte sind <i>gemessene</i> Breiten und Höhen des Box-Containers. Der Benutzer kann die gemessenen Werte überschreiben, indem er explizit einen Wert für die folgenden Eigenschaften festlegt:</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p>Die <codeph>measure()</codeph>-Methode sollte nicht direkt aufgerufen werden. Der Flex-LayoutManager ruft sie zum erforderlichen Zeitpunkt auf. Beim Start der Anwendung versucht der Flex-LayoutManager, alle Komponenten - von den untergeordneten bis zu den übergeordneten Objekten - zu messen, bevor er sie auf ihre endgültigen Größen festlegt.</p>
     
      <p>Dies ist eine erweiterte Methode für die Verwendung von Unterklassen. Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.measure()</codeph>-Methode oder die <codeph>measuredHeight</codeph>- und <codeph>measuredWidth</codeph>-Eigenschaften aufrufen. Sie können optional auch die folgenden Eigenschaften festlegen:</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>Diese Eigenschaften entsprechen den weiter oben angeführten Layouteigenschaften und werden daher nicht eigens dokumentiert.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:pixelsToPercent"><apiName>pixelsToPercent</apiName><shortdesc>
      Die Methode zur Konvertierung von einer Anzahl von Pixeln in einen Prozentwert in Bezug auf den Inhalt dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Prozentwert, der unter den aktuellen Layoutbedingungen dieses Containers gleich <codeph>pxl</codeph> sein würde. Ein negativer Wert zeigt an, dass der Container wachsen muss, um die angeforderte Größe unterbringen zu können.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>pxl</apiItemName><apiType value="Number"/><apiDesc>Die Anzahl von Pixeln, für die ein Prozentwert gewünscht ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Methode zur Konvertierung von einer Anzahl von Pixeln in einen Prozentwert in Bezug auf den Inhalt dieses Containers.
     
      <p>Der Prozentwert ist nur relevant, wenn der Container seine Größe oder sein Layout nicht ändert. Nach Eintritt einer Größenänderung und/oder einem neuen Layout kann der von dieser Methode zurückgegebene Wert veraltet sein.</p>
     
      <p>Ein Beispiel für den Einsatz dieser Methode ist die Wiederherstellung der Größe einer Komponente auf eine bestimmte Pixelanzahl, nachdem sie verborgen wurde.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Legt die Größe und Position jedes untergeordneten Objekts des Box-Containers fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Größe und Position jedes untergeordneten Objekts des Box-Containers fest.
     
      <p>Um den Layoutalgorithmus für den Box-Container zu verstehen, gehen Sie davon aus, dass die Richtung des Box-Containers horizontal ist.</p>
     
      <p>Alle untergeordneten Objekte des Box-Containers werden nebeneinander in einer einzelnen horizontalen Reihe angeordnet, mit <codeph>horizontalGap</codeph> Pixeln zwischen jedem Paar nebeneinanderliegender untergeordneter Objekte. Zunächst werden die Breiten von untergeordneten Objekten ohne explizite Breitenwerte so eingestellt wie die Werte ihrer <codeph>measuredWidth</codeph>-Eigenschaften.</p>
     
      <p>Wenn die Summe der Werte der <codeph>measuredWidth</codeph>-Eigenschaft der untergeordneten Objekte größer oder kleiner ist als die Breite des Box-Containers und wenn einige untergeordnete Objekte einen Prozentwert für die <codeph>width</codeph>-Eigenschaft haben, werden diese untergeordneten Objekte vergrößert oder verkleinert, bis alle untergeordneten Objekte in den Box-Container passen. Allerdings wird kein untergeordnetes Objekt auf weniger als den Wert <codeph>minWidth</codeph>-Eigenschaft verkleinert oder auf mehr als den Wert seiner <codeph>maxWidth</codeph>-Eigenschaft vergrößert. Zwischen den vergrößerten (oder verkleinerten) untergeordneten Objekten werden Zwischenräume im Verhältnis zu <codeph>percentWidth</codeph> des untergeordneten Objekts hinzugefügt (oder entfernt). Beispiel: Ein untergeordnetes Objekt mit einer <codeph>percentWidth</codeph> von 40 Prozent wächst doppelt so stark wie ein untergeordnetes Objekt mit einer <codeph>percentWidth</codeph> von 20 Prozent, bis der verfügbare Raum ausgefüllt ist oder die vorgeschriebenen Größen erreicht sind.</p>
     
      <p>Nachdem alle flexiblen untergeordneten Objekte vergrößert oder verkleinert wurden, prüft Flex, ob die Summe der Breiten der untergeordneten Objekte zur Breite des Box-Containers passt. Wenn nicht, wird die Gruppe untergeordneter Objekte je nach dem Wert der <codeph>horizontalAlign</codeph>-Eigenschaft des Box-Containers verschoben, damit die untergeordneten Objekte am linken Rand des Box-Containers, dem rechten Rand des Box-Containers oder zentriert in der Mitte des Box-Containers ausgerichtet sind.</p>
     
      <p>Um die Höhe jedes untergeordneten Objekts bestimmen zu können, prüft Flex den Wert der <codeph>height</codeph>-Eigenschaft des untergeordneten Objekts. Wenn die <codeph>height</codeph> gelöscht ist, wird die Höhe des untergeordneten Objekts auf <codeph>measuredHeight</codeph> eingestellt. Wenn <codeph>height</codeph> auf einen Pixelwert eingestellt ist, wird dieser Wert verwendet. Wenn <codeph>height</codeph> auf einen Prozentwert eingestellt ist, wird die Höhe des untergeordneten Objekts vergrößert oder verkleinert, um zum festgelegten Prozentwert des Box-Containers zu passen, wobei aber die Höhe des untergeordneten Objekts nicht auf weniger als den Wert seiner <codeph>minHeight</codeph>-Eigenschaft verkleinert oder auf mehr als den Wert seiner <codeph>maxHeight</codeph>-Eigenschaft vergrößert werden kann.</p>
     
      <p>Die vertikale Position jedes untergeordneten Objekts wird durch die <codeph>verticalAlign</codeph>-Eigenschaft des Box-Containers bestimmt. Jedes untergeordnete Objekt wird so verschoben, dass es mit dem oberen Rand des Box-Containers, mit dem unteren Rand des Box-Containers oder in der Mitte des Box-Containers ausgerichtet ist.</p>
     
      <p>Wenn die <codeph>direction</codeph>-Eigenschaft des Box-Containers <codeph>vertical</codeph> ist, gelten dieselben Regeln, nur werden die Breiten und Höhen vertauscht. Die untergeordneten Objekte werden in einer einzigen, vertikalen Spalte angeordnet.</p>
     
      <p>Sie sollten diese Methode nicht direkt aufrufen. Der Flex-LayoutManager ruft sie zum erforderlichen Zeitpunkt auf. Wenn die Anwendung startet, ruft der Flex-LayoutManager die <codeph>updateDisplayList()</codeph>-Methode für jede Komponente auf, wobei mit dem Application-Objekt begonnen und ab da weiterverarbeitet wird.</p>
     
      <p>Dies ist eine erweiterte Methode für die Verwendung von Unterklassen. Wenn Sie diese Methode überschreiben, muss Ihre Implementierung die <codeph>super.updateDisplayList()</codeph>-Methode und dann für jedes untergeordnete Objekt die <codeph>move()</codeph>- und <codeph>setActualSize()</codeph>-Methoden aufrufen. Für Layoutzwecke sollten Sie die Größe dieses Containers aus den <codeph>unscaledWidth</codeph>- und <codeph>unscaledHeight</codeph>-Eigenschaften abrufen und nicht aus den <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften. Die <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften berücksichtigen die Werte der <codeph>scaleX</codeph>- und <codeph>scaleY</codeph>-Eigenschaften für diesen Container nicht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Box:direction:get"><apiName>direction</apiName><shortdesc>
      Die Richtung, in die dieser Box-Container seine untergeordneten Objekte auslegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>BoxDirection.VERTICAL
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Richtung, in die dieser Box-Container seine untergeordneten Objekte auslegt. Mögliche MXML-Werte sind <codeph>„horizontal“</codeph> und <codeph>„vertical“</codeph>. Zulässige Werte in ActionScript sind <codeph>BoxDirection.HORIZONTAL</codeph> und <codeph>BoxDirection.VERTICAL</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>