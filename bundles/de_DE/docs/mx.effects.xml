<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.effects"><apiName>mx.effects</apiName><apiDetail/><apiClassifier id="mx.effects:EffectManager"><apiName>EffectManager</apiName><shortdesc>
  Die EffectManager-Klasse wartet auf Ereignisse, wie show- und move-Ereignisse, die durch Objekte in einer Flex-Anwendung ausgelöst werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EffectManager-Klasse wartet auf Ereignisse, wie <codeph>show</codeph>- und <codeph>move</codeph>-Ereignisse, die durch Objekte in einer Flex-Anwendung ausgelöst werden. Für jedes Ereignis, das einem Ereignis-Auslöser entspricht, ermittelt sie, ob dem Objekt ein Effekt zugewiesen ist. Wenn ein Effekt definiert ist, gibt sie ihn wieder. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.effects:EffectManager:endEffectsForTarget"><apiName>endEffectsForTarget</apiName><shortdesc>
      Alle Effekte, die aktuell auf einem Ziel wiedergegeben werden, werden sofort beendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Die Zielkomponente, auf der alle Effekte beendet werden sollen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Alle Effekte, die aktuell auf einem Ziel wiedergegeben werden, werden sofort beendet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:resumeEventHandling"><apiName>resumeEventHandling</apiName><shortdesc>
      Ermöglicht der EffectManager-Klasse, die Verarbeitung von Ereignissen nach einem Aufruf der suspendEventHandling()-Methode fortzusetzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ermöglicht der EffectManager-Klasse, die Verarbeitung von Ereignissen nach einem Aufruf der <codeph>suspendEventHandling()</codeph>-Methode fortzusetzen. Wird intern zusammen mit der <codeph>suspendEventHandling()</codeph>-Methode verwendet, damit ein Effekt, der einen Bildschirm aktualisiert, keine anderen Effekte auslöst.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:suspendEventHandling"><apiName>suspendEventHandling</apiName><shortdesc>
      Nach dem Aufrufen dieser Methode ignoriert der EffectManager alle Ereignisse. Erst nach dem Aufrufen von resumeEventHandling() werden wieder Effekte ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Nach dem Aufrufen dieser Methode ignoriert der EffectManager alle Ereignisse. Erst nach dem Aufrufen von <codeph>resumeEventHandling()</codeph> werden wieder Effekte ausgelöst. Wird intern verwendet, damit ein Effekt, der einen Bildschirm aktualisiert, keine anderen Effekte auslöst.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:Effect"><apiName>Effect</apiName><shortdesc>
  Die Effect-Klasse ist eine abstrakte Basisklasse, die die Basisfunktionalität aller Flex-Effekte definiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Effect class defines the following properties,
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    <b>Properties</b>
    customFilter=""
    duration="500"
    filter=""
    hideFocusRing="false"
    perElementOffset="0"
    repeatCount="1"
    repeatDelay="0"
    startDelay="0"
    suspendBackgroundProcessing="false|true"
    target="<i>effect target</i>"
    targets="<i>array of effect targets</i>"
     
    <b>Events</b>
    effectEnd="<i>No default</i>"
    efectStart="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffect</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Effect-Klasse ist eine abstrakte Basisklasse, die die Basisfunktionalität aller Flex-Effekte definiert. Die Effect-Klasse definiert die Factory-Basisklasse für alle Effekte. Die EffectInstance-Klasse definiert die Basisklasse für alle Effektinstanz-Unterklassen.
 
  <p>In einer Anwendung erstellen Sie die Instanzen der Effect-Klasse nicht selbst. Stattdessen erstellen Sie eine Instanz einer Unterklasse wie Fade oder WipeLeft.</p>
  
  </apiDesc><example conref="SimpleEffectExample.mxml"><swfblock conref="examples/SimpleEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#EffectInstance"><linktext>mx.effects.EffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Wird ausgelöst, wenn die Wiedergabe eines Effekts gestartet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Wiedergabe eines Effekts gestartet wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Wird ausgelöst, wenn der Effekt angehalten wurde. Dies geschieht nur, wenn der Effekt durch Aufrufen der stop()-Methode unterbrochen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Effekt angehalten wurde. Dies geschieht nur, wenn der Effekt durch Aufrufen der <codeph>stop()-</codeph> Methode unterbrochen wird. Das EFFECT_END-Ereignis wird auch ausgelöst, um die Beendigung des Effekts anzugeben. Dieses zusätzliche Ereignis wird zuerst an Listener gesendet, um mitzuteilen, dass der Effekt nicht den Endstatus erreicht hat.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Wird ausgelöst, wenn die Wiedergabe einer der Effektinstanzen beendet wurde, da die Instanz das Ende erreicht hatte oder da der Effekt durch den Aufruf der end()-Methode unterbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Wiedergabe einer der Effektinstanzen beendet wurde, da die Instanz das Ende erreicht hatte oder da der Effekt durch einen Aufruf der <codeph>end()</codeph>-Methode unterbrochen wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:Effect:Effect"><apiName>Effect</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Zum Starten eines Effekts sind normalerweise drei Schritte notwendig:</p>
     
      <ul>
        <li>Erstellen einer Instanz des Effektobjekts mit dem <codeph>new</codeph>-Operator.</li>
        <li>Einstellen der Eigenschaften des Effektobjekts, wie <codeph>duration</codeph>.</li>
        <li>Aufrufen der <codeph>play()</codeph>-Methode oder Zuweisen des Effekts zu einem Auslöser.</li>
      </ul>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Effect:protected:applyValueToTarget"><apiName>applyValueToTarget</apiName><shortdesc>
      Wird intern von der Effektinfrastruktur verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Das Effektziel.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>target-Eigenschaft.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Der Wert der Eigenschaft. 
     
      </apiDesc></apiParam><apiParam><apiItemName>props</apiItemName><apiType value="Object"/><apiDesc>Array von Objekten, wobei jedes Arrayelement ein <codeph>start</codeph>- und ein <codeph>end</codeph>-Objekt für die Eigenschaften enthält, die der Effekt überwacht. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird intern von der Effektinfrastruktur verwendet. Wenn <codeph>captureStartValues()</codeph> aufgerufen wurde und Flex die <codeph>play()</codeph>-Methode aufruft, verwendet das Programm diese Funktion zum Zurücksetzen der Ziele auf den Anfangsstatus. Das Standardverhalten besteht darin, den mit der <codeph>getValueFromTarget()</codeph>-Methode erfassten Wert zu verwenden und diesen direkt auf der Eigenschaft des Ziels einzustellen. Beispiel: <pre>
      
      target[property] = value;</pre>
     
      <p>Überschreiben Sie diese Methode nur, wenn Sie die erfassten Werte auf andere Art anwenden müssen. Beachten Sie, dass Stileigenschaften eines Ziels durch einen anderen Mechanismus eingestellt werden. Mit der <codeph>relevantStyles</codeph>-Eigenschaft geben Sie die zu erfassenden und anzuwendenden Stileigenschaften an. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc conref="mx.effects.IEffect#captureEndValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureEndValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Array von Zielen, für die Werte erfasst werden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstance"><apiName>createInstance</apiName><shortdesc conref="mx.effects.IEffect#createInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Das Effektinstanz-Objekt für den Effekt.
      
      </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das mit diesem Effekt zu animierende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstances"><apiName>createInstances</apiName><shortdesc conref="mx.effects.IEffect#createInstances()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Array von Effektinstanz-Objekten (ein Objekt pro Ziel) für den Effekt.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Objekten, die mit diesem Effekt animiert werden sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstances()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc conref="mx.effects.IEffect#deleteInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Die Effektinstanz.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#deleteInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectEndHandler"><apiName>effectEndHandler</apiName><shortdesc>
      Wird aufgerufen, wenn die Wiedergabe einer Effektinstanz abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Ein Ereignisobjekt des Typs EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn die Wiedergabe einer Effektinstanz abgeschlossen ist. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die übergeordnete Methode aufrufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStartHandler"><apiName>effectStartHandler</apiName><shortdesc>
      Diese Methode wird aufgerufen, wenn die Wiedergabe der Effektinstanz beginnt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Ein Ereignisobjekt des Typs EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Methode wird aufgerufen, wenn die Wiedergabe der Effektinstanz beginnt. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die übergeordnete Methode aufrufen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStopHandler"><apiName>effectStopHandler</apiName><shortdesc>
      Wird aufgerufen, wenn eine Effektinstanz durch einen Aufruf der stop()-Methode angehalten wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Ein Ereignisobjekt des Typs EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn eine Effektinstanz durch einen Aufruf der <codeph>stop()-</codeph> Methode angehalten wurde. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die übergeordnete Methode aufrufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffect#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Zu beendende Effektinstanz
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:filterInstance"><apiName>filterInstance</apiName><shortdesc>
      Bestimmt die Logik zum Filtern einer Effektinstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn die Effektinstanz wiedergegeben werden soll.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Die durch den Effekt geänderten Eigenschaften.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Das Effektziel.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt die Logik zum Filtern einer Effektinstanz. Die CompositeEffect-Klasse überschreibt diese Methode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc conref="mx.effects.IEffect#getAffectedProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Ein Array von Strings, das die Namen der von diesem Effekt geänderten Eigenschaften angibt.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#getAffectedProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:getValueFromTarget"><apiName>getValueFromTarget</apiName><shortdesc>
      Wird von der captureStartValues()-Methode aufgerufen, um den Wert einer Eigenschaft des Ziels abzurufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Der Wert der Zieleigenschaft. 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Das Effektziel.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>target-Eigenschaft.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird von der <codeph>captureStartValues()</codeph>-Methode aufgerufen, um den Wert einer Eigenschaft des Ziels abzurufen. Diese Funktion sollte nur intern vom Effekt-Framework aufgerufen werden. Das Standardverhalten besteht darin, einfach <codeph>target[property]</codeph> zurückzugeben. Effektentwickler können diese Funktion überschreiben, wenn ein anderes Verhalten benötigt wird. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:initInstance"><apiName>initInstance</apiName><shortdesc>
      Kopiert Eigenschaften des Effekts in die Effektinstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Die zu initialisierende Effektinstanz.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Kopiert Eigenschaften des Effekts in die Effektinstanz. 
     
      <p>Flex ruft diese Methode von der Methode <codeph>Effect.createInstance()</codeph> auf. Sie selbst rufen sie nicht auf. </p>
     
      <p>Überschreiben Sie beim Erstellen eines benutzerdefinierten Effekts diese Methode, um Eigenschaften von der Effektklasse in die Effektinstanzklasse zu kopieren. Rufen Sie beim Überschreiben <codeph>super.initInstance()</codeph> auf. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffect#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffect#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Array von Effektinstanz-Objekten (ein Objekt pro Ziel) für den Effekt.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Zielobjekten zur Wiedergabe des Effekts. Wenn dieser Parameter angegeben wird, wird die <codeph>targets</codeph>-Eigenschaft des Effekts nicht verwendet.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> wird der Effekt rückwärts wiedergegeben.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffect#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffect#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffect#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Effect:protected:applyTransitionEndProperties"><apiName>applyTransitionEndProperties</apiName><shortdesc>
     Dieses Flag steuert, ob der Effekt, wenn er in einem Übergang ausgeführt wird, automatisch die Eigenschaftswerte des Endstatus anwendet, statt die durch den Effekt eingestellten Werte beizubehalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Dieses Flag steuert, ob der Effekt, wenn er in einem Übergang ausgeführt wird, automatisch die Eigenschaftswerte des Endstatus anwendet, statt die durch den Effekt eingestellten Werte beizubehalten.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:protected:endValuesCaptured"><apiName>endValuesCaptured</apiName><shortdesc>
      Wenn dieses Flag auf „true“ gesetzt ist, wurden die Werte eines Effekts bereits bestimmt. Bei „false“ werden die Werte beim Ausführen des Effekts aus den aktuellen Eigenschaften der Effektziele übernommen. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn dieses Flag auf <codeph>true</codeph> gesetzt ist, wurden die Werte eines Effekts bereits bestimmt. Bei <codeph>false</codeph> werden die Werte beim Ausführen des Effekts aus den aktuellen Eigenschaften der Effektziele übernommen. Diese Eigenschaft ist bei Dateneffekten erforderlich, da die Reihenfolge der Einrichtung für Dateneffekte wie DefaultListEffect und DefaultTileListEffect komplizierter als für normale Effekte ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:instanceClass"><apiName>instanceClass</apiName><shortdesc>
      Ein Objekt der type-Klasse, das die Effektinstanzklasse für diese Effektklasse angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Ein Objekt der type-Klasse, das die Effektinstanzklasse für diese Effektklasse angibt. 
      
      <p>Diese Eigenschaft muss im Konstruktor aller Unterklassen der Effect-Klasse eingestellt sein.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatCount"><apiName>repeatCount</apiName><shortdesc>
      Ein Wert, der angibt, wie oft der Effekt wiederholt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1</apiData><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Wert, der angibt, wie oft der Effekt wiederholt werden soll. Mögliche Werte sind Ganzzahlen größer als oder gleich 0. Bei einem Wert von 1 wird der Effekt einmal wiederholt. Bei einem Wert von 0 wird der Effekt so lange wiederholt, bis er explizit angehalten wird (zum Beispiel durch einen Aufruf der <codeph>end()</codeph>-Methode).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatDelay"><apiName>repeatDelay</apiName><shortdesc>
      Wartezeit in Millisekunden vor der Wiederholung des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wartezeit in Millisekunden vor der Wiederholung des Effekts. Mögliche Werte sind Ganzzahlen größer als oder gleich 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:startDelay"><apiName>startDelay</apiName><shortdesc>
      Wartezeit in Millisekunden vor dem Starten des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wartezeit in Millisekunden vor dem Starten des Effekts. Mögliche Werte sind Ganzzahlen größer als oder gleich 0. Wird die <codeph>repeatCount</codeph>-Eigenschaft zur Wiederholung des Effekts verwendet, wird <codeph>startDelay</codeph> nur bei der ersten Wiedergabe des Effekts angewendet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Bei „true“ erfolgt keine Hintergrundverarbeitung, während der Effekt wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> erfolgt keine Hintergrundverarbeitung, während der Effekt wiedergegeben wird. Zu Hintergrundverarbeitungen zählen Messungen, Layout und Verarbeitung von Serverantworten. Der Standardwert ist <codeph>false</codeph>.
     
      <p>In den meisten Fällen sollten Sie diese Eigenschaft auf <codeph>true</codeph> setzen, um die Anwendungsleistung zu verbessern. In den folgenden beiden Fällen sollte die Eigenschaft jedoch auf <codeph>false</codeph> gesetzt werden:</p>
      <ul>
        <li>Während der Effektwiedergabe sind Benutzereingaben möglich und die Anwendung muss vor dem Ende der Effektwiedergabe darauf reagieren.</li>
        <li>Während der Effektwiedergabe sind Serverantworten möglich und die Anwendung muss während der Effektwiedergabe darauf reagieren.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffect#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:customFilter:get"><apiName>customFilter</apiName><shortdesc conref="mx.effects.IEffect#customFilter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#customFilter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffect#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffect#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:filter:get"><apiName>filter</apiName><shortdesc conref="mx.effects.IEffect#filter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#filter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffect#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc conref="mx.effects.IEffect#isPlaying">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#isPlaying">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc conref="mx.effects.IEffect#perElementOffset">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#perElementOffset">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Aktuelle Zeitposition des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Aktuelle Zeitposition des Effekts. Der Wert dieser Eigenschaft liegt zwischen 0 und der Gesamtdauer, die <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> und <codeph>repeatDelay</codeph> einschließt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc conref="mx.effects.IEffect#relevantProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc conref="mx.effects.IEffect#relevantStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffect#target"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffect#target"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:targets:get"><apiName>targets</apiName><shortdesc conref="mx.effects.IEffect#targets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#targets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffect#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffect#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
  Die MaskEffect-Klasse ist eine abstrakte Basisklasse für alle Effekte, bei denen eine Maske animiert wird, beispielsweise die Verwischungseffekte und der Iriseffekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The MaskEffect class defines the following properties, 
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    createMaskFunction=""
    moveEasingFunction=""
    scaleEasingFunction=""
    scaleXFrom=""
    scaleXTo=""
    scaleYFrom=""
    scaleYTo=""
    show="true|false"
    xFrom=""
    xTo=""
    yFrom=""
    yTo=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die MaskEffect-Klasse ist eine abstrakte Basisklasse für alle Effekte, bei denen eine Maske animiert wird, beispielsweise die Verwischungseffekte und der Iriseffekt. Diese Klasse umfasst Methoden und Eigenschaften, die für alle maskenbasierten Effekte verwendet werden können.
 
  <p>Bei einem Maskierungseffekt wird der Effekt mit einer Überlagerung durchgeführt, die auch Maske genannt wird. Standardmäßig besteht die Maske aus einem Rechteck in der Größe der Zielkomponente. </p>
 
  <p>Der Status der Zielkomponente vor oder nach dem Maskierungseffekt muss unsichtbar sein. Das bedeutet, dass eine Zielkomponente durch einen Maskierungseffekt auf dem Bildschirm immer entweder ein- oder ausgeblendet wird.</p>
 
  <p>Mit den Eigenschaften <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> und <codeph>scaleX</codeph> geben Sie den Anfangs- und Endstatus der Maske an. Beim Wert 1,0 ist die Maske so groß wie die Zielkomponente, bei 2,0 ist die Maske doppelt so groß wie die Komponente, bei 0,5 ist die Maske halb so groß wie die Komponente usw. Um eine dieser Eigenschaften zu verwenden, müssen Sie alle vier Eigenschaften angeben.</p>
 
  <p>Mit den Eigenschaften <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> und <codeph>yTo</codeph> geben Sie die Koordinaten der Anfangs- und Endposition der Maske relativ zur Zielkomponente an, wobei (0, 0) der linken oberen Ecke des Ziels entspricht. Um eine dieser Eigenschaften zu verwenden, müssen Sie alle vier Eigenschaften angeben.</p>
 
  <p>Die Koordinaten von Anfangs- und Endposition der Maske hängen vom Effekttyp ab und davon, ob die Eigenschaft <codeph>show</codeph> auf <codeph>true</codeph> oder <codeph>false</codeph> gesetzt ist. Ist die <codeph>show</codeph>-Eigenschaft des WipeLeft-Effekts beispielsweise auf <codeph>false</codeph> gesetzt, befindet sich die Maske anfänglich an einer Position mit den Koordinaten (0, 0), was der linken oberen Ecke des Ziels entspricht. Die Koordinaten der Endposition in der rechten oberen Ecke des Ziels lauten (Breite, 0), wobei Breite der Breite des Ziels entspricht.</p>
 
  <p>Ist die <codeph>show</codeph>-Eigenschaft des WipeLeft-Effekts auf <codeph>true</codeph> gesetzt, befindet sich die Maske anfänglich an einer Position mit den Koordinaten (Breite, 0). Die Koordinaten der Endposition lauten (0, 0).</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MaskEffectInstance"><linktext>mx.effects.effectClasses.MaskEffectInstance</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Wird ausgelöst, wenn der Effekt endet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Effekt endet.
 
  <p>Wird ein Effekt ein einziges Mal wiedergegeben, wird dieses Ereignis zur gleichen Zeit wie das <codeph>effectEnd</codeph>-Ereignis ausgeführt. Wird der Effekt wiederholt, dann wird das Ereignis nach jeder Wiederholung des Effekts ausgelöst. Das <codeph>endEffect</codeph>-Ereignis wird nach der letzten Wiedergabe des Effekts ausgeführt.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Wird jedes Mal ausgelöst, wenn der Effekt das Ziel aktualisiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird jedesmal ausgelöst, wenn der Effekt das Ziel aktualisiert. Das Auslösen dieses Ereignis entspricht den Aufrufen der <codeph>onMoveTweenUpdate()</codeph>- und der <codeph>onScaleTweenUpdate()</codeph>-Methode.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Wird beim Start des Effekts ausgelöst. Dies entspricht dem ersten Aufruf der onMoveTweenUpdate()- und der onScaleTweenUpdate()-Methode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird beim Start des Effekts ausgelöst. Dies entspricht dem ersten Aufruf der <codeph>onMoveTweenUpdate()</codeph>- und <codeph>der onScaleTweenUpdate()</codeph>-Methode. Flex löst gleichzeitig das erste <codeph>tweenUpdate</codeph>-Ereignis für den Effekt aus.
 
  <p>Das <codeph>Effect.effectStart</codeph>-Ereignis wird vor dem <codeph>tweenStart</codeph>-Ereignis ausgelöst.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:MaskEffect:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:MaskEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Gibt die Komponenteneigenschaften zurück, die von diesem Effekt verändert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von Strings, das die Namen der von diesem Effekt geänderten Eigenschaften angibt.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Komponenteneigenschaften zurück, die von diesem Effekt verändert wurden. Diese Methode gibt ein Array mit folgendem Inhalt zurück: <codeph>[ "visible", "width", "height" ]</codeph>. Da die WipeDown-, WipeLeft-, WipeRight- und WipeDown-Effektunterklassen genau diese Eigenschaften ändern, implementieren diese Klassen diese Methode nicht. 
     
      <p>Wenn Sie für einen benutzerdefinierten Effekt eine Unterklasse zur MaskEffect-Klasse erstellen und diese einen anderen Satz Eigenschaften des Ziels ändert, müssen Sie diese Methode überschreiben und ein Array mit einer Liste der durch die Unterklasse geänderten Eigenschaften zurückgeben.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:MaskEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Wird aufgerufen, wenn der TweenEffect ein TweenEvent auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Ein Ereignisobjekt des Typs TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn der TweenEffect ein TweenEvent auslöst. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die übergeordnete Methode aufrufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:MaskEffect:createMaskFunction"><apiName>createMaskFunction</apiName><shortdesc>
      Funktion, die aufgerufen wird, wenn der Effekt die Maske erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Funktion, die aufgerufen wird, wenn der Effekt die Maske erstellt. Der Standardwert ist eine Funktion, die ein Rechteck mit der gleichen Größe wie das Ziel zurückgibt. 
     
      <p>Die Signatur der benutzerdefinierten Maskenfunktion lautet:</p>
     
      <pre>
      public function createLargeMask(targ:Object, boundp:Rectangle):Shape
      {
          var myMask:Shape = new FlexShape();
     
          // Create mask.
     
          return myMask;
      }
      </pre>
     
      <p>Die benutzerdefinierte Maskenfunktion akzeptiert ein Argument, das der Zielkomponente des Effekts entspricht und ein zweites Argument, das die Abmessungen des Ziels definiert, sodass Sie die Maske in der richtigen Größe erstellen können. Sie verwenden das Argument für den Zugriff auf Eigenschaften der Zielkomponente, wie <codeph>width</codeph> und <codeph>height</codeph>, sodass Sie die Maske in der richtigen Größe erstellen können.</p>
     
      <p>Die Funktion gibt ein Shape-Objekt zur Definition der Maske zurück.</p>   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:moveEasingFunction"><apiName>moveEasingFunction</apiName><shortdesc>
      Beschleunigungsfunktion zum Verschieben der Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Beschleunigungsfunktion zum Verschieben der Maske.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleEasingFunction"><apiName>scaleEasingFunction</apiName><shortdesc>
      Beschleunigungsfunktion zum Skalieren der Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Beschleunigungsfunktion zum Skalieren der Maske.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXFrom"><apiName>scaleXFrom</apiName><shortdesc>
      scaleX der Maske am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      scaleX der Maske am Anfang.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> und <codeph>scaleX</codeph>, angeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXTo"><apiName>scaleXTo</apiName><shortdesc> 
      scaleX der Maske am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      scaleX der Maske am Ende.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> und <codeph>scaleX</codeph>, angeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYFrom"><apiName>scaleYFrom</apiName><shortdesc> 
      scaleY der Maske am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      scaleY der Maske am Anfang.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> und <codeph>scaleX</codeph>, angeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYTo"><apiName>scaleYTo</apiName><shortdesc>
      scaleY der Maske am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      scaleY der Maske am Ende.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> und <codeph>scaleX</codeph>, angeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xFrom"><apiName>xFrom</apiName><shortdesc> 
      Die x-Koordinate der Maskenposition am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Die x-Koordinate der Maskenposition am Anfang.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> und <codeph>yTo</codeph>, angeben. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xTo"><apiName>xTo</apiName><shortdesc> 
      Die x-Koordinate der Zielposition der Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Die x-Koordinate der Zielposition der Maske.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> und <codeph>yTo</codeph>, angeben. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yFrom"><apiName>yFrom</apiName><shortdesc>
      Die y-Koordinate der Maskenposition am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Die y-Koordinate der Maskenposition am Anfang. 
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> und <codeph>yTo</codeph>, angeben. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yTo"><apiName>yTo</apiName><shortdesc> 
      Die y-Koordinate der Zielposition der Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Die y-Koordinate der Zielposition der Maske.
     
      <p>Um diese Eigenschaft festzulegen, müssen Sie alle vier Eigenschaften, <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> und <codeph>yTo</codeph>, angeben. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:showTarget:get"><apiName>showTarget</apiName><shortdesc>
      Gibt an, dass die Zielkomponente sichtbar („true“) oder unsichtbar („false“) wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, dass die Zielkomponente sichtbar (<codeph>true</codeph>) oder unsichtbar (<codeph>false</codeph>) wird. Legen Sie diesen Effekt für einen <codeph>showEffect</codeph>- oder <codeph>hideEffect</codeph>-Auslöser fest, dann setzt Flex die <codeph>showTarget</codeph>-Eigenschaft entweder auf <codeph>true</codeph>, wenn die Komponente sichtbar wird, oder auf <codeph>false</codeph>, wenn sie unsichtbar wird. Wenn Sie diesen Effekt mit einem anderen Effekt-Auslöser verwenden, sollten Sie sie selbst einstellen, oft innerhalb des Ereignis-Listeners für das <codeph>startEffect</codeph>-Ereignis.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
  Die SoundEffect-Klasse gibt MP3-Audiodateien wieder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SoundEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SoundEffect
    <b>Properties</b>
    id="ID"
    autoLoad="true|false"
    bufferTime="1000"
    loops="0"
    panEasingFunction=""
    panFrom="0"
    source=""
    startTime="0"
    useDuration="true|false"
    volumeEasingFunction="true|false"
    volumeTo="1"
     
    <b>Events</b>
    complete="<i>No default</i>"
    id3="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SoundEffect-Klasse gibt MP3-Audiodateien wieder. Beispielsweise kann Sound wiedergegeben werden, wenn der Benutzer auf ein Button-Steuerelement klickt. Bei diesem Effekt können Sie den Sound wiederholen, die Quelldatei auswählen und die Lautstärke und Richtungseinstellung steuern. 
 
  <p>Sie geben die MP3-Datei mit der <codeph>source</codeph>-Eigenschaft an. Wenn Sie die MP3-Datei bereits eingebettet haben, können Sie mit dem <codeph>Embed</codeph>-Schlüsselwort das Class-Objekt der MP3-Datei an die <codeph>source</codeph>-Eigenschaft übergeben. Geben Sie andernfalls die vollständige URL der MP3-Datei an.</p>
  
  </apiDesc><example conref="SoundEffectExample.mxml"><swfblock conref="examples/SoundEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SoundEffectInstance"><linktext>mx.effects.effectClasses.SoundEffectInstance</linktext></link><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="mx.effects:SoundEffect_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Wird regelmäßig beim Laden der Sounddatei ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird regelmäßig beim Laden der Sounddatei ausgelöst.
 
  <p>Innerhalb des Ereignisobjekts können Sie auf die Anzahl der aktuell geladenen Bytes und die insgesamt zu ladende Anzahl von Bytes zugreifen. Das Ereignis wird nicht immer ausgelöst. In manchen Fällen tritt das <codeph>complete</codeph>-Ereignis ohne <codeph>progress</codeph>-Ereignisse auf.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Wird ausgelöst, wenn ein Fehler während des Ladens der Sounddatei auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Fehler während des Ladens der Sounddatei auftritt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.ID3_id3"><apiName>id3</apiName><shortdesc>
  Wird ausgelöst, wenn für eine MP3-Sounddatei ID3-Daten zur Verfügung stehen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ID3</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn für eine MP3-Sounddatei ID3-Daten zur Verfügung stehen.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird ausgelöst, wenn das Laden der Sounddatei abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn das Laden der Sounddatei abgeschlossen ist.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:SoundEffect:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:SoundEffect:load"><apiName>load</apiName><shortdesc>
      Lädt die MP3, wenn die Source-Eigenschaft auf eine URL verweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Lädt die MP3, wenn die <codeph>Source</codeph>-Eigenschaft auf eine URL verweist.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:SoundEffect:bufferTime"><apiName>bufferTime</apiName><shortdesc> 
      Die SoundEffect-Klasse verwendet ein internes Sound-Objekt zum Steuern der MP3-Datei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1000</apiData><apiType value="Number"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Die SoundEffect-Klasse verwendt ein internes Sound-Objekt zum Steuern der MP3-Datei. Diese Eigenschaft gibt an, wie viele Millisekunden Sounddaten im Puffer des Sound-Objekts mindestens enthalten sein müssen. Beim Starten und Fortsetzen der Wiedergabe nach einem Netzwerkabsturz wartet das Sound-Objekt mit der Wiedergabe, bis es mindestens so viele Daten erhalten hat.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:loops"><apiName>loops</apiName><shortdesc>
      Anzahl der Wiedergaben in einer Sound-Schleife. Beim Wert 0 wird der Effekt ein einziges Mal wiedergegeben, beim Wert 1 zwei Male usw. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Anzahl der Wiedergaben in einer Sound-Schleife. Beim Wert 0 wird der Effekt ein einziges Mal wiedergegeben, beim Wert 1 zwei Male usw. Soll die MP3-Datei wiederholt werden, dann wird die Wiedergabezeit durch die <codeph>useDuration</codeph>-Eigenschaft bestimmt.
     
      <p>Die <codeph>duration</codeph>-Eigenschaft hat Vorrang vor dieser Eigenschaft. Wenn die Effektdauer nicht lang genug ist, um den Sound mindestens ein Mal ganz wiederzugeben, durchläuft der Sound keine Schleife.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panEasingFunction"><apiName>panEasingFunction</apiName><shortdesc>
      Die Beschleunigungsfunktion für den Richtungseffekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Die Beschleunigungsfunktion für den Richtungseffekt. Mit dieser Funktion können Sie zwischen den Werten von <codeph>panFrom</codeph> und <codeph>panTo</codeph> interpolieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panFrom"><apiName>panFrom</apiName><shortdesc>
      Richtungseinstellung des Sound-Objekts am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Richtungseinstellung des Sound-Objekts am Anfang. Der Wert kann zwischen -1,0 und 1,0 liegen. Bei -1,0 wird nur der linke Kanal und bei 1,0 nur der rechte Kanal verwendet. Bei 0,0 wird der Sound gleichmäßig über beide Kanäle übertragen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panTo"><apiName>panTo</apiName><shortdesc>
      Richtungseinstellung des Sound-Objekts am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Richtungseinstellung des Sound-Objekts am Ende. Der Wert kann zwischen -1,0 und 1,0 liegen. Bei -1,0 wird nur der linke Kanal und bei 1,0 nur der rechte Kanal verwendet. Bei 0,0 wird der Sound gleichmäßig über beide Kanäle übertragen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:startTime"><apiName>startTime</apiName><shortdesc> 
      Die Anfangsposition in der MP3-Datei in Millisekunden, an der die Wiedergabe beginnen soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Die Anfangsposition in der MP3-Datei in Millisekunden, an der die Wiedergabe beginnen soll.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:useDuration"><apiName>useDuration</apiName><shortdesc>
      Bei „true“ wird der Effekt nach der durch die duration-Eigenschaft angegebenen Zeit beendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird der Effekt nach der durch die <codeph>duration</codeph>-Eigenschaft angegebenen Zeit beendet. Bei <codeph>false</codeph> endet der Effekt am Ende der MP3 oder der Schleife.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeEasingFunction"><apiName>volumeEasingFunction</apiName><shortdesc>
      Die Beschleunigungsfunktion für den Lautstärkeeffekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Die Beschleunigungsfunktion für den Lautstärkeeffekt. Mit dieser Funktion können Sie zwischen den Werten von <codeph>volumeFrom</codeph> und <codeph>volumeTo</codeph> interpolieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeFrom"><apiName>volumeFrom</apiName><shortdesc>
      Lautstärke des Sound-Objekts am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Lautstärke des Sound-Objekts am Anfang. Die Werte können zwischen 0,0 und 1,0 liegen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeTo"><apiName>volumeTo</apiName><shortdesc>
      Lautstärke des Sound-Objekts am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Lautstärke des Sound-Objekts am Ende. Die Werte können zwischen 0,0 und 1,0 liegen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:autoLoad:get"><apiName>autoLoad</apiName><shortdesc> 
      Bei „true“ laden Sie die MP3-Datei, wenn die „Source“ angegeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Bei <codeph>true</codeph> wird die MP3-Datei geladen, wenn die <codeph>Source</codeph> angegeben wurde.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:isLoading:get"><apiName>isLoading</apiName><shortdesc>
      Diese Eigenschaft hat den Wert „true“, wenn die MP3 geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Diese Eigenschaft hat den Wert <codeph>true</codeph>, wenn die MP3 geladen wurde. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:sound:get"><apiName>sound</apiName><shortdesc>
      Das Sound-Objekt, in das die MP3-Datei geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Sound"/></apiValueDef><apiDesc>
      Das Sound-Objekt, in das die MP3-Datei geladen wurde. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:source:get"><apiName>source</apiName><shortdesc>
      Die URL oder Klasse der MP3-Datei, die wiedergegeben werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die URL oder Klasse der MP3-Datei, die wiedergegeben werden soll. Wenn Sie die MP3-Datei bereits eingebettet haben, können Sie mit dem <codeph>Embed</codeph>-Schlüsselwort das Class-Objekt der MP3-Datei an die <codeph>source</codeph>-Eigenschaft übergeben. Geben Sie andernfalls die vollständige URL der MP3-Datei an.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
  Die TweenEffect-Klasse ist die Superklasse für alle Effekte, die auf dem Tweenobjekt basieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:TweenEffect" replacement="spark.effects.Animate" since="4.0">
<description>
  TweenEffect ist die Superklasse für animierte Effekte in Flex 3. Ab Flex 4 erweitern die Spark-Effekte die spark.effects.Animate-Klasse anstelle von TweenEffect.
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TweenEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TagName
    <b>Properties</b>
    easingFunction="<i>easing function name; no default</i>"
     
    <b>Events</b>
    tweenEnd="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TweenEffect-Klasse ist die Superklasse für alle Effekte, die auf dem Tweenobjekt basieren. Diese Klasse umfasst Methoden und Eigenschaften, die für alle tweenbasierten Effekte verwendet werden können, um eine Duplizierung des Codes an anderen Stellen zu vermeiden.
 
  <p>Sie erstellen eine Unterklasse der TweenEffect-Klasse, um einen Effekt zu definieren, der eine Animation während eines Zeitraums wiedergibt. Der Größenänderungseffekt ändert beispielsweise die Größe des Ziels für einen angegebenen Zeitraum.</p>
 
  </apiDesc><example conref="SimpleTweenEffectExample.mxml"><swfblock conref="examples/SimpleTweenEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Wird ausgelöst, wenn der Tweeneffekt endet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Tweeneffekt endet. Dieses Ereignis entspricht einem Aufruf der <codeph>TweenEffectInstance.onTweenEnd()</codeph>-Methode.
 
  <p>Wird ein Tweeneffekt ein einziges Mal wiedergegeben, wird dieses Ereignis zur gleichen Zeit wie das <codeph>effectEnd</codeph>-Ereignis ausgeführt. Wird der Tweeneffekt wiederholt, dann wird es nach jeder Wiederholung des Effekts ausgeführt. Das <codeph>endEffect</codeph>-Ereignis wird nach der letzten Wiedergabe des Effekts ausgeführt.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Wird jedes Mal ausgelöst, wenn der Tweeneffekt das Ziel aktualisiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird jedes Mal ausgelöst, wenn der Tweeneffekt das Ziel aktualisiert. Dieses Ereignis entspricht einem Aufruf der <codeph>TweenEffectInstance.onTweenUpdate()</codeph>-Methode.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Wird beim Start des Tweeneffekts ausgelöst. Dies entspricht dem ersten Aufruf der onTweenUpdate()-Methode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird beim Start des Tweeneffekts ausgelöst. Dies entspricht dem ersten Aufruf der <codeph>onTweenUpdate()</codeph>-Methode. Flex löst gleichzeitig das erste <codeph>tweenUpdate</codeph>-Ereignis für den Effekt aus.
 
  <p>Das <codeph>Effect.effectStart</codeph>-Ereignis wird vor dem <codeph>tweenStart</codeph>-Ereignis ausgelöst.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:TweenEffect:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:TweenEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Wird aufgerufen, wenn der TweenEffect ein TweenEvent auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Ein Ereignisobjekt des Typs TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn der TweenEffect ein TweenEvent auslöst. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die übergeordnete Methode aufrufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:TweenEffect:easingFunction"><apiName>easingFunction</apiName><shortdesc>
      Die Beschleunigungsfunktion für die Animation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/></apiValueDef><apiDesc>
      Die Beschleunigungsfunktion für die Animation. Die Beschleunigungsfunktion wird zum Interpolieren zwischen Anfangs- und Zielwert verwendet. Eine einfache Beschleunigungsfunktion interpoliert linear, anspruchsvollere Beschleunigungsfunktionen erwecken den Eindruck von Beschleunigung und Verlangsamung und lassen die Animation so natürlicher erscheinen.
     
      <p>Wenn keine Beschleunigungsfunktion angegeben wird, wird eine Beschleunigungsfunktion auf der Basis der <codeph>Math.sin()</codeph>-Methode verwendet.</p>
     
      <p>Die Beschleunigungsfunktion setzt die durch Robert Penner bekannt gewordene Funktionssignatur ein. Die Funktion akzeptiert vier Argumente. Das erste Argument ist die „aktuelle Zeit“, wobei die Startzeit der Animation 0 entspricht. Das zweite Argument ist der Wert am Anfang der Animation (eine Zahl). Das dritte Argument ist der Endwert abzüglich des Anfangswerts. Das vierte Argument ist die Dauer der Animation. Der Rückgabewert ist der interpolierte Wert für die aktuelle Zeit. Dies ist normalerweise ein Wert zwischen dem Anfangs- und Endwert.</p>
     
      <p>Der Wert dieser Eigenschaft muss ein Funktionsobjekt sein.</p>
     
      <p>Das mx.effects.easing-Paket von Flex enthält einen Satz Beschleunigungsfunktionen.</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Tween"><apiName>Tween</apiName><shortdesc>
  Die Tween-Klasse definiert ein Tween, eine Eigenschaftsanimation, die auf einem Zielobjekt über einen Zeitraum hinweg wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Tween" replacement="spark.effects.animation.Animation" since="4.0">
<description>
  Tween ist die zugrunde liegende Animationsklasse für Effekte in Flex 3. Ab Flex 4 verwenden die Spark-Effekte die spark.effects.animation.Animation-Klasse, die eine ähnliche Funktionalität bietet.
 </description>
	</Alternative></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Tween-Klasse definiert ein Tween, eine Eigenschaftsanimation, die auf einem Zielobjekt über einen Zeitraum hinweg wiedergegeben wird. Die Animation kann eine Positionsänderung wie beim Verschieben-Effekt, eine Größenänderung wie beim Zoomeffekt oder Größenänderungseffekt, eine Sichtbarkeitsänderung wie beim Effekt „Ein-und ausblenden“ oder Auflösungseffekt oder andere Animationstypen umfassen.
 
  <p>Bei der Definition von Tweeneffekten erstellen Sie normalerweise eine Instanz der Tween-Klasse innerhalb Ihrer Überschreibung der <codeph>EffectInstance.play()</codeph>-Methode. Eine Tweeninstanz akzeptiert die Eigenschaften <codeph>startValue</codeph>, <codeph>endValue</codeph> und <codeph>duration</codeph> und eine optionale Beschleunigungsfunktion zum Definieren der Animation.</p> 
 
  <p>Das Tweenobjekt ruft während der Dauer des Effekts regelmäßig die <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph>-Rückruffunktion der Effektinstanz auf und übergibt der <codeph>onTweenUpdate()</codeph>-Methode einen interpolierten Wert zwischen <codeph>startValue</codeph> und <codeph>endValue</codeph>. Normalerweise aktualisiert die Rückruffunktion eine Eigenschaft des Zielobjekts, um das Objekt während der Effektdauer zu animieren.</p>
 
  <p>Am Ende des Effekts rufen Tweenobjekte die <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph>-Rückruffunktion auf, wenn Sie eine solche definiert haben. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><apiConstructor id="mx.effects:Tween:Tween"><apiName>Tween</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>listener</apiItemName><apiType value="Object"/><apiDesc>Objekt, das bei jedem Intervall der Animation benachrichtigt wird. Normalerweise übergeben Sie das <codeph>this</codeph>-Schlüsselwort als Wert. Der <codeph>listener</codeph> muss die <codeph>onTweenUpdate()</codeph>-Methode und optional die <codeph>onTweenEnd()</codeph>-Methode definieren. Die erste Methode wird für jedes Intervall der Animation und die zweite nur nach Beendigung der Animation aufgerufen.
     
      </apiDesc></apiParam><apiParam><apiItemName>startValue</apiItemName><apiType value="Object"/><apiDesc>Wert(e) am Anfang der Animation. Entweder eine Zahl oder ein Array von Zahlen. Bei Übergabe einer Zahl interpoliert Tween zwischen dieser und der im <codeph>endValue</codeph>-Parameter übergebenen Zahl. Bei Übergabe von einem Array von Zahlen wird jede Zahl im Array interpoliert.
     
      </apiDesc></apiParam><apiParam><apiItemName>endValue</apiItemName><apiType value="Object"/><apiDesc>Wert(e) am Ende der Animation. Der Typ dieses Arguments muss dem <codeph>startValue</codeph>-Parameter entsprechen.
     
      </apiDesc></apiParam><apiParam><apiItemName>duration</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Dauer der Animation in Millisekunden.
     
      </apiDesc></apiParam><apiParam><apiItemName>minFps</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Gibt an, wie oft die <codeph>onTweenUpdate()</codeph>-Methode pro Sekunde mindestens aufgerufen werden muss. Der Tweencode versucht, die <codeph>onTweenUpdate()</codeph>-Methode so oft wie möglich (bis zu 100 Mal pro Sekunde) aufzurufen. Wenn die Häufigkeit jedoch unter <codeph>minFps</codeph> sinkt, wird die Animation automatisch verlängert. Wenn eine Animation also an einer bestimmten Stelle vorübergehend zum Stillstand kommt (da nicht genügend CPU-Zyklen zur Verfügung stehen), wird sie an dieser Stelle fortgesetzt und plötzliche Sprünge werden vermieden. 
     
      </apiDesc></apiParam><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Legt eine alternative Update-Rückruffunktion fest, die statt <codeph>listener.OnTweenUpdate()</codeph> verwendet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Legt eine alternative End-Rückruffunktion fest, die statt <codeph>listener.OnTweenEnd()</codeph> verwendet wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Wenn der Konstruktor aufgerufen wird, beginnt automatisch die Wiedergabe der Animation.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Tween:endTween"><apiName>endTween</apiName><shortdesc>
      Unterbricht das Tween, springt sofort zum Ende des Tweens und ruft die onTweenEnd()-Rückruffunktion auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Unterbricht das Tween, springt sofort zum Ende des Tweens und ruft die <codeph>onTweenEnd()</codeph>-Rückruffunktion auf.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:pause"><apiName>pause</apiName><shortdesc>
      Hält den Effekt an, bis die resume()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält den Effekt an, bis die <codeph>resume()</codeph>-Methode aufgerufen wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:resume"><apiName>resume</apiName><shortdesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der pause()-Methode vorübergehend unterbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der <codeph>pause()</codeph>-Methode vorübergehend unterbrochen wurde. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:reverse"><apiName>reverse</apiName><shortdesc>
      Gibt den Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:seek"><apiName>seek</apiName><shortdesc>
      Lässt den Tweeneffekt an die angegebene Position vorrücken.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiDesc>Die Position (in Millisekunden) zwischen 0 und dem Wert der <codeph>duration</codeph>-Eigenschaft.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Lässt den Tweeneffekt an die angegebene Position vorrücken. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:setTweenHandlers"><apiName>setTweenHandlers</apiName><shortdesc>
      Standardmäßig ruft die Tween-Klasse die mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()-Rückruffunktion der Effektinstanz in regelmäßigen Abständen während der Effektwiedergabe auf. Nach der Effektwiedergabe ruft sie die optionale mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()-Rückruffunktion auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiDesc>Legt die Update-Rückruffunktion fest.
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiDesc>Legt die End-Rückruffunktion fest.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Standardmäßig ruft die Tween-Klasse die <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph>-Rückruffunktion der Effektinstanz regelmäßig während der Effektwiedergabe und die optionale <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph>-Rückruffunktion nach der Effektwiedergabe auf. 
     
      <p>Auf diese Art können Sie verschiedene Methoden als Update- und End-Rückruffunktionen festlegen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:stop"><apiName>stop</apiName><shortdesc>
      Hält das Tween an und beendet es, ohne Auslösen eines Ereignisses und ohne Aufrufen der Endfunktion des Tweens oder onTweenEnd().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält das Tween an und beendet es, ohne Auslösen eines Ereignisses, Aufrufen der Endfunktion des Tweens oder <codeph>onTweenEnd()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Tween:duration"><apiName>duration</apiName><shortdesc>
      Dauer der Animation in Millisekunden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Dauer der Animation in Millisekunden. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:listener"><apiName>listener</apiName><shortdesc>
      Objekt, das bei jedem Intervall der Animation benachrichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Objekt, das bei jedem Intervall der Animation benachrichtigt wird. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:easingFunction:set"><apiName>easingFunction</apiName><shortdesc>
      Stellt die Beschleunigungsfunktion für die Animation ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
      Stellt die Beschleunigungsfunktion für die Animation ein. Die Beschleunigungsfunktion dient zum Interpolieren zwischen <codeph>startValue</codeph>- und <codeph>endValue</codeph>-Wert. Eine einfache Beschleunigungsfunktion interpoliert linear, anspruchsvollere Beschleunigungsfunktionen erwecken den Eindruck von Beschleunigung und Verlangsamung und lassen die Animation so natürlicher erscheinen.
     
      <p>Wenn keine Beschleunigungsfunktion angegeben wird, wird eine Beschleunigungsfunktion auf der Basis der <codeph>Math.sin()</codeph>-Methode verwendet.</p>
     
      <p>Die Beschleunigungsfunktion setzt die durch Robert Penner bekannt gewordene Funktionssignatur ein. Die Funktion akzeptiert vier Argumente. Das erste Argument ist die „aktuelle Zeit“, wobei die Startzeit der Animation 0 entspricht. Das zweite Argument ist der Wert am Anfang der Animation (eine Zahl). Das dritte Argument ist der Endwert abzüglich des Anfangswerts. Das vierte Argument ist die Dauer der Animation. Der Rückgabewert ist der interpolierte Wert für die aktuelle Zeit (normalerweise ein Wert zwischen dem Anfangs- und Endwert).</p>
     
      <p>Das mx.effects.easing-Paket von Flex enthält einen Satz Beschleunigungsfunktionen.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
  Die EffectInstance-Klasse stellt eine Instanz eines Effekts dar, der auf einem Ziel wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffectInstance</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EffectInstance-Klasse stellt eine Instanz eines Effekts dar, der auf einem Ziel wiedergegeben wird. Mit jedem Ziel ist eine andere Effektinstanz verknüpft. Die Lebensdauer einer Effektinstanz ist begrenzt. Eine Instanz wird erstellt, wenn ein Effekt auf einem Ziel wiedergegeben wird, und am Ende der Wiedergabe gelöscht. Werden mehrere Effekte auf einem Ziel gleichzeitig wiedergegeben (beispielsweise bei einem Paralleleffekt), dann wird für jeden Effekt eine Effektinstanz erstellt.
 
  <p>Effektentwickler müssen eine Instanzklasse für ihre benutzerdefinierten Effekte erstellen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiConstructor id="mx.effects:EffectInstance:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>UIComponent-Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectInstance:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffectInstance#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#finishEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#initEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das zum Auslösen des Effekts gesendete Ereignisobjekt. Wenn der Auslöser ein mouseDownEffect war, ist das Ereignis ein MouseEvent vom Typ MouseEvent.MOUSEDOWN. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#initEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffectInstance#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffectInstance#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffectInstance#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffectInstance#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#startEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#startEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffectInstance#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectInstance:protected:playCount"><apiName>playCount</apiName><shortdesc> 
      Gibt an, wie oft die Instanz wiedergegeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc> 
      Gibt an, wie oft die Instanz wiedergegeben wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffectInstance#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffectInstance#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effect:get"><apiName>effect</apiName><shortdesc conref="mx.effects.IEffectInstance#effect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Aktuelle Zeitposition des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Aktuelle Zeitposition des Effekts. Der Wert dieser Eigenschaft liegt zwischen 0 und der Gesamtdauer, die <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> und <codeph>repeatDelay</codeph> einschließt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc conref="mx.effects.IEffectInstance#propertyChanges">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#propertyChanges">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#startDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#startDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffectInstance#target">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#target">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffectInstance#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Zoom"><apiName>Zoom</apiName><shortdesc>
  Beim Zoomeffekt wird ein Objekt von einem Mittelpunkt aus vergrößert und verkleinert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Zoom" replacement="spark.effects.Scale" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Zoom&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Zoom
    id="ID"
    captureRollEvents="false|true"
    originX="Calculated"
    originY="Calculated"
    zoomWidthFrom="0.01"
    zoomWidthTo="1.0"
    zoomHeightFrom="0.01"
    zoomHeightTo="1.0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Beim Zoomeffekt wird ein Objekt von einem Mittelpunkt aus vergrößert und verkleinert.
 
  <p>Wenn Sie einen Zoomeffekt auf Text anwenden, der mit einer Systemschriftart gerendert wird, skaliert Flex den Text zwischen ganzen Punktgrößen. Eingebettete Schriftarten sind zwar keine Voraussetzung für die Anwendung eines Zoomeffekts, jedoch wirkt der Effekt dadurch gleichmäßiger. </p>
 
  <p><b>Hinweis:</b> Der Zoomeffekt funktioniert nicht, wenn die <codeph>Container.autoLayout</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist.</p>
  
  </apiDesc><example conref="ZoomEffectExample.mxml"><swfblock conref="examples/ZoomEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ZoomInstance"><linktext>mx.effects.effectClasses.ZoomInstance</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><apiConstructor id="mx.effects:Zoom:Zoom"><apiName>Zoom</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Zoom:captureRollEvents"><apiName>captureRollEvents</apiName><shortdesc>
	  Bei „true“ löst Flex nur rollOut- und rollOver-Ereignisse aus, wenn die Maus bewegt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Bei <codeph>true</codeph> löst Flex nur <codeph>rollOut</codeph>- und <codeph>rollOver</codeph>-Ereignisse aus, wenn die Maus bewegt wurde. Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, wenn Sie den Zoomeffekt verwenden, um das Effektziel abwechselnd groß und klein anzuzeigen. 
	  
	  <p>Sie lösen beispielsweise mit <codeph>rollOverEffect</codeph> den Zoomeffekt zum Verkleinern des Ziels aus. Bei Verkleinerung des Ziels befindet sich der Mauszeiger nicht mehr über dem Ziel, wodurch ein <codeph>rollOut</codeph>-Ereignis und der entsprechende <codeph>rollOutEffect</codeph> ausgelöst werden. Wenn Sie die <codeph>captureRollEvents</codeph>-Eigenschaft auf <codeph>true</codeph> setzen, löst Flex nur bei einer Mausbewegung ein <codeph>rollOut</codeph>-Ereignis aus. </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originX"><apiName>originX</apiName><shortdesc>
	  Wert für die x-Position des Zoomursprungs, wenn das Effektziel sich in einem Container befindet, der absolute Positionen unterstützt, wie etwa der Arbeitsflächencontainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Wert für die x-Position des Zoomursprungs, wenn das Effektziel sich in einem Container befindet, der absolute Positionen unterstützt, wie etwa der Arbeitsflächencontainer. Der Zoomursprung ist die Position auf dem Ziel, die sich im Mittelpunkt des Zoomeffekts befindet.
	 
	  <p>Der Wert muss zwischen 0 und der Breite der Zielkomponente liegen.</p> 
	 
	  Der Standardwert ist <codeph>target.width</codeph> / 2, was dem Mittelpunkt des Ziels entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originY"><apiName>originY</apiName><shortdesc>
	  Wert für die y-Position des Zoomursprungs, wenn das Effektziel sich in einem Container befindet, der absolute Positionen unterstützt, wie etwa der Arbeitsflächencontainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Wert für die y-Position des Zoomursprungs, wenn das Effektziel sich in einem Container befindet, der absolute Positionen unterstützt, wie etwa der Arbeitsflächencontainer. Der Zoomursprung ist die Position auf dem Ziel, die sich im Mittelpunkt des Zoomeffekts befindet.
	 
	  <p>Der Wert muss zwischen 0 und der Höhe der Zielkomponente liegen.</p> 
	 
	  Der Standardwert ist <codeph>target.height</codeph> / 2, was dem Mittelpunkt des Ziels entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightFrom"><apiName>zoomHeightFrom</apiName><shortdesc>
	  Anfangswert zum Zoomen der Höhe (Prozentwert zwischen 0,01 und 1,0).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Anfangswert zum Zoomen der Höhe (Prozentwert zwischen 0,01 und 1,0). Der Standardwert ist 0,01, was einer sehr geringen Höhe entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightTo"><apiName>zoomHeightTo</apiName><shortdesc>
	  Endwert zum Zoomen der Höhe (Prozentwert zwischen 0.01 und 1.0).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Endwert zum Zoomen der Höhe (Prozentwert zwischen 1.0 und 0.01). Der Standardwert ist 1.0, was der normalen Objekthöhe entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthFrom"><apiName>zoomWidthFrom</apiName><shortdesc>
	  Anfangswert zum Zoomen der Breite (Prozentwert zwischen 0.01 und 1.0).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Anfangswert zum Zoomen der Breite (Prozentwert zwischen 0,01 und 1,0). Der Standardwert ist 0,01, was einer sehr geringen Breite entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthTo"><apiName>zoomWidthTo</apiName><shortdesc>
	  Endwert zum Zoomen der Breite (Prozentwert zwischen 0.01 und 1.0).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Endwert zum Zoomen der Breite (Prozentwert zwischen 1.0 und 0.01). Der Standardwert ist 1.0, was der normalen Objektbreite entspricht.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
  Der AnimateProperty-Effekt animiert eine Eigenschaft oder einen Stil einer Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AnimateProperty&gt;</code> tag
  inherits all the tag attributes of its superclass
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:AnimateProperty 
    id="ID"
   fromValue="0"
    isStyle="false|true"	 
    property="<i>required</i>"
    roundValue="false|true"
    toValue="0" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der AnimateProperty-Effekt animiert eine Eigenschaft oder einen Stil einer Komponente. Sie geben den Eigenschaftsnamen, Anfangs- und Endwert der zu animierenden Eigenschaft an. Der Effekt setzt die Eigenschaft auf den Anfangswert, aktualisiert den Eigenschaftswert während der Dauer des Effekts, bis der Endwert erreicht ist. 
 
  <p>Wenn Sie beispielsweise die Breite eines Button-Steuerelements ändern, können Sie <codeph>width</codeph> als zu animierende Eigenschaft angeben sowie die Anfangs- und Endwerte des Effekts.</p> 
 
  </apiDesc><example conref="AnimatePropertyEffectExample.mxml"><swfblock conref="examples/AnimatePropertyEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#AnimatePropertyInstance"><linktext>mx.effects.effectClasses.AnimatePropertyInstance</linktext></link></related-links><apiConstructor id="mx.effects:AnimateProperty:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:AnimateProperty:fromValue"><apiName>fromValue</apiName><shortdesc>
	  Der Anfangswert der Eigenschaft für den Effekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Der Anfangswert der Eigenschaft für den Effekt. Der Standardwert ist der aktuelle Eigenschaftswert des Ziels.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:isStyle"><apiName>isStyle</apiName><shortdesc>
	  Bei „true“ ist das Eigenschaftsattribut ein Stil und Sie stellen es mit der setStyle()-Methode ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Bei <codeph>true</codeph> ist das Eigenschaftsattribut ein Stil und Sie stellen es mit der <codeph>setStyle()</codeph>-Methode ein. 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:property"><apiName>property</apiName><shortdesc>
	  Der Name der Eigenschaft auf dem zu animierenden Ziel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Der Name der Eigenschaft auf dem zu animierenden Ziel. Dieses Attribut ist erforderlich.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:roundValue"><apiName>roundValue</apiName><shortdesc>
	  Bei „true“ wird der interpolierte Tween-Wert auf die nächste Ganzzahl gerundet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Bei <codeph>true</codeph> wird der interpolierte Tween-Wert auf die nächste Ganzzahl gerundet. Diese Eigenschaft ist nützlich, wenn die animierte Eigenschaft eine Ganzzahl mit oder ohne Vorzeichen ist.
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:toValue"><apiName>toValue</apiName><shortdesc>
	  Der Endwert des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Der Endwert des Effekts. Der Standardwert ist der aktuelle Eigenschaftswert des Ziels.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Move"><apiName>Move</apiName><shortdesc>
  Der Verschieben-Effekt ändert die Position einer Komponente in einem angegebenen Zeitintervall.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Move" replacement="spark.effects.Move" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Move&gt;</code> tag
  inherits all of the tag attributes of its of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Move
    id="ID"
    xFrom="val" 
    yFrom="val"
    xTo="val"
    yTo="val"
    xBy="val"
    yBy="val"
   /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Verschieben-Effekt ändert die Position einer Komponente in einem angegebenen Zeitintervall. Sie können die Anfangsposition mit den <codeph>xFrom</codeph>- und <codeph>yFrom</codeph>-Werten und die Zielposition mit <codeph>xTo</codeph>- und <codeph>yTo</codeph>-Werten oder die Anzahl der Pixel zum Verschieben der Komponente mit <codeph>xBy</codeph> und <codeph>yBy</codeph> angeben. 
 
  <p>Wenn Sie zwei Werte (Anfangsposition, Zielposition oder Verschiebung) angeben, berechnet Flex den dritten Wert. Wenn Sie alle drei Werte angeben, ignoriert Flex die <codeph>xBy</codeph>- und <codeph>yBy</codeph>-Werte. Wenn Sie nur den <codeph>xTo</codeph>- und den <codeph>yTo</codeph>-Wert oder den <codeph>xBy</codeph>- und den <codeph>yBy</codeph>-Wert angeben, legt Flex für <codeph>xFrom</codeph> und <codeph>yFrom</codeph> die aktuelle Position des Objekts fest.</p>
  
  <p>Wenn Sie einen Verschieben-Effekt für einen <codeph>moveEffect</codeph>-Auslöser angeben und die sechs From-, To- und By-Eigenschaften nicht festlegen, legt Flex sie fest, um einen glatten Übergang zwischen der alten und neuen Position des Objekts zu erzeugen.</p>
 
  <p>Normalerweise wenden Sie diesen Effekt auf ein Ziel in einem Container an, der absolute Positionen verwendet, wie ein Arbeitsflächencontainer, oder für den <codeph>"layout=absolute"</codeph> gilt, wie bei einem Anwendungs- oder Bedienfeldcontainer. Wenn Sie ihn auf ein Ziel in einem Container mit automatischen Layout anwenden, wie einen VBox- oder Grid-Container, wird das Ziel zwar verschoben, kehrt jedoch bei der nächsten Layout-Aktualisierung des Containers an die ursprüngliche Position zurück. Sie können die <codeph>autoLayout</codeph>-Eigenschaft des Containers auf <codeph>false</codeph> setzen, um die Rückkehr zu verhindern, dadurch wird jedoch die Layoutfunktion für alle Steuerelemente im Container deaktiviert.</p>
  
  </apiDesc><example conref="MoveEffectExample.mxml"><swfblock conref="examples/MoveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MoveInstance"><linktext>mx.effects.effectClasses.MoveInstance</linktext></link></related-links><apiConstructor id="mx.effects:Move:Move"><apiName>Move</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Move:xBy"><apiName>xBy</apiName><shortdesc> 
      Anzahl der Pixel zum Verschieben der Komponenten entlang der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Anzahl der Pixel zum Verschieben der Komponenten entlang der x-Achse. Werte können negativ sein. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xFrom"><apiName>xFrom</apiName><shortdesc> 
      x-Koordinate der Anfangsposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      x-Koordinate der Anfangsposition.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xTo"><apiName>xTo</apiName><shortdesc> 
      x-Koordinate der Zielposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      x-Koordinate der Zielposition.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yBy"><apiName>yBy</apiName><shortdesc> 
      Anzahl der Pixel zum Verschieben der Komponenten entlang der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Anzahl der Pixel zum Verschieben der Komponenten entlang der y-Achse. Werte können negativ sein.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yFrom"><apiName>yFrom</apiName><shortdesc>
      y-Koordinate der Anfangsposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      y-Koordinate der Anfangsposition.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yTo"><apiName>yTo</apiName><shortdesc> 
      y-Koordinate der Zielposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      y-Koordinate der Zielposition.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Iris"><apiName>Iris</apiName><shortdesc>
  Der Iriseffekt animiert das Effektziel durch Vergrößern oder Verkleinern einer rechteckigen Maske, die auf dem Ziel zentriert ist. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Iris&gt;</code> tag
  inherits all of the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Iris
    id="ID"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:MaskEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Iriseffekt animiert das Effektziel durch Vergrößern oder Verkleinern einer rechteckigen Maske, die auf dem Ziel zentriert ist. Der Effekt kann die Maske vom Mittelpunkt des Ziels aus vergrößern, um den Blick auf das Ziel freizugeben, oder die Maske verkleinern, um das Ziel zu verdecken.
 
  </apiDesc><example conref="IrisEffectExample.mxml"><swfblock conref="examples/IrisEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#IrisInstance"><linktext>mx.effects.effectClasses.IrisInstance</linktext></link></related-links><apiConstructor id="mx.effects:Iris:Iris"><apiName>Iris</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.effects:Sequence"><apiName>Sequence</apiName><shortdesc>
  Der Sequenzeffekt gibt mehrere untergeordnete Effekte nacheinander in der Reihenfolge wieder, in der sie hinzugefügt wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sequence&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Sequence id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Sequence&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Sequenzeffekt gibt mehrere untergeordnete Effekte nacheinander in der Reihenfolge wieder, in der sie hinzugefügt wurden.
  
  <p>Sie können einen Sequenzeffekt in MXML wie in folgendem Beispiel gezeigt erstellen:</p>
 
  <pre>
  &lt;mx:Sequence id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Sequence>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Beachten Sie, dass das <codeph>&lt;mx:children></codeph>-Tag optional ist.</p>
  
  <p>Zum Starten eines Composite-Effekts in ActionScript sind normalerweise fünf Schritte erforderlich:</p>
 
  <ol>
    <li>Erstellen von Instanzen der Effektobjekte, die kombiniert werden sollen; Beispiel: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Einstellen von Eigenschaften wie <codeph>duration</codeph> für die einzelnen Effektobjekte.</li>
    <li>Erstellen einer Instanz des Sequenzeffektobjekts; Beispiel: 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Aufrufen der <codeph>addChild()</codeph>-Methode für jedes Effektobjekt; Beispiel: 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Aufrufen der <codeph>play()</codeph>-Methode des Sequenzeffekts; Beispiel: 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc><example conref="SequenceEffectExample.mxml"><swfblock conref="examples/SequenceEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SequenceInstance"><linktext>mx.effects.effectClasses.SequenceInstance</linktext></link></related-links><apiConstructor id="mx.effects:Sequence:Sequence"><apiName>Sequence</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Dieses Argument wird für Sequenzeffekte ignoriert: Es wird nur zur Sicherstellung der Einheitlichkeit bei anderen Effekten eingeschlossen.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Sequence:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird. Dabei werden die startDelay- und Wiederholungsinformationen von allen untergeordneten Effekten und deren Dauer berücksichtigt und das entsprechende Ergebnis zurückgegeben.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Dissolve"><apiName>Dissolve</apiName><shortdesc>
  Animiert die Komponente, wobei die Überblendung entweder von transparent zu undurchsichtig oder umgekehrt erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Dissolve&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Dissolve
    id="ID"
    alphaFrom="val"
    alphaTo="val"
    color="val"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Animiert die Komponente, wobei die Überblendung entweder von transparent zu undurchsichtig oder umgekehrt erfolgt. Bei Wiedergabe des Auflösungseffekts geschieht Folgendes:
  
  <ol>
    <li>Zu Beginn erstellt der Effekt ein undurchsichtiges Rechteck. Das Rechteck wird über der Zielkomponente angezeigt, die Farbe entspricht der <codeph>Dissolve.color</codeph>-Eigenschaft und die <codeph>alpha</codeph>-Eigenschaft ist anfänglich auf (1,0 - <codeph>Dissolve.alphaFrom</codeph>) gesetzt.</li>
    <li>Bei der Wiedergabe des Effekts geht die <codeph>alpha</codeph>-Eigenschaft des Rechtecks von (1,0 - <codeph>alphaFrom</codeph>) zu (1,0 - <codeph>alphaTo</codeph>) über. Während das Rechteck zunehmend undurchsichtiger wird, wird der darunter befindliche Inhalt langsam ausgeblendet.</li>
    <li>Am Ende des Effekts wird das Rechteck gelöscht.</li>
  </ol>
  
  <p>Wenn das Zielobjekt ein Container ist, wird der Auflösungseffekt auf den Inhaltsbereich des Containers angewendet. Der Inhaltsbereich ist die Region, in der die Hintergrundfarbe des Containers sichtbar ist.</p>
 
  <p><b>Hinweis</b>: Um den Auflösungseffekt mit dem<codeph>creationCompleteEffect</codeph>-Auslöser eines DataGrid-Steuerelements zu verwenden, müssen Sie den Datenprovider des Steuerelements inline mit einem untergeordnetem Tag des DataGrid-Steuerelements oder mit einer Datenbindung definieren. Der Grund dafür ist, dass der Datenprovider erst nach dem Auslösen des <codeph>creationComplete</codeph>-Ereignisses festgelegt wird. Daher hat Flex die Größeneinstellung des DataGrid-Steuerelements noch nicht abgeschlossen, wenn die Wiedergabe des Effekts beginnt. </p>
  
  </apiDesc><example conref="DissolveEffectExample.mxml"><swfblock conref="examples/DissolveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#DissolveInstance"><linktext>mx.effects.effectClasses.DissolveInstance</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><apiConstructor id="mx.effects:Dissolve:Dissolve"><apiName>Dissolve</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Dissolve:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
	  Die Transparenzstufe am Anfang kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Die Transparenzstufe am Anfang kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht. 
	 
	  <p>Wenn die Zielkomponente durch den Effekt ausgeblendet wird, entspricht der Standardwert dem aktuellen Wert der <codeph>alpha</codeph>-Eigenschaft des Ziels. Wenn die Zielkomponente durch den Effekt eingeblendet wird, ist der Standardwert 0,0.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
	  Die Transparenzstufe am Ende kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Die Transparenzstufe am Ende kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht. 
	 
	  <p>Wenn die Zielkomponente durch den Effekt ausgeblendet wird, ist der Standardwert 0,0. Wenn die Zielkomponente durch den Effekt eingeblendet wird, entspricht der Standardwert dem aktuellen Wert der <codeph>alpha</codeph>-Eigenschaft des Ziels.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:color"><apiName>color</apiName><shortdesc> 
	  Hex-Wert für die Farbe des eingeblendeten Rechtecks, das der Effekt über dem Zielobjekt anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFFFFFFF</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
	  Hex-Wert für die Farbe des eingeblendeten Rechtecks, das der Effekt über dem Zielobjekt anzeigt. Der Standardwert ist die durch die <codeph>backgroundColor</codeph>-Stileigenschaft der Zielkomponente angegebene Farbe oder 0xFFFFFF, wenn <codeph>backgroundColor</codeph> nicht eingestellt ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:targetArea"><apiName>targetArea</apiName><shortdesc>
	  Der Bereich des Ziels zur Wiedergabe des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.geom:RoundedRectangle</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Der Bereich des Ziels zur Wiedergabe des Effekts. Die Auflösungsüberlagerung wird mit den Abmessungen dieser Eigenschaft gezeichnet. UIComponents erstellen eine Überlagerung über der gesamten Komponente. Container erstellen eine Überlagerung über ihrem Inhaltsbereich, nicht jedoch dem Chrom. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Blur"><apiName>Blur</apiName><shortdesc>
  Durch den Weichzeichnungseffekt werden die Umrisse der Komponente „verwischt“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Blur" replacement="spark.effects.AnimateFilter" since="4.0">
<description>
  In Flex 4 verwenden Sie einen AnimateFilter-Effekt mit einem Weichzeichnungsbitmapfilter.
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Blur&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Blur
    id="ID"
    blurXFrom="val"
    blurXTo="val"
    blurYFrom="val"
    blurYTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Durch den Weichzeichnungseffekt werden die Umrisse der Komponente „verwischt“. Ein Weichzeichnungseffekt bewirkt ein Weichzeichnen der Details eines Bilds. Dabei können Sie Weichzeichnungen erstellen, die von einer geringfügig unscharfen Anzeige bis zu einer Gauss-Weichzeichnung reichen, einer verschwommenen Sicht, etwa wie durch eine Milchglasscheibe.  
 
  <p>Der Weichzeichnungseffekt verwendet die BlurFilter-Klasse von Flash als Teil der Implementierung. Weitere Informationen finden Sie im Abschnitt zu flash.filters.BlurFilter.</p>
  
  <p>Wenn Sie einen Weichzeichnungseffekt auf eine Komponente anwenden, können Sie keinen BlurFilter und auch keinen zweiten Weichzeichnungseffekt für die Komponente verwenden. </p> 
 
  </apiDesc><example conref="BlurEffectExample.mxml"><swfblock conref="examples/BlurEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link><link href="mx.effects.effectClasses.xml#BlurInstance"><linktext>mx.effects.effectClasses.BlurInstance</linktext></link></related-links><apiConstructor id="mx.effects:Blur:Blur"><apiName>Blur</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Blur:blurXFrom"><apiName>blurXFrom</apiName><shortdesc> 
	  Der Grad der horizontalen Weichzeichnung am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Grad der horizontalen Weichzeichnung am Anfang. Die zulässigen Werte liegen zwischen 0,0 und 255,0. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurXTo"><apiName>blurXTo</apiName><shortdesc> 
	  Der Grad der horizontalen Weichzeichnung am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Grad der horizontalen Weichzeichnung am Ende. Die zulässigen Werte liegen zwischen 0,0 und 255,0.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYFrom"><apiName>blurYFrom</apiName><shortdesc> 
	  Der Grad der vertikalen Weichzeichnung am Anfang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Grad der vertikalen Weichzeichnung am Anfang. Die zulässigen Werte liegen zwischen 0,0 und 255,0. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYTo"><apiName>blurYTo</apiName><shortdesc> 
	  Der Grad der vertikalen Weichzeichnung am Ende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Grad der vertikalen Weichzeichnung am Ende. Die zulässigen Werte liegen zwischen 0,0 und 255,0.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffect"><apiName>IEffect</apiName><shortdesc>
  Die IEffect-Schnittstelle definiert die Basisschnittstelle für alle Flex-Effekte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IAbstractEffect</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IEffect-Schnittstelle definiert die Basisschnittstelle für alle Flex-Effekte. Die IEffectInstance-Schnittstelle definiert die Basisschnittstelle für alle Effektinstanz-Unterklassen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffectInstance"><linktext>mx.effects.IEffectInstance</linktext></link></related-links><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften der Ziele des Effekts und speichert sie als Endwerte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften der Ziele des Effekts und speichert sie als Endwerte.
      
      <p>Flex ruft die <codeph>captureEndValues()</codeph>-Methode automatisch auf, wenn der Effekt zu einem Datenänderungseffekt gehört.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften eines zusätzlichen Zielsatzes. Flex verwendet diese Funktion, wenn ein Datenänderungseffekt ausgeführt wird.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Array von Zielen, für die Werte erfasst werden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften eines zusätzlichen Zielsatzes.
     
      <p>Flex verwendet diese Funktion, wenn ein Datenänderungseffekt ausgeführt wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften der Ziele des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erfasst die aktuellen Werte der relevanten Eigenschaften der Ziele des Effekts. Flex ruft die <codeph>captureStartValues()</codeph>-Methode automatisch auf, wenn der Effekt zu einem Übergang gehört.
      
      <p>Verwenden Sie diese Funktion, um die Anfangs- und Endwerte des Effekts durch den Effekt selbst ermitteln zu lassen. Die ordnungsgemäße Verwendung der Funktion erfolgt in diesen Schritten:</p>
      
      <ol>
        <li>Rufen Sie die <codeph>captureStartValues()</codeph>-Methode auf. Der Effekt erfasst die Anfangs- und Endwerte.</li>
        <li>Ändern Sie die Effektziele, beispielsweise durch Hinzufügen oder Entfernen untergeordneter Elemente, Ändern von Eigenschaften, der Position oder der Größe.</li>
        <li>Rufen Sie die <codeph>play()</codeph>-Methode auf. Der Effekt erfasst die Endwerte. Diese Funktion füllt die <codeph>EffectInstance.propertyChanges</codeph>-Eigenschaft für jede Effektinstanz aus, die von diesem Effekt erstellt wird. Effektentwickler können diese <codeph>propertyChanges</codeph>-Eigenschaft verwenden, um die Start- und Endwerte für ihren Effekt abzurufen.</li>
      </ol>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstance"><apiName>createInstance</apiName><shortdesc>
      Erstellt eine einzelne Effektinstanz und initialisiert sie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Effektinstanz-Objekt für den Effekt.
      
      </apiDesc><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das mit diesem Effekt zu animierende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt eine einzelne Effektinstanz und initialisiert sie. Verwenden Sie diese Methode statt der <codeph>play()</codeph>-Methode, um die Effektinstanzeigenschaften vor der Wiedergabe der Effektinstanz zu ändern. 
      
      <p>Die Effektinstanz wird mit dem in der <codeph>instanceClass</codeph>-Eigenschaft angegebenen Typ erstellt. Dann wird sie mit der <codeph>initInstance()</codeph>-Methode initialisiert. Wurde die Instanz durch den EffectManager erstellt (wenn der Effekt durch einen Effekt-Auslöser ausgelöst wird), wird der Effekt außerdem durch einen Aufruf der <codeph>EffectInstance.initEffect()</codeph> initialisiert.</p>
     
      <p>Durch Aufrufen der <codeph>createInstance()</codeph>-Methode wird der Effekt nicht wiedergegeben. Rufen Sie die <codeph>startEffect()</codeph>-Methode für die zurückgegebenen Effektinstanz auf. </p>
     
      <p>Diese Funktion wird automatisch von der <codeph>Effect.play()</codeph>-Methode aufgerufen. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstances"><apiName>createInstances</apiName><shortdesc>
      Verwendet ein Array von Zielobjekten und ruft die createInstance()-Methode auf jedem Ziel auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Array von Effektinstanz-Objekten (ein Objekt pro Ziel) für den Effekt.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Objekten, die mit diesem Effekt animiert werden sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verwendet ein Array von Zielobjekten und ruft die <codeph>createInstance()</codeph>-Methode auf jedem Ziel auf. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc>
      Entfernt Ereignis-Listener von einer Instanz und entfernt sie aus der Liste der Instanzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Die Effektinstanz.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt Ereignis-Listener von einer Instanz und entfernt sie aus der Liste der Instanzen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:end"><apiName>end</apiName><shortdesc>
      Unterbricht einen aktuell wiedergegebenen Effekt und springt sofort zum Ende des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Zu beendende Effektinstanz
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Unterbricht einen aktuell wiedergegebenen Effekt und springt sofort zum Ende des Effekts. Mit dieser Methode wird die <codeph>EffectInstance.end()</codeph>-Methode aufgerufen.
     
      <p>Die Effektinstanz löst ein <codeph>effectEnd</codeph>-Ereignis aus, wenn Sie diese Methode zum Beenden des Effekts aufrufen.</p>
     
      <p>Wenn Sie eine Effektinstanz als Argument übergeben, wird nur diese Instanz unterbrochen. Wenn kein Argument übergeben wird, werden alle aktuellen Instanzen des Effekts unterbrochen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#EffectInstance/end()"><linktext>mx.effects.EffectInstance.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Gibt ein Array von Strings zurück, wobei jeder String dem Namen einer Eigenschaft entspricht, die von diesem Effekt geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array von Strings, das die Namen der von diesem Effekt geänderten Eigenschaften angibt.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt ein Array von Strings zurück, wobei jeder String dem Namen einer Eigenschaft entspricht, die von diesem Effekt geändert wird. Beispielsweise gibt der Verschieben-Effekt ein Array zurück, das <codeph>"x"</codeph> und <codeph>"y"</codeph> enthält.
     
      <p>Jede Unterklasse des Effekts muss diese Methode implementieren. Mit dieser Methode sorgt der EffectManager dafür, dass dieselbe Eigenschaft desselben Objekts nicht durch zwei verschiedene Effekte animiert wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:pause"><apiName>pause</apiName><shortdesc>
      Hält den Effekt an, bis die resume()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält den Effekt an, bis die <codeph>resume()</codeph>-Methode aufgerufen wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:play"><apiName>play</apiName><shortdesc>
      Startet die Wiedergabe des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Array von Effektinstanz-Objekten (ein Objekt pro Ziel) für den Effekt.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Zielobjekten zur Wiedergabe des Effekts. Wenn dieser Parameter angegeben wird, wird die <codeph>targets</codeph>-Eigenschaft des Effekts nicht verwendet.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> wird der Effekt rückwärts wiedergegeben.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Startet die Wiedergabe des Effekts. Normalerweise rufen Sie die <codeph>end()</codeph>-Methode vor der <codeph>play()</codeph>-Methode auf, um sicherzustellen, dass vorherige Instanzen des Effekts beendet wurden, bevor eine neue gestartet wird.
     
      <p>Alle Unterklassen müssen diese Methode implementieren.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:resume"><apiName>resume</apiName><shortdesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der pause()-Methode vorübergehend unterbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der <codeph>pause()</codeph>-Methode vorübergehend unterbrochen wurde. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:reverse"><apiName>reverse</apiName><shortdesc>
      Gibt den aktuell wiedergegebenen Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den aktuell wiedergegebenen Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:stop"><apiName>stop</apiName><shortdesc>
      Hält den Effekt an und behält den aktuellen Status der Effektziele bei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält den Effekt an und behält den aktuellen Status der Effektziele bei. Anders als bei der <codeph>pause()</codeph>-Methode können Sie nach der <codeph>stop()</codeph>-Methode nicht die <codeph>resume()</codeph>-Methode aufrufen. Sie können jedoch den Effekt mit der <codeph>play()</codeph>-Methode neu starten.
     
      <p>Die Effektinstanz löst ein <codeph>effectEnd</codeph>-Ereignis aus, wenn Sie diese Methode zum Beenden des Effekts aufrufen.</p>
     
      <p>Bei Maskierungseffekten wird die Maske beim Anhalten eines Effekts nicht automatisch entfernt. Wenn Sie weitere Maskierungseffekte auf dem gleichen Ziel ausführen, ohne die Maske zuvor zu entfernen, kann es zu unerwarteten Ergebnissen kommen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffect:mx.effects:IEffect:className:get"><apiName>className</apiName><shortdesc>
      Name der Effektklasse wie „Fade“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Name der Effektklasse wie <codeph>Fade</codeph>.
     
      <p>Dies ist ein kurzer oder unqualifizierter Klassenname, der den Paketnamen nicht einschließt. Wenn Sie den qualifizierten Namen benötigen, verwenden Sie die <codeph>getQualifiedClassName()</codeph>-Methode im flash.utils-Paket.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:customFilter:get"><apiName>customFilter</apiName><shortdesc>
      Gibt ein benutzerdefiniertes Filterobjekt des Typs EffectTargetFilter an, das zur Ermittlung der Ziele dient, bei denen der Effekt wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt ein benutzerdefiniertes Filterobjekt des Typs EffectTargetFilter an, das zur Ermittlung der Ziele dient, bei denen der Effekt wiedergegeben wird. 
      
      <p>Ziele werden nur gefiltert, wenn Sie die <codeph>captureStartValues()</codeph>-Methode aufrufen, bevor Sie den Effekt wiedergeben. Flex ruft die <codeph>captureStartValues()</codeph>-Methode automatisch auf, wenn der Effekt zu einem Übergang gehört.</p>
      
      <p>Verwenden Sie die <codeph>filter</codeph>-Eigenschaft zum einfachen Filtern. Wenn die <codeph>customFilter</codeph>-Eigenschaft einen anderen Wert als null aufweist, wird die <codeph>filter</codeph>-Eigenschaft ignoriert.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#EffectTargetFilter"><linktext>mx.effects.EffectTargetFilter</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:duration:get"><apiName>duration</apiName><shortdesc> 
      Dauer des Effekts in Millisekunden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Dauer des Effekts in Millisekunden. 
     
      <p>Bei einem Parallel- oder Sequenzeffekt legt die <codeph>duration</codeph>-Eigenschaft die Dauer jedes Effekts fest. Wenn die <codeph>duration</codeph>-Eigenschaft eines Sequenzeffekts auf 3000 gesetzt wird, dauert die Wiedergabe jedes Effekts in der Sequenz 3000 Millisekunden.</p>
     
      <p>Bei einem wiederholten Effekt gibt die <codeph>duration</codeph>-Eigenschaft die Dauer einer einzigen Instanz des Effekts an. Wenn die <codeph>duration</codeph>-Eigenschaft eines Effekts auf 2000 und die <codeph>repeatCount</codeph>-Eigenschaft auf 3 gesetzt ist, dauert die Wiedergabe des Effekts insgesamt 6000 Millisekunden (6 Sekunden).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Eine Eigenschaft, die Ihnen den Zugriff auf listenbasierte Zielsteuerelemente eines Dateneffekts ermöglicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Eine Eigenschaft, die Ihnen den Zugriff auf listenbasierte Zielsteuerelemente eines Dateneffekts ermöglicht. Mit dieser Eigenschaft kann die Instanz einer Effektklasse mit dem listenbasierten Steuerelement kommunizieren, auf dem der Effekt wiedergegeben wird. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:filter:get"><apiName>filter</apiName><shortdesc>
      Gibt einen Algorithmus zum Filtern der Ziele für einen Effekt an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt einen Algorithmus zum Filtern der Ziele für einen Effekt an. Der Wert <codeph>null</codeph> gibt an, dass nicht gefiltert wird.
      
      <p>Ziele werden nur gefiltert, wenn Sie die <codeph>captureStartValues()</codeph>-Methode aufrufen, bevor Sie den Effekt wiedergeben. Flex ruft die <codeph>captureStartValues()</codeph>-Methode automatisch auf, wenn der Effekt zu einem Übergang oder einem Dateneffekt für ein listenbasiertes Steuerelement gehört.</p>
      
      <p>Verwenden Sie diese Eigenschaft zum einfachen Filtern. Verwenden Sie die <codeph>customFilter</codeph>-Eigenschaft für anspruchsvollere Filtervorgänge. Wenn die <codeph>customFilter</codeph>-Eigenschaft einen anderen Wert als null aufweist, wird diese Eigenschaft ignoriert.</p> 
     
      <p>Sie können die folgenden Werte für die <codeph>filter</codeph>-Eigenschaft verwenden:</p>
     
      <ul>
        <li>Beim Wert <codeph>"add"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, das als untergeordnetes Element einem Container hinzugefügt wurde.</li>
        <li>Beim Wert <codeph>"addItem"</codeph> wird der Effekt auf dem Elementrenderer für jedes Listenelement wiedergegeben, das einem List- oder TileList-Steuerelement hinzugefügt wurde.</li>
        <li>Beim Wert <codeph>"hide"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, dessen visible-Eigenschaft sich von <codeph>true</codeph> in <codeph>false</codeph> geändert hat.</li>
        <li>Beim Wert <codeph>"move"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, dessen <codeph>x</codeph>- oder <codeph>y</codeph>-Eigenschaft geändert wurde.</li>
        <li>Beim Wert <codeph>"remove"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, das als untergeordnetes Element eines Containers entfernt wurde.</li>
        <li>Beim Wert <codeph>"removeItem"</codeph> wird der Effekt auf dem Elementrenderer jedes Listenelements wiedergegeben, das aus einem List- oder TileList-Steuerelement entfernt wurde.</li>
        <li>Beim Wert <codeph>"replacedItem"</codeph> wird der Effekt auf dem Elementrenderer jedes Listenelements wiedergegeben, das in einem List- oder TileList-Steuerelement durch ein neues Element ersetzt wurde.</li>
        <li>Beim Wert <codeph>"replacementItem"</codeph> wird der Effekt auf dem Elementrenderer jedes Listenelements wiedergegeben, das ein vorhandenes Element in einem List- oder TileList-Steuerelement ersetzt.</li>
        <li>Beim Wert <codeph>"resize"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, dessen <codeph>width</codeph>- oder <codeph>height</codeph>-Eigenschaft geändert wurde.</li>
        <li>Beim Wert <codeph>"show"</codeph> wird der Effekt auf jedem Ziel wiedergegeben, dessen visible-Eigenschaft sich von <codeph>false</codeph> in <codeph>true</codeph> geändert hat.</li>
        <li>Der Wert <codeph>""</codeph> gibt an, dass nicht gefiltert wird.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll. Das Effektziel ist für das Ausblenden des Fokusrings zuständig. Unterklassen der UIComponent-Klasse blenden den Fokusring automatisch aus. Ist das Effektziel keine UIComponent-Klasse, fügen Sie Funktionen hinzu, um den Fokusring auszublenden.
     
      <p>Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, um den Fokusring während des Effekts auszublenden.</p>
      
      <p>Für Unterklassen der Effect-Klasse lautet der Standardwert <codeph>false</codeph>. Für Unterklassen der MaskEffect-Klasse lautet der Standardwert <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc>
      Ein Flag für den Schreibschutz, das auf „true“ gesetzt ist, wenn Instanzen des Effekts aktuell wiedergegeben werden, und andernfalls auf „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag für den Schreibschutz, das auf „true“ gesetzt ist, wenn Instanzen des Effekts aktuell wiedergegeben werden, und andernfalls auf „false“.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc>
      Zusätzliche Verzögerung (in Millisekunden) für Effektziele nach dem ersten Ziel des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Zusätzliche Verzögerung (in Millisekunden) für Effektziele nach dem ersten Ziel des Effekts. Dieser Wert wird zum Wert der <codeph>startDelay</codeph>-Eigenschaft addiert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Aktuelle Zeitposition des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Aktuelle Zeitposition des Effekts. Der Wert dieser Eigenschaft liegt zwischen 0 und der Gesamtdauer, die <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> und <codeph>repeatDelay</codeph> einschließt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc>
      Ein Array von Eigenschaftsnamen zur Verwendung beim Filtern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Eigenschaftsnamen zur Verwendung beim Filtern. Diese Eigenschaft wird intern verwendet und sollte nicht von Effektbenutzern eingestellt werden. 
     
      <p>Der Standardwert entspricht dem Array, das von der <codeph>getAffectedProperties()</codeph>-Methode zurückgegeben wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
      Ein Array von Stilnamen zur Verwendung beim Filtern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Stilnamen zur Verwendung beim Filtern. Diese Eigenschaft wird intern verwendet und sollte nicht von Effektbenutzern eingestellt werden. 
     
      <p>Der Standardwert entspricht dem Array, das von der <codeph>getAffectedProperties()</codeph>-Methode zurückgegeben wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:target:get"><apiName>target</apiName><shortdesc> 
      Das Objekt, auf das dieser Effekt angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
      Das Objekt, auf das dieser Effekt angewendet wird. Wird ein Effekt durch einen Effekt-Auslöser ausgelöst, wird die <codeph>target</codeph>-Eigenschaft automatisch auf das Objekt gesetzt, das den Effekt auslöst.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:targets:get"><apiName>targets</apiName><shortdesc>
      Ein Array von Objekten, die als Ziele des Effekts verwendet werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Objekten, die als Ziele des Effekts verwendet werden können. Bei der Wiedergabe wird der Effekt auf allen Zielen parallel ausgeführt. Durch Einstellen der <codeph>target</codeph>-Eigenschaft werden alle Objekte in diesem Array ersetzt. Wenn die <codeph>targets</codeph>-Eigenschaft eingestellt wird, gibt die <codeph>target</codeph>-Eigenschaft das erste Element in diesem Array zurück. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Der EffectManager übergibt diesem Effekt das Ereignisobjekt, wenn ein Effekt ausgelöst wird, oder null, wenn der Effekt nicht vom EffectManager wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Der EffectManager übergibt diesem Effekt das Ereignisobjekt, wenn ein Effekt ausgelöst wird, oder <codeph>null</codeph>, wenn der Effekt nicht vom EffectManager wiedergegeben wird.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Pause"><apiName>Pause</apiName><shortdesc>
  Der Pauseneffekt ist bei nacheinander angezeigten Effekten nützlich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Pause&gt;</code> tag
  inherits all the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Pause 
    id="ID" 
    eventName="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Pauseneffekt ist bei nacheinander angezeigten Effekten nützlich. Für einen bestimmten Zeitraum oder bis ein bestimmtes Ereignis vom Ziel ausgelöst wird, geschieht nichts. Wenn Sie einen Pauseneffekt als untergeordnetes Element eines Sequenzeffekts hinzufügen, können Sie die beiden Effekte durch eine Pause trennen.
  
  </apiDesc><example conref="PauseEffectExample.mxml"><swfblock conref="examples/PauseEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#PauseInstance"><linktext>mx.effects.effectClasses.PauseInstance</linktext></link></related-links><apiConstructor id="mx.effects:Pause:Pause"><apiName>Pause</apiName><shortdesc>
     Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Dieses Argument wird vom Pauseneffekt ignoriert, wenn kein <codeph>eventName</codeph>-Attribut zugewiesen ist. Ist ein <codeph>eventName</codeph> vorhanden, muss das Ziel ein Objekt vom Typ IEventDispatcher sein, da erwartet wird, dass es das genannte Ereignis auslöst. Das Ziel null ist für diesen Effekt zulässig, da ein Pauseneffekt mit einer einfachen <codeph>duration</codeph>-Eigenschaft nicht auf ein bestimmtes Ziel angewendet wird und daher keinen Namen benötigt.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Konstruktor.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Pause:eventName"><apiName>eventName</apiName><shortdesc> 
     Name des Ereignisses, auf das gewartet wird, um die Pause zu beenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
     Name des Ereignisses, auf das gewartet wird, um die Pause zu beenden. Dieser Parameter muss zusammen mit der <codeph>target</codeph>-Eigenschaft verwendet werden, die den Typ IEventDispatcher aufweisen muss. Alle Ereignisse müssen von einem Dispatcher ausgelöst werden.
     
     <p>Das Warten auf einen <codeph>eventName</codeph> ist auch mit der <codeph>duration</codeph>-Eigenschaft verknüpft, die bestimmt, wann das Zeitlimit des Ereignisses erreicht ist. Tritt das Ereignis in dem in <codeph>duration</codeph> angegebenen Zeitraum nicht auf, endet der Effekt in jedem Fall.</p>
     
     <p>Diese Eigenschaft ist optional. Standardmäßig wird der Effekt wiedergegeben, ohne dass auf ein Ereignis gewartet wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Pause:duration:get"><apiName>duration</apiName><shortdesc> 
     Die duration-Eigenschaft steuert den Zeitraum, für den dieser Effekt angehalten wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
     
     </apiDefaultValue></apiValueDef><apiDesc> 
     Die duration-Eigenschaft steuert den Zeitraum, für den dieser Effekt angehalten wird. Die Dauer begrenzt außerdem die Zeit, in der auf das Auslösen dieses Ereignisses gewartet wird, sofern <codeph>eventName</codeph> für diesen Effekt eingestellt wurde. Beträgt die Dauer weniger als 0, wartet der Effekt eine unbegrenzte Zeit darauf, dass das Ereignis ausgelöst wird. Wenn eine andere Zeit (einschließlich 0) eingestellt wird, endet der Effekt nach dem angegebenen Zeitraum oder das genannte Ereignis wird ausgelöst, abhängig davon, welcher Fall zuerst eintritt. 
     
     </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#IEffect/duration"><linktext>mx.effects.IEffect.duration</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
  Die CompositeEffect-Klasse ist die Superklasse für die Parallel- und Sequence-Klassen, die die MXML-Tags &amp;lt;mx:Parallel&amp;gt; und &amp;lt;mx:Sequence&amp;gt; definieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The CompositeEffect class adds the following tag attributes,
  and all the subclasses of the CompositeEffect class
  inherit these tag attributes:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CompositeEffect-Klasse ist die Superklasse für die Parallel- und Sequence-Klassen, die die MXML-Tags <codeph>&lt;mx:Parallel></codeph> und <codeph>&lt;mx:Sequence></codeph> definieren. Flex unterstützt zwei Methoden, um Effekte zu Composite-Effekten zu kombinieren: Parallel und Sequenz. Wenn Sie mehrere Effekte zu einem Paralleleffekt kombinieren, werden die Effekte gleichzeitig wiedergegeben. Wenn Sie mehrere Effekte zu einem Sequenzeffekt kombinieren, muss ein Effekt abgeschlossen sein, bevor der nächste beginnt.
 
  <p>Sie können einen Composite-Effekt in MXML wie in folgendem Beispiel gezeigt erstellen:</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
   
  &lt;mx:VBox id="myBox" hideEffect="WipeRightUp">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Das <codeph>&lt;mx:children></codeph>-Tag ist optional.</p>
  
  <p>Zum Starten eines Composite-Effekts in ActionScript sind normalerweise fünf Schritte erforderlich:</p>
 
  <ol>
    <li>Erstellen von Instanzen der Effektobjekte, die kombiniert werden sollen; Beispiel: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Einstellen von Eigenschaften wie <codeph>duration</codeph> für die einzelnen Effektobjekte.</li>
    <li>Erstellen einer Instanz des Parallel- oder Sequenzeffektobjekts; Beispiel: 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Aufrufen der <codeph>addChild()</codeph>-Methode für jedes Effektobjekt; Beispiel: 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Aufrufen der <codeph>play()</codeph>-Methode des Composite-Effekts; Beispiel: 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:CompositeEffect:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Dieses Argument wird für Composite-Effekte ignoriert. Es wird nur zur Sicherstellung der Einheitlichkeit bei anderen Effekten eingeschlossen.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:CompositeEffect:addChild"><apiName>addChild</apiName><shortdesc>
      Fügt diesem Composite-Effekt einen neuen untergeordneten Effekt hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childEffect</apiItemName><apiOperationClassifier>mx.effects:IEffect</apiOperationClassifier><apiDesc>Untergeordneter Effekt, der dem Composite-Effekt hinzugefügt werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt diesem Composite-Effekt einen neuen untergeordneten Effekt hinzu. Die untergeordneten Effekte eines Sequenzeffekts werden nacheinander in der Reihenfolge wiedergegeben, in der sie hinzugefügt wurden. Die untergeordneten Effekte eines Paralleleffekts werden gleichzeitig wiedergegeben. Die Reihenfolge, in der sie hinzugefügt wurden, ist nicht von Bedeutung.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:CompositeEffect:children:get"><apiName>children</apiName><shortdesc>
      Ein Array, das die untergeordneten Effekte dieses CompositeEffect enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array, das die untergeordneten Effekte dieses CompositeEffect enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:CompositeEffect:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird. Dabei werden die startDelay- und Wiederholungsinformationen von allen untergeordneten Effekten und deren Dauer berücksichtigt und das entsprechende Ergebnis zurückgegeben.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffectTargetHost"><apiName>IEffectTargetHost</apiName><shortdesc>
  Die IEffectTargetHost-Schnittstelle definiert die Schnittstelle, die Ihnen den Zugriff auf das listenbasierte Zielsteuerelement eines Dateneffekts ermöglicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IEffectTargetHost-Schnittstelle definiert die Schnittstelle, die Ihnen den Zugriff auf das listenbasierte Zielsteuerelement eines Dateneffekts ermöglicht. Alle listenbasierten Steuerelemente implementieren diese Schnittstelle. Mit dieser Schnittstelle kann die Instanz einer Effektklasse mit dem listenbasierten Steuerelement kommunizieren, auf dem der Effekt wiedergegeben wird. Diese Schnittstelle wird auch verwendet, um festzustellen, ob ein Effekt beim Hinzufügen, Entfernen oder Ersetzen eines Datenelements im Zielsteuerelement wiedergegeben werden soll. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.listClasses.ListBase.xml"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:addDataEffectItem"><apiName>addDataEffectItem</apiName><shortdesc>
      Fügt einen Elementrenderer hinzu, wenn ein Datenänderungseffekt läuft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Der Elementrenderer, der dem Layout des Steuerelements hinzugefügt werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt einen Elementrenderer hinzu, wenn ein Datenänderungseffekt läuft. Der Elementrenderer muss einem kürzlich hinzugefügten Datenelement in der Sammlung des Datenproviders entsprechen, das noch nicht angezeigt wurde. 
     
      <p>Diese Funktion wird von einem <codeph>AddItemAction</codeph>-Effekt als Teil eines Datenänderungseffekts aufgerufen, um den Punkt festzulegen, an dem ein zu einer Sammlung hinzugefügtes Datenelement vom Steuerelement über einen Elementrenderer angezeigt wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:getRendererSemanticValue"><apiName>getRendererSemanticValue</apiName><shortdesc>
      Gibt „true“ oder „false“ zurück, um anzugeben, ob der Effekt für das Ziel ausgeführt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> oder <codeph>false</codeph> zurück, um anzugeben, ob der Effekt für das Ziel ausgeführt werden soll. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Ein Elementrenderer
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticProperty</apiItemName><apiType value="String"/><apiDesc>Die semantische Eigenschaft des Renderers, dessen Wert zurückgegeben wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> oder <codeph>false</codeph> zurück, um anzugeben, ob der Effekt für das Ziel ausgeführt werden soll. Die EffectTargetFilter-Klasse ruft diese Methode auf, wenn Sie die <codeph>filter</codeph>-Eigenschaft für einen Dateneffekt festlegen. Beispiel: Legen Sie die <codeph>filter</codeph>-Eigenschaft mit <codeph>addItem</codeph> oder <codeph>removeItem</codeph> fest.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:removeDataEffectItem"><apiName>removeDataEffectItem</apiName><shortdesc>
      Entfernt einen Elementrenderer, wenn ein Datenänderungseffekt läuft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Der Elementrenderer, der aus dem Layout des Steuerelements entfernt werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt einen Elementrenderer, wenn ein Datenänderungseffekt läuft. Der Elementrenderer muss mit Daten übereinstimmen, die bereits aus der Datenprovider-Sammlung entfernt wurden. Diese Funktion wird von einem <codeph>RemoveItemAction</codeph>-Effekt als Teil eines Datenänderungseffekts aufgerufen, um den Punkt festzulegen, an dem ein Datenelement vom Steuerelement über einen Elementrenderer nicht mehr angezeigt wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:unconstrainRenderer"><apiName>unconstrainRenderer</apiName><shortdesc>
      Diese Funktion wird von einem UnconstrainItemAction-Effekt im Zuge eines Datenänderungseffekts aufgerufen, wenn die zu bestimmten Datenelementen gehörenden Elementrenderer außerhalb der normalen Positionen von Elementrenderern im Steuerelement bewegt werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Der Elementrenderer, der ein Ziel des Effekts ist.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Funktion wird von einem <codeph>UnconstrainItemAction</codeph>-Effekt im Zuge eines Datenänderungseffekts aufgerufen, wenn die zu bestimmten Datenelementen gehörenden Elementrenderer außerhalb der normalen Positionen von Elementrenderern im Steuerelement bewegt werden müssen. Das Steuerelement versucht während der Dauer des Effekts nicht, den Elementrenderer zu platzieren.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
  Die SetStyleAction-Klasse definiert einen Aktionseffekt, der der SetStyle-Eigenschaft einer Anzeigestatusdefinition entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="duration"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SetStyleAction&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SetStyleAction
    <b>Properties</b>
    id="ID"
    style=""
    value=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SetStyleAction-Klasse definiert einen Aktionseffekt, der der SetStyle-Eigenschaft einer Anzeigestatusdefinition entspricht. Sie verwenden einen SetStyleAction-Effekt in einer Übergangsdefinition, um zu steuern, wann die durch die <codeph>SetStyle</codeph>-Eigenschaft definierte Anzeigestatusänderung während des Übergangs durchgeführt wird.
  
  </apiDesc><example conref="TransitionExample.mxml"><swfblock conref="../states/examples/TransitionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SetStyleActionInstance"><linktext>mx.effects.effectClasses.SetStyleActionInstance</linktext></link><link href="mx.states.xml#SetStyle"><linktext>mx.states.SetStyle</linktext></link></related-links><apiConstructor id="mx.effects:SetStyleAction:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:SetStyleAction:name"><apiName>name</apiName><shortdesc> 
	  Der Name der geänderten Stileigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
	  Der Name der geänderten Stileigenschaft. Standardmäßig bestimmt Flex diesen Wert mithilfe der <codeph>SetStyle</codeph>-Eigenschaftsdefinition in der Anzeigestatusdefinition.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:value"><apiName>value</apiName><shortdesc> 
	  Der neue Wert der Stileigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
	  Der neue Wert der Stileigenschaft. Standardmäßig bestimmt Flex diesen Wert mithilfe der <codeph>SetStyle</codeph>-Eigenschaftsdefinition in der Anzeigestatusdefinition.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
	  Enthält die durch diesen Effekt geänderten Stileigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Enthält die durch diesen Effekt geänderten Stileigenschaften. Diese Get-Methode überschreibt die Methode der Superklasse.
	 
	  <p>Wenn Sie für einen benutzerdefinierten Effekt eine Unterklasse zu dieser Klasse erstellen, müssen Sie diese Methode überschreiben und ein Array mit einer Liste der durch die Unterklasse geänderten Stileigenschaften zurückgeben.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:Rotate"><apiName>Rotate</apiName><shortdesc>
  Der Dreheffekt dreht eine Komponente um einen bestimmten Punkt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Rotate" replacement="spark.effects.Rotate" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Rotate&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Rotate
    id="ID"
    angleFrom="0"
    angleTo="360"
    originX="0"
    originY="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Dreheffekt dreht eine Komponente um einen bestimmten Punkt. Sie können die Koordinaten für den Mittelpunkt der Drehung und den Anfangs- und Endwinkel der Drehung angeben. Für die Winkel können Sie positive oder negative Werte angeben. 
 
  <p><b>Hinweis:</b> Um den Dreheffekt mit Text zu verwenden, müssen Sie eine eingebettete Schriftart und keine Geräteschriftart verwenden.</p> 
 
  </apiDesc><example conref="RotateEffectExample.mxml"><swfblock conref="examples/RotateEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#RotateInstance"><linktext>mx.effects.effectClasses.RotateInstance</linktext></link></related-links><apiConstructor id="mx.effects:Rotate:Rotate"><apiName>Rotate</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Rotate:angleFrom"><apiName>angleFrom</apiName><shortdesc> 
	  Der Anfangswinkel für die Drehung des Zielobjekts in Grad.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Anfangswinkel für die Drehung des Zielobjekts in Grad. Der gültige Wertebereich ist: 0 bis 360.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:angleTo"><apiName>angleTo</apiName><shortdesc> 
	  Der Endwinkel für die Drehung des Zielobjekts in Grad.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>360</apiData><apiType value="Number"/><apiDefaultValue>360
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Der Endwinkel für die Drehung des Zielobjekts in Grad. Die Werte können positiv oder negativ sein.
	 
	  <p>Wenn der Wert <codeph>angleTo</codeph> kleiner als der Wert <codeph>angleFrom</codeph> ist, wird das Ziel im Gegenuhrzeigersinn gedreht. Andernfalls wird es im Uhrzeigersinn gedreht. Wenn Sie das Ziel mehrmals drehen möchten, setzen Sie diesen Wert auf einen hohen positiven oder kleinen negativen Wert.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originX"><apiName>originX</apiName><shortdesc>
	  Die x-Position des Mittelpunkts für die Drehung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Die x-Position des Mittelpunkts für die Drehung. Das Ziel dreht sich um diesen Punkt. Die gültigen Werte liegen zwischen 0 und der Breite des Ziels.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originY"><apiName>originY</apiName><shortdesc>
	  Die y-Position des Mittelpunkts für die Drehung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Die y-Position des Mittelpunkts für die Drehung. Das Ziel dreht sich um diesen Punkt. Die gültigen Werte liegen zwischen 0 und der Höhe des Ziels.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:hideFocusRing:set"><apiName>hideFocusRing</apiName><shortdesc>
	  Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll. Für das eigentliche Ausblenden des Fokusrings ist das Ziel zuständig. 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
  Die EffectTargetFilter-Klasse legt einen benutzerdefinierten Filter fest, der von jedem Übergangseffekt auf jedes Effektziel angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EffectTargetFilter-Klasse legt einen benutzerdefinierten Filter fest, der von jedem Übergangseffekt auf jedes Effektziel angewendet wird. 
 
  <p>Die EffectTargetFilter-Klasse definiert eine <codeph>defaultFilterFunction()</codeph>-Methode, die die <codeph>filterProperties</codeph>- und die<codeph>filterStyles</codeph>-Eigenschaft verwendet, um zu bestimmen, ob der Effekt auf jedem Effektziel wiedergegeben werden soll.</p>
  
  <p>Sie können auch eine benutzerdefinierte Filterfunktion zum Implementieren Ihrer eigenen Filterlogik erstellen. Definieren Sie dazu die Filterfunktion und geben Sie sie einem EffectTargetFilter-Objekt mithilfe der <codeph>filterFunction</codeph>-Eigenschaft an.</p>
  
  <p>Um einen Effekt zur Verwendung eines benutzerdefinierten Filters zu konfigurieren, übergeben Sie ein EffectTargetFilter-Objekt an die <codeph>Effect.customFilter</codeph>-Eigenschaft des Effekts.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:EffectTargetFilter:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectTargetFilter:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      Die Standardfilterfunktion für die EffectTargetFilter-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, um die Wiedergabe der Effektinstanz zu ermöglichen. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Ein Array von PropertyChanges-Objekten. Die <codeph>target</codeph>-Eigenschaft jedes PropertyChanges-Objekts entspricht dem Ziel des Effekts. Wenn eine Eigenschaft des Ziels nicht durch einen Übergang geändert wird, ist das entsprechende PropertyChanges-Objekt nicht in diesem Array enthalten.
      
      </apiDesc></apiParam><apiParam><apiItemName>instanceTarget</apiItemName><apiType value="Object"/><apiDesc>Das EffectInstance-Ziel, das diese Funktion aufruft. Wird ein Effekt auf mehrere Ziele angewendet, wird diese Funktion einmal pro Ziel aufgerufen. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardfilterfunktion für die EffectTargetFilter-Klasse. Wenn <codeph>instanceTarget</codeph> für einen beliebigen von der <codeph>filterProperties</codeph>- oder <codeph>filterStyles</codeph>-Eigenschaft angegebenen Wert verschiedene Anfangs- und Endwerte aufweist, wird der Effekt auf dem Ziel wiedergegeben.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:EffectTargetFilter:filterInstance"><apiName>filterInstance</apiName><shortdesc> 
      Bestimmt, ob ein Ziel gefiltert werden soll, wobei „true“ zurückgegeben wird, wenn es in einen Effekt eingeschlossen werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn das Ziel in den Effekt eingeschlossen werden soll; andernfalls <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Ein Array von PropertyChanges-Objekten. Die target-Eigenschaft jedes PropertyChanges-Objekts entspricht dem Ziel des Effekts. Wenn eine Eigenschaft des Ziels nicht durch einen Übergang geändert wird, ist das entsprechende PropertyChanges-Objekt nicht in diesem Array enthalten.
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticsProvider</apiItemName><apiOperationClassifier>mx.effects:IEffectTargetHost</apiOperationClassifier><apiDesc>Der IEffectTargetHost zum Auswerten der in requiredSemantics angegebenen Eigenschaften für das Ziel, normalerweise der effectTargetHost des Effekts. Wenn die Ziele von Elementänderungseffekten Elementrenderer sind, ist dies die Liste oder TileList mit den Elementrenderern. 
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Das EffectInstance-Ziel, das diese Funktion aufruft. Wird ein Effekt auf mehrere Ziele angewendet, wird diese Funktion einmal pro Ziel aufgerufen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Bestimmt, ob ein Ziel gefiltert werden soll, wobei „true“ zurückgegeben wird, wenn es in einen Effekt eingeschlossen werden soll. Der Filter wird angewendet, wenn filterFunction und semanticFilterFunction aufgerufen werden und beide Funktionen „true“ zurückgeben. Die Standardfunktionen mit den Standardwerten geben immer „true“ zurück. Normalerweise verwendet ein EffectTargetFilter nur einen Filtertyp und nicht beide.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectTargetFilter:filterFunction"><apiName>filterFunction</apiName><shortdesc>
      Eine Funktion, die eine benutzerdefinierte Filterlogik festlegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Eine Funktion, die eine benutzerdefinierte Filterlogik festlegt. Flex ruft diese Methode auf jedem Ziel des Effekts auf. Wenn die Funktion <codeph>true</codeph> zurückgibt, wird der Effekt auf dem Ziel wiedergegeben; bei <codeph>false</codeph> überspringt der Effekt das Ziel. Eine benutzerdefinierte Filterfunktion ermöglicht Ihnen mehr Kontrolle über die Filterung als die <codeph>Effect.filter</codeph>-Eigenschaft. 
     
      <p>Die Filterfunktion hat folgende Signatur:</p>
     
      <pre>
      filterFunc(propChanges:Array, instanceTarget:Object):Boolean
      {
          // Return true to play the effect on instanceTarget, 
          // or false to not play the effect.
      } 
      </pre>
     
      <p>wobei:</p>
      
      <p><codeph>propChanges</codeph>: Ein Array von PropertyChanges-Objekten, ein Objekt pro Zielkomponente des Effekts. Wenn eine Eigenschaft des Ziels nicht durch den Übergang geändert wird, ist sie nicht in diesem Array enthalten. </p>
      
      <p><codeph>instanceTarget</codeph>: Die Zielkomponente des Effekts, die Sie filtern möchten. Innerhalb der benutzerdefinierten Filterfunktion durchsuchen Sie zuerst das <codeph>propChanges</codeph>-Array nach dem PropertyChanges-Objekt, das dem <codeph>instanceTarget</codeph>-Argument entspricht, indem Sie das <codeph>instanceTarget</codeph>-Argument mit der <codeph>propChanges.target</codeph>-Eigenschaft vergleichen.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterProperties"><apiName>filterProperties</apiName><shortdesc> 
      Ein Array von Strings zur Angabe der Komponenteneigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Ein Array von Strings zur Angabe der Komponenteneigenschaften. Wenn sich eine Eigenschaft im Array auf der Zielkomponente geändert hat, wird der Effekt auf dem Ziel wiedergegeben. 
     
      <p>Wenn Sie eine benutzerdefinierte Filterfunktion erstellen, können Sie die <codeph>filterProperties</codeph>-Eigenschaft innerhalb der Funktion untersuchen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterStyles"><apiName>filterStyles</apiName><shortdesc> 
      Ein Array von Strings zur Angabe der Stileigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Ein Array von Strings zur Angabe der Stileigenschaften. Wenn sich eine Stileigenschaft im Array auf der Zielkomponente geändert hat, wird der Effekt auf dem Ziel wiedergegeben. 
     
      <p>Wenn Sie eine benutzerdefinierte Filterfunktion erstellen, können Sie die <codeph>filterStyles</codeph>-Eigenschaft innerhalb der Funktion untersuchen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:requiredSemantics"><apiName>requiredSemantics</apiName><shortdesc>
      Eine Reihe von Eigenschaften und zugewiesenen Werten, die zur Wiedergabe des Effekts mit einem Ziel verknüpft werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      Eine Reihe von Eigenschaften und zugewiesenen Werten, die zur Wiedergabe des Effekts mit einem Ziel verknüpft werden müssen.
     
      <p>Bei der Arbeit mit Dateneffekten können Sie mit dieser Eigenschaft Effekte filtern. Wenn Sie einen Dateneffekt auf allen Zielen eines Listensteuerelements wiedergeben möchten, die durch diesen Effekt nicht hinzugefügt werden, das heißt an Zielen, die entfernt, ersetzt, verschoben oder auf andere Art verändert werden, können Sie den Effekt wie folgt definieren: </p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur> </pre>
     
      <p>Um einen Dateneffekt auf allen Zielen wiederzugeben, die nicht vom Effekt hinzugefügt oder entfernt werden, können Sie den Effekt wie folgt definieren:</p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}, {'removed':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur></pre>
     
      <p>Zu den zulässigen Eigenschaften, die Sie angeben können, zählen: <codeph>added</codeph>, <codeph>removed</codeph>, <codeph>replaced</codeph> und <codeph>replacement</codeph>. Die zulässigen Werte für die Eigenschaften sind <codeph>true</codeph> und <codeph>false</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Fade"><apiName>Fade</apiName><shortdesc>
  Der Effekt „Ein-und ausblenden“ animiert die alpha-Eigenschaft einer Komponente, wobei die Überblendung entweder von transparent zu undurchsichtig oder umgekehrt erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Fade" replacement="spark.effects.Fade" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Fade&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Fade 
    id="ID"
    alphaFrom="val"
    alphaTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Effekt „Ein-und ausblenden“ animiert die <codeph>alpha</codeph>-Eigenschaft einer Komponente, wobei die Überblendung entweder von transparent zu undurchsichtig oder umgekehrt erfolgt. 
  
  <p>Wenn Sie den Effekt „Ein-und ausblenden“ für den <codeph>showEffect</codeph>- oder <codeph>hideEffect</codeph>-Auslöser festlegen und keine Werte für die <codeph>alphaFrom</codeph>- und <codeph>alphaTo</codeph>-Eigenschaft angeben, geht <codeph>alpha</codeph> bei einem <codeph>showEffect</codeph>-Auslöser automatisch von 0 zum aktuellen <codeph>alpha</codeph>-Wert des Ziels und bei einem <codeph>hideEffect</codeph>-Auslöser vom aktuellen <codeph>alpha</codeph>-Wert des Ziels zu 0 über.</p> 
 
  <p><b>Hinweis:</b> Um den Effekt „Ein-und ausblenden“ mit Text zu verwenden, müssen Sie eine eingebettete Schriftart und keine Geräteschriftart verwenden. </p> 
 
  </apiDesc><example conref="FadeEffectExample.mxml"><swfblock conref="examples/FadeEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#FadeInstance"><linktext>mx.effects.effectClasses.FadeInstance</linktext></link></related-links><apiConstructor id="mx.effects:Fade:Fade"><apiName>Fade</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Objekt, das mit diesem Effekt animiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Fade:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
      Die Transparenzstufe am Anfang kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Die Transparenzstufe am Anfang kann zwischen 0,0 und 1,0 liegen, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht. 
     
      <p>Wenn die Zielkomponente durch den Effekt ausgeblendet wird, entspricht der Standardwert dem aktuellen Wert der <codeph>alpha</codeph>-Eigenschaft des Ziels. Wenn die Zielkomponente durch den Effekt eingeblendet wird, ist der Standardwert 0,0.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Fade:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
      Die Transparenzstufe am Ende, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Die Transparenzstufe am Ende, wobei 0,0 vollständig transparent und 1,0 vollständig undurchsichtig entspricht.
     
      <p>Wenn die Zielkomponente durch den Effekt ausgeblendet wird, ist der Standardwert 0,0. Wenn die Zielkomponente durch den Effekt eingeblendet wird, entspricht der Standardwert dem aktuellen Wert der <codeph>alpha</codeph>-Eigenschaft des Ziels.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Parallel"><apiName>Parallel</apiName><shortdesc>
  Der Paralleleffekt gibt mehrere untergeordnete Effekte gleichzeitig wieder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;mx:Parallel&gt; tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Parallel id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Parallel&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Paralleleffekt gibt mehrere untergeordnete Effekte gleichzeitig wieder.
  
  <p>Sie können einen Paralleleffekt in MXML wie in folgendem Beispiel gezeigt erstellen:</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}" >
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Beachten Sie, dass das <codeph>&lt;mx:children></codeph>-Tag optional ist.</p>
  
  <p>Zum Starten eines Paralleleffekts in ActionScript sind normalerweise fünf Schritte erforderlich:</p>
 
  <ol>
    <li>Erstellen von Instanzen der Effektobjekte, die kombiniert werden sollen; Beispiel: 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Einstellen von Eigenschaften wie <codeph>duration</codeph> für die einzelnen Effektobjekte.</li>
    <li>Erstellen einer Instanz des Paralleleffektobjekts; Beispiel: 
    <pre>myParallelEffect = new mx.effects.Parallel();</pre></li>
    <li>Aufrufen der <codeph>addChild()</codeph>-Methode für jedes Effektobjekt; Beispiel: 
    <pre>myParallelEffect.addChild(myFadeEffect);</pre></li>
    <li>Aufrufen der <codeph>play()</codeph>-Methode des Paralleleffekts; Beispiel: 
    <pre>myParallelEffect.play();</pre></li>
  </ol>
 
  </apiDesc><example conref="ParallelEffectExample.mxml"><swfblock conref="examples/ParallelEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ParallelInstance"><linktext>mx.effects.effectClasses.ParallelInstance</linktext></link></related-links><apiConstructor id="mx.effects:Parallel:Parallel"><apiName>Parallel</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Dieses Argument wird für Paralleleffekte ignoriert. Es wird nur zur Sicherstellung der Einheitlichkeit bei anderen Effekten eingeschlossen.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Parallel:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Gibt die Dauer dieses Effekts zurück, die durch die Dauer aller untergeordneten Effekte bestimmt wird. Dabei werden die startDelay- und Wiederholungsinformationen von allen untergeordneten Effekten und deren Dauer berücksichtigt und das entsprechende Ergebnis zurückgegeben.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IAbstractEffect"><apiName>IAbstractEffect</apiName><shortdesc>
  Die IAbstractEffect-Schnittstelle gibt an, dass eine Eigenschaft oder ein Parameter den Typ „Effect“ aufweisen muss, implementiert jedoch keine der APIs der IEffect-Schnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IAbstractEffect-Schnittstelle gibt an, dass eine Eigenschaft oder ein Parameter den Typ „Effect“ aufweisen muss, implementiert jedoch keine der APIs der IEffect-Schnittstelle. Die UIComponent-Klasse erkennt Änderungen der Eigenschaft, die die AbstractEffect-Schnittstelle implementiert, und übergibt sie zur Verarbeitung an die EffectManager-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffect"><linktext>mx.effects.IEffect</linktext></link></related-links></apiClassifier><apiClassifier id="mx.effects:IEffectInstance"><apiName>IEffectInstance</apiName><shortdesc>
  Die IEffectInstance-Schnittstelle stellt eine Instanz eines Effekts dar, der auf einem Ziel wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IEffectInstance-Schnittstelle stellt eine Instanz eines Effekts dar, der auf einem Ziel wiedergegeben wird. Mit jedem Ziel ist eine andere Effektinstanz verknüpft. Die Lebensdauer einer Effektinstanz ist begrenzt. Eine Instanz wird erstellt, wenn ein Effekt auf einem Ziel wiedergegeben wird, und am Ende der Wiedergabe gelöscht. Werden mehrere Effekte auf einem Ziel gleichzeitig wiedergegeben (beispielsweise bei einem Paralleleffekt), dann wird für jeden Effekt eine Effektinstanz erstellt.
 
  <p>Effektentwickler müssen eine Instanzklasse für ihre benutzerdefinierten Effekte erstellen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:end"><apiName>end</apiName><shortdesc>
      Unterbricht eine aktuell wiedergegebene Effektinstanz und springt sofort zum Ende des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Unterbricht eine aktuell wiedergegebene Effektinstanz und springt sofort zum Ende des Effekts. Diese Methode wird durch die <codeph>Effect.end()</codeph>-Methode aufgerufen. Bei ihrer Implementierung ruft sie die <codeph>finishEffect()</codeph>-Methode auf.
     
      <p>Die Effektinstanz löst ein <codeph>effectEnd</codeph>-Ereignis aus, wenn Sie diese Methode zum Beenden des Effekts aufrufen.</p>
     
      <p>In einer EffectInstance-Unterklasse können Sie diese Methode optional überschreiben. Dabei sollten Sie die <codeph>super.end()</codeph>-Methode am Ende der Überschreibung nach der Logik aufrufen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/end()"><linktext>mx.effects.Effect.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc>
      Wird von der end()-Methode am Ende der Wiedergabe des Effekts aufgerufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird von der <codeph>end()</codeph>-Methode am Ende der Wiedergabe des Effekts aufgerufen. Diese Funktion sendet ein <codeph>endEffect</codeph>-Ereignis für das Effektziel.
     
      <p>Sie müssen diese Methode in einer Unterklasse nicht überschreiben. Bei der Verwendung von Effekten brauchen Sie diese Methode nicht aufzurufen. Dagegen kann der Aufruf beim Erstellen einer Effekt-Unterklasse notwendig sein.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc>
      Wird nach jeder Iteration eines wiederholten Effekts aufgerufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird nach jeder Iteration eines wiederholten Effekts aufgerufen.
     
      <p>Sie müssen diese Methode in einer Unterklasse nicht überschreiben. Sie müssen diese Methode bei der Verwendung von Effekten nicht aufrufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc>
      Sie wird aufgerufen, wenn der Effekt durch den EffectManager ausgelöst wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das zum Auslösen des Effekts gesendete Ereignisobjekt. Wenn der Auslöser ein mouseDownEffect war, ist das Ereignis ein MouseEvent vom Typ MouseEvent.MOUSEDOWN. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sie wird aufgerufen, wenn der Effekt durch den EffectManager ausgelöst wurde. Diese Basisklassenversion speichert das Ereignis, durch das der Effekt ausgelöst wurde, in der <codeph>triggerEvent</codeph>-Eigenschaft. Jede Unterklasse sollte diese Methode überschreiben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:pause"><apiName>pause</apiName><shortdesc>
      Hält den Effekt an, bis die resume()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält den Effekt an, bis die <codeph>resume()</codeph>-Methode aufgerufen wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:play"><apiName>play</apiName><shortdesc>
      Gibt die Effektinstanz auf dem Ziel wieder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Effektinstanz auf dem Ziel wieder. Rufen Sie stattdessen die <codeph>startEffect()</codeph>-Methode auf, um einen Effekt auf einer EffectInstance zu starten.
     
      <p>In einer EffectInstance-Unterklasse müssen Sie diese Methode überschreiben. Die Überschreibung muss die <codeph>super.play()</codeph>-Methode aufrufen, damit ein <codeph>effectStart</codeph>-Ereignis am Ziel ausgelöst wird.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:resume"><apiName>resume</apiName><shortdesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der pause()-Methode vorübergehend unterbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Effekt fort, nachdem er durch Aufrufen der <codeph>pause()</codeph>-Methode vorübergehend unterbrochen wurde. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:reverse"><apiName>reverse</apiName><shortdesc>
      Gibt den Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Effekt rückwärts wieder und beginnt dabei an der aktuellen Position des Effekts.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc>
      Gibt die Effektinstanz nach dem startDelay-Zeitraum auf dem Ziel wieder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Effektinstanz nach dem <codeph>startDelay</codeph>-Zeitraum auf dem Ziel wieder. Wird von der Effect-Klasse aufgerufen. Verwenden Sie diese Funktion statt der <codeph>play()</codeph>-Methode zum Starten einer Effektinstanz.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:stop"><apiName>stop</apiName><shortdesc>
      Hält den Effekt an und behält den aktuellen Status des Ziels bei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält den Effekt an und behält den aktuellen Status des Ziels bei. Diese Methode wird durch die <codeph>Effect.stop()</codeph>-Methode aufgerufen. Bei ihrer Implementierung ruft sie die <codeph>finishEffect()</codeph>-Methode auf.
     
      <p>Die Effektinstanz löst ein <codeph>effectEnd</codeph>-Ereignis aus, wenn Sie diese Methode zum Beenden des Effekts aufrufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:className:get"><apiName>className</apiName><shortdesc>
      Name der Effektklasse wie „FadeInstance“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Name der Effektklasse wie <codeph>FadeInstance</codeph>.
     
      <p>Dies ist ein kurzer oder „unqualifizierter“ Klassenname, der den Paketnamen nicht einschließt. Wenn Sie den qualifizierten Namen benötigen, verwenden Sie die <codeph>getQualifiedClassName()</codeph>-Methode im flash.utils-Paket.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:duration:get"><apiName>duration</apiName><shortdesc> 
      Die Dauer des Effekts in Millisekunden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Die Dauer des Effekts in Millisekunden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Eine Eigenschaft, die Ihnen den Zugriff auf listenbasierte Zielsteuerelemente eines Dateneffekts ermöglicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Eine Eigenschaft, die Ihnen den Zugriff auf listenbasierte Zielsteuerelemente eines Dateneffekts ermöglicht. Mit dieser Eigenschaft kann die Instanz einer Effektklasse mit dem listenbasierten Steuerelement kommunizieren, auf dem der Effekt wiedergegeben wird. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effect:get"><apiName>effect</apiName><shortdesc>
      Das IEffect-Objekt, das dieses IEffectInstance-Objekt erstellt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc>
      Das IEffect-Objekt, das dieses IEffectInstance-Objekt erstellt hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Bestimmt, ob der Effekt den Fokusring beim Start ausblenden soll. Das Effektziel ist für das Ausblenden des Fokusrings zuständig. Unterklassen der UIComponent-Klasse blenden den Fokusring automatisch aus. Ist das Effektziel keine UIComponent-Klasse, müssen Sie Funktionen hinzufügen, um den Fokusring auszublenden.
     
      <p>Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, um den Fokusring während des Effekts auszublenden.</p>
      
      <p>Für Unterklassen der Effect-Klasse lautet der Standardwert <codeph>false</codeph>. Für Unterklassen der MaskEffect-Klasse lautet der Standardwert <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Aktuelle Zeitposition des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Aktuelle Zeitposition des Effekts. Der Wert dieser Eigenschaft liegt zwischen 0 und der Gesamtdauer, die <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> und <codeph>repeatDelay</codeph> einschließt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc>
      Gibt das PropertyChanges-Objekt an, das die Anfangs- und Endwerte für den Satz Eigenschaften enthält, die für die Ziele des Effekts relevant sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc>
      Gibt das PropertyChanges-Objekt an, das die Anfangs- und Endwerte für den Satz Eigenschaften enthält, die für die Ziele des Effekts relevant sind. Diese Eigenschaft wird nur eingestellt, wenn die <codeph>captureStartValues()</codeph>-Methode des Effekts aufgerufen wurde, der diese Effektinstanz erstellt hat. 
      
      <p>Sie verwenden eine <codeph>propertyChanges</codeph>-Eigenschaft häufig zum Erstellen eines Effekts, der zu einem Übergang gehört. Flex ruft die <codeph>captureStartValues()</codeph>-Methode automatisch auf, wenn der Übergang gestartet wird. In Ihrer Überschreibung der <codeph>Effectinstance.play()</codeph>-Methode können Sie diese Informationen in der <codeph>propertyChanges()</codeph>-Methode überprüfen, um die Anfangs- und Endwerte des Effekts zu initialisieren.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc>
      Ein Wert, der angibt, wie oft der Effekt wiederholt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Wert, der angibt, wie oft der Effekt wiederholt werden soll. Mögliche Werte sind Ganzzahlen größer als oder gleich 0.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatCount"><linktext>mx.effects.Effect.repeatCount</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc>
      Wartezeit in Millisekunden vor der Wiederholung des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Wartezeit in Millisekunden vor der Wiederholung des Effekts.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatDelay"><linktext>mx.effects.Effect.repeatDelay</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc>
      Wartezeit in Millisekunden vor dem Starten des Effekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wartezeit in Millisekunden vor dem Starten des Effekts. Mögliche Werte sind Ganzzahlen größer als oder gleich 0. Wird die <codeph>repeatCount</codeph>-Eigenschaft zur Wiederholung des Effekts verwendet, wird die <codeph>startDelay</codeph>-Eigenschaft nur bei der ersten Wiedergabe des Effekts angewendet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Bei „true“ erfolgt keine Hintergrundverarbeitung, während der Effekt wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> erfolgt keine Hintergrundverarbeitung, während der Effekt wiedergegeben wird. Zu Hintergrundverarbeitungen zählen Messungen, Layout und Verarbeitung von Serverantworten.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/suspendBackgroundProcessing"><linktext>mx.effects.Effect.suspendBackgroundProcessing</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:target:get"><apiName>target</apiName><shortdesc>
      Das UIComponent-Objekt, auf das dieser Effekt angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Das UIComponent-Objekt, auf das dieser Effekt angewendet wird.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/target"><linktext>mx.effects.Effect.target</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Das Ereignis, falls zutreffend, das die Wiedergabe dieses Effekts ausgelöst hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Das Ereignis, falls zutreffend, das die Wiedergabe dieses Effekts ausgelöst hat. Diese Eigenschaft ist nützlich, wenn der Effekt mehreren Auslöser-Ereignissen zugewiesen ist.
     
      <p>Wenn der Effekt programmgesteuert durch einen Aufruf der <codeph>play()</codeph>-Methode und nicht durch ein Ereignis ausgelöst wird, ist diese Eigenschaft <codeph>null</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>