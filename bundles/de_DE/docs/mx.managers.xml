<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.managers"><apiName>mx.managers</apiName><apiDetail/><apiClassifier id="mx.managers:HistoryManager"><apiName>HistoryManager</apiName><shortdesc>
  Die Verlaufsverwaltung ermöglicht Benutzern die Navigation durch eine Flex-Anwendung mithilfe der Vorwärts- und Zurück-Navigationsbefehle in einem Webbrowser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Verlaufsverwaltung ermöglicht Benutzern die Navigation durch eine Flex-Anwendung mithilfe der Vorwärts- und Zurück-Navigationsbefehle in einem Webbrowser. 
  
  <p>Im Allgemeinen sollten Sie die BrowserManager-Klasse und tiefe Verlinkungen zur Statuserhaltung von Anwendungen sowie zur Bearbeitung von URLs und des Browserverlaufs verwenden. In bestimmten Fällen kann jedoch auch die HistoryManager-Klasse nützlich sein, beispielsweise bei der Verwaltung von älteren Flex-Anwendungen. Sie können die HistoryManager- und die BrowserManager-Klasse nicht in derselben Flex-Anwendung benutzen, auch wenn sie dieselben Unterstützungsdateien verwenden.</p>
  
  <p>Die Verlaufsverwaltung ist standardmäßig für den Accordion- und den TabNavigator-Container aktiviert. Wenn Benutzer eines der Fenster in einem Accordion-Steuerelement auswählen, können sie also mit der Zurück-Schaltfläche oder dem entsprechenden Navigationsbefehl zum vorhergehenden Fenster zurückkehren. Die Verlaufsverwaltung ist standardmäßig für den ViewStack-Navigatior-Container deaktiviert.</p>
  
  <p>Sie können die Verlaufsverwaltung deaktivieren, indem Sie die Eigenschaft <codeph>historyManagementEnabled</codeph> des Navigator-Containers auf <codeph>false</codeph> setzen.</p>
  
  <p>Sie können außerdem die Verlaufsverwaltung für andere Objekte in einer Anwendung aktivieren, indem Sie die Objekte beim HistoryManager registrieren. Um eine Komponente bei der HistoryManager-Klasse zu registrieren, rufen Sie die <codeph>register()</codeph>-Methode der HistoryManager-Klasse mit einem Verweis auf eine Komponenteninstanz auf, die die IHistoryManagerClient-Schnittstelle implementiert. In dem folgenden Beispiel wird die Anwendungskomponente (<codeph>this</codeph>) bei der HistoryManager-Klasse registriert, sobald die Anwendung initialisiert wird:
  <pre>
  &lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
    implements="mx.managers.IHistoryManagerClient" 
    initialize="mx.managers.HistoryManager.register(this);">
  </pre>
  Außerdem müssen Sie die <codeph>saveState()</codeph>- und die <codeph>loadState()</codeph>-Methode der IHistoryManagerClient-Schnittstelle implementieren, um die Registrierung der Komponenten abzuschließen. UIComponent-Erweiterungskomponenten erben automatisch die <codeph>loadState()</codeph>-Methode.</p>
  
  <p>Alle Methoden und Eigenschaften des HistoryManagers sind statisch, sodass Sie keine Instanz davon erstellen müssen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links><apiOperation id="mx.managers:HistoryManager:initialize"><apiName>initialize</apiName><shortdesc>
      DEPRECATED: Initialisiert den HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sm</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>SystemManager für diese Anwendung.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      DEPRECATED: Initialisiert den HistoryManager. Im Allgemein ist dieser Aufruf nicht erforderlich, da Flex diese Methode bei jedem Hinzufügen einer Komponente mit <codeph>historyManagementEnabled</codeph> aufruft. Ohne Initialisierung von der Anwendung auf oberster Ebene funktioniert der HistoryManager jedoch nicht richtig. Wenn Ihre Anwendung also über keine Komponenten verfügt, die für den HistoryManager aktiviert wurden, und untergeordnete Anwendungen lädt, bei denen das der Fall ist, müssen Sie die <codeph>HistoryManager.initialize()</codeph>-Methode in der Hauptanwendung aufrufen. Das geschieht normalerweise über eine <codeph>initialize</codeph>-Ereignisprozedur in der Anwendung.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:register"><apiName>register</apiName><shortdesc>
      Registriert ein Objekt beim HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Zu registrierendes Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Registriert ein Objekt beim HistoryManager. Das Objekt muss die IHistoryManagerClient-Schnittstelle implementieren.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:HistoryManager:save"><apiName>save</apiName><shortdesc>
      Speichert den aktuellen Status der Anwendung, damit er später wiederhergestellt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Speichert den aktuellen Status der Anwendung, damit er später wiederhergestellt werden kann. Diese Methode wird automatisch von Navigator-Containern aufgerufen, wenn sich ihr Navigationsstatus ändert. Wenn Sie eine Schnittstelle mit dem HistoryManager registriert haben, müssen Sie die <codeph>save()</codeph>-Methode bei einer Statusänderung aufrufen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:unregister"><apiName>unregister</apiName><shortdesc>
      Macht die Registrierung eines Objekts beim HistoryManager rückgängig.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Objekt, für das die Registrierung rückgängig gemacht werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Macht die Registrierung eines Objekts beim HistoryManager rückgängig.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:PopUpManagerChildList"><apiName>PopUpManagerChildList</apiName><shortdesc>
  Die PopUpManagerChildList-Klasse definiert die Konstantenwerte für die Eigenschaft „Detail“ der addPopUp()- und der createPopUp()-Methode des PopUpManagers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die PopUpManagerChildList-Klasse definiert die Konstantenwerte für die Eigenschaft <codeph>Detail</codeph> der <codeph>addPopUp()</codeph>- und der <codeph>createPopUp()</codeph>-Methode des PopUpManagers.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManager"><linktext>PopUpManager</linktext></link></related-links><apiValue id="mx.managers:PopUpManagerChildList:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	  Gibt an, dass das Popup in derselben Liste untergeordneter Elemente wie die Anwendung platziert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass das Popup in derselben Liste untergeordneter Elemente wie die Anwendung platziert wird.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:PARENT"><apiName>PARENT</apiName><shortdesc>
	  Gibt an, dass das Popup in jeder beliebigen Liste untergeordneter Elemente platziert wird, in der sich auch die übergeordnete Komponente befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass das Popup in jeder beliebigen Liste untergeordneter Elemente platziert wird, in der sich auch die übergeordnete Komponente befindet.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:POPUP"><apiName>POPUP</apiName><shortdesc>
	  Gibt an, dass das Popup in der Liste untergeordneter Popups platziert wird, durch die es über anderen Popups in der Anwendungsebene angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>popup</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt an, dass das Popup in der Liste untergeordneter Popups platziert wird, durch die es über anderen Popups in der Anwendungsebene angezeigt wird.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComponent"><apiName>IFocusManagerComponent</apiName><shortdesc>
  Die IFocusManagerComponent-Schnittstelle definiert die Schnittstelle, die von Komponenten, die den Fokus erhalten können, implementiert werden muss, um den Fokus vom FocusManager zu erhalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFocusManagerComponent-Schnittstelle definiert die Schnittstelle, die von Komponenten, die den Fokus erhalten können, implementiert werden muss, um den Fokus vom FocusManager zu erhalten. Die Basisimplementierungen dieser Schnittstelle liegen in der UIComponent-Klasse. UIComponent implementiert jedoch nicht die vollständige IFocusManagerComponent-Schnittstelle, da einige UIComponents keinen Fokus erhalten sollen. Daher fügen Sie der Klassendefinition einfach „implements IFocusManagerComponent“ hinzu, um eine von UIComponent abgeleitete Komponente in eine Komponente umzuwandeln, die den Fokus erhalten kann.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Wenn <codeph>true</codeph> angegeben ist, ist der Fokusindikator sichtbar, andernfalls wird er ausgeblendet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält. Die Komponente soll eine Grafik zeichnen bzw. ausblenden, durch die angezeigt wird, dass der Fokus auf der Komponente liegt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält. Die Komponente kann den Fokus wiederum auf eine interne Komponente übertragen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob die Komponente den Fokus erhalten kann, wenn sie ausgewählt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob die Komponente den Fokus erhalten kann, wenn sie ausgewählt wird.
     
      <p>Wenn eine untergeordnete Komponente Ihrer Komponente die IFocusManagerComponent-Schnittstelle implementiert und nie den Fokus erhalten soll, können Sie zur Optimierung <codeph>focusEnabled</codeph> auf <codeph>false</codeph> setzen, bevor Sie <codeph>addChild()</codeph> in der untergeordneten Komponente aufrufen.</p>
     
      <p>Dann ignoriert FocusManager diese Komponente und überwacht die Eigenschaften <codeph>tabFocusEnabled</codeph>, <codeph>hasFocusableChildren</codeph> und <codeph>mouseFocusEnabled</codeph> nicht auf Änderungen. Dies bedeutet jedoch auch, dass Sie den Wert im Anschluss an <codeph>addChild()</codeph> nicht ändern und erwarten können, dass dies vom FocusManager bemerkt wird.</p>
     
      <p>Hinweis: Dem Objekt kann der Fokus trotzdem programmgesteuert über die <codeph>setFocus()</codeph>-Methode zugewiesen werden. Der FocusManager wird lediglich angewiesen, die IFocusManagerComponent-Komponente in der Tabulator- und Mausreihenfolge zu überspringen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc conref="mx.core.UIComponent#hasFocusableChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#hasFocusableChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob die Komponente den Fokus erhalten kann, wenn sie mit der Maus ausgewählt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob die Komponente den Fokus erhalten kann, wenn sie mit der Maus ausgewählt wird. Wenn <codeph>false</codeph> angegeben ist, wird der Fokus auf die erste übergeordnete Komponente übertragen, die <codeph>mouseFocusEnabled</codeph> ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob der Fokus durch Drücken der Tabulatortaste auf diese Komponente verschoben werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der Fokus durch Drücken der Tabulatortaste auf diese Komponente verschoben werden kann. Auch wenn <codeph>false</codeph> eingestellt ist, kann die Komponente durch Auswahl mit der Maus oder einen <codeph>setFocus()</codeph>-Aufruf den Fokus erhalten. Diese Eigenschaft ersetzt InteractiveObject.tabEnabled, die in Flex-Anwendungen auf „true“ gesetzt werden muss.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabIndex:get"><apiName>tabIndex</apiName><shortdesc>
      Bei tabFocusEnabled ist dies die Reihenfolge, in der die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Bei <codeph>tabFocusEnabled</codeph> ist dies die Reihenfolge, in der die Komponente den Fokus erhält. Bei -1 erhält die Komponente den Fokus basierend auf der z-Reihenfolge.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:BrowserManager"><apiName>BrowserManager</apiName><shortdesc>
  Der BrowserManager ist ein Singleton-Manager, der als Proxy zwischen Browser und Anwendung agiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der BrowserManager ist ein Singleton-Manager, der als Proxy zwischen Browser und Anwendung agiert. Er ermöglicht den Zugriff auf die URL in der Adresszeile des Browsers auf ähnliche Art, wie die Eigenschaft <codeph>document.location</codeph> in JavaScript aufgerufen werden kann. Ereignisse werden ausgelöst, wenn die Eigenschaft <codeph>url</codeph> geändert wird. Listener können reagieren, die URL ändern und/oder verhindern, dass andere das Ereignis abrufen. 
 
  <p>Um den BrowserManager zu verwenden, rufen Sie mit der <codeph>getInstance()</codeph>-Methode die aktuelle Instanz und die Methoden des Managers ab und reagieren auf Ereignisse. Informationen zu den zu verwendenden Methoden, Eigenschaften und Ereignisse finden Sie im Abschnitt zur IBrowserManager-Klasse.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#IBrowserManager"><linktext>mx.managers.IBrowserManager</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:BrowserManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.
      
      </apiDesc><apiOperationClassifier>mx.managers:IBrowserManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IHistoryManagerClient"><apiName>IHistoryManagerClient</apiName><shortdesc>
  Schnittstelle, die von mit dem History Manager registrierten Objekten implementiert werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Schnittstelle, die von beim History Manager registrierten Objekten implementiert werden muss. Die Methoden in dieser Schnittstelle werden vom HistoryManager beim Speichern und Laden des Verlaufsstatus der Anwendung aufgerufen.
 
  <p>Diese Schnittstelle wird von den Flex-Navigator-Containern TabNavigator, Accordion und ViewStack implementiert. Sie muss von allen anderen beim HistoryManager registrierten Komponenten ebenfalls implementiert werden.</p> 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:loadState"><apiName>loadState</apiName><shortdesc>
	  Lädt den Status dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Zu ladender Status dieses Objekts. Der Wert ist null, wenn der ursprüngliche Status der Anwendung geladen wird.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Lädt den Status dieses Objekts.
	  
	  </apiDesc><example>Der folgende Code lädt die ausgewählte Indexposition und den Suchstring des gespeicherten Status.
	  <pre>
	  public function loadState(state:Object):void
	  {
	  	// First, check to see if state is null. When the app is reset
	  	// back to its initial state, loadState() is passed null.
	  	if (state == null)
	  	{
	 		myList.selectedIndex = -1;
	  		mySearchInput.text = "";
	  	}
	  	else
	  	{
	  		myList.selectedIndex = state.selectedIndex;
	  		mySearchInput.text = state.searchString;
	  	}
	  }
	  </pre>
	  
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:saveState"><apiName>saveState</apiName><shortdesc>
	  Speichert den Status dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Status dieses Objekts.
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	  Speichert den Status dieses Objekts. Das Objekt enthält aus Namen und Eigenschaft bestehende Paare für jede mit dem Status zu speichernde Eigenschaft. 
	 
	  <p>Der History Manager erfasst die Statusinformationen aller Komponenten und kodiert sie in einem URL-Format. In den meisten Browsern unterliegen URLs einer Längenbeschränkung, sodass die zurückgegebenen Statusinformationen so kurz wie möglich sein sollten.</p>
	 
	  </apiDesc><example>Der folgende Code speichert die ausgewählte Indexposition aus einer Liste sowie einen Suchstring.
	  <pre>
	  public function saveState():Object
	  {
	  	var state:Object = {};
	 
	  	state.selectedIndex = myList.selectedIndex;
	  	state.searchString = mySearchInput.text;
	 
	  	return state;
	 }
	 </pre>
	 
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:toString"><apiName>toString</apiName><shortdesc>
	  Konvertiert dieses Objekt in einen eindeutigen String. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der eindeutige Bezeichner für dieses Objekt.
	  
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Konvertiert dieses Objekt in einen eindeutigen String. Implementiert von UIComponent.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:ISystemManager"><apiName>ISystemManager</apiName><shortdesc>
  Ein ISystemManager verwaltet ein „Anwendungsfenster“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Ein ISystemManager verwaltet ein „Anwendungsfenster“. Jede Anwendung, die auf dem Desktop oder im Browser ausgeführt wird, verfügt über einen Bereich, in dem die Grafiken der Anwendung angezeigt werden. Es kann sich dabei um ein Fenster im Betriebssystem oder einen Bereich im Browser handeln. Dieser Bereich ist ein „Anwendungsfenster“ und unterscheidet sich von einer <codeph>mx.core.Application</codeph>-Instanz, die das Hauptfenster auf oberster Ebene einer Anwendung darstellt.
 
  <p>Jede Anwendung verfügt über einen ISystemManager. Der ISystemManager sendet ein Ereignis, wenn sich die Größe des Anwendungsfensters ändert. (Sie können diese nicht innerhalb der Anwendung ändern, sondern nur über das Fenster des Betriebssystems oder den Browser.) Ihm sind alle Anzeigeelemente in der Anwendung untergeordnet, wie z. B. die mx.core.Application-Hauptinstanz und alle Popups, QuickInfos, Cursor usw. Alle dem ISystemManager untergeordneten Objekte werden als Fenster auf oberster Ebene betrachtet, auch QuickInfos und Cursor.</p>
 
  <p>Der ISystemManager wechselt außerdem den Fokus zwischen Fenstern auf oberster Ebene, wenn mehrere IFocusManagerContainer angezeigt werden und Benutzer mit Komponenten innerhalb der IFocusManagerContainer interagieren.</p>
 
  <p>Alle nicht explizit anderweitig verarbeiteten Tastatur- und Mausaktivitäten werden vom ISystemManager erkannt. Dadurch ist er ideal zur Überwachung von Aktivitäten geeignet, falls dies erforderlich sein sollte.</p>
 
  <p>Wird eine Anwendung in eine andere geladen, wird ein ISystemManager zwar erstellt, verwaltet jedoch kein Anwendungsfenster, abhängig von den Sicherheits- und Domänenregeln. Er ist stattdessen der <codeph>content</codeph> des zum Laden verwendeten <codeph>Loader</codeph> und dient als übergeordnetes Element der Unteranwendung.</p>
 
  <p>Der ISystemManager verwaltet mehrere Listen mit untergeordneten Elementen, je eine für QuickInfos, Cursor und Popup-Fenster. So wird sichergestellt, dass Popup-Fenster über Haupt-Anwendungsfenstern, QuickInfos über Popup-Fenstern und Cursor über QuickInfos angezeigt werden. Wenn Sie die <codeph>numChildren</codeph>-Eigenschaft betrachten oder die <codeph>getChildAt()</codeph>-Methode des ISystemManagers aufrufen, greifen Sie auf das Hauptanwendungsfenster und alle anderen Fenster zu, die nicht als Popups angezeigt werden. Um die Listen aller Fenster einschließlich Popups, QuickInfos und Cursor abzurufen, verwenden Sie die <codeph>rawChildren</codeph>-Eigenschaft.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      Aktiviert oder deaktiviert den Mausschutz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>Bei <codeph>true</codeph> wird der Mausschutz aktiviert, bei <codeph>false</codeph> wird er deaktiviert.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktiviert oder deaktiviert den Mausschutz. Der Mausschutz verhindert Mauseingaben in nicht vertrauenswürdige Anwendungen. Wenn Sie die Maus über eine nicht vertrauenswürdige Anwendung ziehen, werden normalerweise keine Mausbewegungsereignisse ausgelöst. Aus Sicherheitsgründen versendet Flash Player keine Ereignisse zwischen vertrauenswürdigen und nicht vertrauenswürdigen Anwendungen. Wenn Sie den Mausschutz für eine nicht vertrauenswürdige Anwendung (vom übergeordneten Element aus) aktivieren, wird die Mausbewegungsmeldung angezeigt und der Ziehvorgang erwartungsgemäß ausgeführt. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
	  Konvertiert einen angegebenen String in eine Klasse oder Funktion auf Paketebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die von <codeph>name</codeph> dargestellte Klasse oder null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Der Name der Klasse, z. B. „mx.video.VideoManager“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Konvertiert einen angegebenen String in eine Klasse oder Funktion auf Paketebene. Ruft die entsprechende <codeph>ApplicationDomain.getDefinition()</codeph>-Methode auf, abhängig davon ob die Anwendung in eine andere Anwendung geladen wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Ruft den System Manager auf, der sich im Stamm aller System Manager auf oberster Ebene in dieser SecurityDomain befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der SystemManager der obersten Ebene in der Sandbox.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Ruft den System Manager auf, der sich im Stamm aller System Manager auf oberster Ebene in dieser SecurityDomain befindet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Versucht, den System Manager in der Hauptanwendung abzurufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der System Manager in der Hauptanwendung, wenn dieser von den Sicherheitseinschränkungen zugelassen wird, oder null, wenn er sich in einer anderen SecurityDomain befindet.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Versucht, den System Manager in der Hauptanwendung abzurufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das den sichtbaren Teil des Objekts enthält. Die Koordinaten des Rechtecks sind global.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Optional. Die Anfangsbegrenzungen des sichtbaren Rechtecks. Die Koordinaten der Begrenzungen sind global. Hat <codeph>bounds</codeph> den Wert null, werden die Anfangsbegrenzungen von der Eigenschaft <codeph>screen</codeph> des System Managers definiert. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Versucht, den übergeordneten SWFLoader zu benachrichtigen, dass sich die Größe der Anwendung eventuell geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Versucht, den übergeordneten SWFLoader zu benachrichtigen, dass sich die Größe der Anwendung eventuell geändert hat.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      Gibt „true“ zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der Font.registerFont()-Methode registriert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der <codeph>Font.registerFont()</codeph>-Methode registriert wurde.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>tf</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Die TextFormat-Klasse, die die Zeichenformatierungsinformationen darstellt.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der <codeph>Font.registerFont()</codeph>-Methode registriert wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
      Überprüft, ob dieser System Manager der Stamm aller System Manager auf oberster Ebene ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wird <codeph>true</codeph> zurückgegeben, ist der SystemManager der Stamm aller SystemManager auf der Anzeigeliste, andernfalls wird <codeph>false</codeph> zurückgegeben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Überprüft, ob dieser System Manager der Stamm aller System Manager auf oberster Ebene ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
	  Gibt „true“ zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist, und „false“, wenn diese Anwendung in eine andere Anwendung geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt <codeph>true</codeph> zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist, und <codeph>false</codeph>, wenn diese Anwendung in eine andere Anwendung geladen wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
	  Eine Liste der diesem ISystemManager untergeordneten benutzerdefinierten Cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Eine Liste der diesem ISystemManager untergeordneten benutzerdefinierten Cursor.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, Fenster auf oberster Ebene, QuickInfos und benutzerdefinierte Cursor. Sie können über die Eigenschaft <codeph>cursorChildren</codeph> auf benutzerdefinierte Cursor zugreifen.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>cursorChildren.numChildren</codeph> die Anzahl der benutzerdefinierten Cursor (entweder 0 oder 1) zurück. Ist ein benutzerdefinierter Cursor vorhanden, können Sie darauf mit <codeph>cursorChildren.getChildAt(0)</codeph> zugreifen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:document:get"><apiName>document</apiName><shortdesc>
	  Ein Verweis auf das Document-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Ein Verweis auf das Document-Objekt. Ein Document-Objekt ist ein Objekt auf der obersten Hierarchieebene einer Flex-Anwendung, MXML-Komponente oder AS-Komponente.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
	  Ein einzelnes Sprite, das von mehren Komponenten gemeinsam als Überlagerung für den Zeichenfokus verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
	  Ein einzelnes Sprite, das von mehren Komponenten gemeinsam als Überlagerung für den Zeichenfokus verwendet wird. Die gemeinsame Nutzung ist über das übergeordnete Element einer Komponente mit Fokus möglich, jedoch nicht über die IFocusManagerComponent.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
	  „true“, wenn ISystemManager ein Proxy und nicht eine Stammklasse ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  „true“, wenn ISystemManager ein Proxy und nicht eine Stammklasse ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc>
	  Das LoaderInfo-Objekt, das die Informationen zur Anwendung enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc>
	  Das LoaderInfo-Objekt, das die Informationen zur Anwendung enthält.
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Die Anzahl der modalen Fenster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der modalen Fenster.  
     
      <p>In modalen Fenstern können Sie nicht in andere Fenster klicken, wodurch normalerweise der FocusManager in diesem Fenster aktiviert wird. Der PopUpManager ändert diese Anzahl durch Erstellen und Löschen modaler Fenster.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
	  Diesem ISystemManager ist eine Liste oberster (Popup-) Fenster untergeordnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Diesem ISystemManager ist eine Liste oberster (Popup-) Fenster untergeordnet.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, QuickInfos und benutzerdefinierte Cursor. Sie können über die Eigenschaft <codeph>popUpChildren</codeph> auf die obersten Fenster zugreifen.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>popUpChildren.numChildren</codeph> die Anzahl der obersten Fenster zurück und mit <codeph>popUpChildren.getChildAt(i)</codeph> können Sie auf diese zugreifen.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Eine Liste der diesem ISystemManager untergeordneten Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Eine Liste der diesem ISystemManager untergeordneten Elemente.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, QuickInfos und benutzerdefinierte Cursor. </p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:screen:get"><apiName>screen</apiName><shortdesc>
	  Die Größe und Position des Anwendungsfensters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Die Größe und Position des Anwendungsfensters. Das Rectangle-Objekt enthält die Eigenschaften <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> und <codeph>height</codeph>. Das Rectangle befindet sich in Sandboxstammkoordinaten.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:stage:get"><apiName>stage</apiName><shortdesc>
	  Die flash.display.Stage, die das Anwendungsfenster darstellt, das diesem SystemManager zugeordnet ist.
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
	  Die flash.display.Stage, die das Anwendungsfenster darstellt, das diesem SystemManager zugeordnet ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
	  Eine Liste der diesem ISystemManager untergeordneten QuickInfos.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Eine Liste der diesem ISystemManager untergeordneten QuickInfos.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, Fenster auf oberster Ebene, QuickInfos und benutzerdefinierte Cursor.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>toolTipChildren.numChildren</codeph> die Anzahl der QuickInfos (entweder 0 oder 1) zurück. Ist eine QuickInfo vorhanden, können Sie darauf mit <codeph>toolTipChildren.getChildAt(0)</codeph> zugreifen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
	  Der ISystemManager ist für das Anwendungsfenster zuständig.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
	  Der ISystemManager ist für das Anwendungsfenster zuständig. Dies ist der gleiche ISystemManager, es sei denn die Anwendung wurde in eine andere Anwendung geladen.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ToolTipManager"><apiName>ToolTipManager</apiName><shortdesc>
  Mit dem ToolTipManager können Sie grundlegende QuickInfo- und Fehlerinfo-Funktionen wie die Anzeigeverzögerung und die Deaktivierung von QuickInfos einstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem ToolTipManager können Sie grundlegende QuickInfo- und Fehlerinfo-Funktionen wie die Anzeigeverzögerung und die Deaktivierung von QuickInfos einstellen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link></related-links><apiOperation id="mx.managers:ToolTipManager:createToolTip"><apiName>createToolTip</apiName><shortdesc>
      Erstellt eine Instanz der ToolTip-Klasse mit dem angegebenen Text und zeigt sie an der in Bühnenkoordinaten angegebenen Position an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Die neu erstellte QuickInfo.
     
      
      </apiDesc><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der in der QuickInfo-Instanz anzuzeigende Text.
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die horizontale Koordinate der QuickInfo in Bühnenkoordinaten. Bei mehreren Bühnen wird die relevante Bühne durch das <codeph>context</codeph>-Argument bestimmt.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die vertikale Koordinate der QuickInfo in Bühnenkoordinaten. Bei mehreren Bühnen wird die relevante Bühne durch das <codeph>context</codeph>-Argument bestimmt.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorTipBorderStyle</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Rahmenstil einer Fehlerinfo. Das Argument dieser Methode kann null, „errorTipRight“, „errorTipAbove“ oder „errorTipBelow“ entsprechen. Bei null erstellt die <codeph>createToolTip()</codeph>-Methode eine normale QuickInfo. Bei „errorTipRight“, „errorTipAbove“, oder „errorTipBelow“ erstellt die <codeph>createToolTip()</codeph>-Methode eine Fehlerinfo und dieser Parameter bestimmt, wohin der Pfeil der Fehlerinfo weist (Ziel des Fehlers). Wird beispielsweise „errorTipRight“ übergeben, platziert Flex die Fehlerinfo (über die x- und y-Argumente) rechts neben das Fehlerziel; der Pfeil befindet sich auf der linken Seite der Fehlerinfo.
     
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>Bestimmt, welcher StyleManager verwendet wird. In der Regel übergeben Sie das Objekt, bei dem die QuickInfo angezeigt wird, sodass der StyleManager von QuickInfo und Objekt übereinstimmt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt eine Instanz der ToolTip-Klasse mit dem angegebenen Text und zeigt sie an der in Bühnenkoordinaten angegebenen Position an.
     
      <p>QuickInfos werden auf einer eigenen Ebene über allen anderen Elementen mit Ausnahme des Cursors angezeigt.</p>
     
      <p>Normalerweise werden QuickInfos vom ToolTipManager automatisch ein- und ausgeblendet, wenn der Benutzer die Maus über die Objekte führt, für die die Eigenschaft <codeph>toolTip</codeph> eingestellt ist. Sie können die automatische Verwaltung von QuickInfos deaktivieren, indem Sie die Eigenschaft <codeph>enabled</codeph> des ToolTipManagers auf <codeph>false</codeph> setzen.</p>
     
      <p>Dadurch und durch <codeph>destroyToolTip()</codeph> können Sie QuickInfos steuern. Sie können die QuickInfos zum gewünschten Zeitpunkt an der gewünschten Position einblenden – sogar mehrere QuickInfos gleichzeitig. (Der ToolTipManager blendet nie mehrere QuickInfos gleichzeitig ein, da dies Benutzer normalerweise verwirrt.)</p>
     
      <p>Diese Methode erstellt eine neue QuickInfo-Instanz und ruft die <codeph>addChild()</codeph>-Methode auf, um sie auf der toolTips-Ebene des SystemManagers zu platzieren. Wenn Sie eine Fehlerinfo anzeigen, stellt sie die entsprechenden Stile ein. Dann stellt sie den Text der QuickInfo ein, passt deren Größe anhand des Texts an und platziert die QuickInfo an der angegebenen Position.</p>
     
      <p>Sie müssen den von dieser Methode zurückgegebenen Verweis auf die QuickInfo speichern, um ihn an die <codeph>destroyToolTip()</codeph>-Methode übergeben zu können.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ToolTipManager:destroyToolTip"><apiName>destroyToolTip</apiName><shortdesc>
      Löscht eine angegebene QuickInfo, die durch die createToolTip()-Methode erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toolTip</apiItemName><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier><apiDesc>Die zu löschende QuickInfo-Instanz.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Löscht eine angegebene QuickInfo, die durch die <codeph>createToolTip()</codeph>-Methode erstellt wurde.
     
      <p>Diese Methode ruft die <codeph>removeChild()</codeph>-Methode auf, um die angegebene QuickInfo aus der ToolTip-Ebene des SystemManagers zu entfernen. Danach wird sie von einem Garbagekollektor entfernt, es sei denn es ist noch ein Verweis darauf vorhanden.</p>
     
      <p>Sie sollten diese Methode nicht vom <codeph>currentToolTip</codeph> des ToolTipManagers aus aufrufen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ToolTipManager:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
      Die UIComponent, die derzeit eine QuickInfo anzeigt, oder null, wenn keine QuickInfo angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Die UIComponent, die derzeit eine QuickInfo anzeigt, oder <codeph>null</codeph>, wenn keine QuickInfo angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:currentToolTip:get"><apiName>currentToolTip</apiName><shortdesc>
      Das ToolTip-Objekt, das derzeit sichtbar ist, oder null, wenn keines angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IToolTip</apiValueClassifier></apiValueDef><apiDesc>
      Das ToolTip-Objekt, das derzeit sichtbar ist, oder <codeph>null</codeph>, wenn keines angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:enabled:get"><apiName>enabled</apiName><shortdesc>
      Bei „true“ zeigt der ToolTipManager automatisch QuickInfos an, wenn der Benutzer den Mauszeiger über Komponenten führt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> zeigt der ToolTipManager automatisch QuickInfos an, wenn der Benutzer den Mauszeiger über Komponenten führt. Bei <codeph>false</codeph> werden keine QuickInfos angezeigt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideDelay:get"><apiName>hideDelay</apiName><shortdesc>
      Der Zeitraum in Millisekunden, bis Flex eine angezeigte QuickInfo wieder ausblendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Zeitraum in Millisekunden, bis Flex eine angezeigte QuickInfo wieder ausblendet. Nach dem Ausblenden einer QuickInfo muss der Benutzer den Mauszeiger von der Komponente entfernen und erneut über die Komponente führen, damit die QuickInfo wieder angezeigt wird. Setzen Sie <codeph>hideDelay</codeph> auf <codeph>Infinity</codeph>, dann blendet Flex die QuickInfo erst aus, wenn der Benutzer ein Ereignis auslöst, beispielsweise den Mauszeiger von der Komponente entfernt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideEffect:get"><apiName>hideEffect</apiName><shortdesc>
      Der Effekt, der beim Ausblenden einer QuickInfo angezeigt wird, oder null, wenn die QuickInfo ohne Effekt ausgeblendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Effekt, der beim Ausblenden einer QuickInfo angezeigt wird, oder <codeph>null</codeph>, wenn die QuickInfo ohne Effekt ausgeblendet werden soll.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:scrubDelay:get"><apiName>scrubDelay</apiName><shortdesc>
      Der Zeitraum in Millisekunden, innerhalb dessen der Benutzer den Mauszeiger zwischen den Steuerelementen bewegen kann, bevor Flex erneut die in showDelay definierte Zeit abwartet, um eine QuickInfo anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Zeitraum in Millisekunden, innerhalb dessen der Benutzer den Mauszeiger zwischen den Steuerelementen bewegen kann, bevor Flex erneut die in <codeph>showDelay</codeph> definierte Zeit abwartet, um eine QuickInfo anzuzeigen.
     
      <p>Diese Einstellung ist nützlich, wenn der Benutzer schnell von einem Steuerelement zum nächsten wechselt. Nach der ersten QuickInfo werden alle folgenden QuickInfos sofort angezeigt, statt abzuwarten. Je kürzer der für <codeph>scrubDelay</codeph> eingestellte Zeitraum, umso wahrscheinlicher muss der Benutzer die in <codeph>showDelay</codeph> eingestellte Zeit abwarten, um die nächste QuickInfo zu sehen. Mit dieser Eigenschaft können Sie beispielsweise Benutzern ermöglichen, die QuickInfos mehrerer Schaltflächen in einer Symbolleiste schnell hintereinander anzuzeigen.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showDelay:get"><apiName>showDelay</apiName><shortdesc>
      Der Zeitraum in Millisekunden, den Flex vor dem Einblenden eines QuickInfo-Felds abwartet, sobald ein Benutzer die Maus über eine Komponente mit einer QuickInfo geführt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Zeitraum in Millisekunden, den Flex vor dem Einblenden eines QuickInfo-Felds abwartet, sobald ein Benutzer die Maus über eine Komponente mit einer QuickInfo geführt hat. Damit die QuickInfo sofort angezeigt wird, müssen Sie <codeph>showDelay</codeph> auf 0 setzen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showEffect:get"><apiName>showEffect</apiName><shortdesc>
      Der Effekt, der beim Einblenden einer QuickInfo angezeigt wird, oder null, wenn die QuickInfo ohne Effekt eingeblendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Effekt, der beim Einblenden einer QuickInfo angezeigt wird, oder <codeph>null</codeph>, wenn die QuickInfo ohne Effekt eingeblendet werden soll.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:toolTipClass:get"><apiName>toolTipClass</apiName><shortdesc>
      Die zum Erstellen von QuickInfos zu verwendende Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>mx.controls.ToolTip
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die zum Erstellen von QuickInfos zu verwendende Klasse.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManagerPriority"><apiName>CursorManagerPriority</apiName><shortdesc>
  Die CursorManagerPriority-Klasse definiert die Konstantenwerte für das Priority-Argument der CursorManager.setCursor()-Methode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CursorManagerPriority-Klasse definiert die Konstantenwerte für das <codeph>priority</codeph>-Argument der <codeph>CursorManager.setCursor()</codeph>-Methode. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links><apiValue id="mx.managers:CursorManagerPriority:HIGH"><apiName>HIGH</apiName><shortdesc>
	  Konstante, die bei Übergabe als Priority-Argument an setCursor() die höchste Cursorpriorität angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Konstante, die bei Übergabe als <codeph>Priority</codeph>-Argument an <codeph>setCursor()</codeph> die höchste Cursorpriorität angibt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:LOW"><apiName>LOW</apiName><shortdesc>
	  Konstante, die bei Übergabe als Priority-Argument an setCursor() die niedrigste Cursorpriorität angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Konstante, die bei Übergabe als <codeph>Priority</codeph>-Argument an <codeph>setCursor()</codeph> die niedrigste Cursorpriorität angibt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:MEDIUM"><apiName>MEDIUM</apiName><shortdesc>
	  Konstante, die bei Übergabe als Priority-Argument an setCursor() eine mittlere Cursorpriorität angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Konstante, die bei Übergabe als <codeph>Priority</codeph>-Argument an <codeph>setCursor()</codeph> eine mittlere Cursorpriorität angibt.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:DragManager"><apiName>DragManager</apiName><shortdesc>
  Die DragManager-Klasse verwaltet das Ziehen und Ablegen von Daten in einer Flex-Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="rejectCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Für eine Ablehnung angezeigter Cursor. Der Standardwert ist das Symbol „mx.skins.cursor.DragReject“ in der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="moveCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Beim Verschieben angezeigter Cursor. Der Standardwert ist das Symbol „mx.skins.cursor.DragMove“ in der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Bei einer Verknüpfung angezeigter Cursor. Der Standardwert ist das Symbol „mx.skins.cursor.DragLink“ in der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDragImageSkin" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Die zum Zeichnen der Standardabbildung beim Ziehen verwendete Skin; wird auch als Ziehproxy bezeichnet.
 
  </description>
<default>mx.skins.halo.DefaultDragImage (for both Halo and Spark themes)
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="copyCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Beim Kopieren angezeigter Cursor. Der Standardwert ist das Symbol „mx.skins.cursor.DragCopy“ in der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DragManager-Klasse verwaltet Daten-Drag &amp; Drop-Vorgänge in Flex-Anwendungen. Beispielsweise können Sie ein Objekt wie ein Element in einem List-Steuerelement oder einem Flex-Steuerelement (z. B. Image-Steuerelement) auswählen und über eine Komponente ziehen, um sie dieser Komponente hinzuzufügen.
  
  <p>Alle Methoden und Eigenschaften des DragManagers sind statisch, sodass Sie keine Instanz davon erstellen müssen.</p>
  
  <p>Alle Flex-Komponenten unterstützen Drag &amp; Drop-Vorgänge. Flex bietet zusätzliche Unterstützung für Drag &amp; Drop in List-, Tree- und DataGrid-Steuerelementen.</p>
  
  <p>Wenn der Benutzer ein Element mit der Maus auswählt, wird die ausgewählte Komponente als Ziehinitiator bezeichnet. Das während des Ziehvorgangs angezeigte Bild wird als Ziehproxy bezeichnet.</p>
  
  <p>Wenn der Benutzer den Ziehproxy über eine andere Komponente zieht, wird das <codeph>dragEnter</codeph>-Ereignis an diese Komponente gesendet. Wenn die Komponente den Ziehvorgang akzeptiert, wird sie das Ziehziel und erhält die <codeph>dragOver</codeph>-, <codeph>dragExit</codeph>- und <codeph>dragDrop</codeph>-Ereignisse.</p>
  
  <p>Nach Abschluss des Ziehvorgangs wird das <codeph>dragComplete</codeph>-Ereignis an den Ziehinitiator gesendet.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DragSource"><linktext>mx.core.DragSource</linktext></link><link href="mx.events.xml#DragEvent"><linktext>mx.events.DragEvent</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><apiOperation id="mx.managers:DragManager:acceptDragDrop"><apiName>acceptDragDrop</apiName><shortdesc>
      Rufen Sie diese Methode in Ihrer dragEnter-Ereignisprozedur auf, um die gezogenen Daten zu akzeptieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Das Ablageziel, das den Ziehvorgang akzeptiert.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Rufen Sie diese Methode in Ihrer <codeph>dragEnter</codeph>-Ereignisprozedur auf, um die gezogenen Daten zu akzeptieren. In der Regel wandeln Sie <codeph>event.target</codeph> in den Datentyp des Ablageziels um. Im folgenden Beispiel ist das Ablageziel ein MX Canvas-Container. 
     
      <pre>DragManager.acceptDragDrop(Canvas(event.target));</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:doDrag"><apiName>doDrag</apiName><shortdesc>
      Initiiert einen Drag &amp; Drop-Vorgang.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>IUIComponent zur Angabe der Komponente, von der der Ziehvorgang eingeleitet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiDesc>DragSource-Objekt, das die gezogenen Daten enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>mouseEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent, der die Mausinformationen für den Start des Ziehvorgangs enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragImage</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Das zu ziehende Bild. Dieses Argument ist optional. Wird dies ausgelassen, dann wird ein standardmäßiges Rechteck während des Drag &amp; Drop-Vorgangs verwendet. Wenn Sie ein Bild angeben, müssen Sie dessen Höhe und Breite explizit festlegen, andernfalls wird das Bild nicht angezeigt.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Zahl, die den x-Offset in Pixeln für <codeph>dragImage</codeph> angibt. Dieses Argument ist optional. Wird dies ausgelassen, dann wird der Ziehproxy in der linken oberen Ecke des Ziehinitiators angezeigt. Der Offset wird von der linken Kante des Ziehproxys zur linken Kante des Ziehinitiators in Pixeln gemessen. Normalerweise ist die Zahl negativ.
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Zahl, die den y-Offset in Pixeln für <codeph>dragImage</codeph> angibt. Dieses Argument ist optional. Wird dies ausgelassen, dann wird der Ziehproxy in der linken oberen Ecke des Ziehinitiators angezeigt. Der Offset wird von der oberen Kante des Ziehproxys zur oberen Kante des Ziehinitiators in Pixeln gemessen. Normalerweise ist die Zahl negativ.
     
      </apiDesc></apiParam><apiParam><apiItemName>imageAlpha</apiItemName><apiType value="Number"/><apiData>0.5</apiData><apiDesc>Zahl, die den Alpha-Wert des Ziehbilds angibt. Dieses Argument ist optional. Wird sie ausgelassen, beträgt der Alpha-Wert 0,5. Mit dem Wert 0,0 ist das Bild transparent, mit dem Wert 1,0 ist es völlig undurchsichtig. 
         
          </apiDesc></apiParam><apiParam><apiItemName>allowMove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Gibt an, ob ein Ablageziel die gezogenen Daten verschieben kann.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initiiert einen Drag &amp; Drop-Vorgang.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:getFeedback"><apiName>getFeedback</apiName><shortdesc>
      Gibt die aktuelle Drag &amp; Drop-Rückmeldung zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Mögliche Werte sind <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> oder <codeph>DragManager.NONE</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die aktuelle Drag &amp; Drop-Rückmeldung zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:showFeedback"><apiName>showFeedback</apiName><shortdesc>
      Legt den Rückmeldungsindikator für den Drag &amp; Drop-Vorgang fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>feedback</apiItemName><apiType value="String"/><apiDesc>Der Typ des anzuzeigenden Rückmeldungsindikators.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt den Rückmeldungsindikator für den Drag &amp; Drop-Vorgang fest. Mögliche Werte sind <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> oder <codeph>DragManager.NONE</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:DragManager:COPY"><apiName>COPY</apiName><shortdesc>
      Konstante, die als Typ des Ziehvorgangs „copy“ angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Konstante, die als Typ des Ziehvorgangs „copy“ angibt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:LINK"><apiName>LINK</apiName><shortdesc>
      Konstante, die als Typ des Ziehvorgangs „link“ angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Konstante, die als Typ des Ziehvorgangs „link“ angibt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:MOVE"><apiName>MOVE</apiName><shortdesc>
      Konstante, die als Typ des Ziehvorgangs „move“ angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Konstante, die als Typ des Ziehvorgangs „move“ angibt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:NONE"><apiName>NONE</apiName><shortdesc>
      Konstante, die als Typ des Ziehvorgangs „none“ angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Konstante, die als Typ des Ziehvorgangs „none“ angibt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:isDragging:get"><apiName>isDragging</apiName><shortdesc>
      Schreibgeschützte Eigenschaft, die „true“ zurückgibt, wenn ein Ziehvorgang ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Schreibgeschützte Eigenschaft, die <codeph>true</codeph> zurückgibt, wenn ein Ziehvorgang ausgeführt wird.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerContainer"><apiName>IFocusManagerContainer</apiName><shortdesc>
  Die IFocusManagerContainer-Schnittstelle definiert die Schnittstelle, die von Containern zum Hosten eines FocusManager implementiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFocusManagerContainer-Schnittstelle definiert die Schnittstelle, die von Containern zum Hosten eines FocusManager implementiert wird. Der PopUpManager installiert automatisch einen FocusManager in jedem IFocusManagerContainer, den er anzeigt.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:contains"><apiName>contains</apiName><shortdesc>
      Bestimmt, ob das angegebene Anzeigeobjekt ein untergeordnetes Element der Container-Instanz oder die Instanz selbst ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Bei <codeph>true</codeph> ist das untergeordnete Element ein untergeordnetes Element des Containers oder der Container selbst. Andernfalls ist <codeph>false</codeph> eingestellt.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu prüfende untergeordnete Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt, ob das angegebene Anzeigeobjekt ein untergeordnetes Element der Container-Instanz oder die Instanz selbst ist. Die Suche umfasst die gesamte Anzeigeliste einschließlich dieser Container-Instanz. Für Objekte, die über mehrere Ebenen hinweg untergeordnet sind, wird der Wert <codeph>true</codeph> zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist. Wenn Steuerelementen im Container der Fokus zugewiesen ist, entspricht das Drücken der Eingabetaste dem Klicken auf das Button-Steuerelement.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      Der FocusManager dieser Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      Der FocusManager dieser Komponente. Der FocusManager muss sich in einer <codeph>focusManager</codeph>-Eigenschaft befinden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManager"><apiName>ILayoutManager</apiName><shortdesc>
  Der LayoutManager ist die Engine, auf der die Messungs- und Layoutstrategie von Flex basiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Der LayoutManager ist die Engine, auf der die Messungs- und Layoutstrategie von Flex basiert. Das Layout wird in drei Phasen durchgeführt: Übernahme, Messung und Layout.
 
  <p>Jede Phase unterscheidet sich von den anderen und alle UIComponents einer Phase werden verarbeitet, bevor die nächste Phase beginnt. Während der UIComponent-Verarbeitung in einer Phase kann es zu Anforderungen zur erneuten UIComponent-Verarbeitung in dieser Phase kommen. Diese Anforderungen werden in eine Warteschlange gestellt und erst beim nächsten Ausführen der Phase berücksichtigt.</p>
 
  <p>Die <b>Übernahme</b>-Phase beginnt mit einem Aufruf der <codeph>validateProperties()</codeph>-Methode. Diese Methode geht eine Liste von Objekten in umgekehrter Verschachtelungsreihenfolge durch und ruft die <xref href="../core/UIComponent.html#validateProperties()"> <codeph>validateProperties()</codeph></xref>-Methode jedes Objekts auf.</p>
 
  <p>Die Objekte in der Liste werden in umgekehrter Verschachtelungsreihenfolge verarbeitet, wobei das <b>oberste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von oben nach unten oder von außen nach innen.</p>
 
  <p>In dieser Phase können Komponenten, deren Inhalte von Eigenschaftseinstellungen abhängen, sich selbst konfigurieren, bevor die Messungs- und die Layoutphase beginnen. Aus Leistungsgründen führt die Methode zum Festlegen einer Komponenteneigenschaft nicht immer die gesamte Aktualisierung des neuen Eigenschaftswerts aus. Stattdessen wird die <codeph>invalidateProperties()</codeph>-Methode aufgerufen, und die Aufgabe bis zur Ausführung dieser Phase zurückgestellt. Dies verhindert unnötige Mehrarbeit, wenn die Eigenschaft mehrmals eingestellt ist.</p>
 
  <p>Die <b>Messungs</b>-Phase beginnt mit einem Aufruf der <codeph>validateSize()</codeph>-Methode, die eine Liste von Objekten in der Verschachtelungsreihenfolge durchgeht und die <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph></xref>-Methode jedes Objekts aufruft, um zu bestimmen, ob sich die Größe des Objekts geändert hat.</p>
 
  <p>Wurde zuvor die <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref>-Methode eines Objekts aufgerufen, wird anschließend die <codeph>validateSize()</codeph>-Methode aufgerufen. Wenn die Größe oder Position des Objekts durch einen <codeph>validateSize()</codeph>-Aufruf geändert wurde, wird die <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>-Methode des Objekts augerufen, um das Objekt der Verarbeitungswarteschlange für das nächste Ausführen der Layoutphase hinzuzufügen. Zusätzlich wird das übergeordnete Objekt für die Messungs- und Layoutphase markiert, indem <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> bzw. <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> aufgerufen wird.</p>
 
  <p>Die Objekte in der Liste werden in der Reihenfolge der Verschachtelung verarbeitet, wobei das <b>unterste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von unten nach oben oder innen nach außen.</p>
 
  <p>Die <b>layout</b>-Phase beginnt mit einem Aufruf der <codeph>validateDisplayList()</codeph>-Methode. Diese Methode geht eine Liste von Objekten in umgekehrter Verschachtelungsreihenfolge durch und ruft die <xref href="../core/UIComponent.html#validateDisplayList()"><codeph>validateDisplayList()</codeph></xref>-Methode jedes Objekts auf, um das Objekt zur Änderung von Größe und Position aller enthaltenen Komponenten (einschließlich untergeordneter Objekte) aufzufordern.</p>
 
  <p>Wurde zuvor die <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>-Methode eines Objekts aufgerufen, wird anschließend die <codeph>validateDisplayList()</codeph>-Methode des Objekts aufgerufen.</p>
 
  <p>Die Objekte in der Liste werden in umgekehrter Verschachtelungsreihenfolge verarbeitet, wobei das <b>oberste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von oben nach unten oder von außen nach innen.</p>
 
  <p>Im Allgemeinen wird die <codeph>validateProperties()</codeph>-, <codeph>validateSize()</codeph>- oder <codeph>validateDisplayList()</codeph>-Methode nicht von Komponenten überschrieben. Die meisten UIComponents überschreiben die <codeph>commitProperties()</codeph>-, <codeph>measure()</codeph>- oder <codeph>updateDisplayList()</codeph>-Methode, die von der <codeph>validateProperties()</codeph>-, <codeph>validateSize()</codeph>- bzw. <codeph>validateDisplayList()</codeph>-Methode aufgerufen werden.</p>
 
  <p>Beim Starten der Anwendung wird eine einzige LayoutManager-Instanz erstellt und in der Eigenschaft <codeph>UIComponent.layoutManager</codeph> gespeichert. Es wird erwartet, dass alle Komponenten diese Instanz verwenden. Wenn Sie keinen Zugriff auf das UIComponent-Objekt haben, können Sie den LayoutManager auch mit der statischen <codeph>LayoutManager.getInstance()</codeph>-Methode aufrufen.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  Wird bei Änderung einer Komponente aufgerufen, die eine Änderung von Layout und/oder Grafiken erfordert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das geänderte Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Wird bei Änderung einer Komponente aufgerufen, die eine Änderung von Layout und/oder Grafiken erfordert. In diesem Fall muss der Layoutalgorithmus der Komponente ausgeführt werden, auch wenn sich die Größe der Komponente nicht geändert hat. Dies ist beispielsweise der Fall, wenn eine neue untergeordnete Komponente hinzugefügt, eine Stileigenschaft geändert oder die Größe der Komponente durch die übergeordnete Komponente geändert wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  Fügt ein Objekt der Liste von Komponenten hinzu, deren validateProperties()-Methode aufgerufen werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das Objekt, dessen Eigenschaft geändert wurde.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Fügt ein Objekt der Liste von Komponenten hinzu, deren <codeph>validateProperties()</codeph>-Methode aufgerufen werden muss. Eine Komponente sollte diese Methode bei der Änderung einer Eigenschaft aufrufen. Normalerweise speichert eine Methode zum Festlegen einer Eigenschaft einen neuen Wert in einer temporären Variable und ruft die <codeph>invalidateProperties()</codeph>-Methode auf, sodass später die <codeph>validateProperties()</codeph>- und die <codeph>commitProperties()</codeph>-Methode aufgerufen wird, wenn der neue Wert auf die Komponente und/oder deren untergeordnete Komponenten angewendet wird. Der Vorteil dieser Strategie ist, dass oft mehrere Eigenschaften gleichzeitig geändert werden und die Eigenschaften miteinander interagieren, bei der Anwendung den gleichen Code wiederholen oder in einer bestimmten Reihenfolge erneut angewendet werden müssen. Mit dieser Strategie können neue Eigenschaftswerte am effizientesten angewendet werden.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  Fügt ein Objekt der Liste von Komponenten hinzu, deren validateSize()-Methode aufgerufen werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das Objekt, dessen Größe geändert wurde.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Fügt ein Objekt der Liste von Komponenten hinzu, deren <codeph>validateSize()</codeph>-Methode aufgerufen werden muss. Wird aufgerufen, wenn die Größe eines Objekts geändert wird.
	 
	  <p>Es gibt zwei Gründe für die Änderung der Größe eines Objekts:</p>
	 
	  <ol>
	    <li>Der Inhalt des Objekts ändert sich. Beispielsweise ändert sich die Größe einer Schaltfläche, wenn sich ihre <codeph>label</codeph> ändert.</li>
	    <li>Ein Skript ändert eine der folgenden Eigenschaften explizit: <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> oder <codeph>maxHeight</codeph>.</li>
	  </ol>
	 
	  <p>Im ersten Fall müssen die Maße des Objekts neu berechnet werden Im zweiten Fall müssen die Maße des Objekts nicht neu berechnet werden, da die neue Größe des Objekts bekannt ist. Das übergeordnete Objekt muss jedoch neu gemessen und das Layout muss neu festgelegt werden.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
	  Gibt „true“ zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt „false“ zurück, wenn alle Komponenten validiert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt <codeph>false</codeph> zurück, wenn alle Komponenten validiert wurden.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt <codeph>true</codeph> zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt <codeph>false</codeph> zurück, wenn alle Komponenten validiert wurden.
          
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
	  Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Anhand der übergebenen Komponente wird geprüft, welche Komponenten validiert werden müssen. Für alle in dieser Komponente enthaltenen Komponenten wird die <codeph>validateProperties()</codeph>-, <codeph>commitProperties()</codeph>-, <codeph>validateSize()</codeph>-, <codeph>measure()</codeph>-, <codeph>validateDisplayList()</codeph>- und <codeph>updateDisplayList()</codeph>-Methode aufgerufen.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> werden die <codeph>validateDisplayList()</codeph>- und die <codeph>updateDisplayList()</codeph>-Methode nicht aufgerufen.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet. Stattdessen rufen die Komponenten eine der Invalidierungsmethoden des LayoutManagers auf und wenden die Eigenschaften später an. Die tatsächliche Eigenschaft, die Sie eingestellt haben, kann sofort abgerufen werden, wenn sie sich jedoch auf andere Eigenschaften in der Komponente, auf untergeordnete oder übergeordnete Komponenten auswirkt, werden diese nicht sofort aktualisiert.  
	 
	  <p>Um sicherzustellen, dass die Werte aktualisiert werden, rufen Sie die <codeph>validateClient()</codeph>-Methode auf. Sie aktualisiert die Eigenschaften aller Komponenten, deren Verschachtelungsstufe höher oder gleich der Zielkomponente ist, bevor das Steuerelement an den Benutzer zurückgegeben wird. Da dieser Aufruf viel Rechenleistung erfordert, sollten Sie diese Methode nur aufrufen, wenn sie benötigt wird.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
	  Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet. Stattdessen rufen die Komponenten eine der Invalidierungsmethoden des LayoutManagers auf und wenden die Eigenschaften später an. Die tatsächliche Eigenschaft, die Sie eingestellt haben, kann sofort abgerufen werden, wenn sie sich jedoch auf andere Eigenschaften in der Komponente, auf untergeordnete oder übergeordnete Komponenten auswirkt, werden diese nicht sofort aktualisiert. Um sicherzustellen, dass die Werte aktualisiert werden, rufen Sie die <codeph>validateNow()</codeph>-Methode auf. Dadurch werden die Eigenschaften aller Komponenten vor der Rückgabe aktualisiert. Da dieser Aufruf viel Rechenleistung erfordert, sollten Sie diese Methode nur aufrufen, wenn sie benötigt wird.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
	  Ein Flag, das angibt, ob der LayoutManager Bildschirmaktualisierungen zwischen Phasen zulässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Ein Flag, das angibt, ob der LayoutManager Bildschirmaktualisierungen zwischen Phasen zulässt. Bei <codeph>true</codeph> werden Messung und Layout in Phasen vorgenommen (eine Phase pro Bildschirmaktualisierung). Für alle anderen Komponenten wird die <codeph>validateProperties()</codeph>- und <codeph>commitProperties()</codeph>-Methode aufgerufen, bis alle Eigenschaften validiert sind. Danach wird der Bildschirm aktualisiert.  
	 
	  <p>Dann werden die <codeph>validateSize()</codeph>- und die <codeph>measure()</codeph>-Methode für alle Komponenten aufgerufen, bis alle Komponenten gemessen wurden, und der Bildschirm wird erneut aktualisiert.  </p>
	 
	  <p>Schließlich wird die <codeph>validateDisplayList()</codeph>- und <codeph>updateDisplayList()</codeph>-Methode für alle Komponenten aufgerufen, bis alle Komponenten validiert wurden, und der Bildschirm wird erneut aktualisiert. Wenn bei der Überprüfung einer Phase die Überprüfung einer früheren Phase rückgängig gemacht wird, beginnt der LayoutManager von vorne. Dies ist effizienter, wenn zahlreiche Komponenten erstellt und initialisiert werden. Die Architektur ist für die Einstellung dieser Eigenschaft zuständig.</p>
	 
	  <p>Bei <codeph>false</codeph> werden alle drei Phasen abgeschlossen, bevor der Bildschirm aktualisiert wird.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:FocusManager"><apiName>FocusManager</apiName><shortdesc>
  Die FocusManager-Klasse verwaltet den Fokus auf Komponenten auf eine Maus- oder Tastaturaktivität hin (Tabulatortaste).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FocusManager-Klasse verwaltet den Fokus auf Komponenten auf eine Maus- oder Tastaturaktivität hin (Tabulatortaste). Eine Anwendung kann mehrere FocusManager-Instanzen aufweisen. Jede FocusManager-Instanz ist für eine Gruppe von Komponenten verantwortlich, die eine „Tabulatorschleife“ bilden. Wenn Sie die Tabulatortaste oft genug drücken, durchläuft der Fokus eine Reihe von Komponenten und kehrt zu der Komponente zurück, der der Fokus zuerst zugewiesen war. Diese sogenannte Tabulatorschleife wird von einem FocusManager verwaltet. Falls es Popup-Fenster mit eigenen Komponentengruppen in einer Tabulatorschleife gibt, verfügen diese Fenster über ihre eigenen FocusManager-Instanzen. Die Hauptanwendung verfügt immer über eine FocusManager-Instanz.
   <p>Der FocusManager verwaltet den Fokus der Komponentenebene. In Flex ist ein UITextField die einzige Möglichkeit, die Eingabe von Text über die Tastatur zuzulassen. In Flash Player oder AIR ist diesem UITextField der Fokus zugewiesen. Vom Blickwinkel des FocusManagers aus ist der Komponente, die UITextField übergeordnet ist, der Fokus zugewiesen. Daher besteht ein Unterschied zwischen dem Fokus auf Komponentenebene und dem Fokus auf Player-Ebene. Anwendungsentwickler müssen normalerweise nur den Fokus auf Komponentenebene und Komponentenentwickler den Fokus auf Player-Ebene verstehen.</p>
   <p>Alle Komponenten, die von einem FocusManager verwaltet werden können, müssen mx.managers.IFocusManagerComponent implementieren. Bei Objekten, deren Fokus auf Player-Ebene verwaltet wird, ist dies nicht erforderlich.</p>  
   <p>Der FocusManager verwaltet darüber hinaus eine Standardschaltfläche (defaultButton). Hierbei handelt es sich um die Schaltfläche auf einem Formular, die ein click-Ereignis auslöst, wenn die Eingabetaste gedrückt wird, je nachdem, wo sich der Fokus zu diesem Zeitpunkt befindet.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.managers:FocusManager:FocusManager"><apiName>FocusManager</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerContainer</apiOperationClassifier><apiDesc>Ein IFocusManagerContainer, der den FocusManager hostet.
           </apiDesc></apiParam><apiParam><apiItemName>popup</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> enthält der Container eine Popup-Komponente und nicht die Hauptanwendung.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
           <p>Ein FocusManager verwaltet den Fokus für die untergeordneten Objekte eines IFocusManagerContainers. Er installiert sich während der Ausführung des Konstruktors im IFocusManagerContainer.</p>
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:FocusManager:activate"><apiName>activate</apiName><shortdesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind. Wird in einem „IFocusManagerContainer“ bei deaktiviertem FocusManager mit der Maus geklickt, ruft der SystemManager die <codeph>activate()</codeph>-Methode für den jeweiligen FocusManager auf. Für den aktivierten FocusManager wird seine <codeph>deactivate()</codeph>-Methode aufgerufen, bevor ein anderer FocusManager aktiviert wird.
           <p>Der FocusManager fügt Ereignisprozeduren hinzu, mit denen fokusrelevante Tastatur- und Mauseingaben überwacht werden können.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind. Wird in einem „IFocusManagerContainer“ bei deaktiviertem FocusManager mit der Maus geklickt, ruft der SystemManager die <codeph>activate()</codeph>-Methode für den jeweiligen FocusManager auf. Für den aktivierten FocusManager wird seine <codeph>deactivate()</codeph>-Methode aufgerufen, bevor ein anderer FocusManager aktiviert wird.
           <p>Der FocusManager entfernt Ereignisprozeduren, mit denen fokusrelevante Tastatur- und Mauseingaben überwacht werden können.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      
      Gibt die IFocusManagerComponent-Komponente zurück, die das entsprechende Objekt enthält (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFocusManagerComponent, die <codeph>o</codeph> oder <codeph>null</codeph> enthält.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Ein Objekt, das über den Fokus auf Player-Ebene verfügen kann.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die IFocusManagerComponent-Komponente zurück, die ggf. das gegebene Objekt enthält. Da der Player den Fokus auf die Unterkomponente einer Flex-Komponente legen kann, wird durch diese Methode ermittelt, welche IFocusManagerComponent vom Blickwinkel der Komponente aus über den Fokus verfügt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      
      Ruft die IFocusManagerComponent-Komponente ab, die gerade den Fokus besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das IFocusManagerComponent-Objekt, das den Fokus besitzt.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Ruft die IFocusManagerComponent-Komponente auf, die gerade den Fokus besitzt. Verwenden Sie diese Methode anstelle des Stage-Objekts, da hier angegeben wird, auf welcher Komponente der Fokus liegt. Das Stage-Objekt gibt unter Umständen eine Unterkomponente in der Komponente zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      
      Gibt die IFocusManagerComponent zurück, die den Fokus erhalten würde, falls der Benutzer die Tabulatortaste drücken würde, um zu einer anderen Komponente zu navigieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Komponente, die den Fokus als Nächstes erhält.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>true</codeph> angegeben ist, wird das Objekt zurückgegeben, das beim Drücken von Umschalt+Tabulatortaste den Fokus erhält.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die IFocusManagerComponent zurück, die den Fokus erhalten würde, falls der Benutzer die Tabulatortaste drücken würde, um zu einer anderen Komponente zu navigieren. Es wird die Komponente zurückgegeben, der gegenwärtig der Fokus zugewiesen ist, wenn die Anwendung keine anderen gültigen Komponenten enthält.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      
      Setzt „showFocusIndicator“ auf „false“ und entfernt den sichtbaren Fokusindikator von dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Setzt <codeph>showFocusIndicator</codeph> auf <codeph>false</codeph> und entfernt den sichtbaren Fokusindikator von dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      
      Legt den Fokus auf eine IFocusManagerComponent-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Eine Komponente, die den Fokus erhalten kann.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Legt den Fokus auf eine IFocusManagerComponent-Komponente. Die Sichtbarkeit, der Aktivierungsstatus und andere Bedingungen der Komponente werden hiermit nicht überprüft.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      
      Setzt „showFocusIndicator“ auf „true“ und zeichnet einen sichtbaren Fokusindikator auf dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Setzt <codeph>showFocusIndicator</codeph> auf <codeph>true</codeph> und zeichnet einen sichtbaren Fokusindikator auf dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:toString"><apiName>toString</apiName><shortdesc>
      Gibt eine Stringdarstellung der Komponente zurück, die das FocusManager-Objekt hostet, wobei „.focusManager“ am Ende des Strings hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Gibt eine Stringdarstellung der Komponente zurück, die das FocusManager-Objekt hostet, wobei <codeph>.focusManager</codeph> am Ende des Strings hinzugefügt wird.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt eine Stringdarstellung der Komponente zurück, die das FocusManager-Objekt hostet, wobei <codeph>.focusManager</codeph> am Ende des Strings hinzugefügt wird.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:FocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      
      Ein Flag, das angibt, ob der FocusManager prüfen soll, ob die Eingabetaste gedrückt wurde, um die Standardschaltfläche zu aktivieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Ein Flag, das angibt, ob der FocusManager prüfen soll, ob die Eingabetaste gedrückt wurde, um die Standardschaltfläche zu aktivieren. TextArea und andere Komponenten, von denen die <codeph>Eingabetaste</codeph> erkannt werden soll, setzen diese Eigenschaft auf <codeph>false</codeph>, damit die Eingabetaste kein <codeph>click</codeph>-Ereignis auf die Standardschaltfläche auslöst, falls diese vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      
      Ein Verweis auf das ursprüngliche Button-Standardsteuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      
      Ein Verweis auf das ursprüngliche Button-Standardsteuerelement. Wird die Eingabetaste gedrückt, während der Fokus auf einem Steuerelement liegt, dann wird das Button-Steuerelement aktiviert, indem ein <codeph>click</codeph>-Ereignis auf dem Button-Steuerelement ausgelöst wird. Dies entspricht einem Mausklick auf das Steuerelement. Das tatsächliche Button-Standardsteuerelement ändert sich, wenn der Fokus an ein anderes Button-Steuerelement übergeben wird, wechselt jedoch zurück zum ursprünglichen Element, wenn der Fokus nicht auf einer Schaltfläche liegt.
     
      <p>Diese Eigenschaft wird von Flex-Containern verwaltet. Legen Sie sie nicht direkt fest, um die Standardschaltfläche anzugeben.</p>
     
      <p>Der <codeph>defaultButton</codeph> muss der <codeph>mx.controls.Button</codeph>-Klasse angehören, auch wenn diese Eigenschaft nicht den Typ <codeph>IUIComponent</codeph> aufweist.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Ein einzelnes Sprite, das zusammen mit dem Fokus von einem Container zu einem anderen verschoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Ein einzelnes Sprite, das zusammen mit dem Fokus von einem Container zu einem anderen verschoben wird. Das Sprite wird als übergeordnetes Objekt des visuellen Indikators verwendet, der anzeigt, dass eine Komponente den Fokus besitzt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      
      Die nächste eindeutige Position, die in der Tabulatorschleife verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Die nächste eindeutige Position, die in der Tabulatorschleife verwendet werden soll.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      
      Ein Flag, das angibt, ob ein Indikator angezeigt werden soll, um darauf aufmerksam zu machen, dass eine Komponente den Fokus besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Ein Flag, das angibt, ob ein Indikator angezeigt werden soll, um darauf aufmerksam zu machen, dass eine Komponente den Fokus besitzt. Bei <codeph>true</codeph> zeigt eine Komponente, die den Fokus erhält, einen sichtbaren Indikator an.
     
      <p>Standardmäßig ist für diese Eigenschaft <codeph>false</codeph> festgelegt, bis der Benutzer die Tabulatortaste drückt. Dann wechselt die Eigenschaft auf <codeph>true</codeph>.</p>
     
      <p>Im Allgemeinen sollte die <codeph>showFocus()</codeph>- und <codeph>hideFocus()</codeph>-Methode zum Ändern dieser Eigenschaft verwendet werden, da diese Methoden auch den visuellen Indikator aktualisieren, der angibt, dass einer Komponente der Fokus zugewiesen ist.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComplexComponent"><apiName>IFocusManagerComplexComponent</apiName><shortdesc>
  Die IFocusManagerComplexComponent-Schnittstelle definiert die Schnittstelle für Komponenten, denen mehrere interne Fokusziele zugewiesen werden können, um den Fokus vom FocusManager zu erhalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFocusManagerComplexComponent-Schnittstelle definiert die Schnittstelle für Komponenten, denen mehrere interne Fokusziele zugewiesen werden können, um den Fokus vom FocusManager zu erhalten.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:assignFocus"><apiName>assignFocus</apiName><shortdesc>
	  Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>„bottom“, wenn die Tabulatortaste mit der Umschalttaste verwendet wird, andernfalls „top“.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Diese Methode wird vom FocusManager aufgerufen, wenn die Komponente den Fokus erhält. Die Komponente kann den Fokus wiederum auf eine interne Komponente übertragen. Während die setFocus()-Methode der Komponente aufgerufen wird, wenn die Komponente den Fokus durch die Maus erhält, wird diese Methode verwendet, wenn sich der Fokus über die Tastatur ändert.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:hasFocusableContent:get"><apiName>hasFocusableContent</apiName><shortdesc>
	  Ein Flag, das angibt, ob die Komponente derzeit über interne Ziele verfügt, die den Fokus erhalten können.
	 
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Ein Flag, das angibt, ob die Komponente derzeit über interne Ziele verfügt, die den Fokus erhalten können.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IBrowserManager"><apiName>IBrowserManager</apiName><shortdesc>
  Die Schnittstelle, die von der gemeinsam genutzten Instanz des BrowserManagers implementiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die Schnittstelle, die von der gemeinsam genutzten Instanz des BrowserManagers implementiert wird. Anwendungen warten auf der gemeinsam genutzten Instanz auf Ereignisse, rufen Methoden auf und greifen auf Eigenschaften zu. Der Zugriff auf die gemeinsam genutzte Instanz erfolgt über die <codeph>BrowserManager.getInstance()</codeph>-Methode.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link></related-links><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.URL_CHANGE_urlChange"><apiName>urlChange</apiName><shortdesc>
  Wird ausgelöst, wenn die URL durch die Anwendung geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die URL durch die Anwendung geändert wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE_browserURLChange"><apiName>browserURLChange</apiName><shortdesc>
  Wird ausgelöst, wenn die URL durch den Browser geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die URL durch den Browser geändert wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird bei Änderung der URL ausgelöst, indem entweder der Benutzer mit dem Browser interagiert und eine Anwendung in AIR aufruft oder durch programmgesteuertes Einstellen der Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird bei Änderung der URL ausgelöst, indem entweder der Benutzer mit dem Browser interagiert und eine Anwendung in AIR aufruft oder durch programmgesteuertes Einstellen der Eigenschaft.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:initForHistoryManager"><apiName>initForHistoryManager</apiName><shortdesc> 
      Initialisiert den BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Initialisiert den BrowserManager. Der HistoryManager ruft diese Methode auf, um den BrowserManager auf weitere Aufrufe vom HistoryManager vorzubereiten. Sie können den HistoryManager nicht verwenden und die <codeph>setFragment()</codeph>-Methode von der Anwendung aufrufen. Daher setzt die <codeph>init()</codeph>-Methode normalerweise den Wert der <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph>-Eigenschaft auf <codeph>false</codeph>, um den HistoryManager zu deaktivieren.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:init"><apiName>init</apiName><shortdesc> 
      Initialisiert den BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Das zu verwendende Fragment, wenn die anfängliche URL kein Fragment enthält.
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der zu verwendende Titel, wenn die anfängliche URL kein Fragment enthält.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Initialisiert den BrowserManager. Der BrowserManager ruft die anfängliche URL ab. Ist ein Fragment vorhanden, wird ein <codeph>BROWSER_URL_CHANGE</codeph>-Ereignis ausgelöst. Diese Methode setzt den Wert der <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph>-Eigenschaft auf <codeph>false</codeph>, da der HistoryManager die Verarbeitung der URL-Fragmente in Ihrer Anwendung beeinträchtigt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setFragment"><apiName>setFragment</apiName><shortdesc> 
      Ändert das Fragment der URL, das nach dem „#“ im Browser angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Das nach dem „#“ in der URL zu verwendende neue Fragment.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Ändert das Fragment der URL, das nach dem „#“ im Browser angezeigt wird. Es wird versucht, diese URL im Verlauf des Browsers zu verfolgen.
     
      <p>Wenn der Titel festgelegt ist, wird der alte Titel im Browser durch den neuen Titel ersetzt.</p>
     
      <p>Um die URL zu speichern, wird eine JavaScript-Methode mit dem Namen <codeph>setBrowserURL()</codeph> aufgerufen. Der HTML-Wrapper der Anwendung muss diese Methode aufweisen. Sie muss einen Mechanismus implementieren, der diesen Wert annimmt und beim Verlaufsschema des Browsers und der Adresszeile registriert.</p>
     
      <p>Wenn festgelegt, wird das <codeph>APPLICATION_URL_CHANGE</codeph>-Ereignis ausgelöst. Wird das Ereignis abgebrochen, dann wird die <codeph>setBrowserURL()</codeph>-Methode nicht aufgerufen.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setTitle"><apiName>setTitle</apiName><shortdesc> 
      Ändert den Text in der Titelleiste des Browsers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Der neue Titel, der in der Titelleiste des Browsers verwendet werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Ändert den Text in der Titelleiste des Browsers. Diese Methode wirkt sich nicht auf den Verlauf des Browsers aus.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:base:get"><apiName>base</apiName><shortdesc>
      Der Teil der aktuellen URL, der sich vor dem „#“ in der Adresszeile des Browsers befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Teil der aktuellen URL, der sich vor dem „#“ in der Adresszeile des Browsers befindet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:fragment:get"><apiName>fragment</apiName><shortdesc>
      Der Teil der aktuellen URL, der sich nach dem „#“ in der Adresszeile des Browsers befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Teil der aktuellen URL, der sich nach dem „#“ in der Adresszeile des Browsers befindet. Verwenden Sie die <codeph>setURLFragment()</codeph>-Methode, um diesen Wert zu ändern.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:title:get"><apiName>title</apiName><shortdesc>
      Der Titel der Anwendung, der im Browserverlauf angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Titel der Anwendung, der im Browserverlauf angezeigt werden soll.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:url:get"><apiName>url</apiName><shortdesc>
      Die aktuelle URL, die in der Adresszeile des Browsers angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Die aktuelle URL, die in der Adresszeile des Browsers angezeigt wird.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:PopUpManager"><apiName>PopUpManager</apiName><shortdesc>
  Die PopUpManager-Singleton-Klasse erstellt neue Fenster auf oberster Ebene und platziert oder entfernt diese Fenster von der Ebene über allen anderen sichtbaren Fenster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die PopUpManager-Singleton-Klasse erstellt neue Fenster auf oberster Ebene und platziert oder entfernt diese Fenster von der Ebene über allen anderen sichtbaren Fenster. Eine Beschreibung der Ebenenanordnung finden Sie im Abschnitt zum SystemManager. Sie wird für Popup-Dialogfelder, Menüs und Dropdownlisten in dem Combobox-Steuerelement und ähnlichen Komponenten verwendet.
 
  <p>Der PopUpManager bietet auch Modalität. Fenster unter einem Popup können beispielsweise keine Mausereignisse erhalten und wenn der Benutzer mit der Maus außerhalb des Fensters klickt, wird ein Ereignis ausgelöst. Der Entwickler hat dabei die Auswahl zwischen dem Schließen des Fensters oder einer Warnungsmeldung.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links><apiOperation id="mx.managers:PopUpManager:addPopUp"><apiName>addPopUp</apiName><shortdesc>
      Blendet ein Fenster auf oberster Ebene ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>window</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das einzublendende IFlexDisplayObject.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject, mit dem festgelegt wird, welche SystemManager-Ebenen verwendet werden und optional der Referenzpunkt zum Zentrieren des neuen Fensters auf oberster Ebene. Es muss sich nicht um das übergeordnete Element des Popup handeln, da der SystemManager allen Popups übergeordnet ist.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> ist das Fenster modal. Das bedeutet, dass der Benutzer erst mit anderen Popups interagieren kann, nachdem das Fenster geschlossen wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Die Liste der untergeordneten Elemente, der das Popup hinzugefügt werden soll. Entweder <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> oder <codeph>PopUpManagerChildList.PARENT</codeph> (Standard).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Die moduleFactory, in der dieses Popup nach eingebetteten Schriftarten und dem Stilmanager suchen muss.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet ein Fenster auf oberster Ebene ein. Es ist empfehlenswert <codeph>removePopUp()</codeph> aufzurufen, um Popups zu entfernen, die mit der <codeph>addPopUp()</codeph>-Methode erstellt wurden. Implementiert die Klasse den IFocusManagerContainer, dann hat das Fenster einen eigenen FocusManager. Wenn der Benutzer also die Tabulatortaste verwendet, um zwischen den Steuerelementen zu navigieren, wird nur auf die Steuerelemente im Fenster zugegriffen.
     
      <p><b>Beispiel</b></p> 
     
      <pre>var tw:TitleWindow = new TitleWindow();
        tw.title = "My Title";
        mx.managers.PopUpManager.addPopUp(tw, pnl, false);</pre>
     
      <p>Erstellt ein Popupfenster mit der <codeph>tw</codeph>-Instanz der TitleWindow-Klasse und <codeph>pnl</codeph> als Sprite, um die Position des Popup zu bestimmen. Ist als nicht modales Fenster definiert.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:bringToFront"><apiName>bringToFront</apiName><shortdesc>
      Stellt sicher, dass ein Popupfenster über anderen Objekten in der Liste der untergeordneten Elemente steht. Der SystemManager führt dies automatisch aus, wenn das Popup ein Fenster auf oberster Ebene ist und Rollover erfolgt. In allen anderen Fällen müssen Sie selbst dafür sorgen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>IFlexDisplayObject, das das Popup darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Stellt sicher, dass ein Popupfenster über anderen Objekten in der Liste der untergeordneten Elemente steht. Der SystemManager führt dies automatisch aus, wenn das Popup ein Fenster auf oberster Ebene ist und Rollover erfolgt. In allen anderen Fällen müssen Sie selbst dafür sorgen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:centerPopUp"><apiName>centerPopUp</apiName><shortdesc>
      Zentriert ein Popupfenster über dem Fenster, das zum Aufrufen der createPopUp()- oder addPopUp()-Methode verwendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>IFlexDisplayObject, das das Popup darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Zentriert ein Popupfenster über dem Fenster, das zum Aufrufen der <codeph>createPopUp()</codeph>- oder <codeph>addPopUp()</codeph>-Methode verwendet wurde.
     
      <p>Beachten Sie, dass sich die Position des Popupfensters möglicherweise nicht sofort nach diesem Aufruf ändert, da Flex auf die Messung und das Layout des Popupfensters wartet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:createPopUp"><apiName>createPopUp</apiName><shortdesc>
      Erstellt ein Fenster auf oberster Ebene und platziert darüber andere Fenster in der z-Reihenfolge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Verweis auf das neue Fenster auf oberster Ebene.
     
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject, mit dem festgelegt wird, welche SystemManager-Ebenen verwendet werden und optional der Referenzpunkt zum Zentrieren des neuen Fensters auf oberster Ebene. Es muss sich nicht um das übergeordnete Element des Popup handeln, da der SystemManager allen Popups übergeordnet ist.
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="Class"/><apiDesc>Objektklasse, die für das Popup erstellt werden soll. Die Klasse muss IFlexDisplayObject implementieren.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> ist das Fenster modal. Das bedeutet, dass der Benutzer erst mit anderen Popups interagieren kann, nachdem das Fenster geschlossen wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Die Liste der untergeordneten Elemente, der das Popup hinzugefügt werden soll. Entweder <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> oder <codeph>PopUpManagerChildList.PARENT</codeph> (Standard).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Die moduleFactory, in der dieses Popup nach eingebetteten Schriftarten und dem Stilmanager suchen muss.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt ein Fenster auf oberster Ebene und platziert darüber andere Fenster in der z-Reihenfolge. Es ist empfehlenswert <codeph>removePopUp()</codeph> aufzurufen, um Popups zu entfernen, die mit der <codeph>createPopUp</codeph>-Methode erstellt wurden. Implementiert die Klasse den IFocusManagerContainer, dann hat das Fenster einen eigenen FocusManager. Wenn der Benutzer also die Tabulatortaste verwendet, um zwischen den Steuerelementen zu navigieren, wird nur auf die Steuerelemente im Fenster zugegriffen.
     
      <p><b>Beispiel</b></p> 
     
      <pre>pop = mx.managers.PopUpManager.createPopUp(pnl, TitleWindow, false); </pre>
      
      <p>Erstellt ein Popupfenster auf der Basis der TitleWindow-Klasse und durch Verwendung von <codeph>pnl</codeph> als MovieClip, um die Position des Popup zu bestimmen. Wird als nicht modales Fenster definiert. Das heißt, dass andere Fenster Mausereignisse enthalten können.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:removePopUp"><apiName>removePopUp</apiName><shortdesc>
      Entfernt ein Popupfenster, das von der createPopUp()- oder addPopUp()-Methode erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das IFlexDisplayObject, von dem das Popupfenster dargestellt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt ein Popupfenster, das von der <codeph>createPopUp()</codeph>- oder <codeph>addPopUp()</codeph>-Methode erstellt wurde.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IFocusManager"><apiName>IFocusManager</apiName><shortdesc>
  Die IFocusManager-Schnittstelle definiert die Schnittstelle, die von Komponenten implementiert werden muss, um den Fokus bei Maus- oder Tastaturaktivität (Tabulatortaste) auf eine andere Komponente zu verschieben und um eine Standardschaltfläche zu unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFocusManager-Schnittstelle definiert die Schnittstelle, die von Komponenten implementiert werden muss, um den Fokus bei Maus- oder Tastaturaktivität (Tabulatortaste) auf eine andere Komponente zu verschieben und um eine Standardschaltfläche zu unterstützen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#FocusManager"><linktext>mx.managers.FocusManager</linktext></link></related-links><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:activate"><apiName>activate</apiName><shortdesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind. Wird in einem „IFocusManagerContainer“ bei deaktiviertem FocusManager mit der Maus geklickt, ruft der SystemManager die <codeph>activate()</codeph>-Methode für den jeweiligen FocusManager auf. Für den aktivierten FocusManager wird seine <codeph>deactivate()</codeph>-Methode aufgerufen, bevor ein anderer FocusManager aktiviert wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der SystemManager aktiviert und deaktiviert einen FocusManager, wenn mehrere „IFocusManagerContainer“ gleichzeitig sichtbar sind. Wird in einem „IFocusManagerContainer“ bei deaktiviertem FocusManager mit der Maus geklickt, ruft der SystemManager die <codeph>activate()</codeph>-Methode für den jeweiligen FocusManager auf. Für den aktivierten FocusManager wird seine <codeph>deactivate()</codeph>-Methode aufgerufen, bevor ein anderer FocusManager aktiviert wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      Gibt die IFocusManagerComponent-Komponente zurück, die das entsprechende Objekt enthält (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFocusManagerComponent, die <codeph>o</codeph> oder <codeph>null</codeph> enthält.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Ein Objekt, das über den Fokus auf Player-Ebene verfügen kann.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die IFocusManagerComponent-Komponente zurück, die ggf. das gegebene Objekt enthält. Da der Player den Fokus auf die Unterkomponente einer Flex-Komponente legen kann, wird durch diese Methode ermittelt, welche IFocusManagerComponent vom Blickwinkel der Komponente aus über den Fokus verfügt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      Ruft die IFocusManagerComponent-Komponente ab, die gerade den Fokus besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das IFocusManagerComponent-Objekt, das den Fokus besitzt.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Ruft die IFocusManagerComponent-Komponente auf, die gerade den Fokus besitzt. Verwenden Sie diese Methode anstelle des Stage-Objekts, da hier angegeben wird, auf welcher Komponente der Fokus liegt. Das Stage-Objekt gibt unter Umständen eine Unterkomponente in der Komponente zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      Gibt die IFocusManagerComponent zurück, die den Fokus erhalten würde, falls der Benutzer die Tabulatortaste drücken würde, um zu einer anderen Komponente zu navigieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Komponente, die den Fokus als Nächstes erhält.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>true</codeph> angegeben ist, wird das Objekt zurückgegeben, das beim Drücken von Umschalt+Tabulatortaste den Fokus erhält.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die IFocusManagerComponent zurück, die den Fokus erhalten würde, falls der Benutzer die Tabulatortaste drücken würde, um zu einer anderen Komponente zu navigieren. Es wird die Komponente zurückgegeben, der gegenwärtig der Fokus zugewiesen ist, wenn die Anwendung keine anderen gültigen Komponenten enthält.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      Setzt „showFocusIndicator“ auf „false“ und entfernt den sichtbaren Fokusindikator von dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt <codeph>showFocusIndicator</codeph> auf <codeph>false</codeph> und entfernt den sichtbaren Fokusindikator von dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      Legt den Fokus auf eine IFocusManagerComponent-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Eine Komponente, die den Fokus erhalten kann.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt den Fokus auf eine IFocusManagerComponent-Komponente. Die Sichtbarkeit, der Aktivierungsstatus und andere Bedingungen der Komponente werden hiermit nicht überprüft.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      Setzt „showFocusIndicator“ auf „true“ und zeichnet einen sichtbaren Fokusindikator auf dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt <codeph>showFocusIndicator</codeph> auf <codeph>true</codeph> und zeichnet einen sichtbaren Fokusindikator auf dem Objekt, das gegenwärtig den Fokus besitzt (sofern vorhanden).
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob der FocusManager prüfen soll, ob die Eingabetaste gedrückt wurde, um die Standardschaltfläche zu aktivieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der FocusManager prüfen soll, ob die Eingabetaste gedrückt wurde, um die Standardschaltfläche zu aktivieren. TextArea und andere Komponenten, von denen die <codeph>Eingabetaste</codeph> erkannt werden soll, setzen diese Eigenschaft auf <codeph>false</codeph>, damit die Eingabetaste kein <codeph>click</codeph>-Ereignis auf die Standardschaltfläche auslöst, falls diese vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Ein Verweis auf das ursprüngliche Button-Standardsteuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf das ursprüngliche Button-Standardsteuerelement. Wird die Eingabetaste gedrückt, während der Fokus auf einem Steuerelement liegt, dann wird das Button-Steuerelement aktiviert, indem ein <codeph>click</codeph>-Ereignis auf dem Button-Steuerelement ausgelöst wird. Dies entspricht einem Mausklick auf das Steuerelement. Das tatsächliche Button-Standardsteuerelement ändert sich, wenn der Fokus an ein anderes Button-Steuerelement übergeben wird, wechselt jedoch zurück zum ursprünglichen Element, wenn der Fokus nicht auf einer Schaltfläche liegt.
     
      <p>Diese Eigenschaft wird von Flex-Containern verwaltet. Legen Sie sie nicht direkt fest, um die Standardschaltfläche anzugeben.</p>
     
      <p>Der <codeph>defaultButton</codeph> muss der <codeph>mx.controls.Button</codeph>-Klasse angehören, auch wenn diese Eigenschaft nicht den Typ <codeph>IUIComponent</codeph> aufweist.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Ein einzelnes Sprite, das zusammen mit dem Fokus von einem Container zu einem anderen verschoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Ein einzelnes Sprite, das zusammen mit dem Fokus von einem Container zu einem anderen verschoben wird. Das Sprite wird als übergeordnetes Objekt des visuellen Indikators verwendet, der anzeigt, dass eine Komponente den Fokus besitzt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      Die nächste eindeutige Position, die in der Tabulatorschleife verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die nächste eindeutige Position, die in der Tabulatorschleife verwendet werden soll.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      Ein Flag, das angibt, ob ein Indikator angezeigt werden soll, um darauf aufmerksam zu machen, dass eine Komponente den Fokus besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob ein Indikator angezeigt werden soll, um darauf aufmerksam zu machen, dass eine Komponente den Fokus besitzt. Bei <codeph>true</codeph> zeigt eine Komponente, die den Fokus erhält, einen sichtbaren Indikator an.
     
      <p>Standardmäßig ist für diese Eigenschaft <codeph>false</codeph> festgelegt, bis der Benutzer die Tabulatortaste drückt. Dann wechselt die Eigenschaft auf <codeph>true</codeph>.</p>
     
      <p>Im Allgemeinen sollte die <codeph>showFocus()</codeph>- und <codeph>hideFocus()</codeph>-Methode zum Ändern dieser Eigenschaft verwendet werden, da diese Methoden auch den visuellen Indikator aktualisieren, der angibt, dass einer Komponente der Fokus zugewiesen ist.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerGroup"><apiName>IFocusManagerGroup</apiName><shortdesc>
  Die IFocusManagerGroup-Schnittstelle definiert die Schnittstelle, die alle Komponenten implementieren müssen, wenn sie Gruppen angehören, von denen nur jeweils ein Mitglied ausgewählt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFocusManagerGroup-Schnittstelle definiert die Schnittstelle, die alle Komponenten implementieren müssen, wenn sie Gruppen angehören, von denen nur jeweils ein Mitglied ausgewählt werden kann. Ein RadioButton implementiert beispielsweise die IFocusManagerGroup, da nur einer von mehreren RadioButtons in derselben Gruppe ausgewählt werden kann. FocusManager stellt sicher, dass nur der RadioButton den Fokus erhält, der durch Ändern des Fokus mit der Tabulatortaste ausgewählt wurde.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:groupName:get"><apiName>groupName</apiName><shortdesc>
	 Der Name der Gruppe von Steuerelementen, zu der das Steuerelement gehört.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	 Der Name der Gruppe von Steuerelementen, zu der das Steuerelement gehört.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:selected:get"><apiName>selected</apiName><shortdesc>
	 Ein Flag, das angibt, ob diese Steuerelemente ausgewählt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 Ein Flag, das angibt, ob diese Steuerelemente ausgewählt wurde.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:SystemManager"><apiName>SystemManager</apiName><shortdesc>
  Die SystemManager-Klasse verwaltet ein Anwendungsfenster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>mx.managers:ISystemManager</apiBaseInterface><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SystemManager-Klasse verwaltet ein Anwendungsfenster. Jede Anwendung, die auf einem Desktop oder im Browser ausgeführt wird, verfügt über einen Bereich, in dem die Grafiken der Anwendung angezeigt werden. Es kann sich dabei um ein Fenster im Betriebssystem oder einen Bereich im Browser handeln. Dieser Bereich ist ein Anwendungsfenster und unterscheidet sich von einer <codeph>mx.core.Application</codeph>-Instanz, die das Hauptfenster oder Fenster auf oberster Ebene innerhalb einer Anwendung darstellt.
   <p>Jede Anwendung verfügt über einen SystemManager. Der SystemManager sendet ein Ereignis, wenn sich die Größe des Anwendungsfensters ändert. Sie können diese nicht innerhalb der Anwendung ändern, sondern nur über das Fenster des Betriebssystems oder des Browsers. Die übergeordneten Elemente deaktivieren Elemente innerhalb der Anwendungen wie z. B. die mx.core.Application-Instanz und alle Popups, QuickInfos, Cursor usw. Alle untergeordneten Objekte vom SystemManager werden als Fenster auf oberster Ebene betrachtet, auch QuickInfos und Cursor.</p>
   <p>Der SystemManager wechselt außerdem den Fokus zwischen Fenstern auf oberster Ebene, wenn mehrere IFocusManagerContainer angezeigt werden und Benutzer mit Komponenten innerhalb der IFocusManagerContainers interagieren.  </p>
   <p>Alle nicht explizit anderweitig verarbeiteten Tastatur- und Mausaktivitäten werden vom SystemManager erkannt. Dadurch ist er ideal zur Überwachung von Aktivitäten geeignet, falls dies erforderlich sein sollte.</p>
   <p>Wird eine Anwendung in eine andere geladen, wird ein SystemManager zwar erstellt, verwaltet jedoch kein Anwendungsfenster, abhängig von den Sicherheits- und Domänenregeln. Er ist stattdessen der <codeph>content</codeph> des zum Laden verwendeten <codeph>Loader</codeph> und dient als übergeordnetes Element der Unteranwendung.</p>
   <p>Der SystemManager verwaltet mehrere Listen mit untergeordneten Elementen, je eine für QuickInfos, Cursor und Popup-Fenster. So wird sichergestellt, dass Popup-Fenster über Haupt-Anwendungsfenstern, QuickInfos über Popup-Fenstern und Cursor über QuickInfos angezeigt werden. Wenn Sie die <codeph>numChildren</codeph>-Eigenschaft betrachten oder die <codeph>getChildAt()</codeph>-Methode des SystemManagers aufrufen, greifen Sie auf das Hauptanwendungsfenster und alle anderen Fenster zu, die nicht als Popups angezeigt werden. Um die Listen aller Fenster einschließlich Popups, QuickInfos und Cursor abzurufen, verwenden Sie die <codeph>rawChildren</codeph>-Eigenschaft.</p>
   <p>Der SystemManager ist die erste Anzeigeklasse, die in einer Anwendung erstellt wird. Er erstellt einen <codeph>mx.preloaders.Preloader</codeph> mit einer <codeph>mx.preloaders.SparkDownloadProgressBar</codeph> während die Anwendung geladen wird und danach eine <codeph>mx.core.Application</codeph>-Instanz.</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.managers:SystemManager_flash.events.Event.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Wird ausgelöst, wenn die Größe der Bühne geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.RESIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Größe der Bühne geändert wird.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.IDLE_idle"><apiName>idle</apiName><shortdesc>
  Wird alle 100 Millisekunden ausgelöst, wenn 1 Sekunde lang keine Tastatur- oder Mausaktivität festgestellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.IDLE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird alle 100 Millisekunden ausgelöst, wenn 1 Sekunde lang keine Tastatur- oder Mausaktivität festgestellt wurde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Wird nach Abschluss der Initialisierung ausgelöst.
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach Abschluss der Initialisierung ausgelöst.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.managers:SystemManager:SystemManager"><apiName>SystemManager</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
           <p>Dies ist der Startpunkt für alle Flex-Anwendungen. Diese Klasse wird als Stammklasse einer Flex SWF-Datei festgelegt. Flash Player instanziiert eine Instanz dieser Klasse, wodurch dieser Konstruktor aufgerufen wird.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:SystemManager:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      
      Fügt der preloadedRSLs-Liste eine RSL hinzu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>Die loaderInfo der geladenen RSL.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>Die Konfigurationsinformationen der RSL. Ein Vektor der RSLData. Das erste Element im Array ist die primäre RSL. Die übrigen Elemente sind Failover-RSLs.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Fügt der preloadedRSLs-Liste eine RSL hinzu. Diese Methode wird von untergeordneten Module-Factorys aufgerufen, wenn sie eine RSL in die Anwendungsdomäne der jeweiligen Module-Factory laden.
           <p>Sie können diese Methode nicht direkt aufrufen. Diese Methode wird von untergeordneten Module-Factorys aufgerufen, wenn sie eine RSL in die Anwendungsdomäne der jeweiligen Module-Factory laden.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Ruft Security.allowDomain() für die SWF auf, die mit diesem SystemManager verknüpft ist, und alle SWFs, die mit den von diesem SystemManager geladenen RSLs verknüpft sind.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Ruft Security.allowDomain() für die SWF auf, die mit diesem SystemManager verknüpft ist, und alle SWFs, die mit den von diesem SystemManager geladenen RSLs verknüpft sind.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Ruft Security.allowInsecureDomain() für die SWF auf, die mit diesem SystemManager verknüpft ist, und alle SWFs, die mit den von diesem SystemManager voreingestellten RSLs verknüpft sind.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Ruft Security.allowInsecureDomain() für die SWF auf, die mit diesem SystemManager verknüpft ist, und alle SWFs, die mit den von diesem SystemManager voreingestellten RSLs verknüpft sind.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:create"><apiName>create</apiName><shortdesc>
      Eine Factory-Methode, die eine Instanz einer Definition anfordert, die dem Modul bekannt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Instanz des Moduls oder <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>params</apiItemName><apiType value="restParam"/><apiDesc>Eine optionale Liste von Argumenten. Sie können eine beliebige Anzahl von Argumenten übergeben, die in dem Array <codeph>parameters</codeph> gespeichert wird. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine Factory-Methode, die eine Instanz einer Definition anfordert, die dem Modul bekannt ist. Sie können eine optionale Gruppe von Parametern bereitstellen, damit Building Factories abhängig von der Eingabe andere Elemente erstellen können. Bei Übergabe von null wird die Standarddefinition erstellt, falls möglich. Diese Methode wird in der automatisch generierten Unterklasse überschrieben. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      
      Aktiviert oder deaktiviert den Mausschutz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>Bei <codeph>true</codeph> wird der Mausschutz aktiviert, bei <codeph>false</codeph> wird er deaktiviert.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Aktiviert oder deaktiviert den Mausschutz. Der Mausschutz verhindert Mauseingaben in nicht vertrauenswürdige Anwendungen. Wenn Sie die Maus über eine nicht vertrauenswürdige Anwendung ziehen, werden normalerweise keine Mausbewegungsereignisse ausgelöst. Aus Sicherheitsgründen versendet Flash Player keine Ereignisse zwischen vertrauenswürdigen und nicht vertrauenswürdigen Anwendungen. Wenn Sie den Mausschutz für eine nicht vertrauenswürdige Anwendung (vom übergeordneten Element aus) aktivieren, wird die Mausbewegungsmeldung angezeigt und der Ziehvorgang erwartungsgemäß ausgeführt. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
      
	  Konvertiert einen angegebenen String in eine Klasse oder Funktion auf Paketebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die von <codeph>name</codeph> dargestellte Klasse oder null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Der Name der Klasse, z. B. „mx.video.VideoManager“.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Konvertiert einen angegebenen String in eine Klasse oder Funktion auf Paketebene. Ruft die entsprechende <codeph>ApplicationDomain.getDefinition()</codeph>-Methode auf, abhängig davon ob die Anwendung in eine andere Anwendung geladen wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Höhe verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Zahl, die die <codeph>explicitHeight</codeph>-Eigenschaft festlegt, wenn angegeben, und andernfalls die <codeph>measuredHeight</codeph>-Eigenschaft.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Höhe verwendet werden soll.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Breite verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Zahl, die die <codeph>explicitWidth</codeph>-Eigenschaft festlegt, wenn angegeben, und andernfalls die <codeph>measuredWidth</codeph>-Eigenschaft.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Breite verwendet werden soll.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSWFRoot"><apiName>getSWFRoot</apiName><shortdesc>
      Gibt das Stamm-DisplayObject der SWF zurück, das den Code für das angegebene Objekt enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Das Stamm-DisplayObject.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="Object"/><apiDesc>Ein beliebiges Objekt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt das Stamm-DisplayObject der SWF zurück, das den Code für das angegebene Objekt enthält.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Ruft in der übergeordneten Kette den System Manager auf oberster Ebene dieser SecurityDomain ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Stamm-System Manager in dieser SecurityDomain.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Ruft in der übergeordneten Kette den System Manager auf oberster Ebene dieser SecurityDomain ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Ruft in der übergeordneten Kette den System Manager auf oberster Ebene ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Stamm-System Manager.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Ruft in der übergeordneten Kette den System Manager auf oberster Ebene ab. Gibt <codeph>null</codeph> zurück, wenn Sie sich nicht in der Anzeigeliste befinden oder keinen Zugriff auf den System Manager auf oberster Ebene haben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
     
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das den sichtbaren Teil des Objekts enthält. Die Koordinaten des Rechtecks sind global.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Optional. Die Anfangsbegrenzungen des sichtbaren Rechtecks. Die Koordinaten der Begrenzungen sind global. Hat <codeph>bounds</codeph> den Wert null, werden die Anfangsbegrenzungen von der Eigenschaft <codeph>screen</codeph> des System Managers definiert. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
     
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Versucht, den übergeordneten SWFLoader zu benachrichtigen, dass sich die Größe der Anwendung geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Versucht, den übergeordneten SWFLoader zu benachrichtigen, dass sich die Größe der Anwendung geändert hat.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      
      Gibt „true“ zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der Font.registerFont()-Methode registriert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der <codeph>Font.registerFont()</codeph>-Methode registriert wurde.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>textFormat</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Die TextFormat-Klasse, die die Zeichenformatierungsinformationen darstellt.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt <codeph>true</codeph> zurück, wenn eine erforderliche Schriftart in diese Anwendung eingebettet ist oder global mit der <codeph>Font.registerFont()</codeph>-Methode registriert wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
     
      Überprüft, ob dieser System Manager der Stamm aller System Manager auf oberster Ebene ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wird <codeph>true</codeph> zurückgegeben, ist der SystemManager der Stamm aller SystemManager auf der Anzeigeliste, andernfalls wird <codeph>false</codeph> zurückgegeben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Überprüft, ob dieser System Manager der Stamm aller System Manager auf oberster Ebene ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelWindow"><apiName>isTopLevelWindow</apiName><shortdesc>
          Bestimmt, ob das angegebene DisplayObject das Fenster auf oberster Ebene ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn das angegebene DisplayObject das Fenster auf oberster Ebene ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu überprüfende DisplayObject.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
          Bestimmt, ob das angegebene DisplayObject das Fenster auf oberster Ebene ist.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
      
	  Gibt „true“ zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist, und „false“, wenn diese Anwendung in eine andere Anwendung geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
	  Gibt <codeph>true</codeph> zurück, wenn dieser ISystemManager für ein Anwendungsfenster verantwortlich ist, und <codeph>false</codeph>, wenn diese Anwendung in eine andere Anwendung geladen wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:move"><apiName>move</apiName><shortdesc>
      Aufgrund der direkten Zuordnung zum Anwendungsfenster oder Loader hat das Aufrufen der move()-Methode keine Wirkung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Koordinate.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Koordinate.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aufgrund der direkten Zuordnung zum Anwendungsfenster oder Loader hat das Aufrufen der <codeph>move()</codeph>-Methode keine Wirkung.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      Bei direkter Zuordnung zum Anwendungsfenster oder wenn es sich um das Fenster auf oberster Ebene handelt, hat das Aufrufen der setActualSize()-Methode keine Wirkung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite.
           </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bei direkter Zuordnung zum Anwendungsfenster oder wenn es sich um das Fenster auf oberster Ebene handelt, hat das Aufrufen der <codeph>setActualSize()</codeph>-Methode keine Wirkung. Versucht andernfalls, die eigene Größe zu ändern und beschneidet untergeordnete Elemente, falls erforderlich.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:SystemManager:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      
      Steuert, ob die für Aufrufe an AllowDomain() zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Steuert, ob die für Aufrufe an <codeph>allowDomain()</codeph> zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden. Zusätzliche RSLs können durch untergeordnete Anwendungen oder Module in diese Modul-Factory geladen werden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      
      Steuert, ob die für Aufrufe an allowInsecureDomain() zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Steuert, ob die für Aufrufe an <codeph>allowInsecureDomain()</codeph> zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden. Zusätzliche RSLs können durch untergeordnete Anwendungen oder Module zu dieser Modul-Factory hinzugefügt werden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:application:get"><apiName>application</apiName><shortdesc>
      Die diesem SystemManager untergeordnete Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Die diesem SystemManager untergeordnete Anwendung. SystemManager erstellen eine Instanz einer Anwendung, auch wenn sie in eine andere Anwendung geladen wurden. Daher entspricht dies möglicherweise nicht mx.core.Application.application, wenn die SWF in eine andere Anwendung geladen wurde.
      <p>Beachten Sie, dass diese Anwendung, um die Ladezeit zu verkürzen, nicht den Typ mx.core.Application aufweist. Dies kann jedoch erzwungen werden.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.managers:SystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten benutzerdefinierten Cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten benutzerdefinierten Cursor.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, Fenster auf oberster Ebene, QuickInfos und benutzerdefinierte Cursor. Sie können über die Eigenschaft <codeph>cursorChildren</codeph> auf benutzerdefinierte Cursor zugreifen.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>cursorChildren.numChildren</codeph> die Anzahl der benutzerdefinierten Cursor (entweder 0 oder 1) zurück. Ist ein benutzerdefinierter Cursor vorhanden, können Sie darauf mit <codeph>cursorChildren.getChildAt(0)</codeph> zugreifen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:document:get"><apiName>document</apiName><shortdesc>
      
	  Ein Verweis auf das Document-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
	  Ein Verweis auf das Document-Objekt. Ein Document-Objekt ist ein Objekt auf der obersten Hierarchieebene einer Flex-Anwendung, MXML-Komponente oder AS-Komponente.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:embeddedFontList:get"><apiName>embeddedFontList</apiName><shortdesc>
      Eine Tabelle mit den eingebetteten Schriftarten in dieser Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Eine Tabelle mit den eingebetteten Schriftarten in dieser Anwendung. Das Objekt ist eine nach dem Schriftartnamen indizierte Tabelle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Die explizite Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die explizite Breite dieses Objekts. Für den SystemManager sollte dies immer NaN sein, es sei denn die Anwendung wurde in eine andere Anwendung geladen. Wenn die Anwendung nicht in eine andere Anwendung geladen wurde, bewirkt das Einstellen dieses Werts nichts.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Die explizite Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die explizite Breite dieses Objekts. Für den SystemManager sollte dies immer NaN sein, es sei denn die Anwendung wurde in eine andere Anwendung geladen. Wenn die Anwendung nicht in eine andere Anwendung geladen wurde, bewirkt das Einstellen dieses Werts nichts.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc conref="mx.core.UIComponent#focusPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="mx.core.UIComponent#focusPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:height:get"><apiName>height</apiName><shortdesc>
      Die Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe dieses Objekts. Für den SystemManager sollte dies immer die Breite der Bühne sein, es sei denn die Anwendung wurde in eine andere Anwendung geladen. Wenn die Anwendung nicht in eine andere Anwendung geladen wurde, bewirkt das Einstellen dieses Werts nichts.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
      Wert „true“, wenn SystemManager ein Proxy und nicht eine Stammklasse ist.
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Wert „true“, wenn SystemManager ein Proxy und nicht eine Stammklasse ist.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      Die gemessene Höhe (measuredHeight) entspricht der expliziten oder gemessenen Höhe des mx.core.Application-Hauptfensters oder der Anfangshöhe der SWF, wenn das Hauptfenster noch nicht erstellt wurde oder nicht vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die gemessene Höhe (measuredHeight) entspricht der expliziten oder gemessenen Höhe des mx.core.Application-Hauptfensters oder der Anfangshöhe der SWF, wenn das Hauptfenster noch nicht erstellt wurde oder nicht vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      Die gemessene Breite (measuredWidth) entspricht der expliziten oder gemessenen Breite des mx.core.Application-Hauptfensters oder der Anfangshöhe der SWF, wenn das Hauptfenster noch nicht erstellt wurde oder nicht vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die gemessene Breite (measuredWidth) entspricht der expliziten oder gemessenen Breite des mx.core.Application-Hauptfensters oder der Anfangshöhe der SWF, wenn das Hauptfenster noch nicht erstellt wurde oder nicht vorhanden ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Die Anzahl der Fenster, die keine Floating-Fenster sind. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der Fenster, die keine Floating-Fenster sind. Darunter sind das Hauptanwendungsfenster und alle anderen Fenster zu verstehen, die dem SystemManager hinzugefügt wurden und die keine Popups, QuickInfos oder Cursor sind.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Die Anzahl der modalen Fenster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der modalen Fenster. In modalen Fenstern können Sie nicht in andere Fenster klicken, wodurch normalerweise der FocusManager in diesem Fenster aktiviert wird. Der PopUpManager ändert diese Anzahl beim Erstellen und Löschen modaler Fenster.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parent:get"><apiName>parent</apiName><shortdesc>
     Überschreibt die übergeordnete Eigenschaft, wenn sich das übergeordnete Element in einer anderen Sandbox befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
     Überschreibt die übergeordnete Eigenschaft, wenn sich das übergeordnete Element in einer anderen Sandbox befindet. Wird zurückgegeben, wenn sich das übergeordnete Element in derselben Sandbox befindet. Ist das übergeordnete Element in einer anderen Sandbox, wird null zurückgegeben.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
      
	  Diesem ISystemManager ist eine Liste oberster (Popup-) Fenster untergeordnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Diesem ISystemManager ist eine Liste oberster (Popup-) Fenster untergeordnet.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, QuickInfos und benutzerdefinierte Cursor. Sie können über die Eigenschaft <codeph>popUpChildren</codeph> auf die obersten Fenster zugreifen.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>popUpChildren.numChildren</codeph> die Anzahl der obersten Fenster zurück und mit <codeph>popUpChildren.getChildAt(i)</codeph> können Sie auf diese zugreifen.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      
      Die RSLs, die von diesem SystemManager oder dieser FlexModuleFactory vor dem Start der Anwendung geladen werden. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      
      Die RSLs, die von diesem SystemManager oder dieser FlexModuleFactory vor dem Start der Anwendung geladen werden. Dieses Wörterbuch kann auch RSLs enthalten, die von anderen Modulen oder Unteranwendungen in die Anwendungsdomäne dieser Module-Factory geladen wurden. Wenn ein neuer Wörterbucheintrag von einer untergeordneten Module-Factory hinzugefügt wird, löst die zum Wörterbuch gehörende Module-Factory ein <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph>-Ereignis aus. Informationen zu preloadedRSLs werden in einem Wörterbuch gespeichert. Der Schlüssel ist die LoaderInfo der RSL. Der Wert ist der Vektor von RSLData. Das erste Element ist die primäre RSL und die übrigen Elemente sind Failover-RSLs.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundAlpha:get"><apiName>preloaderBackgroundAlpha</apiName><shortdesc>
      Der Hintergrund-Alpha-Wert, der von dem untergeordneten Element des Preloader verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der Hintergrund-Alpha-Wert, der von dem untergeordneten Element des Preloader verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundColor:get"><apiName>preloaderBackgroundColor</apiName><shortdesc>
      Die Hintergrundfarbe, die von dem untergeordneten Element des Preloader verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Die Hintergrundfarbe, die von dem untergeordneten Element des Preloader verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundImage:get"><apiName>preloaderBackgroundImage</apiName><shortdesc>
      Die Hintergrundfarbe, die von dem untergeordneten Element des Preloader verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die Hintergrundfarbe, die von dem untergeordneten Element des Preloader verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundSize:get"><apiName>preloaderBackgroundSize</apiName><shortdesc>
      Die Hintergrundgröße, die von dem untergeordneten Element des Preloader verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Die Hintergrundgröße, die von dem untergeordneten Element des Preloader verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten Elemente.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, QuickInfos und benutzerdefinierte Cursor. </p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:screen:get"><apiName>screen</apiName><shortdesc>
      
	  Die Größe und Position des Anwendungsfensters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
	  Die Größe und Position des Anwendungsfensters. Das Rectangle-Objekt enthält die Eigenschaften <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> und <codeph>height</codeph>. Das Rectangle befindet sich in Sandboxstammkoordinaten.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten QuickInfos.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Eine Liste der diesem ISystemManager untergeordneten QuickInfos.
	 
	  <p>Ein ISystemManager verfügt über verschiedene Arten von untergeordneten Elementen, wie die Anwendung, Popups, Fenster auf oberster Ebene, QuickInfos und benutzerdefinierte Cursor.</p>
	 
	  <p>Das IChildList-Objekt enthält Methoden wie <codeph>getChildAt()</codeph> und Eigenschaften wie <codeph>numChildren</codeph>. Beispielsweise gibt <codeph>toolTipChildren.numChildren</codeph> die Anzahl der QuickInfos (entweder 0 oder 1) zurück. Ist eine QuickInfo vorhanden, können Sie darauf mit <codeph>toolTipChildren.getChildAt(0)</codeph> zugreifen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
      Gibt den für das Anwendungsfenster zuständigen SystemManager zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Gibt den für das Anwendungsfenster zuständigen SystemManager zurück. Dies ist derselbe SystemManager, es sei denn die Anwendung wurde in eine andere Anwendung geladen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:width:get"><apiName>width</apiName><shortdesc>
      Die Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite dieses Objekts. Für den SystemManager sollte dies immer die Breite der Bühne sein, es sei denn die Anwendung wurde in eine andere Anwendung geladen. Wenn die Anwendung nicht in eine andere Anwendung geladen wurde, bewirkt das Einstellen dieses Werts nichts.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:LayoutManager"><apiName>LayoutManager</apiName><shortdesc>
  Der LayoutManager ist die Engine, auf der die Messungs- und Layoutstrategie von Flex basiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der LayoutManager ist die Engine, auf der die Messungs- und Layoutstrategie von Flex basiert. Das Layout wird in drei Phasen durchgeführt: Übernahme, Messung und Layout.
 
  <p>Jede Phase unterscheidet sich von den anderen und alle UIComponents einer Phase werden verarbeitet, bevor die nächste Phase beginnt. Während der UIComponent-Verarbeitung in einer Phase kann es zu Anforderungen zur erneuten UIComponent-Verarbeitung in dieser Phase kommen. Diese Anforderungen werden in eine Warteschlange gestellt und erst beim nächsten Ausführen der Phase berücksichtigt.</p>
 
  <p>Die <b>Übernahme</b>-Phase beginnt mit einem Aufruf der <codeph>validateProperties()</codeph>-Methode. Diese Methode geht eine Liste von Objekten in umgekehrter Verschachtelungsreihenfolge durch und ruft die <xref href="../core/UIComponent.html#validateProperties()"> <codeph>validateProperties()</codeph></xref>-Methode jedes Objekts auf.</p>
 
  <p>Die Objekte in der Liste werden in umgekehrter Verschachtelungsreihenfolge verarbeitet, wobei das <b>oberste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von oben nach unten oder von außen nach innen.</p>
 
  <p>In dieser Phase können Komponenten, deren Inhalte von Eigenschaftseinstellungen abhängen, sich selbst konfigurieren, bevor die Messungs- und die Layoutphase beginnen. Aus Leistungsgründen führt die Methode zum Festlegen einer Komponenteneigenschaft nicht immer die gesamte Aktualisierung des neuen Eigenschaftswerts aus. Stattdessen wird die <codeph>invalidateProperties()</codeph>-Methode aufgerufen, und die Aufgabe bis zur Ausführung dieser Phase zurückgestellt. Dies verhindert unnötige Mehrarbeit, wenn die Eigenschaft mehrmals eingestellt ist.</p>
 
  <p>Die <b>Messungs</b>-Phase beginnt mit einem Aufruf der <codeph>validateSize()</codeph>-Methode, die eine Liste von Objekten in der Verschachtelungsreihenfolge durchgeht und die <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph></xref>-Methode jedes Objekts aufruft, um zu bestimmen, ob sich die Größe des Objekts geändert hat.</p>
 
  <p>Wurde zuvor die <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref>-Methode eines Objekts aufgerufen, wird anschließend die <codeph>validateSize()</codeph>-Methode aufgerufen. Wenn die Größe oder Position des Objekts durch einen <codeph>validateSize()</codeph>-Aufruf geändert wurde, wird die <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>-Methode des Objekts augerufen, um das Objekt der Verarbeitungswarteschlange für das nächste Ausführen der Layoutphase hinzuzufügen. Zusätzlich wird das übergeordnete Objekt für die Messungs- und Layoutphase markiert, indem <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> bzw. <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> aufgerufen wird.</p>
 
  <p>Die Objekte in der Liste werden in der Reihenfolge der Verschachtelung verarbeitet, wobei das <b>unterste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von unten nach oben oder innen nach außen.</p>
 
  <p>Die <b>layout</b>-Phase beginnt mit einem Aufruf der <codeph>validateDisplayList()</codeph>-Methode. Diese Methode geht eine Liste von Objekten in umgekehrter Verschachtelungsreihenfolge durch und ruft die <xref href="../core/UIComponent.html#validateDisplayList()"><codeph>validateDisplayList()</codeph></xref>-Methode jedes Objekts auf, um das Objekt zur Änderung von Größe und Position aller enthaltenen Komponenten (einschließlich untergeordneter Objekte) aufzufordern.</p>
 
  <p>Wurde zuvor die <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>-Methode eines Objekts aufgerufen, wird anschließend die <codeph>validateDisplayList()</codeph>-Methode des Objekts aufgerufen.</p>
 
  <p>Die Objekte in der Liste werden in umgekehrter Verschachtelungsreihenfolge verarbeitet, wobei das <b>oberste</b> Objekt in der Verschachtelungsstruktur zuerst aufgerufen wird. Dies entspricht einer Reihenfolge von oben nach unten oder von außen nach innen.</p>
 
  <p>Im Allgemeinen wird die <codeph>validateProperties()</codeph>-, <codeph>validateSize()</codeph>- oder <codeph>validateDisplayList()</codeph>-Methode nicht von Komponenten überschrieben. Die meisten UIComponents überschreiben die <codeph>commitProperties()</codeph>-, <codeph>measure()</codeph>- oder <codeph>updateDisplayList()</codeph>-Methode, die von der <codeph>validateProperties()</codeph>-, <codeph>validateSize()</codeph>- bzw. <codeph>validateDisplayList()</codeph>-Methode aufgerufen werden.</p>
 
  <p>Beim Starten der Anwendung wird eine einzige LayoutManager-Instanz erstellt und in der Eigenschaft <codeph>UIComponent.layoutManager</codeph> gespeichert. Es wird erwartet, dass alle Komponenten diese Instanz verwenden. Wenn Sie keinen Zugriff auf das UIComponent-Objekt haben, können Sie den LayoutManager auch mit der statischen <codeph>LayoutManager.getInstance()</codeph>-Methode aufrufen.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:LayoutManager:attachListeners"><apiName>attachListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.
          
          </apiDesc><apiOperationClassifier>mx.managers:LayoutManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt die einzige Instanz dieser Singleton-Klasse zurück und erstellt sie, falls noch nicht vorhanden.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Wird bei Änderung einer Komponente aufgerufen, die eine Änderung von Layout und/oder Grafiken erfordert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das geänderte Objekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird bei Änderung einer Komponente aufgerufen, die eine Änderung von Layout und/oder Grafiken erfordert. In diesem Fall muss der Layoutalgorithmus der Komponente ausgeführt werden, auch wenn sich die Größe der Komponente nicht geändert hat. Dies ist beispielsweise der Fall, wenn eine neue untergeordnete Komponente hinzugefügt, eine Stileigenschaft geändert oder die Größe der Komponente durch die übergeordnete Komponente geändert wurde.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Fügt ein Objekt der Liste von Komponenten hinzu, deren validateProperties()-Methode aufgerufen werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das Objekt, dessen Eigenschaft geändert wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt ein Objekt der Liste von Komponenten hinzu, deren <codeph>validateProperties()</codeph>-Methode aufgerufen werden muss. Eine Komponente sollte diese Methode bei der Änderung einer Eigenschaft aufrufen. Normalerweise speichert eine Methode zum Festlegen einer Eigenschaft einen neuen Wert in einer temporären Variable und ruft die <codeph>invalidateProperties()</codeph>-Methode auf, sodass später die <codeph>validateProperties()</codeph>- und die <codeph>commitProperties()</codeph>-Methode aufgerufen wird, wenn der neue Wert auf die Komponente und/oder deren untergeordnete Komponenten angewendet wird. Der Vorteil dieser Strategie ist, dass oft mehrere Eigenschaften gleichzeitig geändert werden und die Eigenschaften miteinander interagieren, bei der Anwendung den gleichen Code wiederholen oder in einer bestimmten Reihenfolge erneut angewendet werden müssen. Mit dieser Strategie können neue Eigenschaftswerte am effizientesten angewendet werden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Fügt ein Objekt der Liste von Komponenten hinzu, deren validateSize()-Methode aufgerufen werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Das Objekt, dessen Größe geändert wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt ein Objekt der Liste von Komponenten hinzu, deren <codeph>validateSize()</codeph>-Methode aufgerufen werden muss. Wird aufgerufen, wenn die Größe eines Objekts geändert wird.
     
      <p>Es gibt zwei Gründe für die Änderung der Größe eines Objekts:</p>
     
      <ol>
        <li>Der Inhalt des Objekts ändert sich. Beispielsweise ändert sich die Größe einer Schaltfläche, wenn sich ihre <codeph>label</codeph> ändert.</li>
        <li>Ein Skript ändert eine der folgenden Eigenschaften explizit: <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> oder <codeph>maxHeight</codeph>.</li>
      </ol>
     
      <p>Im ersten Fall müssen die Maße des Objekts neu berechnet werden Im zweiten Fall müssen die Maße des Objekts nicht neu berechnet werden, da die neue Größe des Objekts bekannt ist. Das übergeordnete Objekt muss jedoch neu gemessen und das Layout muss neu festgelegt werden.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
      Gibt „true“ zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt „false“ zurück, wenn alle Komponenten validiert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt <codeph>false</codeph> zurück, wenn alle Komponenten validiert wurden.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn Komponenten vorhanden sind, die validiert werden müssen. Gibt <codeph>false</codeph> zurück, wenn alle Komponenten validiert wurden.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
      Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Anhand der übergebenen Komponente wird geprüft, welche Komponenten validiert werden müssen. Für alle in dieser Komponente enthaltenen Komponenten wird die <codeph>validateProperties()</codeph>-, <codeph>commitProperties()</codeph>-, <codeph>validateSize()</codeph>-, <codeph>measure()</codeph>-, <codeph>validateDisplayList()</codeph>- und <codeph>updateDisplayList()</codeph>-Methode aufgerufen.
     
        </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> werden die <codeph>validateDisplayList()</codeph>- und die <codeph>updateDisplayList()</codeph>-Methode nicht aufgerufen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet. Stattdessen rufen die Komponenten eine der Invalidierungsmethoden des LayoutManagers auf und wenden die Eigenschaften später an. Die tatsächliche Eigenschaft, die Sie eingestellt haben, kann sofort abgerufen werden, wenn sie sich jedoch auf andere Eigenschaften in der Komponente, auf untergeordnete oder übergeordnete Komponenten auswirkt, werden diese nicht sofort aktualisiert.  
     
      <p>Um sicherzustellen, dass die Werte aktualisiert werden, rufen Sie die <codeph>validateClient()</codeph>-Methode auf. Sie aktualisiert die Eigenschaften aller Komponenten, deren Verschachtelungsstufe höher oder gleich der Zielkomponente ist, bevor das Steuerelement an den Benutzer zurückgegeben wird. Da dieser Aufruf viel Rechenleistung erfordert, sollten Sie diese Methode nur aufrufen, wenn sie benötigt wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
      Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Eigenschaftsänderungen werden in der Regel nicht sofort auf Komponenten angewendet. Stattdessen rufen die Komponenten eine der Invalidierungsmethoden des LayoutManagers auf und wenden die Eigenschaften später an. Die tatsächliche Eigenschaft, die Sie eingestellt haben, kann sofort abgerufen werden, wenn sie sich jedoch auf andere Eigenschaften in der Komponente, auf untergeordnete oder übergeordnete Komponenten auswirkt, werden diese nicht sofort aktualisiert. Um sicherzustellen, dass die Werte aktualisiert werden, rufen Sie die <codeph>validateNow()</codeph>-Methode auf. Dadurch werden die Eigenschaften aller Komponenten vor der Rückgabe aktualisiert. Da dieser Aufruf viel Rechenleistung erfordert, sollten Sie diese Methode nur aufrufen, wenn sie benötigt wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:LayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
      Ein Flag, das angibt, ob der LayoutManager Bildschirmaktualisierungen zwischen Phasen zulässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der LayoutManager Bildschirmaktualisierungen zwischen Phasen zulässt. Bei <codeph>true</codeph> werden Messung und Layout in Phasen vorgenommen (eine Phase pro Bildschirmaktualisierung). Für alle anderen Komponenten wird die <codeph>validateProperties()</codeph>- und <codeph>commitProperties()</codeph>-Methode aufgerufen, bis alle Eigenschaften validiert sind. Danach wird der Bildschirm aktualisiert.  
     
      <p>Dann werden die <codeph>validateSize()</codeph>- und die <codeph>measure()</codeph>-Methode für alle Komponenten aufgerufen, bis alle Komponenten gemessen wurden, und der Bildschirm wird erneut aktualisiert.  </p>
     
      <p>Schließlich wird die <codeph>validateDisplayList()</codeph>- und <codeph>updateDisplayList()</codeph>-Methode für alle Komponenten aufgerufen, bis alle Komponenten validiert wurden, und der Bildschirm wird erneut aktualisiert. Wenn bei der Überprüfung einer Phase die Überprüfung einer früheren Phase rückgängig gemacht wird, beginnt der LayoutManager von vorne. Dies ist effizienter, wenn zahlreiche Komponenten erstellt und initialisiert werden. Die Architektur ist für die Einstellung dieser Eigenschaft zuständig.</p>
     
      <p>Bei <codeph>false</codeph> werden alle drei Phasen abgeschlossen, bevor der Bildschirm aktualisiert wird.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IMarshalSystemManager"><apiName>IMarshalSystemManager</apiName><shortdesc>
  Die IMarshalSystemManager-Schnittstelle definiert die Methoden und Eigenschaften, die Klassen implementieren müssen, wenn sie in einer versionsübergreifenden Konfiguration auf Brücken anderer Anwendungen zugreifen, Brücken hinzufügen und entfernen wollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IMarshalSystemManager-Schnittstelle definiert die Methoden und Eigenschaften, die Klassen implementieren müssen, wenn sie in einer versionsübergreifenden Konfiguration auf Brücken anderer Anwendungen zugreifen, Brücken hinzufügen und entfernen wollen.
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildBridge"><apiName>addChildBridge</apiName><shortdesc> 
      Fügt dem System Manager eine untergeordnete Brücke hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Brücke für das untergeordnete Element.
     
      </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Der SWFLoader für das untergeordnete Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Fügt dem System Manager eine untergeordnete Brücke hinzu. Jede untergeordnete Brücke stellt Komponenten in einer anderen Sandbox oder mit einer anderen Flex-Version kompilierte Komponenten dar.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildToSandboxRoot"><apiName>addChildToSandboxRoot</apiName><shortdesc> 
      Fügt dem Sandbox-Stamm auf der gewünschten Ebene das angegebene untergeordnete Element hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Der Name der IChildList im SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das hinzuzufügende DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Fügt dem Sandbox-Stamm auf der gewünschten Ebene das angegebene untergeordnete Element hinzu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:dispatchEventFromSWFBridges"><apiName>dispatchEventFromSWFBridges</apiName><shortdesc>
      Senden Sie eine Meldung an alle übergeordneten und untergeordneten Anwendungen in dieser SWF-Brückengruppe des SystemManagers, unabhängig davon, ob sie sich in derselben SecurityDomain befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das zu sendende Ereignis.
          
          </apiDesc></apiParam><apiParam><apiItemName>skip</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>Gibt einen IEventDispatcher an, an den Sie keine Meldung senden möchten. Dies wird normalerweise verwendet, um den IEventDispatcher zu überspringen, der das Ereignis ausgelöst hat.
     
          </apiDesc></apiParam><apiParam><apiItemName>trackClones</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob beim Senden der Ereignisse ein Verweis darauf erhalten bleibt.
          
          </apiDesc></apiParam><apiParam><apiItemName>toOtherSystemManagers</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob das Ereignis an einen anderen SystemManager auf oberster Ebene in AIR gesendet wird.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sendet eine Meldung an alle übergeordneten und untergeordneten Anwendungen in der SWF-Brückengruppe dieses SystemManagers, unabhängig davon, ob sie sich in derselben SecurityDomain befinden. Optional können Sie eine Anwendung mit den Parametern dieser Methode ausschließen.
     
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:isDisplayObjectInABridgedApplication"><apiName>isDisplayObjectInABridgedApplication</apiName><shortdesc>
      Überprüft, ob sich ein Anzeigeobjekt in einer im Kompatibilitätsmodus geladenen untergeordneten Anwendung oder in einer nicht vertrauenswürdigen Sandbox befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn sich das <codeph>displayObject</codeph> in einer im Kompatibilitätsmodus geladenen untergeordneten Anwendung oder in einer nicht vertrauenswürdigen Sandbox befindet, und andernfalls <codeph>false</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu überprüfende DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überprüft, ob sich ein Anzeigeobjekt in einer im Kompatibilitätsmodus geladenen untergeordneten Anwendung oder in einer nicht vertrauenswürdigen Sandbox befindet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc> 
      Fügt dem System Manager eine untergeordnete Brücke hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Brücke für das untergeordnete Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Fügt dem System Manager eine untergeordnete Brücke hinzu. Jede untergeordnete Brücke stellt Komponenten in einer anderen Sandbox oder mit einer anderen Flex-Version kompilierte Komponenten dar.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildFromSandboxRoot"><apiName>removeChildFromSandboxRoot</apiName><shortdesc> 
      Entfernt das angegebene untergeordnete Element aus dem Sandbox-Stamm auf der gewünschten Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Der Name der IChildList im SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das hinzuzufügende DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Entfernt das angegebene untergeordnete Element aus dem Sandbox-Stamm auf der gewünschten Ebene.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:useSWFBridge"><apiName>useSWFBridge</apiName><shortdesc>
      Bestimmt, ob der Aufrufer, der diesen System Manager verwendet, direkt oder über eine Brücke mit anderen Managern kommunizieren muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Bei <codeph>true</codeph> muss der Aufrufer, der diesen System Manager verwendet, über Sandbox-Brücken kommunizieren. Bei <codeph>false</codeph> kann der System Manager andere Manager direkt über Verweise aufrufen.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Bestimmt, ob der Aufrufer, der diesen System Manager verwendet, direkt oder über eine Brücke mit anderen Managern kommunizieren muss.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:swfBridgeGroup:get"><apiName>swfBridgeGroup</apiName><shortdesc>
      Enthält alle Brücken zu anderen Anwendungen, mit denen diese Anwendung verbunden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:ISWFBridgeGroup</apiValueClassifier></apiValueDef><apiDesc>
      Enthält alle Brücken zu anderen Anwendungen, mit denen diese Anwendung verbunden ist.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManagerClient"><apiName>ILayoutManagerClient</apiName><shortdesc>
  Die ILayoutManagerClient-Schnittstelle definiert die Schnittstelle, die eine Komponente implementieren muss, um an der Übernahme/Messung/Layout-Sequenz des LayoutManagers teilzunehmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die ILayoutManagerClient-Schnittstelle definiert die Schnittstelle, die eine Komponente implementieren muss, um an der Übernahme/Messung/Layout-Sequenz des LayoutManagers teilzunehmen.  
 
  <p>Objekte, die an die <codeph>invalidateProperties()</codeph>-Methode des LayoutManagers übergeben werden können. In der Phase zur Übernahme der Eigenschaften, ruft der LayoutManager die <codeph>validateProperties()</codeph>-Methode des Objekts auf.</p>
 
  <p>Wenn ein Objekt an die <codeph>invalidateSize()</codeph>-Methode des LayoutManagers übergeben wird, ruft der LayoutManager entsprechend die <codeph>validateSize()</codeph>-Methode in der Messungsphase auf und wenn ein Objekt an die <codeph>invalidateDisplayList()</codeph>-Methode des LayoutManagers übergeben wird, ruft der LayoutManager die <codeph>validateDisplayList()</codeph>-Methode in der Layoutphase auf.</p>
 
  <p>Die ILayoutManagerClient-Schnittstelle wird von der UIComponent- und ProgrammaticSkin-Klasse aufgerufen.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      Validiert die Position und Größe der untergeordneten Elemente und zeigt Grafiken an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Validiert die Position und Größe der untergeordneten Elemente und zeigt Grafiken an. Wird die <codeph>LayoutManager.invalidateDisplayList()</codeph>-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die <codeph>validateDisplayList()</codeph>-Methode zum Zeitpunkt der Anzeigelisten-Aktualisierung verwendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Validiert die Eigenschaften einer Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Validiert die Eigenschaften einer Komponente. Wird die <codeph>LayoutManager.invalidateProperties()</codeph>-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die <codeph>validateProperties()</codeph>-Methode zum Zeitpunkt der Übernahme von Eigenschaftswerten verwendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateSize"><apiName>validateSize</apiName><shortdesc>
      Validiert die gemessene Größe der Komponente. Wird die LayoutManager.invalidateSize()-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die validateSize()-Methode zum Zeitpunkt der Messung verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> rufen Sie diese Methode für die untergeordneten Elemente des Objekts auf.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Validiert die gemessene Größe der Komponente. Wird die <codeph>LayoutManager.invalidateSize()</codeph>-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die <codeph>validateSize()</codeph>-Methode zum Zeitpunkt der Messung verwendet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:initialized:get"><apiName>initialized</apiName><shortdesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat. Dieses Flag sollte nur vom LayoutManager geändert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat. Dieses Flag sollte nur vom LayoutManager geändert werden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      Der SystemManager auf oberster Ebene weist nestLevel 1 auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Der SystemManager auf oberster Ebene weist nestLevel 1 auf. Die ihm direkt untergeordneten Elemente (Anwendung und Popupfenster auf oberster Ebene) haben <codeph>nestLevel</codeph> 2. Deren untergeordnete Elemente weisen <codeph>nestLevel</codeph> 3 auf usw. Der <codeph>nestLevel</codeph> wird zum Sortieren von ILayoutManagerClients während der Messungs- und Layoutphasen verwendet. In der Übernahmephase übernimmt der LayoutManager die Eigenschaften von Clients in aufsteigender <codeph>nestLevel</codeph>-Reihenfolge, sodass die Eigenschaften der untergeordneten Objekte vor den Eigenschaften des Objekts selbst übernommen werden. In der Messungsphase misst der LayoutManager Clients in absteigender <codeph>nestLevel</codeph>-Reihenfolge, sodass die untergeordneten Elemente vor dem Objekt selbst gemessen werden. In der Layoutphase ordnet der LayoutManager Clients in aufsteigender <codeph>nestLevel</codeph>-Reihenfolge an, sodass ein Objekt die Größe der ihm untergeordneten Objekte festlegen kann, bevor das untergeordnete Objekt zum Festlegen der Größe und Position der ihm untergeordneten Objekte aufgefordert wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Ein Flag, das bestimmt, ob ein Objekt darauf wartet, dass sein updateComplete-Ereignis ausgelöst wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das bestimmt, ob ein Objekt darauf wartet, dass sein <codeph>updateComplete</codeph>-Ereignis eines Objekts ausgelöst wird. Dieses Flag sollte nur vom LayoutManager geändert werden.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IToolTipManagerClient"><apiName>IToolTipManagerClient</apiName><shortdesc>
  Komponenten, die IToolTipManagerClient implementieren, können QuickInfos anzeigen und müssen über eine Get-/Set-Methode zum Aufrufen von QuickInfos verfügen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Komponenten, die IToolTipManagerClient implementieren, können QuickInfos anzeigen und müssen über eine Get-/Set-Methode zum Aufrufen von QuickInfos verfügen. Die ToolTipManager-Klasse verwaltet das Ein- und Ausblenden von QuickInfos für alle IToolTipManagerClient-Komponenten.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.core.xml#IToolTip"><linktext>mx.core.IToolTip</linktext></link></related-links><apiValue id="mx.managers:IToolTipManagerClient:mx.managers:IToolTipManagerClient:toolTip:get"><apiName>toolTip</apiName><shortdesc>
	  Der Text der QuickInfo dieser Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Der Text der QuickInfo dieser Komponente.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManager"><apiName>CursorManager</apiName><shortdesc>
  Die CursorManager-Klasse steuert eine priorisierte Cursorliste, in der jeweils der Cursor mit der höchsten Priorität sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="busyCursorBackground" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  Die als Skin für den Hintergrund des Aktivitätencursors verwendete Klasse. Der Standardwert ist das „cursorStretch“-Symbol aus der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="busyCursor" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  Die Skin für den Aktivitätencursor..
 
  </description>
<default>mx.skins.halo.BusyCursor
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CursorManager-Klasse steuert eine priorisierte Cursorliste, in der jeweils der Cursor mit der höchsten Priorität sichtbar ist. Wenn die Cursorliste mehrere Cursor mit derselben Priorität enthält, zeigt der Cursor-Manager den zuletzt erstellten Cursor an.
  
  <p>Wenn die Anwendung beispielsweise eine Verarbeitung durchführt, auf deren Abschluss der Benutzer warten muss, können Sie einen speziellen Cursor während der Wartezeit (beispielsweise eine Sanduhr oder ein anderes Bild) anzeigen lassen.</p>
  
  <p>Außerdem können Sie Benutzern durch einen geänderten Cursor mitteilen, welche Aktionen sie ausführen können. So lässt sich beispielsweise anhand unterschiedlicher Cursorbilder anzeigen, dass die Benutzereingabe aktiviert bzw. deaktiviert ist. Als Cursorbild können Sie ein JPEG-, GIF-, PNG- oder SVG-Bild, ein Sprite-Objekt oder eine SWF-Datei verwenden. </p>
  
  <p>Alle Methoden und Eigenschaften des CursorManagers sind statisch, sodass Sie keine Instanz davon erstellen müssen.</p>
 
  <p>In AIR verwendet jede mx.core.Window-Instanz eine eigene CursorManager-Klasse. Statt die statischen Methoden und Eigenschaften der CursorManager-Klasse direkt zu referenzieren, verwenden Sie die <codeph>Window.cursorManager</codeph>-Eigenschaft zum Referenzieren der CursorManager-Instanz für die Window-Instanz. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link><link href="" invalidHref="mx.core.Window.xml"><linktext>mx.core.Window</linktext></link></related-links><apiOperation id="mx.managers:CursorManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Jede mx.core.Window-Instanz in einer AIR-Anwendung verfügt über eine eigene CursorManager-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Die CursorManager-Instanz für die Hauptfenster-Instanz in einer AIR-Anwendung.  
      
      </apiDesc><apiType value="mx.managers:ICursorManager"/></apiReturn></apiOperationDef><apiDesc>
      Jede mx.core.Window-Instanz in einer AIR-Anwendung verfügt über eine eigene CursorManager-Instanz. Diese Methode gibt die CursorManager-Instanz für die Hauptfenster-Instanz zurück.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:hideCursor"><apiName>hideCursor</apiName><shortdesc>
      Der Cursor wird unsichtbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der Cursor wird unsichtbar. Die Sichtbarkeit des Cursors wird nicht bei der Referenzzählung berücksichtigt. Durch einen einzigen Aufruf der <codeph>hideCursor()</codeph>-Methode wird der Cursor ausgeblendet, unabhängig von der Anzahl der <codeph>showCursor()</codeph>-Aufrufe.
     
      <p>Das Aufrufen dieser Methode wirkt sich nicht auf den Systemcursor aus. Mit der <codeph>Mouse.show()</codeph>- und der <codeph>Mouse.hide()</codeph>-Methode können Sie den Systemcursor direkt steuern. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeAllCursors"><apiName>removeAllCursors</apiName><shortdesc>
      Entfernt alle Cursor von der Cursorliste und stellt den Systemcursor wieder her.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt alle Cursor von der Cursorliste und stellt den Systemcursor wieder her.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeBusyCursor"><apiName>removeBusyCursor</apiName><shortdesc>
      Entfernt den Aktivitätencursor von der Cursorliste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt den Aktivitätencursor von der Cursorliste. Wenn andere Aktivitätencursor-Anforderungen in der Cursorliste noch aktiv sind, d. h. Sie haben die <codeph>setBusyCursor()</codeph>-Methode mehrmals aufgerufen, wird der Aktivitätencursor solange angezeigt, bis Sie alle Aktivitätencursor von der Liste entfernt haben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeCursor"><apiName>removeCursor</apiName><shortdesc>
      Entfernt einen Cursor von der Cursorliste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursorID</apiItemName><apiType value="int"/><apiDesc>ID des zu entfernenden Cursors.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt einen Cursor von der Cursorliste. Ist der zu entfernende Cursor gerade aktiv, dann wird der CursorManager neben dem nächsten Cursor in der Liste, wenn vorhanden, angezeigt. Wenn die Liste leer ist, wird der CursorManager neben dem standardmäßigen Systemcursor angezeigt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setBusyCursor"><apiName>setBusyCursor</apiName><shortdesc>
      Zeigt den Aktivitätencursor an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Zeigt den Aktivitätencursor an. Die Priorität des Aktivitätencursor entspricht CursorManagerPriority.LOW. Wenn die Cursorliste einen Cursor mit einer höheren Priorität enthält, wird der Aktivitätencursor erst angezeigt, wenn Sie den Cursor mit höherer Priorität entfernen. Um einen Aktivitätencursor mit einer höheren Priorität zu erstellen, verwenden Sie die <codeph>setCursor()</codeph>-Methode.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setCursor"><apiName>setCursor</apiName><shortdesc>
      Erstellt einen neuen Cursor und legt eine optionale Prioritätsstufe für den Cursor fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Die ID des Cursors.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>cursorClass</apiItemName><apiType value="Class"/><apiDesc>Anzuzeigende Klasse des Cursors.
     
      </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>2</apiData><apiDesc>Ganzzahl, die die Prioritätsstufe des Cursors angibt. Gültige Werte sind <codeph>CursorManagerPriority.HIGH</codeph>, <codeph>CursorManagerPriority.MEDIUM</codeph> und <codeph>CursorManagerPriority.LOW</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Eine Zahl, die den x-Offset des Cursors relativ zum Mauszeiger in Pixeln angibt. 
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Eine Zahl, die den y-Offset des Cursors relativ zum Mauszeiger in Pixeln angibt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt einen neuen Cursor und legt eine optionale Prioritätsstufe für den Cursor fest. Fügt der Cursorliste einen neuen Cursor hinzu.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:CursorManager:showCursor"><apiName>showCursor</apiName><shortdesc>
      Der Cursor wird sichtbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Der Cursor wird sichtbar. Die Sichtbarkeit des Cursors wird nicht bei der Referenzzählung berücksichtigt. Durch einen einzigen Aufruf der <codeph>showCursor()</codeph>-Methode wird der Cursor eingeblendet, unabhängig von der Anzahl der <codeph>hideCursor()</codeph>-Aufrufe.
     
      <p>Das Aufrufen dieser Methode wirkt sich nicht auf den Systemcursor aus. Mit der <codeph>Mouse.show()</codeph>- und der <codeph>Mouse.hide()</codeph>-Methode können Sie den Systemcursor direkt steuern. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:CursorManager:NO_CURSOR"><apiName>NO_CURSOR</apiName><shortdesc>
      Konstante, die dem Wert der Eigenschaft „currentCursorID“ angibt, wenn kein Cursor vom CursorManager verwaltet wird und daher der Systemcursor angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Konstante, die den Wert der Eigenschaft <codeph>currentCursorID</codeph> angibt, wenn kein Cursor vom CursorManager verwaltet wird und daher der Systemcursor angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorID:get"><apiName>currentCursorID</apiName><shortdesc>
      ID des aktuellen benutzerdefinierten Cursors oder NO_CURSOR, wenn der Systemcursor angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      ID des aktuellen benutzerdefinierten Cursors oder NO_CURSOR, wenn der Systemcursor angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorXOffset:get"><apiName>currentCursorXOffset</apiName><shortdesc>
      Der x-Offset des benutzerdefinierten Cursors in Pixeln relativ zum Mauszeiger.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der x-Offset des benutzerdefinierten Cursors in Pixeln relativ zum Mauszeiger.
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorYOffset:get"><apiName>currentCursorYOffset</apiName><shortdesc>
      Der y-Offset des benutzerdefinierten Cursors in Pixeln relativ zum Mauszeiger.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der y-Offset des benutzerdefinierten Cursors in Pixeln relativ zum Mauszeiger.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>