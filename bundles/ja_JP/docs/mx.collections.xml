<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.collections"><apiName>mx.collections</apiName><apiDetail/><apiClassifier id="mx.collections:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
  ItemResponder クラスは、mx.rpc.IResponder インターフェイスのデフォルト実装を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.rpc:IResponder</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ItemResponder クラスは、<codeph>mx.rpc.IResponder</codeph> インターフェイスのデフォルト実装を提供します。 これは、要求が正常に完了したとき、またはエラーで完了したときに呼び出すメソッドを指定できるようにする応答側を表します。 また、クラスオブジェクトを使用すると、応答側メソッドが使用するデータ（トークン）を提供できます。
 
 <p><codeph>ItemResponder</codeph> オブジェクトを使用します。これは、以下のコードに示すように、結果としてリモートデータを取得する可能性のある try ブロックの <codeph>catch</codeph> ステートメントの中で使用されます。</p>
 
  <pre><codeph>
     import mx.collections.ItemResponder;
     //...
 
     try
     {
        //...
        cursor.moveNext();
     }
    catch(e:ItemPendingError)
     {
        e.addResponder(new ItemResponder(myResultFunction, myFaultFunction, {info:"..."}));
     }
  </codeph></pre>
 
  <p>指定された result メソッドのシグネチャは次のとおりである必要があります。</p>
 
  <codeph><pre>
     public function myResultFunction(result:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>指定された fault メソッドのシグネチャは次のとおりである必要があります。</p>
 
  <codeph><pre>
     public function myFaultFunction(error:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>それ以外のシグネチャの場合はランタイムエラーが発生します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links><apiConstructor id="mx.collections:ItemResponder:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
	  データとハンドラーを指定した応答側のインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>result</apiItemName><apiType value="Function"/><apiDesc>要求が正常に完了したときに呼び出される関数です。 次のシグネチャが必要です。<codeph><pre>
	     		    public function (result:Object, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>fault</apiItemName><apiType value="Function"/><apiDesc>要求が完了したもののエラーが発生した場合に呼び出される関数です。 次のシグネチャが必要です。<codeph><pre>
	     		    public function (error:ErrorMessage, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>token</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>オブジェクト（オプション）は、この要求に関連付ける追加情報です。 このオブジェクトは、result 関数および fault 関数に 2 番目のパラメーターとして渡されます。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  データとハンドラーを指定した応答側のインスタンスを作成します。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ItemResponder:fault"><apiName>fault</apiName><shortdesc>
	  このメソッドは、エラーが受け取られるとサービスによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>発生したエラーに関する情報が入るオブジェクトです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  このメソッドは、エラーが受け取られるとサービスによって呼び出されます。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ItemResponder:result"><apiName>result</apiName><shortdesc>
	  このメソッドは、戻り値が受け取られるとサービスによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>要求から返された情報が入るオブジェクトです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  このメソッドは、戻り値が受け取られるとサービスによって呼び出されます。
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.collections:Sort"><apiName>Sort</apiName><shortdesc>
  既存のビューに対してソートを設定するために必要なソート情報を提供します（ICollectionView インターフェイスまたはこのインターフェイスを実装するクラス）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:Sort" replacement="spark.collections.Sort" since="4.5">
	</Alternative><DefaultProperty name="fields"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sort&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:Sort
  <b>Properties</b>
  compareFunction="<em>Internal compare function</em>"
  fields="null"
  unique="false | true"
  /&gt;
  </pre>
 
  <p>In case items have inconsistent data types or items have complex data 
  types, the use of the default built-in compare functions is not recommended.
  Inconsistent sorting results may occur in such cases. To avoid such problem,
  provide a custom compare function and/or make the item types consistent.</p>
 
  <p>Just like any other <code>AdvancedStyleClient</code>-based classes, 
  the <code>Sort</code> and <code>SortField</code> classes do not have a 
  parent-child relationship in terms of event handling. Locale changes in a 
  <code>Sort</code> instance are not dispatched to its <code>SortField</code> 
  instances automatically. The only exceptional case is the internal default 
  <code>SortField</code> instance used when no explicit fields are provided.
  In this case, the internal default <code>SortField</code> instance follows 
  the locale style that the owner <code>Sort</code> instance has.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISort</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  既存のビューに対してソートを設定するために必要なソート情報を提供します（ICollectionView インターフェイスまたはこのインターフェイスを実装するクラス）。 ビューの <codeph>sort</codeph> プロパティにソートインスタンスを割り当てた後で、ビューの <codeph>refresh()</codeph> メソッドを呼び出してソート条件を適用します。 ソートの定義は通常、複雑なアイテムのコレクション、つまりコレクション内のオブジェクトのプロパティに対してソートが実行されるようなコレクションに対して行います。 次に、この用例を示します。
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     // In the real world, the collection would have more than one item.
     col.addItem({first:"Anders", last:"Dickerson"});
     // Create the Sort instance.
     var sort:Sort = new Sort();
     // Set the sort field; sort on the last name first, first name second.
     // Both fields are case-insensitive.
     sort.fields = [new SortField("last",true), new SortField("first",true)];
       // Assign the Sort object to the view.
     col.sort = sort;
     // Apply the sort to the collection.
     col.refresh();
  </codeph></pre>
 
  <p>コレクションに <codeph>String</codeph>、<codeph>Date</codeph>、<codeph>Boolean</codeph> などの単純なアイテムが含まれている場合があります。この場合、これら単純型に直接ソートを行います。 単純なアイテムにソートを設定するときは、単一のソートフィールドを使用し、SortField オブジェクトコンストラクターに <codeph>null</codeph> <codeph>name</codeph>（第 1）パラメーターを指定します。 次に実際の使用例を示します。
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     // There is only one sort field, so use a <codeph>null</codeph> 
     // first parameter.
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
     col.refresh();
  </codeph></pre>
  </p>
 
  <p>ICollectionView インターフェイスの実装では、ソートを実行する前に、リモートの場所からすべてのアイテムを取得します。 ソートされたリストにページングを使用している場合は、データを取得する前にリモートコレクションにソートを適用します。
  </p>
 
  <p>デフォルトでは、この Sort クラスは、言語固有の文字列を正しくソートしません。 このタイプのソートについては、<codeph>spark.collections.Sort</codeph> クラスおよび <codeph>spark.collections.SortField</codeph> クラスを参照してください。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:Sort:Sort"><apiName>Sort</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      <p>フィールドを設定しない、カスタムコンパレータのない新しいソートを作成します。</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:Sort:findItem"><apiName>findItem</apiName><shortdesc>
      
      指定された配列内（要求された場合は挿入ポイント）で指定されたオブジェクトを検索し、見つかった場合はインデックス、見つからなかった場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>int は、見つかったアイテムの配列内のインデックスです。 <codeph>returnInsertionIndex</codeph> パラメーターが <codeph>false</codeph> で、アイテムが見つからない場合は、-1 を返します。 <codeph>returnInsertionIndex</codeph> パラメーターが <codeph>true</codeph> で、アイテムが見つからない場合は、ソートされた配列内の値が挿入される位置のインデックスを返します。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>検索する配列です。
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>検索するプロパティを含むオブジェクトです(または検索対象のオブジェクト自身)。 オブジェクトは、フィールド名と値のペアで作成します。フィールド名は <codeph>fields</codeph> プロパティで指定したフィールドの名前であり、このプロパティに指定したとおりの順序になります。 <codeph>fields</codeph> プロパティのすべてのフィールドを指定する必要はありませんが、順序を飛ばすことはできません。 したがって、<codeph>fields</codeph> プロパティに 3 つのフィールドが指定されている場合は、その 1 番目と 2 番目のフィールドをこのパラメーターに使用することはできますが、1 番目と 3 番目だけを指定することはできません。
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>実行する検索の種類を含むストリングです。 有効な値は次のとおりです。
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>値が見つかったいずれかの位置を返します。</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>値が最初に見つかった位置を返します。</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>指定された値が最後に見つかった位置を返します。
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>values</codeph> パラメーターに指定されたアイテムが見つからない場合、このパラメーターが <codeph>true</codeph> に設定されていると、<codeph>findItem()</codeph> メソッドは値の挿入ポイント（ソートされた順序でのアイテムの挿入位置）を返します。
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>アイテムの検索に使用するコンパレータ関数です。 このパラメーターを指定しなかった場合または <codeph>null</codeph> 値を指定した場合、<codeph>findItem()</codeph> 関数は、<codeph>ISort</codeph> インスタンスの <codeph>compareFunction</codeph> プロパティによって決定された比較関数を使用します。この場合、値オブジェクトと現在の <codeph>SortFields</codeph> によって決定されたフィールド配列が渡されます。null 以外の値を指定した場合、<codeph>findItem()</codeph> 関数は、その値を比較関数として使用します。<codeph>compareFunction</codeph> として渡される関数のシグニチャは次のとおりである必要があります。<codeph>function myCompareFunction(a:Object, b:Object):int</codeph>。<codeph>ISort.compareFunction()</codeph> プロパティの比較関数とは異なり、3 番目の引数はありません。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定された配列内（要求された場合は挿入ポイント）で指定されたオブジェクトを検索し、見つかった場合はインデックス、見つからなかった場合は -1 を返します。 <codeph>ListCollectionView</codeph> クラスの <codeph>find<i>xxx</i>()</codeph> メソッドはこのメソッドを使用して、要求されたアイテムを検索します。基本的に、<codeph>ListCollectionView</codeph> ベースのオブジェクトからデータを検索する場合は、<codeph>findItem()</codeph> ではなく、これらの関数を使用するほうが簡単です。<codeph>findItem()</codeph> メソッドは、新しい ICollectionView 実装のような、ソートをサポートするクラスを記述する場合に直接呼び出します。<codeph/>この関数を呼び出す前に、入力アイテム配列をソートしておく必要があります。未ソートの場合、この関数は指定した値プロパティを正しく検索することができません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      
      指定されたプロパティを使用してソートを制御するかどうかを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>プロパティ値がソート結果に影響を与えるかどうかを指定します。 ソートでデフォルトの compareFunction が使用される場合、<codeph>true</codeph> が返されるのは、<codeph>property</codeph> パラメーターがソートフィールドを指定する場合です。 ソートまたは <codeph>ISortField</codeph> でカスタムコンパレータが使用されると、確認する方法はないので、<codeph>true</codeph> を返します。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>テストするフィールドの名前です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたプロパティを使用してソートを制御するかどうかを返します。 ソートにカスタムコンパレータが使用されると、この関数は決定的な結果を判断できません。この場合は、常に <codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:reverse"><apiName>reverse</apiName><shortdesc>
      
      fields 配列を通過して、配列内の ISortField オブジェクトごとに reverse() を呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      <codeph>fields</codeph> 配列を通過して、配列内の <codeph>ISortField</codeph> オブジェクトごとに <codeph>reverse()</codeph> を呼び出します。フィールドが降順の場合は昇順になり、昇順の場合は降順になります。
     
      <p>メモ：<codeph>ICollectionView</codeph> は、<codeph>fields</codeph> 配列内のオブジェクトが変更されても自動的には更新されません。ビューを更新するには、<codeph>refresh()</codeph> メソッドを呼び出します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:sort"><apiName>sort</apiName><shortdesc>
      
      指定された配列（配列のコピーではない）に現在のソートを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>ソートするアイテムの配列です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定された配列（配列のコピーではない）に現在のソートを適用します。 配列が変更されないようにするには、コピーを作成し、そのコピーを <codeph>items</codeph> パラメーターで使用します。
     
      <p><codeph>ICollectionView</codeph> 実装は、<codeph>sort</codeph> メソッドを自動的に呼び出し、基になるデータのコピーに対してソートが行われるようにします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:Sort:ANY_INDEX_MODE"><apiName>ANY_INDEX_MODE</apiName><shortdesc>
      検索を実行すると、一致するアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
      検索を実行すると、一致するアイテムのインデックスを返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:FIRST_INDEX_MODE"><apiName>FIRST_INDEX_MODE</apiName><shortdesc>
      検索を実行すると、最初に一致したアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>first</apiData><apiType value="String"/></apiValueDef><apiDesc>
      検索を実行すると、最初に一致したアイテムのインデックスを返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:LAST_INDEX_MODE"><apiName>LAST_INDEX_MODE</apiName><shortdesc>
      検索を実行すると、最後に一致したアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>last</apiData><apiType value="String"/></apiValueDef><apiDesc>
      検索を実行すると、最後に一致したアイテムのインデックスを返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      
      ソート時にアイテムを比較するために使用するメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      ソート時にアイテムを比較するために使用するメソッドです。 このプロパティを指定すると、このクラスで使用する ISortField オブジェクトに指定した <codeph>compareFunction</codeph> プロパティはすべて無視されます。<codeph/>
     
      <p>比較関数には次のシグネチャが必要です。</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>この関数は、以下を返す必要があります。 value:
      <ul>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> の前に現れるソート順の場合は -1</li>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> と等しい場合は 0</li>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> の後に表示されるソート順の場合は 1</li>
      </ul></p>
      <p>内部比較関数に戻すには、この値を <codeph>null</codeph> に設定します。</p>
      <p>
      <codeph>fields</codeph> 配列は、比較するオブジェクトフィールドを指定します。 通常は、フィールドリストを使い果たすか、ゼロではない値が返されるまで、このアルゴリズムはプロパティを比較します。次に実際の使用例を示します。</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>デフォルト値は、ストリング、数値、日付を比較できる内部比較関数です。この比較関数では、昇順または降順での比較が可能です。 カスタム比較アルゴリズムが必要な場合にのみ、独自の関数を指定します。 このことは、通常、計算フィールドが表示で使用される場合にのみ該当します。</p>
     
      <p>また、<codeph>ISortField</codeph> クラスの <codeph>compareFunction</codeph> プロパティを使用することで、各ソートフィールドに対して個別の比較関数を指定することもできます。こうすれば、一部のフィールドにデフォルトの比較関数を適用し、別のフィールドには独自の比較関数を適用することが可能となります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:fields:get"><apiName>fields</apiName><shortdesc>
      
      比較するフィールドを指定する ISortField オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="fieldsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      比較するフィールドを指定する <codeph>ISortField</codeph> オブジェクトの配列です。<codeph/>配列内の ISortField オブジェクトの順序によって、ソート時のフィールドの優先順位が決まります。 デフォルトのソートコンパレータは、比較する 2 つのフィールドのソート順が決定するまで、配列順にソートフィールドをチェックします。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#SortField"><linktext>SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:Sort:unique:get"><apiName>unique</apiName><shortdesc>
      
      ソートが一意であるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      ソートが一意であるかどうかを示します。 フィールドプロパティのフィールドにより指定された値また組み合わせ値が不確定なソート順または一意ではないソート順になる場合、つまり複数のアイテムが同じソートフィールド値を持つ場合は、一意のソートは失敗します。ソートが一意でない場合は、エラーがスローされます。ソートロジックでこの <codeph>unique</codeph> プロパティ値が使用されるのは、ソートフィールドが明示的に指定されている場合のみです。ソートフィールドが明示的に指定されていない場合、同一値のエレメントがある場合でもエラーはスローされません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISortField"><apiName>ISortField</apiName><shortdesc>
  ISortField インターフェイスは、コレクションビューの特定のフィールドまたはプロパティをソートするために必要なソート情報を提供するために、ISort クラスで使用されるクラスのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  <codeph>ISortField</codeph> インターフェイスは、コレクションビューの特定のフィールドまたはプロパティをソートするために必要なソート情報を提供するために、<codeph>ISort</codeph> クラスで使用されるクラスのインターフェイスを定義します。
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      カスタム比較関数が設定されているかどうか、指定されたフィールドのデータ型、numeric プロパティの値のいずれかに基づいて、比較を実行するためのデフォルト比較関数を設定するために、Sort クラスによって呼び出されるヘルパー関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>データを含むオブジェクトです。 name プロパティでフィールド名が設定されている場合は、その名前を使用して、このオブジェクトのデータ値にアクセスされます。 設定されていない場合は、オブジェクト自身がデータ値として使用されます。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      カスタム比較関数が設定されているかどうか、指定されたフィールドのデータ型、numeric プロパティの値のいずれかに基づいて、比較を実行するためのデフォルト比較関数を設定するために、<codeph>Sort</codeph> クラスによって呼び出されるヘルパー関数です。<codeph>numeric</codeph> プロパティが true の場合は、ソート時に数値比較が実行されます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:reverse"><apiName>reverse</apiName><shortdesc>
      このソートフィールドの条件を逆順にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このソートフィールドの条件を逆順にします。 フィールドが降順でソートされた場合は、例えば、昇順でソートします。
           <p>メモ：<codeph>ICollectionView</codeph> は、<codeph>ISortField</codeph> が変更されても自動的には更新されません。ビューを更新するには、<codeph>refresh()</codeph> メソッドを呼び出します。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISortField:mx.collections:ISortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph/><codeph/>これ以外の使用方法はサポートされていません。フィールドのソートに <codeph>Sort</codeph> クラスでこの ISortField を使用しないようにする（compareFunction や name がない）場合は、-1 を返します。 それ以外の場合は、ソートオプションのビットマスクを返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      関連付けられたコレクションのアイテムをソートするときに 2 つのアイテムを比較する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      関連付けられたコレクションのアイテムをソートするときに 2 つのアイテムを比較する関数です。 ISort オブジェクトの <codeph>compareFunction</codeph> プロパティを指定した場合、ISort の ISortField オブジェクトの <codeph>compareFunction</codeph> プロパティはすべて無視されます。
      <p>比較関数には次のシグネチャが必要です。</p>
           <p><codeph>function myCompare(a:Object, b:Object):int</codeph></p>
           <p>この関数は、次の値を返します。</p>
            <ul>
            <li><codeph>a</codeph> が <codeph>b</codeph> の前に現れるソート順の場合は -1 です。</li>
            <li><codeph>a</codeph> が <codeph>b</codeph> と等しい場合は 0 です。</li>
            <li><codeph>a</codeph> が <codeph>b</codeph> の後に表示されるソート順の場合は 1 です。</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:descending:get"><apiName>descending</apiName><shortdesc>
      このフィールドを降順でソートするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      このフィールドを降順でソートするかどうかを指定します。
           <p>デフォルト値は <codeph>false</codeph>（昇順）です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:name:get"><apiName>name</apiName><shortdesc>
      ソートするフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ソートするフィールドの名前です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      ソート対象のフィールドに数値（number/int/uint）、または数値のストリング表現が含まれている場合、コンパレータが数値比較を実行するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
           </apiDefaultValue></apiValueDef><apiDesc>
      ソート対象のフィールドに数値（<codeph>number/int/uint</codeph>）、または数値のストリング表現が含まれている場合、コンパレータが数値比較を実行するように指定します。
      <p>
      このプロパティは、カスタム比較関数が指定されていない場合に、<codeph>SortField</codeph> クラスで使用されます。
      </p>
      <p>
      このプロパティが <codeph>true</codeph> の場合、組み込みの数値比較関数が使用されます。各データアイテムは <codeph>Number()</codeph> 関数にキャストされてから比較されます。
      </p>
      <p>
      このプロパティが <codeph>false</codeph> の場合、組み込みの文字列比較関数が使用されます。各データアイテムは <codeph>String()</codeph> 関数にキャストされてから比較されます。
      </p>
      <p>
      このプロパティが <codeph>null</codeph> の場合は、最初のデータアイテムを内観してそれが数字とストリングのどちらであるかを判定し、その内観に基づいてソートが実行されます。
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      この ISortField がカスタムコンパレータ関数を使用している場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><compareFunction>      </compareFunction></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      この <codeph>ISortField</codeph> がカスタムコンパレータ関数を使用している場合は True です。
           </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayList"><apiName>ArrayList</apiName><shortdesc>
  ArrayList クラスは、IList の単純な実装であり、補助配列をデータソースとして使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  ArrayList クラスは、IList の単純な実装であり、補助配列をデータソースとして使用します。補助配列のアイテムにアクセスして操作するには、<codeph>IList</codeph> インターフェイスのメソッドとプロパティを使用します。ArrayList インスタンスに対して操作を行うと、データソースが変更されます。例えば、ArrayList の <codeph>removeItemAt()</codeph> メソッドを使用すると、基になる Array からアイテムが削除されます。この基本クラスは、ItemPendingErrors をスローしませんが、サブクラスはスローする場合があります。
 
  <pre>
  &lt;mx:ArrayList
  <b>Properties</b>
  source="null"
  />
  </pre>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ArrayList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  IList が何らかの方法で更新されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  IList が何らかの方法で更新されると送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ArrayList:ArrayList"><apiName>ArrayList</apiName><shortdesc>
      指定された配列をそのソースとして使用して、新しい ArrayList を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>ArrayList のソースとして使用する Array です。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      指定された配列をそのソースとして使用して、新しい ArrayList を作成します。ソースが指定されていない場合は、空の配列が使用されます。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ArrayList:addAllAt"><apiName>addAllAt</apiName><shortdesc conref="mx.collections.ListCollectionView#addAllAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>現在のリストに追加するアイテムのリストです。
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新しいアイテムを追加する、現在のリストの位置です。
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAllAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addAll"><apiName>addAll</apiName><shortdesc conref="mx.collections.ListCollectionView#addAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>現在のリストに追加するアイテムのリストです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      指定されたインデックス位置にアイテムを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さより大きい場合
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックス位置に配置するアイテム
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にアイテムを追加します。このインデックス位置の後にあったすべてのアイテムは、1 つだけ移動されます。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItem"><apiName>addItem</apiName><shortdesc>
      指定されたアイテムをリストの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するアイテム
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたアイテムをリストの末尾に追加します。addItemAt(item, length) と同等です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>そのインデックスのデータをリモートからロードする必要がある場合
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>index &lt; 0 または index >= length の場合
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>そのインデックス位置にあるアイテムです。アイテムがない場合は null です
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストのインデックス
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>アイテムがローカルでない場合に要求時に取得するアイテムの方向と量を示す int 値です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるアイテムを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      アイテムがリスト内にある場合、インデックスを返します（getItemAt(index) == item）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムのインデックスで、アイテムがリスト内にない場合は -1 です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索するアイテム
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムがリスト内にある場合、インデックスを返します（getItemAt(index) == item）。この実装では、検索は直線的に行われるため、O(n) である点に注意してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:itemUpdateHandler"><apiName>itemUpdateHandler</apiName><shortdesc>
      リストに含まれるアイテムが ObjectChange イベントを送出すると呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:PropertyChangeEvent</apiOperationClassifier><apiDesc>ObjectChange イベントのイベントオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      リストに含まれるアイテムが ObjectChange イベントを送出すると呼び出されます。<codeph>CollectionEventKind.UPDATE</codeph> オブジェクトでそれをラップします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      アイテムが更新されたビューを通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビュー内のアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティを指定する String、QName または int です。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムが更新されたビューを通知します。これは、ビューのコンテンツが <codeph>IEventDispatcher</codeph> を実装しない場合に便利です。プロパティを指定すると、ビューは通知メカニズムを最適化できます。 プロパティを指定しないと、ビュー全体の単純な更新が選択されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ArrayList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      リストからすべてのアイテムを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      リストからすべてのアイテムを削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるアイテムを削除し、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>index &lt; 0 または index >= length の場合。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたアイテムです。
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムが削除されるインデックスです。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるアイテムを削除し、返します。このインデックスより後にあったアイテムは、インデックスが 1 つずつ前になります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItem"><apiName>removeItem</apiName><shortdesc>
      指定されたアイテムをリストから削除します（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムが削除されたかどうかを示すブール値。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>削除する必要のあるアイテムへのオブジェクト参照。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたアイテムをリストから削除します（存在する場合）。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      指定されたインデックス位置にアイテムを配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さ以上の場合
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>置き換えられたアイテムです。アイテムがない場合は null です
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックスの新しい値
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にアイテムを配置します。アイテムが既にそのインデックス位置にある場合は、新しいアイテムに置き換えられ、インデックス位置にあったアイテムが返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:startTrackUpdates"><apiName>startTrackUpdates</apiName><shortdesc> 
      アイテムが IEventDispatcher の場合は、それが更新されていないかどうかを監視します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc><codeph>addItemAt()</codeph> メソッドに渡されるアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      アイテムが IEventDispatcher の場合は、それが更新されていないかどうかを監視します。このメソッドは、<codeph>addItemAt</codeph> メソッドによって呼び出され、ソースが最初に割り当てられるときに呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:stopTrackUpdates"><apiName>stopTrackUpdates</apiName><shortdesc> 
      アイテムが IEventDispatcher の場合は、それが更新されていないかどうかの監視を停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc><codeph>removeItemAt()</codeph> メソッドに渡されるアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      アイテムが IEventDispatcher の場合は、それが更新されていないかどうかの監視を停止します。このメソッドは <codeph>removeItemAt()</codeph> メソッドと <codeph>removeAll()</codeph> メソッドによって呼び出され、新しいソースが割り当てられる前に呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toArray"><apiName>toArray</apiName><shortdesc>
      IList 実装と同じ順序で指定された配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>リモートからのデータのロードがまだ完了していない場合
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>IList 実装と同じ順序で指定された配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      IList 実装と同じ順序で指定された配列を返します。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toString"><apiName>toString</apiName><shortdesc>
      この ArrayList のコンテンツをストリングに出力して、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ArrayList の内容を含む文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      この ArrayList のコンテンツをストリングに出力して、返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ArrayList:length:get"><apiName>length</apiName><shortdesc>
      リスト内のアイテムの数を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      リスト内のアイテムの数を取得します。ArrayList は、-1 を返さないように常にその長さを認識している必要があります。ただし、サブクラスがその動作をオーバーライドする場合があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:source:get"><apiName>source</apiName><shortdesc>
      この ArrayList のソース配列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この ArrayList のソース配列。IList インターフェイスを通じて行った変更はすべて、ソース配列に反映されます。ソース配列が指定されなかった場合、ArrayList は、ソース配列を内部的に作成します。基になる配列に対して直接変更を加えても（例えば、<codeph>List.source.pop()</codeph> の呼び出しなど）、<codeph>CollectionEvents</codeph> は送出されません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:uid:get"><apiName>uid</apiName><shortdesc>
      このリストの一意の ID へのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      このリストの一意の ID へのアクセスを提供します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:SortField"><apiName>SortField</apiName><shortdesc>
  コレクションビュー内でフィールドまたはプロパティに対してソートを設定するために必要なソート情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:SortField" replacement="spark.collections.SortField" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SortField&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:SortField
  <b>Properties</b>
  caseInsensitive="false"
  compareFunction="<em>Internal compare function</em>"
  descending="false"
  name="null"
  numeric="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISortField</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  コレクションビュー内でフィールドまたはプロパティに対してソートを設定するために必要なソート情報を提供します。SortField クラスは、Sort クラスと共に使用するよう意図されています。ソートは通常、複雑なアイテム、つまりオブジェクトのプロパティに対してソートが実行されるアイテムのコレクションについて設定します。 次に例を示します。
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem({first:"Anders", last:"Dickerson"});
     var sort:Sort = new Sort();
     sort.fields = [new SortField("first", true)];
     col.sort = sort;
  </codeph></pre>
 
  コレクションに <codeph>String</codeph>、<codeph>Date</codeph>、<codeph>Boolean</codeph> などの単純なアイテムが含まれている場合があります。この場合は、これらの単純型に直接ソートを適用します。 この場合のソートを設定するときは、単一のソートフィールドのみを指定します。<codeph>name</codeph> は指定できません。 次に実際の使用例を示します。
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
  </codeph></pre>
 
  <p>デフォルトでは、SortField クラスの提供する比較は、言語固有の文字列を正しくソートしません。 このタイプのソートについては、<codeph>spark.collections.Sort</codeph> クラスおよび <codeph>spark.collections.SortField</codeph> クラスを参照してください。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#Sort"><linktext>mx.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:SortField:SortField"><apiName>SortField</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>このフィールドが比較に使用するプロパティの名前です。 オブジェクトが単純型の場合、<codeph>null</codeph> を渡します。
      </apiDesc></apiParam><apiParam><apiItemName>caseInsensitive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>ストリングをソートする場合は、値の大文字小文字を無視するかどうかをコンパレータに指示します。
      </apiDesc></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>アイテムを降順に配置するかどうかをコンパレータに指示します。
      </apiDesc></apiParam><apiParam><apiItemName>numeric</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>ソートアイテムをアルファベット順ではなく数として比較するかどうかをコンパレータに指示します。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:SortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      
      カスタム比較関数が設定されているかどうか、指定されたフィールドのデータ型、numeric プロパティの値のいずれかに基づいて、比較を実行するためのデフォルト比較関数を設定するために、Sort クラスによって呼び出されるヘルパー関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>データを含むオブジェクトです。 name プロパティでフィールド名が設定されている場合は、その名前を使用して、このオブジェクトのデータ値にアクセスされます。 設定されていない場合は、オブジェクト自身がデータ値として使用されます。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      カスタム比較関数が設定されているかどうか、指定されたフィールドのデータ型、numeric プロパティの値のいずれかに基づいて、比較を実行するためのデフォルト比較関数を設定するために、<codeph>Sort</codeph> クラスによって呼び出されるヘルパー関数です。<codeph>numeric</codeph> プロパティが true の場合は、ソート時に数値比較が実行されます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:SortField:reverse"><apiName>reverse</apiName><shortdesc>
      
      このソートフィールドの条件を逆順にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      このソートフィールドの条件を逆順にします。 フィールドが降順でソートされた場合は、例えば、昇順でソートします。
           <p>メモ：<codeph>ICollectionView</codeph> は、<codeph>ISortField</codeph> が変更されても自動的には更新されません。ビューを更新するには、<codeph>refresh()</codeph> メソッドを呼び出します。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:SortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     
      <codeph/><codeph/>これ以外の使用方法はサポートされていません。フィールドのソートに <codeph>Sort</codeph> クラスでこの ISortField を使用しないようにする（compareFunction や name がない）場合は、-1 を返します。 それ以外の場合は、ソートオプションのビットマスクを返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:caseInsensitive:get"><apiName>caseInsensitive</apiName><shortdesc>
      このフィールドのソートでは大文字と小文字を区別しないかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caseInsensitiveChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このフィールドのソートでは大文字と小文字を区別しないかどうかを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      関連付けられたコレクションのアイテムをソートするときに 2 つのアイテムを比較する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      関連付けられたコレクションのアイテムをソートするときに 2 つのアイテムを比較する関数です。 ISort オブジェクトの <codeph>compareFunction</codeph> プロパティを指定した場合、ISort の SortField オブジェクトの <codeph>compareFunction</codeph> プロパティはすべて無視されます。
      <p>比較関数には次のシグネチャが必要です。</p>
     
      <p><codeph>function myCompare(a:Object, b:Object):int</codeph></p>
     
      <p>この関数では、次の値が返される必要があります。</p>
     
       <ul>
            <li><codeph>a</codeph> が <codeph>b</codeph> の前に現れるソート順の場合は -1 です。</li>
            <li><codeph>a</codeph> が <codeph>b</codeph> と等しい場合は 0 です。</li>
            <li><codeph>a</codeph> が <codeph>b</codeph> の後に表示されるソート順の場合は 1 です。</li>
      </ul>
     
      <p>デフォルト値は、ストリング、数値、日付を比較できる内部比較関数です。この比較関数では、昇順または降順での比較が可能で、ストリングの比較に関しては大文字と小文字の区別の有無を指定できます。 カスタム比較アルゴリズムが必要な場合にのみ、独自の関数を指定します。 このことは、通常、計算フィールドが表示で使用される場合にのみ該当します。</p>
      
      言語固有のソートが必要な場合は、<codeph>spark.collections.SortField</codeph> クラスを使用することをお勧めします。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:SortField:descending:get"><apiName>descending</apiName><shortdesc>
      
      このフィールドを降順でソートするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="descendingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      このフィールドを降順でソートするかどうかを指定します。
           <p>デフォルト値は <codeph>false</codeph>（昇順）です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:name:get"><apiName>name</apiName><shortdesc>
      
      ソートするフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nameChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      ソートするフィールドの名前です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      
      ソート対象のフィールドに数値（number/int/uint）、または数値のストリング表現が含まれている場合、コンパレータが数値比較を実行するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numericChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      ソート対象のフィールドに数値（<codeph>number/int/uint</codeph>）、または数値のストリング表現が含まれている場合、コンパレータが数値比較を実行するように指定します。
      <p>
      このプロパティは、カスタム比較関数が指定されていない場合に、<codeph>SortField</codeph> クラスで使用されます。
      </p>
      <p>
      このプロパティが <codeph>true</codeph> の場合、組み込みの数値比較関数が使用されます。各データアイテムは <codeph>Number()</codeph> 関数にキャストされてから比較されます。
      </p>
      <p>
      このプロパティが <codeph>false</codeph> の場合、組み込みの文字列比較関数が使用されます。各データアイテムは <codeph>String()</codeph> 関数にキャストされてから比較されます。
      </p>
      <p>
      このプロパティが <codeph>null</codeph> の場合は、最初のデータアイテムを内観してそれが数字とストリングのどちらであるかを判定し、その内観に基づいてソートが実行されます。
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      
      この ISortField がカスタムコンパレータ関数を使用している場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      この <codeph>ISortField</codeph> がカスタムコンパレータ関数を使用している場合は True です。
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
  AsyncListView クラスは、getItemAt()、removeItemAt()、および toArray() メソッドによってスローされた ItemPendingErrors エラーを処理する IList インターフェイスの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AsyncListView&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:AsyncListView
  <b>Properties</b>
    createFailedItemFunction="null"
    createPendingItemFunction="null"
    list="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier>mx.utils:OnDemandEventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  AsyncListView クラスは、<codeph>getItemAt()</codeph>、<codeph>removeItemAt()</codeph>、および <codeph>toArray()</codeph> メソッドによってスローされた ItemPendingErrors エラーを処理する IList インターフェイスの実装です。
 
  <p><codeph>getItemAt()</codeph> メソッドは、基になる要求が成功または失敗するまで、暫定保留アイテムを返すことで ItemPendingErrors を処理します。暫定アイテムは、<codeph>createPendingItemFunction</codeph> プロパティで指定した関数を呼び出すことにより生成されます。要求が成功すると、暫定アイテムが実際のアイテムで置換されます。要求が失敗すると、<codeph>createFailedItemFunction</codeph> プロパティで指定した関数を呼び出して返されたアイテムで暫定アイテムが置換されます。</p>
 
  <p>このクラスは、IList メソッドおよびプロパティを <codeph>list</codeph> に委譲します。リストが指定されていない場合、コレクションを変更するメソッドは no-op になり、コレクションに対するクエリでは null やゼロなどの空の値が返されます。</p>
 
  <p>このクラスは、DataGroup に基づく Spark コンポーネント（List や ComboBox など）で使用することを目的としています。本来 Spark クラスは、ItemPendingError 処理をサポートしていません。</p>
 
  <p>AsyncListView は、保留中または失敗したアイテムの再挿入はサポートしません。失敗または保留中のアイテムが削除されると、データに対する保留中のリクエストへの接続は失われます。ドラッグ＆ドロップを使用して ASyncListView の保留中アイテムを移動したり、保留中または失敗したアイテムを含む ASyncListView をソートしたりすることはできません。これらの操作はリストアイテムを削除してから再挿入するためです。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:AsyncListView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  リストの長さが変更されたときや、リストのエレメントが置換されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  リストの長さが変更されたときや、リストのエレメントが置換されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:AsyncListView:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>list プロパティの初期値です。委譲先のリストです。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:AsyncListView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      
      指定されたインデックス位置にアイテムを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックス位置に配置するアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたインデックス位置にアイテムを追加します。 追加したアイテムより大きいインデックスを持つすべてのアイテムのインデックスが 1 ずつ増えます。 指定されたインデックスが 0 未満であるか、またはリストの長さより大きい場合は、RangeError がスローされます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:addItem"><apiName>addItem</apiName><shortdesc>
      
      指定されたアイテムをリストの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたアイテムをリストの末尾に追加します。 <codeph>addItemAt(item, length)</codeph> と同等です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      list.getItemAt(index) の値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index &lt; 0</codeph> または <codeph>index >= length</codeph> の場合。
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定したインデックスのリストアイテムです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>アイテムがローカルでない場合に要求時に取得するアイテムの方向と量を示す <codeph>int</codeph> 値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>list.getItemAt(index)</codeph> の値を返します。
     
      <p>このメソッドは、<codeph>getItemAt()</codeph> の呼び出し結果として生成された ItemPendingErrors（IPEs）を受け取ります。IPE がスローされると、IPE に <codeph>IResponder</codeph> が追加され、<codeph>createPendingItemFunction</codeph> で作成された暫定保留アイテムが返されます。最終的に基になる要求が成功した場合、保留アイテムが実際のアイテムで置換されます。要求が失敗した場合、保留アイテムは <codeph>createFailedItemFunction</codeph> を呼び出して生成された値で置換されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.rpc.xml#IResponder"><linktext>mx.rpc.IResponder</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムのインデックスです。アイテムがリスト内にない場合は -1 です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索するアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。
     
      <p>メモ：<codeph>IViewCursor.find<i>xxx</i>()</codeph> メソッドとは異なり、<codeph>getItemIndex()</codeph> メソッドは、検索対象のアイテムに含まれるフィールドのサブセットのみをパラメーターとして渡すことはできません。このメソッドは常に、入力パラメーターに完全に一致するアイテムを検索します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      アイテムが更新されたビューを通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビュー内のアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      アイテムが更新されたビューを通知します。 これは、ビューの内容が <codeph>IEventDispatcher</codeph> を実装せず、<codeph>PropertyChangeEvent</codeph> を送出する場合に便利です。 プロパティを指定すると、ビューは通知メカニズムを最適化できます。 プロパティを指定しないと、ビュー全体の単純な更新が選択されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeAll"><apiName>removeAll</apiName><shortdesc>
       
      リストからすべてのアイテムを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
      リストからすべてのアイテムを削除します。
     
      <p>アイテムがローカルではなく、非同期処理を実行する必要がある場合は、<codeph>ItemPendingError</codeph> がスローされます。</p>
     
      <p><codeph>ItemPendingError</codeph> の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      指定されたインデックス位置にある実際のアイテムや保留中のアイテムを削除し、返します。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index &lt; 0</codeph> または <codeph>index >= length</codeph> の場合。
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたか null のアイテムです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にある実際のアイテムや保留中のアイテムを削除し、返します。 インデックスが指定のインデックスより大きいすべてのアイテムは、そのインデックスを 1 だけ削減します。
     
      <p>例えば、<codeph>getItemAt(index)</codeph> への呼び出しがデータのページインを発生させなかったなどの理由で、指定されたインデックスに実際または保留中のアイテムがない場合は、基盤となる <codeph>list</codeph> が ItemPendingError をスローする場合があります。この実装では、ItemPendingError が無視されて null が返されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      
      指定されたインデックス位置にアイテムを配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>置き換えられたアイテムです。アイテムがない場合は <codeph>null</codeph> です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>指定されたインデックス位置に配置される新しいアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたインデックス位置にアイテムを配置します。 アイテムが既にそのインデックス位置にある場合は、新しいアイテムに置き換えられ、インデックス位置にあったアイテムが返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toArray"><apiName>toArray</apiName><shortdesc>
      この AsyncListView と同じエレメントを持つ配列が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この AsyncListView と同じエレメントを持つ配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      この AsyncListView と同じエレメントを持つ配列が返されます。この配列は、<codeph>getItemAt()</codeph> で各アイテムを取得することによって初期化されます。そのため、実際の値がまだ使用できない場合は、保留中のアイテムが代用されます。AsyncListView が保留中のアイテムを実際の（または失敗した）値で置き換えるときには、配列は更新されません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toString"><apiName>toString</apiName><shortdesc>
      リストの長さと保留中のアイテムリクエストの数が格納された文字列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>リストの簡単な説明です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      リストの長さと保留中のアイテムリクエストの数が格納された文字列を返します。保留中の要求はトリガーされません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:AsyncListView:createFailedItemFunction:get"><apiName>createFailedItemFunction</apiName><shortdesc>
      ItemPendingError のスロー原因となった要求が失敗に終わったときに、代替アイテムを作成するために使用するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>ItemPendingError</codeph> のスロー原因となった要求が失敗に終わったときに、代替アイテムを作成するために使用するコールバック関数です。既存のアイテム（通常は、<codeph>createPendingItemFunction()</codeph> プロパティで指定したコールバック関数で作成された保留中のアイテム）は、失敗したアイテムで置換されます。
      
      <p>このプロパティの値は、2 つのパラメーターを持つ関数である必要があります。パラメーターは、要求されたアイテムのインデックスと、IResponder <codeph>fault()</codeph> メソッドから渡される失敗の "info" オブジェクトです。ほとんどの場合、2 番目のパラメーターは無視できます。次に、このコールバック関数の実装例を示します。</p> 
     
      <pre>
     function createFailedItem(index:int, info:Object):Object
     {
         return "[" + index + "request failed]";        
     }
       </pre>
      
     
      <p>このプロパティを設定しても、作成済みの失敗アイテムに影響はありません。このプロパティを null に設定すると、失敗アイテムは作成されなくなります。
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.rpc.xml#IResponder/fault"><linktext>mx.rpc.IResponder.fault</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:createPendingItemFunction:get"><apiName>createPendingItemFunction</apiName><shortdesc>
      最初の要求で ItemPendingError がスローされたときに、暫定アイテムを作成するために使用するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      最初の要求で <codeph>ItemPendingError</codeph> がスローされたときに、暫定アイテムを作成するために使用するコールバック関数です。最終的に要求が成功した場合、暫定アイテムは実際のアイテムに自動的に置換されます。要求が失敗した場合、アイテムは、<codeph>createFailedItemFunction</codeph> プロパティで指定したコールバック関数により作成されたアイテムで置換されます。
      
      <p>このプロパティの値は、2 つのパラメーターを持つ関数である必要があります。パラメーターは、要求されたデータプロバイダーアイテムのインデックスと、ItemPendingError 自体です。ほとんどの場合、2 番目のパラメーターは無視できます。次の例は、コールバック関数の実装を示しています。
     
       <pre>
     function createPendingItem(index:int, ipe:ItemPendingError):Object
     {
         return "[" + index + "request is pending...]";        
     }
       </pre>
       </p>
     
      <p>このプロパティを設定しても、作成済みの暫定保留アイテムに影響はありません。このプロパティを null に設定すると、暫定保留アイテムは作成されなくなります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:length:get"><apiName>length</apiName><shortdesc>
      
      コレクション内のアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      コレクション内のアイテムの数です。 0 はアイテムがないことを意味し、-1 は長さが不明であることを意味します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:AsyncListView:list:get"><apiName>list</apiName><shortdesc>
      このコレクションがラップする IList オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier><apiDefaultValue>null  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコレクションがラップする IList オブジェクトです。これは、すべての IList メソッドが委譲されるオブジェクトを意味します。
     
      <p>このプロパティが null の場合、IList 変更メソッド（<codeph>setItemAt()</codeph> など）は no-op です。IList 照会メソッド（<codeph>getItemAt()</codeph> など）は、必要に応じて null またはゼロを返します（<codeph>getItemIndex()</codeph> の場合は -1）。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
  ArrayCollection クラスは、ICollectionView または IList インターフェイスのメソッドとプロパティを使用して、アクセスおよび操作できるコレクションとして配列を公開するラッパークラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ArrayCollection&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:ArrayCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  ArrayCollection クラスは、<codeph>ICollectionView</codeph> または <codeph>IList</codeph> インターフェイスのメソッドとプロパティを使用して、アクセスおよび操作できるコレクションとして配列を公開するラッパークラスです。 ArrayCollection インスタンスに対する操作はデータソースを変更します。例えば、ArrayCollection で <codeph>removeItemAt()</codeph> メソッドを使用した場合、基になる Array からアイテムが削除されます。
 
  </apiDesc><example>次のコードを使用すると、単一のオブジェクトエレメントを持つ配列にアクセスし、この配列を操作する単純な ArrayCollection オブジェクトが作成されます。 このコードは、IList インターフェイスの <codeph>getItemAt</codeph> メソッド、およびこのコードが ICollectionView の <codeph>createCursor</codeph> メソッドを使用して取得する IViewCursor オブジェクトを使用してエレメントを取得します。
  <pre>
  var myCollection:ArrayCollection = new ArrayCollection([ { first: 'Matt', last: 'Matthews' } ]);
  var myCursor:IViewCursor = myCollection.createCursor();
  var firstItem:Object = myCollection.getItemAt(0);
  var firstItemFromCursor:Object = myCursor.current;
  if (firstItem == firstItemFromCursor)
        doCelebration();
  </pre>
  
  </example></apiClassifierDetail><apiConstructor id="mx.collections:ArrayCollection:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>ソース Array です。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      <p>指定されたソース配列を使用して新しい ArrayCollection を作成します。 配列が指定されていない場合は、空の配列が使用されます。</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.collections:ArrayCollection:source:get"><apiName>source</apiName><shortdesc>
      ArrayCollection 内のデータのソースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      ArrayCollection 内のデータのソースです。 ArrayCollection オブジェクトは、ソース配列に対して直接行った変更を表しません。 コレクションを変更するには、常に ICollectionView メソッドまたは IList メソッドを使用します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISort"><apiName>ISort</apiName><shortdesc>
      ISort インターフェイスは、コレクションビューのデータをソートするために必要なソート情報を提供するクラスのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      <codeph>ISort</codeph> インターフェイスは、コレクションビューのデータをソートするために必要なソート情報を提供するクラスのインターフェイスを定義します。
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>mx.collections.ISortField</linktext></link></related-links><apiOperation id="mx.collections:ISort:mx.collections:ISort:findItem"><apiName>findItem</apiName><shortdesc>
      指定された配列内（要求された場合は挿入ポイント）で指定されたオブジェクトを検索し、見つかった場合はインデックス、見つからなかった場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>パラメーターエラーの発生は、検索条件とソートに互換性がないか、ソートのコンパレータ関数を判別できないことを意味しています。
     
      </apiDesc><apiItemName>SortError</apiItemName><apiOperationClassifier>SortError</apiOperationClassifier></apiException><apiReturn><apiDesc>int は、見つかったアイテムの配列内のインデックスです。 <codeph>returnInsertionIndex</codeph> パラメーターが <codeph>false</codeph> で、アイテムが見つからない場合は、-1 を返します。 <codeph>returnInsertionIndex</codeph> パラメーターが <codeph>true</codeph> で、アイテムが見つからない場合は、ソートされた配列内の値が挿入される位置のインデックスを返します。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>検索する配列です。
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>検索するプロパティを含むオブジェクトです(または検索対象のオブジェクト自身)。 オブジェクトは、フィールド名と値のペアで作成します。フィールド名は <codeph>fields</codeph> プロパティで指定したフィールドの名前であり、このプロパティに指定したとおりの順序になります。 <codeph>fields</codeph> プロパティのすべてのフィールドを指定する必要はありませんが、順序を飛ばすことはできません。 したがって、<codeph>fields</codeph> プロパティに 3 つのフィールドが指定されている場合は、その 1 番目と 2 番目のフィールドをこのパラメーターに使用することはできますが、1 番目と 3 番目だけを指定することはできません。
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>実行する検索の種類を含むストリングです。 有効な値は次のとおりです。
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>値が見つかったいずれかの位置を返します。</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>値が最初に見つかった位置を返します。</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>指定された値が最後に見つかった位置を返します。
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>values</codeph> パラメーターに指定されたアイテムが見つからない場合、このパラメーターが <codeph>true</codeph> に設定されていると、<codeph>findItem()</codeph> メソッドは値の挿入ポイント（ソートされた順序でのアイテムの挿入位置）を返します。
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>アイテムの検索に使用するコンパレータ関数です。 このパラメーターを指定しなかった場合または <codeph>null</codeph> 値を指定した場合、<codeph>findItem()</codeph> 関数は、<codeph>ISort</codeph> インスタンスの <codeph>compareFunction</codeph> プロパティによって決定された比較関数を使用します。この場合、値オブジェクトと現在の <codeph>SortFields</codeph> によって決定されたフィールド配列が渡されます。null 以外の値を指定した場合、<codeph>findItem()</codeph> 関数は、その値を比較関数として使用します。<codeph>compareFunction</codeph> として渡される関数のシグニチャは次のとおりである必要があります。<codeph>function myCompareFunction(a:Object, b:Object):int</codeph>。<codeph>ISort.compareFunction()</codeph> プロパティの比較関数とは異なり、3 番目の引数はありません。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された配列内（要求された場合は挿入ポイント）で指定されたオブジェクトを検索し、見つかった場合はインデックス、見つからなかった場合は -1 を返します。 <codeph>ListCollectionView</codeph> クラスの <codeph>find<i>xxx</i>()</codeph> メソッドはこのメソッドを使用して、要求されたアイテムを検索します。基本的に、<codeph>ListCollectionView</codeph> ベースのオブジェクトからデータを検索する場合は、<codeph>findItem()</codeph> ではなく、これらの関数を使用するほうが簡単です。<codeph>findItem()</codeph> メソッドは、新しい ICollectionView 実装のような、ソートをサポートするクラスを記述する場合に直接呼び出します。<codeph/>この関数を呼び出す前に、入力アイテム配列をソートしておく必要があります。未ソートの場合、この関数は指定した値プロパティを正しく検索することができません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      指定されたプロパティを使用してソートを制御するかどうかを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>プロパティ値がソート結果に影響を与えるかどうかを指定します。 ソートでデフォルトの compareFunction が使用される場合、<codeph>true</codeph> が返されるのは、<codeph>property</codeph> パラメーターがソートフィールドを指定する場合です。 ソートまたは <codeph>ISortField</codeph> でカスタムコンパレータが使用されると、確認する方法はないので、<codeph>true</codeph> を返します。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>テストするフィールドの名前です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたプロパティを使用してソートを制御するかどうかを返します。 ソートにカスタムコンパレータが使用されると、この関数は決定的な結果を判断できません。この場合は、常に <codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:reverse"><apiName>reverse</apiName><shortdesc>
      fields 配列を通過して、配列内の ISortField オブジェクトごとに reverse() を呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>fields</codeph> 配列を通過して、配列内の <codeph>ISortField</codeph> オブジェクトごとに <codeph>reverse()</codeph> を呼び出します。フィールドが降順の場合は昇順になり、昇順の場合は降順になります。
     
      <p>メモ：<codeph>ICollectionView</codeph> は、<codeph>fields</codeph> 配列内のオブジェクトが変更されても自動的には更新されません。ビューを更新するには、<codeph>refresh()</codeph> メソッドを呼び出します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:sort"><apiName>sort</apiName><shortdesc>
      指定された配列（配列のコピーではない）に現在のソートを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>ソートするアイテムの配列です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された配列（配列のコピーではない）に現在のソートを適用します。 配列が変更されないようにするには、コピーを作成し、そのコピーを <codeph>items</codeph> パラメーターで使用します。
     
      <p><codeph>ICollectionView</codeph> 実装は、<codeph>sort</codeph> メソッドを自動的に呼び出し、基になるデータのコピーに対してソートが行われるようにします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISort:mx.collections:ISort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      ソート時にアイテムを比較するために使用するメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      ソート時にアイテムを比較するために使用するメソッドです。 このプロパティを指定すると、このクラスで使用する ISortField オブジェクトに指定した <codeph>compareFunction</codeph> プロパティはすべて無視されます。<codeph/>
     
      <p>比較関数には次のシグネチャが必要です。</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>この関数は、以下を返す必要があります。 value:
      <ul>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> の前に現れるソート順の場合は -1</li>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> と等しい場合は 0</li>
            <li><codeph>Object a</codeph> が <codeph>Object b</codeph> の後に表示されるソート順の場合は 1</li>
      </ul></p>
      <p>内部比較関数に戻すには、この値を <codeph>null</codeph> に設定します。</p>
      <p>
      <codeph>fields</codeph> 配列は、比較するオブジェクトフィールドを指定します。 通常は、フィールドリストを使い果たすか、ゼロではない値が返されるまで、このアルゴリズムはプロパティを比較します。次に実際の使用例を示します。</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>デフォルト値は、ストリング、数値、日付を比較できる内部比較関数です。この比較関数では、昇順または降順での比較が可能です。 カスタム比較アルゴリズムが必要な場合にのみ、独自の関数を指定します。 このことは、通常、計算フィールドが表示で使用される場合にのみ該当します。</p>
     
      <p>また、<codeph>ISortField</codeph> クラスの <codeph>compareFunction</codeph> プロパティを使用することで、各ソートフィールドに対して個別の比較関数を指定することもできます。こうすれば、一部のフィールドにデフォルトの比較関数を適用し、別のフィールドには独自の比較関数を適用することが可能となります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:fields:get"><apiName>fields</apiName><shortdesc>
      比較するフィールドを指定する ISortField オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      比較するフィールドを指定する <codeph>ISortField</codeph> オブジェクトの配列です。<codeph/>配列内の ISortField オブジェクトの順序によって、ソート時のフィールドの優先順位が決まります。 デフォルトのソートコンパレータは、比較する 2 つのフィールドのソート順が決定するまで、配列順にソートフィールドをチェックします。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:unique:get"><apiName>unique</apiName><shortdesc>
      ソートが一意であるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ソートが一意であるかどうかを示します。 フィールドプロパティのフィールドにより指定された値また組み合わせ値が不確定なソート順または一意ではないソート順になる場合、つまり複数のアイテムが同じソートフィールド値を持つ場合は、一意のソートは失敗します。ソートが一意でない場合は、エラーがスローされます。ソートロジックでこの <codeph>unique</codeph> プロパティ値が使用されるのは、ソートフィールドが明示的に指定されている場合のみです。ソートフィールドが明示的に指定されていない場合、同一値のエレメントがある場合でもエラーはスローされません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
  XMLListCollection クラスは、XMLList オブジェクトにコレクション機能を提供し、ネイティブ XMLList クラスのメソッドのいくつかを使用可能にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:XMLListCollection&gt;</code> tag inherits all
  the attributes of its superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:XMLListCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  XMLListCollection クラスは、XMLList オブジェクトにコレクション機能を提供し、ネイティブ XMLList クラスのメソッドのいくつかを使用可能にします。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.collections.XMLList.xml"><linktext>XMLList</linktext></link><link href="" invalidHref="mx.collections.XML.xml"><linktext>XML</linktext></link></related-links><apiConstructor id="mx.collections:XMLListCollection:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="XMLList"/><apiData>null</apiData><apiDesc>XMLListCollection オブジェクトによって表されるデータを保持する XMLList オブジェクトです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      <p>指定された XMLList オブジェクトを使用して新しい XMLListCollection オブジェクトを作成します。</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:XMLListCollection:attribute"><apiName>attribute</apiName><shortdesc>
      XMLList 内の各 XML オブジェクトの attribute() メソッドを呼び出し、指定した attributeName と一致する結果オブジェクトの XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一致する XML オブジェクトの XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value="Object"/><apiDesc>XMLList にある XML オブジェクトの、照合する属性です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      XMLList 内の各 XML オブジェクトの <codeph>attribute()</codeph> メソッドを呼び出し、指定した <codeph>attributeName</codeph> と一致する結果オブジェクトの XMLList を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attribute()"><linktext>XML.attribute()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:attributes"><apiName>attributes</apiName><shortdesc>
      XMLList オブジェクト内の各 XML オブジェクトの attributes() メソッドを呼び出し、各 XML オブジェクトの属性の XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>結果の XML オブジェクトと属性の一覧を含む XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      XMLList オブジェクト内の各 XML オブジェクトの <codeph>attributes()</codeph> メソッドを呼び出し、各 XML オブジェクトの属性の XMLList を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:child"><apiName>child</apiName><shortdesc>
      XMLList 内の各 XML オブジェクトの child() メソッドを呼び出し、指定したプロパティ名を持つ子を順に格納した XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元の XMLList 内の XML オブジェクトの子のうち、一致した子の XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="Object"/><apiDesc>照合するプロパティです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      XMLList 内の各 XML オブジェクトの <codeph>child()</codeph> メソッドを呼び出し、指定したプロパティ名を持つ子を順に格納した XMLList を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/child()"><linktext>XML.child()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:children"><apiName>children</apiName><shortdesc>
      XMLList 内の各 XML オブジェクトの children() メソッドを呼び出し、その結果を含む XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元の XMLList 内の、XML オブジェクトの子の XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      XMLList 内の各 XML オブジェクトの children() メソッドを呼び出し、その結果を含む XMLList を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/children()"><linktext>XML.children()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:copy"><apiName>copy</apiName><shortdesc>
      XMLList オブジェクトの deep コピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList オブジェクトのコピーです。
      
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      XMLList オブジェクトの deep コピーを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:XMLListCollection:descendants"><apiName>descendants</apiName><shortdesc>
      XMLList 内の各 XML オブジェクトの descendants() メソッドを呼び出し、その結果を含む XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元の XMLList 内の XML オブジェクトの子孫（子、孫など）のうち、一致する子孫の XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="Object"/><apiData>*</apiData><apiDesc>照合するエレメントの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      XMLList 内の各 XML オブジェクトの <codeph>descendants()</codeph> メソッドを呼び出し、その結果を含む XMLList を返します。 <codeph>name</codeph> パラメーターは、XML オブジェクトの <codeph>descendants()</codeph> メソッドに渡されます。 名前を指定しない場合は、<codeph>descendants()</codeph> メソッドに空のストリング（"~~"）が渡されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/descendants()"><linktext>XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:elements"><apiName>elements</apiName><shortdesc>
      XMLList の各 XML オブジェクトの elements() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元の XMLList 内の XML オブジェクトの子エレメントのうち、一致する子エレメントの XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>*</apiData><apiDesc>照合するエレメントの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      XMLList の各 XML オブジェクトの <codeph>elements()</codeph> メソッドを呼び出します。 <codeph>name</codeph> パラメーターは、XML オブジェクトの <codeph>elements()</codeph> メソッドに渡されます。 名前を指定しない場合は、<codeph>elements()</codeph> メソッドに空のストリング（"~~"）が渡されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/elements()"><linktext>XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:text"><apiName>text</apiName><shortdesc>
     XMLList 内の各 XML オブジェクトの text() メソッドを呼び出し、その結果を含む XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>結果を含む XMLList です。
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
     XMLList 内の各 XML オブジェクトの <codeph>text()</codeph> メソッドを呼び出し、その結果を含む XMLList を返します。
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/text()"><linktext>XML.text()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toString"><apiName>toString</apiName><shortdesc>
      XMLList の各 XML オブジェクトの toString() メソッドを呼び出して、XMLList のストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>XMLList オブジェクトのストリング表現です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      XMLList の各 XML オブジェクトの <codeph>toString()</codeph> メソッドを呼び出して、XMLList のストリング表現を返します。 <codeph>prettyPrinting</codeph> プロパティ（<codeph>XML</codeph> クラス）を <codeph>true</codeph> に設定すると、XMLList 内の各 XML オブジェクトの結果は、改行文字で区切られます。 そうでない場合、<codeph>prettyPrinting</codeph> を <codeph>false</codeph> に設定すると、結果が返されるだけで、改行文字で区切られません。
     
      <p><codeph>toString()</codeph> メソッドでは、単純なコンテンツを持つ XML オブジェクトに返されるストリングから、開始タグ、属性、名前空間宣言および終了タグが削除されます。 単純なコンテンツを持つ XML オブジェクトに対して返されるストリングで上記が削除されないようにするには、<codeph>toXMLString()</codeph> メソッドを使用します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toXMLString"><apiName>toXMLString</apiName><shortdesc>
      XMLList の各 XML オブジェクトの toXMLString() メソッドを呼び出して、XMLList のストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList のストリング表現です。
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      XMLList の各 XML オブジェクトの <codeph>toXMLString()</codeph> メソッドを呼び出して、XMLList のストリング表現を返します。 <codeph>prettyPrinting</codeph> プロパティ（<codeph>XML</codeph> クラス）を <codeph>true</codeph> に設定すると、XMLList 内の各 XML オブジェクトの結果は、改行文字で区切られます。 そうでない場合、<codeph>prettyPrinting</codeph> を <codeph>false</codeph> に設定すると、結果は連結されるだけで、改行文字で区切られません。
     
      <p><codeph>toXMLString()</codeph> メソッドでは、単純なコンテンツを持つ XML オブジェクトに返されるストリングに、開始タグ、属性、名前空間宣言および終了タグが保持されます。 単純なコンテンツを持つ XML オブジェクトに対して返されるストリングで上記を削除するには、<codeph>toString()</codeph> メソッドを使用します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiValue id="mx.collections:XMLListCollection:source:get"><apiName>source</apiName><shortdesc>
      このコレクションの基になる XMLList です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XMLList"/></apiValueDef><apiDesc>
      このコレクションの基になる XMLList です。 XMLListCollection オブジェクトは、元の XMLList オブジェクトに直接加えた変更を表しません。 コレクションを変更するには、常に XMLListCollection メソッドを使用します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IList"><apiName>IList</apiName><shortdesc>
  順序に従って構成されたアイテムのコレクションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  順序に従って構成されたアイテムのコレクションです。 インデックスに基づいたアクセスメソッドおよび操作メソッドを提供します。  
  
  <p><codeph>IList</codeph> は、リモートから取得したデータに対するビューであることがあります。 リモートの可能性があるコレクションを記述する場合は、データがその時点でまだ取得できない場合を想定して処理することが重要です。これには、<codeph>ItemPendingError</codeph> を使用します。</p>
  
  <p><codeph>ICollectionView</codeph> は <codeph>IList</codeph> の代わりです。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ListCollectionView"><linktext>mx.collections.ListCollectionView</linktext></link></related-links><adobeApiEvent id="mx.collections:IList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  IList が何らかの方法で更新されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  IList が何らかの方法で更新されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IList:mx.collections:IList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      指定されたインデックス位置にアイテムを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、またはリストの長さより大きい場合。 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックス位置に配置するアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にアイテムを追加します。 追加したアイテムより大きいインデックスを持つすべてのアイテムのインデックスが 1 ずつ増えます。 指定されたインデックスが 0 未満であるか、またはリストの長さより大きい場合は、RangeError がスローされます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:addItem"><apiName>addItem</apiName><shortdesc>
      指定されたアイテムをリストの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたアイテムをリストの末尾に追加します。 <codeph>addItemAt(item, length)</codeph> と同等です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>そのインデックスのデータをリモートからロードする必要がある場合。
     
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>index &lt; 0</codeph> または <codeph>index >= length</codeph> の場合。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>そのインデックス位置にあるアイテムです。アイテムがない場合は <codeph>null</codeph> です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>アイテムがローカルでない場合に要求時に取得するアイテムの方向と量を示す <codeph>int</codeph> 値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるアイテムを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムのインデックスです。アイテムがリスト内にない場合は -1 です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索するアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。
     
      <p>メモ：<codeph>IViewCursor.find<i>xxx</i>()</codeph> メソッドとは異なり、<codeph>getItemIndex()</codeph> メソッドは、検索対象のアイテムに含まれるフィールドのサブセットのみをパラメーターとして渡すことはできません。このメソッドは常に、入力パラメーターに完全に一致するアイテムを検索します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      アイテムが更新されたビューを通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビュー内のアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムが更新されたビューを通知します。 これは、ビューの内容が <codeph>IEventDispatcher</codeph> を実装せず、<codeph>PropertyChangeEvent</codeph> を送出する場合に便利です。 プロパティを指定すると、ビューは通知メカニズムを最適化できます。 プロパティを指定しないと、ビュー全体の単純な更新が選択されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      リストからすべてのアイテムを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      リストからすべてのアイテムを削除します。
     
      <p>アイテムがローカルではなく、非同期処理を実行する必要がある場合は、<codeph>ItemPendingError</codeph> がスローされます。</p>
     
      <p><codeph>ItemPendingError</codeph> の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      指定されたインデックス位置にあるアイテムを削除し、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さより大きい場合。 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたアイテムです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムが削除されるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるアイテムを削除し、返します。 このインデックスより後にあったアイテムは、インデックスが 1 つずつ前になります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      指定されたインデックス位置にアイテムを配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、または長さより大きい場合。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>置き換えられたアイテムです。アイテムがない場合は <codeph>null</codeph> です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>指定されたインデックス位置に配置される新しいアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にアイテムを配置します。 アイテムが既にそのインデックス位置にある場合は、新しいアイテムに置き換えられ、インデックス位置にあったアイテムが返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:toArray"><apiName>toArray</apiName><shortdesc>
      IList 実装と同じ順序で指定された配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>リモートからのデータのロードがまだ完了していない場合。
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      IList 実装と同じ順序で指定された配列を返します。 このメソッドでは、ItemPendingError がスローされることがあります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:IList:mx.collections:IList:length:get"><apiName>length</apiName><shortdesc>
      コレクション内のアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      コレクション内のアイテムの数です。 0 はアイテムがないことを意味し、-1 は長さが不明であることを意味します。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
 ListCollectionView クラスでは、ICollectionView インターフェイスのプロパティとメソッドが IList インターフェイスに適合するオブジェクトに追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ListCollectionView&gt;</code> has the following attributes,
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:ListCollectionView
  <b>Properties</b>
  filterFunction="null"
  list="null"
  sort="null"
  <b>Events</b>
  collectionChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ICollectionView</apiBaseInterface><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier></apiClassifierDef><apiDesc>
 ListCollectionView クラスでは、<codeph>ICollectionView</codeph> インターフェイスのプロパティとメソッドが <codeph>IList</codeph> インターフェイスに適合するオブジェクトに追加されます。 したがって、<codeph>IList</codeph> または <codeph>ICollectionView</codeph> を必要とするものに、このクラスのオブジェクトを渡すことができます。
 
 <p>また、このクラスによって、[] 配列表記を使用して <codeph>getItemAt()</codeph> メソッドおよび <codeph>setItemAt()</codeph> メソッドにアクセスすることもできます。 <codeph>myListCollectionView[index]</codeph> のようなコードを使用すると、<codeph>myListCollectionView</codeph> オブジェクトの <codeph>getItemAt()</codeph> メソッドまたは <codeph>setItemAt()</codeph> メソッドが呼び出されます。</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ListCollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  ICollectionView が何らかの方法で更新されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ICollectionView が何らかの方法で更新されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ListCollectionView:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
      ListCollectionView コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>この ListCollectionView がラップする IList です。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      ListCollectionView コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ListCollectionView:addAllAt"><apiName>addAllAt</apiName><shortdesc>
      アイテムのリストを現在のリストに追加し、関数に渡されるインデックス位置に配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが 0 未満であるか、またはリストの長さより大きい場合。 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>現在のリストに追加するアイテムのリストです。
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新しいアイテムを追加する、現在のリストの位置です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムのリストを現在のリストに追加し、関数に渡されるインデックス位置に配置します。アイテムはインデックス位置に、返される順序で配置されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addAll"><apiName>addAll</apiName><shortdesc>
      アイテムのリストを現在のリストに追加し、渡される順序でリストの末尾に配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>現在のリストに追加するアイテムのリストです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムのリストを現在のリストに追加し、渡される順序でリストの末尾に配置します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addEventListener"><apiName>addEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
     
      指定されたインデックス位置にアイテムを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>インデックス位置に配置するアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      指定されたインデックス位置にアイテムを追加します。 追加したアイテムより大きいインデックスを持つすべてのアイテムのインデックスが 1 ずつ増えます。 指定されたインデックスが 0 未満であるか、またはリストの長さより大きい場合は、RangeError がスローされます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItem"><apiName>addItem</apiName><shortdesc>
     
      指定されたアイテムをリストの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>追加するアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      指定されたアイテムをリストの末尾に追加します。 <codeph>addItemAt(item, length)</codeph> と同等です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:contains"><apiName>contains</apiName><shortdesc>
      
      指定されたオブジェクトをビューに含めるかどうかを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>任意のフィルターを適用した後、ICollectionView にアイテムが含まれている場合は true を返します。それ以外の場合は、false を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索対象のオブジェクトです。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたオブジェクトをビューに含めるかどうかを返します。 <codeph>IViewCursor.find<i>xxx</i></codeph> メソッドの場合とは異なり、この検索が成功するのは、パラメーターに完全に一致するアイテムが見つかったときのみです。 ビューにフィルターが適用されている場合、このメソッドは、基になるコレクションにアイテムが含まれている場合でも <codeph>false</codeph> を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ListCollectionView/enableAutoUpdate()"><linktext>enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      
      このビューに対して使用する新しい IViewCursor を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しい IViewCursor 実装です。
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      このビューに対して使用する新しい IViewCursor を作成します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      
      コレクション自体およびコレクション内のアイテムの変更がビューから送出されないようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      コレクション自体およびコレクション内のアイテムの変更がビューから送出されないようにします。 また、コレクション内で位置が変更された場合、ビュー内のアイテムの位置が更新されないようにします。 <codeph>enableAutoUpdate</codeph> が呼び出された後、変更は適切にキューに入れられ、送出されます。 単一のアイテムに対して更新よりも多くのイベントが発生した場合は、ビューがリセットされることがあります。 <codeph>disableAutoUpdate</codeph> メソッドは累積的に動作します。ビューからイベントが送出され、ビューが更新されるには、<codeph>enableAutoUpdate</codeph> が同じ回数呼び出される必要があります。 <codeph>disableAutoUpdate</codeph> は個々のビューでのみ有効であるため、編集は他のビューによって個別に検出されます。
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/enableAutoUpdate()"><linktext>mx.collections.ICollectionView.enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      
      自動更新を有効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      自動更新を有効にします。 詳細については、<codeph>disableAutoUpdate</codeph> を参照してください。
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>mx.collections.ICollectionView.disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
     
      指定されたインデックス位置にあるアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>そのインデックス位置にあるアイテムです。アイテムがない場合は <codeph>null</codeph> です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを取得するリストのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>アイテムがローカルでない場合に要求時に取得するアイテムの方向と量を示す <codeph>int</codeph> 値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      指定されたインデックス位置にあるアイテムを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
     
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムのインデックスです。アイテムがリスト内にない場合は -1 です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索するアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      リスト内の、getItemAt(index) == アイテムとなるアイテムのインデックスを返します。
     
      <p>メモ：<codeph>IViewCursor.find<i>xxx</i>()</codeph> メソッドとは異なり、<codeph>getItemIndex()</codeph> メソッドは、検索対象のアイテムに含まれるフィールドのサブセットのみをパラメーターとして渡すことはできません。このメソッドは常に、入力パラメーターに完全に一致するアイテムを検索します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:initialized"><apiName>initialized</apiName><shortdesc>
       MXML タグを使用して ListCollectionView を作成したときに、MXML コンパイラーによって自動的に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>この ListCollectionView を含む MXML ドキュメントです。
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>無視されます。
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       MXML タグを使用して ListCollectionView を作成したときに、MXML コンパイラーによって自動的に呼び出されます。 ActionScript を介して ListCollectionView を作成する場合は、このメソッドを呼び出して、MXML ドキュメントおよび <codeph>null</codeph>（<codeph>id</codeph> について）を渡す必要があります。
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      アイテムが更新されたビューを通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビュー内のアイテムです。
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティの名前です。
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      アイテムが更新されたビューを通知します。 このメソッドは、ビューのコンテンツが <codeph>IPropertyChangeNotifier</codeph> を実装しない場合に便利です。 このメソッドの呼び出しに <codeph>property</codeph> パラメーターが含まれている場合、ビューは通知メカニズムを最適化できることがあります。 プロパティを指定しないと、ビュー全体の単純な更新が選択されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:refresh"><apiName>refresh</apiName><shortdesc>
     
      ビューにソートとフィルターを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>refresh() が完了した場合は <codeph>true</codeph>、refresh() が完了していない場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      ビューにソートとフィルターを適用します。 ICollectionView は、ソートまたはフィルターの変更を自動検出しません。したがって、<codeph>refresh()</codeph> メソッドを呼び出してビューを更新する前に、<codeph>sort</codeph> プロパティまたは <codeph>filterFunction</codeph> プロパティを設定する必要があります。 ICollectionView が IMXMLObject インターフェイスも実装する場合は、<codeph>refresh()</codeph> メソッドを <codeph>initialized()</codeph> メソッドから呼び出す必要があります。
	 
      <p>更新が正常に完了した場合は <codeph>true</codeph> を返し、ソートが完了していない場合（アイテムが保留中の場合など）は <codeph>false</codeph> を返します。 ビューのクライアントは、<codeph>CollectionEventKind.REFRESH</codeph> <codeph>kind</codeph> プロパティを含む CollectionEvent イベントを待機して、<codeph>refresh()</codeph> 操作が完了したことを確認する必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeAll"><apiName>removeAll</apiName><shortdesc>
     リストからすべてのアイテムを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     リストからすべてのアイテムを削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
     
      指定されたインデックス位置にあるアイテムを削除し、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除されたアイテムです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムが削除されるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      指定されたインデックス位置にあるアイテムを削除し、返します。 このインデックスより後にあったアイテムは、インデックスが 1 つずつ前になります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
     
      指定されたインデックス位置にアイテムを配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>置き換えられたアイテムです。アイテムがない場合は <codeph>null</codeph> です。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>指定されたインデックス位置に配置される新しいアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>アイテムを配置するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      指定されたインデックス位置にアイテムを配置します。 アイテムが既にそのインデックス位置にある場合は、新しいアイテムに置き換えられ、インデックス位置にあったアイテムが返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toArray"><apiName>toArray</apiName><shortdesc>
     
      IList 実装と同じ順序で指定された配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
     
      IList 実装と同じ順序で指定された配列を返します。 このメソッドでは、ItemPendingError がスローされることがあります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toString"><apiName>toString</apiName><shortdesc>
      このビューのコンテンツをストリングにプリントし、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このビューのストリング形式のコンテンツです。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      このビューのコンテンツをストリングにプリントし、返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:willTrigger"><apiName>willTrigger</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.collections:ListCollectionView:protected:localIndex"><apiName>localIndex</apiName><shortdesc>
      ビューにソートまたはフィルターを適用すると、ソートによりアイテムの順序が変更されたか、またはフィルターによりアイテム数が減ったビューに含まれるアイテムの配列が localIndex プロパティにソート順に入れられます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      ビューにソートまたはフィルターを適用すると、ソートによりアイテムの順序が変更されたか、またはフィルターによりアイテム数が減ったビューに含まれるアイテムの配列が <codeph>localIndex</codeph> プロパティにソート順に入れられます。 ListCollectionView クラスはこのプロパティを使用して、ビュー内のアイテムにアクセスします。 <codeph>localIndex</codeph> プロパティには、ソースにないものは含まれませんが、ソースにあるすべてのものが含まれるとは限りません。 ソートが実行されない場合、このプロパティは <codeph>null</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      
      関数の条件に一致しないアイテムを削除するためにビューが使用する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="filterFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      関数の条件に一致しないアイテムを削除するためにビューが使用する関数です。 filterFunction のシグネチャは次のとおりになると予想されます。
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  指定されたアイテムがビューに残っている場合、戻り値は <codeph>true</codeph> です。
	 
      <p>フィルターがサポートされない場合、このプロパティにアクセスするとエラーがスローされます。 <codeph>refresh()</codeph> を呼び出す前に、更新するビューについて <codeph>filterFunction</codeph> プロパティを設定する必要があります。</p>
	 
 	  <p>メモ：ICollectionView の実装では、フィルター関数を実行する前にリモートからすべてのアイテムを取得します。 ページングを使用している場合は、データを取得する前にリモートコレクションにフィルターを適用します。</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ListCollectionView:length:get"><apiName>length</apiName><shortdesc>
      
      このビュー内のアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このビュー内のアイテムの数です。 0 はアイテムがないことを意味し、-1 は長さが不明であることを意味します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:list:get"><apiName>list</apiName><shortdesc>
      このコレクションビューがラップする IList です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier></apiValueDef><apiDesc>
      このコレクションビューがラップする IList です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      
      ICollectionView に適用される ISort です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      
      ICollectionView に適用される ISort です。ソートを設定してもビューは自動的に更新されないため、このプロパティを設定した後で <codeph>refresh()</codeph> メソッドを呼び出す必要があります。 ソートがサポートされていない場合、このプロパティにアクセスするとエラーがスローされます。
	 
	  <p>メモ：ICollectionView の実装では、ソートを実行する前にリモートからすべてのアイテムを取得します。 ソートされたリストにページングを使用している場合は、データを取得する前にリモートコレクションにソートを適用します。</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ICollectionView"><apiName>ICollectionView</apiName><shortdesc>
  ICollectionView は、データのコレクションに対するビューです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  <codeph>ICollectionView</codeph> は、データのコレクションに対するビューです。 このビューは、様々な条件でソートされたデータ、またはフィルターで絞り込まれたデータを表示するように変更できます。基になるデータは変更されません。 IViewCursor はコレクション内のアイテムへのアクセスを提供します。 IViewCursor インターフェイスの <codeph>insert()</codeph> メソッドおよび <codeph>remove()</codeph> メソッドを使用するとコレクションを変更できます。
 
  <p><codeph>ICollectionView</codeph> は、リモートから取得したデータに対するビューである可能性があります。 リモートの可能性があるデータでこのインターフェイスを実装する場合は、<codeph>ItemPendingError</codeph> で示される、データを取得できない場合を処理することが重要です。</p>
 
  <p><codeph>IList</codeph> インターフェイスは <codeph>ICollectionView</codeph> インターフェイスの代わりになります。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor"><linktext>mx.collections.IViewCursor</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link></related-links><adobeApiEvent id="mx.collections:ICollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  ICollectionView が何らかの方法で更新されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ICollectionView が何らかの方法で更新されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:contains"><apiName>contains</apiName><shortdesc>
      指定されたオブジェクトをビューに含めるかどうかを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>任意のフィルターを適用した後、ICollectionView にアイテムが含まれている場合は true を返します。それ以外の場合は、false を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>検索対象のオブジェクトです。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたオブジェクトをビューに含めるかどうかを返します。 <codeph>IViewCursor.find<i>xxx</i></codeph> メソッドの場合とは異なり、この検索が成功するのは、パラメーターに完全に一致するアイテムが見つかったときのみです。 ビューにフィルターが適用されている場合、このメソッドは、基になるコレクションにアイテムが含まれている場合でも <codeph>false</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      このビューに対して使用する新しい IViewCursor を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しい IViewCursor 実装です。
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      このビューに対して使用する新しい IViewCursor を作成します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      コレクション自体およびコレクション内のアイテムの変更がビューから送出されないようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コレクション自体およびコレクション内のアイテムの変更がビューから送出されないようにします。 また、コレクション内で位置が変更された場合、ビュー内のアイテムの位置が更新されないようにします。 <codeph>enableAutoUpdate</codeph> が呼び出された後、変更は適切にキューに入れられ、送出されます。 単一のアイテムに対して更新よりも多くのイベントが発生した場合は、ビューがリセットされることがあります。 <codeph>disableAutoUpdate</codeph> メソッドは累積的に動作します。ビューからイベントが送出され、ビューが更新されるには、<codeph>enableAutoUpdate</codeph> が同じ回数呼び出される必要があります。 <codeph>disableAutoUpdate</codeph> は個々のビューでのみ有効であるため、編集は他のビューによって個別に検出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      自動更新を有効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      自動更新を有効にします。 詳細については、<codeph>disableAutoUpdate</codeph> を参照してください。
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      アイテムが更新されたビューを通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>更新されたビュー内のアイテムです。
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更新されたプロパティの名前です。
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの古い値です。 プロパティが null の場合はアイテムの古い値を指定できます。
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>そのプロパティの新しい値です。 プロパティが null の場合、アイテムは新しい値と見なされるので、指定する必要はありません。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムが更新されたビューを通知します。 このメソッドは、ビューのコンテンツが <codeph>IPropertyChangeNotifier</codeph> を実装しない場合に便利です。 このメソッドの呼び出しに <codeph>property</codeph> パラメーターが含まれている場合、ビューは通知メカニズムを最適化できることがあります。 プロパティを指定しないと、ビュー全体の単純な更新が選択されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:refresh"><apiName>refresh</apiName><shortdesc>
      ビューにソートとフィルターを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>refresh() が完了した場合は <codeph>true</codeph>、refresh() が完了していない場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      ビューにソートとフィルターを適用します。 ICollectionView は、ソートまたはフィルターの変更を自動検出しません。したがって、<codeph>refresh()</codeph> メソッドを呼び出してビューを更新する前に、<codeph>sort</codeph> プロパティまたは <codeph>filterFunction</codeph> プロパティを設定する必要があります。 ICollectionView が IMXMLObject インターフェイスも実装する場合は、<codeph>refresh()</codeph> メソッドを <codeph>initialized()</codeph> メソッドから呼び出す必要があります。
	 
      <p>更新が正常に完了した場合は <codeph>true</codeph> を返し、ソートが完了していない場合（アイテムが保留中の場合など）は <codeph>false</codeph> を返します。 ビューのクライアントは、<codeph>CollectionEventKind.REFRESH</codeph> <codeph>kind</codeph> プロパティを含む CollectionEvent イベントを待機して、<codeph>refresh()</codeph> 操作が完了したことを確認する必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      関数の条件に一致しないアイテムを削除するためにビューが使用する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      関数の条件に一致しないアイテムを削除するためにビューが使用する関数です。 filterFunction のシグネチャは次のとおりになると予想されます。
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  指定されたアイテムがビューに残っている場合、戻り値は <codeph>true</codeph> です。
	 
      <p>フィルターがサポートされない場合、このプロパティにアクセスするとエラーがスローされます。 <codeph>refresh()</codeph> を呼び出す前に、更新するビューについて <codeph>filterFunction</codeph> プロパティを設定する必要があります。</p>
	 
 	  <p>メモ：ICollectionView の実装では、フィルター関数を実行する前にリモートからすべてのアイテムを取得します。 ページングを使用している場合は、データを取得する前にリモートコレクションにフィルターを適用します。</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:length:get"><apiName>length</apiName><shortdesc>
      このビュー内のアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このビュー内のアイテムの数です。 0 はアイテムがないことを意味し、-1 は長さが不明であることを意味します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      ICollectionView に適用される ISort です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      ICollectionView に適用される ISort です。ソートを設定してもビューは自動的に更新されないため、このプロパティを設定した後で <codeph>refresh()</codeph> メソッドを呼び出す必要があります。 ソートがサポートされていない場合、このプロパティにアクセスするとエラーがスローされます。
	 
	  <p>メモ：ICollectionView の実装では、ソートを実行する前にリモートからすべてのアイテムを取得します。 ソートされたリストにページングを使用している場合は、データを取得する前にリモートコレクションにソートを適用します。</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
  ICollectionView 内のカーソルの位置要素をカプセル化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>ICollectionView</codeph> 内のカーソルの位置要素をカプセル化します。 ブックマークを使用してカーソルを <codeph>ICollectionView</codeph> 内の絶対位置に返します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor/bookmark"><linktext>mx.collections.IViewCursor.bookmark</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>mx.collections.IViewCursor.seek()</linktext></link></related-links><apiConstructor id="mx.collections:CursorBookmark:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
      指定された値を使用して、ブックマークの新しいインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>このブックマークの値です。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      指定された値を使用して、ブックマークの新しいインスタンスを作成します。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:CursorBookmark:getViewIndex"><apiName>getViewIndex</apiName><shortdesc>
      ビュー内でこのブックマークが表すアイテムの近似インデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムのインデックスです。アイテムが現在のビューにない場合、このメソッドは -1 を返します。このメソッドでは、インデックスベースの位置が有効でない場合も -1 が返されます。
      
      </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
      ビュー内でこのブックマークが表すアイテムの近似インデックスを取得します。アイテムがページアウトされている場合は、ItemPendingError がスローされることがあります。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:CursorBookmark:CURRENT:get"><apiName>CURRENT</apiName><shortdesc>
      ICollectionView 内の IViewCursor の現在のアイテムを表すブックマークです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>IViewCursor</codeph>（<codeph>ICollectionView</codeph> 内）の現在のアイテムを表すブックマークです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:FIRST:get"><apiName>FIRST</apiName><shortdesc>
      ICollectionView 内の最初のアイテムのブックマークです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>ICollectionView</codeph> 内の最初のアイテムのブックマークです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:LAST:get"><apiName>LAST</apiName><shortdesc>
      ICollectionView 内の最後のアイテムのブックマークです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>ICollectionView</codeph> 内の最後のアイテムのブックマークです。 ビューにアイテムがない場合、カーソルはこのブックマークに移動されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:value:get"><apiName>value</apiName><shortdesc>
      ブックマークの基になるマーカーを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      ブックマークの基になるマーカーを示します。 通常、この値は <codeph>IViewCursor</codeph> または <codeph>ICollectionView</codeph> 実装によってのみ解釈されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IViewCursor"><apiName>IViewCursor</apiName><shortdesc>
  コレクションビューを双方向に列挙するためのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  コレクションビューを双方向に列挙するためのインターフェイスを定義します。 このカーソルによって、検索、シーク、およびブックマークの各機能、および挿入と削除による変更機能が利用できます。 カーソルが最初にビューから取得されると（通常は ICollectionView <codeph>createCursor()</codeph> メソッドを使用）、ビューが空でない限り、<codeph>current</codeph> プロパティの値はビューの最初のアイテムになります。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:IViewCursor_mx.events.FlexEvent.CURSOR_UPDATE_cursorUpdate"><apiName>cursorUpdate</apiName><shortdesc>
  カーソルの位置が更新されると常に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CURSOR_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  カーソルの位置が更新されると常に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findAny"><apiName>findAny</apiName><shortdesc>
      コレクション内で指定されたプロパティを持つアイテムを探し、そのアイテムにカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>すべてのデータがローカルの場合、このメソッドは、アイテムが見つかる場合は <codeph>true</codeph> を返し、見つからない場合は <codeph>false</codeph> を返します。  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>検索条件です。オブジェクトの値は、結合配列 (検索する実際のオブジェクト) のように、名前と値のペアとして設定する必要があります。指定した名前の値は、ソートで指定したプロパティと一致する必要があります。 例えば、プロパティ <codeph>x</codeph>、<codeph>y</codeph>、および <codeph>z</codeph> が現在のソートに含まれている場合、値は <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> に指定する必要があります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コレクション内で指定されたプロパティを持つアイテムを探し、そのアイテムにカーソルを移動します。 アイテムが見つからない場合は、カーソル位置は変更されません。
     
      <p><codeph>findAny()</codeph> メソッドは、ソートされたビューに対してのみ呼び出せます。ビューがソートされていない場合は、<codeph>CursorError</codeph> がスローされます。</p>
      
      <p>関連付けられたコレクションがリモートで、すべてのアイテムがローカルにキャッシュされているわけではない場合、このメソッドはリモートコレクションから非同期取得を開始します。 処理中の取得要求が存在する場合、このメソッドはその要求の処理が完了するまで待機してから、別の取得要求を送信します。</p>
     
      <p>複数のアイテムが検索条件に一致する場合は、検索されたアイテムは非決定的です。 一意ではないインデックス内で最初のアイテムまたは最後のアイテムを検索する場合は、<codeph>findFirst()</codeph> メソッドまたは <codeph>findLast()</codeph> メソッドを使用します。</p>
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findFirst"><apiName>findFirst</apiName><shortdesc>
      コレクション内で指定されたプロパティを持つ最初のアイテムを探し、そのアイテムにカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>すべてのデータがローカルの場合、このメソッドは、アイテムが見つかる場合は <codeph>true</codeph> を返し、見つからない場合は <codeph>false</codeph> を返します。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>検索条件です。オブジェクトの値は、結合配列 (検索する実際のオブジェクト) のように、名前と値のペアとして設定する必要があります。指定した名前の値は、ソートで指定したプロパティと一致する必要があります。 例えば、プロパティ <codeph>x</codeph>、<codeph>y</codeph>、および <codeph>z</codeph> が現在のソートに含まれている場合、値は <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> に指定する必要があります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コレクション内で指定されたプロパティを持つ最初のアイテムを探し、そのアイテムにカーソルを移動します。 アイテムが見つからない場合は、カーソル位置は変更されません。
     
      <p><codeph>findFirst()</codeph> メソッドは、ソートされたビューに対してのみ呼び出せます。ビューがソートされていない場合は、<codeph>CursorError</codeph> がスローされます。</p>
      
      <p>関連付けられたコレクションがリモートで、すべてのアイテムがローカルにキャッシュされているわけではない場合、このメソッドはリモートコレクションから非同期取得を開始します。 処理中の取得要求が存在する場合、このメソッドはその要求の処理が完了するまで待機してから、別の取得要求を送信します。</p>
     
      <p>一意ではないインデックス内で、検索されるのが最初のアイテムでなくてもかまわない場合は、<codeph>findAny()</codeph> を使用すると、<codeph>findFirst()</codeph> メソッドより若干速く処理できます。</p>
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findLast"><apiName>findLast</apiName><shortdesc>
      コレクション内で指定されたプロパティを持つ最後のアイテムを探し、そのアイテムにカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>すべてのデータがローカルの場合、このメソッドは、アイテムが見つかる場合は <codeph>true</codeph> を返し、見つからない場合は <codeph>false</codeph> を返します。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>検索条件です。オブジェクトの値は、結合配列 (検索する実際のオブジェクト) のように、名前と値のペアとして設定する必要があります。指定した名前の値は、ソートで指定したプロパティと一致する必要があります。 例えば、プロパティ <codeph>x</codeph>、<codeph>y</codeph>、および <codeph>z</codeph> が現在のソートに含まれている場合、値は <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> に指定する必要があります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コレクション内で指定されたプロパティを持つ最後のアイテムを探し、そのアイテムにカーソルを移動します。 アイテムが見つからない場合は、カーソル位置は変更されません。
     
      <p><codeph>findLast()</codeph> メソッドは、ソートされたビューに対してのみ呼び出せます。ビューがソートされていない場合は、<codeph>CursorError</codeph> がスローされます。</p>
      
      <p>関連付けられたコレクションがリモートで、すべてのアイテムがローカルにキャッシュされているわけではない場合、このメソッドはリモートコレクションから非同期取得を開始します。 処理中の取得要求が存在する場合、このメソッドはその要求の処理が完了するまで待機してから、別の取得要求を送信します。</p>
     
      <p>一意ではないインデックス内で、検索されるのが最後のアイテムでなくてもかまわない場合は、<codeph>findAny()</codeph> を使用すると、若干速く処理できます。</p>
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:insert"><apiName>insert</apiName><shortdesc>
      現在のカーソル位置の前に指定したアイテムを挿入します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>現在のカーソル位置の前に挿入するアイテムです。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      現在のカーソル位置の前に指定したアイテムを挿入します。 カーソルが <codeph>afterLast</codeph> の場合、アイテムはビューの末尾に挿入されます。 空ではないビューでカーソルが <codeph>beforeFirst</codeph> の場合は、エラーがスローされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:moveNext"><apiName>moveNext</apiName><shortdesc>
      コレクション内の次のアイテムにカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>まだリスト内の場合は <codeph>true</codeph> になります。<codeph>false</codeph> になるのは、<codeph>current</codeph> の最初の値または現在の値が <codeph>afterLast</codeph> の場合です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      コレクション内の次のアイテムにカーソルを移動します。 移動すると、<codeph>current</codeph> プロパティが更新され、この新しい位置にあるオブジェクトが参照されます。 <codeph>true</codeph> を返すのは、結果の <codeph>current</codeph> プロパティが有効な場合、<codeph>false</codeph> を返すのは、有効でない場合です（プロパティの値が <codeph>afterLast</codeph> の場合）。
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。 ItemPendingError の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
     
      </apiDesc><example>
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      while (!cursor.afterLast)
      {
          trace(cursor.current);
          cursor.moveNext();
      }
      </pre>
      
      </example></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>現在</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:movePrevious"><apiName>movePrevious</apiName><shortdesc>
      コレクション内の前のアイテムにカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>まだリスト内の場合は <codeph>true</codeph> になります。<codeph>false</codeph> になるのは、<codeph>current</codeph> の最初の値または現在の値が <codeph>beforeFirst</codeph> の場合です。次に実際の使用例を示します。
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      cursor.seek(CursorBookmark.last);
      while (!cursor.beforeFirst)
      {
          trace(current);
          cursor.movePrevious();
      }
      </pre>
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      コレクション内の前のアイテムにカーソルを移動します。 移動すると、<codeph>current</codeph> プロパティが更新され、この新しい位置にあるオブジェクトが参照されます。 <codeph>true</codeph> を返すのは、結果の <codeph>current</codeph> プロパティが有効な場合、<codeph>false</codeph> を返すのは、有効でない場合です（プロパティの値が <codeph>beforeFirst</codeph> の場合）。
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。 ItemPendingError の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>現在</linktext></link><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:remove"><apiName>remove</apiName><shortdesc>
      現在のアイテムを削除し、その現在のアイテムを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除されたアイテムです。
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      現在のアイテムを削除し、その現在のアイテムを返します。 カーソルの位置が <codeph>beforeFirst</codeph> または <codeph>afterLast</codeph> の場合、CursorError をスローします。 最後のアイテム以外のアイテムを削除する場合、カーソルは次のアイテムに移動します。 最後のアイテムを削除すると、カーソルは AFTER_LAST ブックマークに置かれます。
      
      <p>削除されたアイテムの次のアイテムがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。 ItemPendingError の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:seek"><apiName>seek</apiName><shortdesc>
      指定されたブックマークから離れたオフセット位置にカーソルを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bookmark</apiItemName><apiOperationClassifier>mx.collections:CursorBookmark</apiOperationClassifier><apiDesc>特定の位置に再配置できるマーカー情報への <codeph>CursorBookmark</codeph> 参照です。 このパラメーターには、<codeph>bookmark</codeph> プロパティから返された値を設定することも、次のいずれかのブックマーク定数値を設定することもできます。
      <ul>
        <li><codeph>CursorBookmark.FIRST</codeph> は、コレクションの先頭（最初のエレメント）からシークします。</li>
        <li><codeph>CursorBookmark.CURRENT</codeph> は、コレクションの現在の位置からシークします。</li>
        <li><codeph>CursorBookmark.LAST</codeph> は、コレクションの末尾（最後のエレメント）からシークします。</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>指定されたブックマークからシークする距離を示します。 負の数を指定すると、カーソルは指定のブックマークより手前の位置への移動を試みます。 指定されたオフセットがコレクションの末尾を越える場合、カーソルはコレクションの末尾から離れて、<codeph>beforeFirst</codeph> または <codeph>afterLast</codeph> の位置に配置されます。
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>リモートデータに使用されます。 シーク処理が完了した後、特定の方向に繰り返し処理を実行することを示します。 これにより、シーク時に必要なネットワークラウンドトリップ回数が減少します。 要求時に反復方向がわかっている場合は、要求の前に適切な量のデータが返され、要求の繰り返し処理を実行できます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたブックマークから離れたオフセット位置にカーソルを移動します。 負のオフセットを指定することもできます。この場合カーソルは、指定されたブックマークより、<codeph>offset</codeph> に指定したアイテム数だけ手前の位置に配置されます。
     
      <p>関連付けられたコレクションがリモートで、すべてのアイテムがローカルでキャッシュされているわけではない場合、このメソッドはリモートコレクションから非同期取得を開始します。</p>
     
      <p>データがローカルではなく、非同期処理を実行する必要がある場合は、ItemPendingError がスローされます。 ItemPendingError の使用の詳細については、ItemPendingError およびコレクションの説明を参照してください。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:afterLast:get"><apiName>afterLast</apiName><shortdesc>
      カーソルがビュー内の最後のアイテムの後にある場合、このプロパティは true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      カーソルがビュー内の最後のアイテムの後にある場合、このプロパティは <codeph>true</codeph> になります。 ICollectionView が空（長さ == 0）の場合、このプロパティは <codeph>true</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:beforeFirst:get"><apiName>beforeFirst</apiName><shortdesc>
      カーソルがビュー内の最初のアイテムの前にある場合、このプロパティは true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      カーソルがビュー内の最初のアイテムの前にある場合、このプロパティは <codeph>true</codeph> になります。 ICollectionView が空（長さ == 0）の場合、このプロパティは <codeph>true</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:bookmark:get"><apiName>bookmark</apiName><shortdesc>
      current プロパティが返したアイテムに対応するブックマークにアクセスできるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>current</codeph> プロパティが返したアイテムに対応するブックマークにアクセスできるようにします。 ブックマークを使用して、前にアクセスしたアイテム、またはそのアイテムと相対的な位置にカーソルを移動できます。 詳細については、<codeph>seek()</codeph> メソッドを参照してください。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>現在</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:current:get"><apiName>current</apiName><shortdesc>
      ソースコレクション内でこのカーソルが参照する位置にあるオブジェクトにアクセスできるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      ソースコレクション内でこのカーソルが参照する位置にあるオブジェクトにアクセスできるようにします。 カーソルがコレクションの末尾（<codeph>beforeFirst</codeph>、<codeph>afterLast</codeph>)を越えた場所にある場合、<codeph>null</codeph> を返します。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link><link href="mx.collections.xml#IViewCursor/beforeFirst"><linktext>beforeFirst</linktext></link><link href="mx.collections.xml#IViewCursor/afterLast"><linktext>afterLast</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:view:get"><apiName>view</apiName><shortdesc>
      このカーソルと関連付けられた ICollectionView への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      このカーソルと関連付けられた ICollectionView への参照です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>