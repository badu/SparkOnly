<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.containers"><apiName>mx.containers</apiName><apiDetail/><apiClassifier id="mx.containers:Canvas"><apiName>Canvas</apiName><shortdesc>
  Halo Canvas レイアウトコンテナは、子のコンテナおよびコントロールを配置する矩形領域を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingRight"/><Exclude kind="style" name="paddingLeft"/><Exclude kind="style" name="paddingBottom"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Canvas" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Canvas" replacement="spark.components.Group" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Canvas&gt;</code> tag inherits all the tag attributes
  of its superclass. Use the following syntax:</p>
 
  <p>
  <pre>
  &lt;mx:Canvas&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Canvas&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo Canvas レイアウトコンテナは、子のコンテナおよびコントロールを配置する矩形領域を定義します。このコンテナは、その内部における子の位置を、各子の <codeph>x</codeph> および<codeph>y</codeph> プロパティを使用して明示的に指定できる唯一のコンテナです。
 
  <p><b>メモ：</b> 可能な場合は、Halo Canvas コンテナではなく、Spark コンテナを BasicLayout と共に使用することをお勧めします。</p>
 
  <p>Canvas レイアウトコンテナの子は、それぞれの推奨されている幅および高さに設定されます。 子の <codeph>width</codeph> プロパティを固定ピクセル値またはコンテナサイズのパーセント値に設定することにより、その子の推奨幅の値をオーバーライドできます。 推奨高さも同様の方法で設定できます。</p>
 
  <p>Canvas コンテナ内でパーセントによるサイズ指定を使用している場合、コンポーネントの一部が重複します。 これが必要な効果でない場合は、コンポーネントの位置とサイズを慎重に計画してください。</p>
 
  <p>Canvas コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>すべての子をデフォルトサイズで保持するのに十分な大きさです。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、および right の各値が 0 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleCanvasExample.mxml"><swfblock conref="examples/SimpleCanvasExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Canvas:Canvas"><apiName>Canvas</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Canvas:protected:measure"><apiName>measure</apiName><shortdesc>
      Canvas の推奨最小および推奨最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Canvas の推奨最小および推奨最大サイズを計算します。
     
      <p>Canvas の <codeph>measuredWidth</codeph> は、すべての子を、切り取ることなくそれぞれの推奨幅で表示できる最小の大きさです。 この <codeph>measure()</codeph> メソッドは、右端の子の位置を計算し、その子の右端の位置を計算してから、Canvas コンテナの境界線の幅の領域および右のパディングを追加します。 <codeph>measuredHeight</codeph> も同様に計算されます。</p>
     
      <p>Canvas コンテナの <codeph>minWidth</codeph> および <codeph>minHeight</codeph> プロパティは計算されません。したがってデフォルト値の 0 が使用されます。</p>
     
      <p>Canvas コンテナの <codeph>maxWidth</codeph> および <codeph>maxHeight</codeph> プロパティは計算されません。 コンテナの最大幅と最大高さは無限であると想定されます。</p>
     
      <p>前述の値はすべて、Canvas の<i>計算された</i>幅と高さです。 以下のプロパティの値を明示的に指定することにより、計算された値をオーバーライドできます。</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p>このメソッドを直接呼び出すことは避けてください。 Flex LayoutManager が適切なタイミングで呼び出します。 Flex LayoutManager は、アプリケーションの起動時に、子から親に至るすべてのコンポーネントを測定してから、それぞれに最終的なサイズを設定しようとします。</p>
     
      <p>これは、サブクラスの処理で使用する高度なメソッドです。 このメソッドをオーバーライドする場合は、実装で <codeph>super.measure()</codeph> メソッドを呼び出すか、または <codeph>measuredHeight</codeph> および <codeph>measuredWidth</codeph> プロパティを設定する必要があります。 また、オプションで次のプロパティも設定できます。
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
      どちらのプロパティも前述のレイアウトプロパティに対応しているため、これ以上取り上げません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Canvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      コンテナの子のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンテナの子のサイズを設定します。
     
      <p>Canvas は、子の位置を変更しません。 それぞれの子は、その <codeph>x</codeph> および <codeph>y</codeph> プロパティの値に応じて配置されます。</p>
     
      <p>Canvas は、各子の幅と高さをその子の <codeph>measuredWidth</codeph> および <codeph>measuredHeight</codeph> と一致するよう設定します（<codeph>width</codeph> および <codeph>height</codeph> の値が設定されていない場合）。 <codeph>width</codeph> や <codeph>height</codeph> をパーセント値に設定することで、子をサイズ変更可能にできます。 サイズ変更可能な子は、Canvas コンテナの右端および下端で囲まれます。 この場合は、子の <codeph>minWidth</codeph>、<codeph>minHeight</codeph>、<codeph>maxWidth</codeph>、および <codeph>maxHeight</codeph> の値が使用されます。</p>
     
      <p>このメソッドを直接呼び出すことは避けてください。 Flex LayoutManager が適切なタイミングで呼び出します。 Flex LayoutManager は、アプリケーションの起動時に、Application オブジェクトから始まって下方向にある全コンポーネントに対して <codeph>updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      <p>これは、サブクラスの処理で使用する高度なメソッドです。 このメソッドをオーバーライドする場合は、実装で <codeph>super.updateDisplayList()</codeph> メソッドを呼び出して、それぞれの子で <codeph>move()</codeph> および <codeph>setActualSize()</codeph> メソッドを呼び出す必要があります。 レイアウトを実行するために、このコンテナのサイズは <codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> の各プロパティ（<codeph>width</codeph> および <codeph>height</codeph> プロパティではありません）から取得してください。 <codeph>width</codeph> および <codeph>height</codeph> プロパティは、このコンテナの <codeph>scaleX</codeph> および <codeph>scaleY</codeph> プロパティの値を考慮しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Canvas:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Canvas:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormItemDirection"><apiName>FormItemDirection</apiName><shortdesc>
  FormItemDirection クラスは、FormItem クラスの direction プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormItemDirection クラスは、FormItem クラスの <codeph>direction</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiValue id="mx.containers:FormItemDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      FormItem コンテナの子を水平方向にレイアウトすることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      FormItem コンテナの子を水平方向にレイアウトすることを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItemDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      FormItem コンテナの子を垂直方向にレイアウトすることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      FormItem コンテナの子を垂直方向にレイアウトすることを指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:DividedBox"><apiName>DividedBox</apiName><shortdesc>
  DividedBox コンテナは、Box コンテナと同じ方法で子を水平方向または垂直方向に測定して配置しますが、子の間にはドラッグ可能な仕切りが挿入されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style inherit="no" name="verticalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  垂直レイアウトの DividedBox のカーソルスキンです。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.VBoxDivider" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  水平レイアウトの DividedBox のカーソルスキンです。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.HBoxDivider" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerThickness" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  <codeph>liveDragging</codeph> プロパティが <codeph>false</codeph> に設定されている場合に、ユーザーが仕切りを押すかドラッグしたときの仕切りの幅（ピクセル単位）です （<codeph>liveDragging</codeph> プロパティが <codeph>true</codeph> に設定されている場合は、仕切りのつまみのみが表示されます）。 この可視幅は、アフォーダンスより大きな値には設定できません。
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerSkin" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  仕切りのスキンです。デフォルト値は、Assets.swf ファイル内の "mx.skin.BoxDividerSkin" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dividerColor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="uint">
<description>
  <codeph>liveDragging</codeph> プロパティが <codeph>false</codeph> に設定されている場合に、ユーザーが仕切りを押すかドラッグしたときの仕切りの色です。 <codeph>liveDragging</codeph> プロパティが <codeph>true</codeph> に設定されている場合は、仕切りのつまみのみが表示されます。
 
  </description>
<default>0x6F7777
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerAlpha" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  仕切りの透明度を決定するアルファ値です。 値 <codeph>0.0</codeph> は完全に透明、値 <codeph>1.0</codeph> は完全に不透明であることを意味します。
  
  </description>
<default>0.75
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerAffordance" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  ユーザーが仕切りをドラッグできる領域の幅です（ピクセル単位）。 この領域は、<codeph>horizontalGap</codeph> または <codeph>verticalGap</codeph> スタイルプロパティによって決定される、コンテナの子同士の隙間の中心に配置されます。 このアフォーダンスは、隙間より大きなサイズには設定できません。 マウスがこの領域にあるときは、サイズ変更カーソルが表示されます。
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:DividedBox
    <strong>Properties</strong>
    liveDragging="false|true"
    resizeToContent="false|true"
  
    <strong>Styles</strong>
    dividerAffordance="6"
    dividerAlpha="0.75"
    dividerColor="0x6F7777"
    dividerSkin="<i>'mx.skins.BoxDividerSkin' symbol in Assets.swf</i>"
    dividerThickness="3"
    horizontalDividerCursor="<i>'mx.skins.cursor.HBoxDivider' symbol in Assets.swf</i>"
    verticalDividerCursor="<i>'mx.skins.cursor.VBoxDivider' symbol in Assets.swf</i>"
 
    <strong>Events</strong>
    dividerPress="<i>No default</i>"
    dividerDrag="<i>No default</i>"
    dividerRelease="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:DividedBox&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  DividedBox コンテナは、Box コンテナと同じ方法で子を水平方向または垂直方向に測定して配置しますが、子の間にはドラッグ可能な仕切りが挿入されます。 ユーザーは、任意の側の仕切りをドラッグして子のサイズを変更できます。
  
  <p>DividedBox クラスは、よく使用される HDividedBox クラスおよび VDividedBox クラスの基本クラスです。</p>
 
  <p>DividedBox コンテナの <codeph>direction</codeph> プロパティ は Box コンテナから継承され、レイアウトの方向を水平にするか垂直にするかを決定します。</p>
  
  <p>DividedBox、HDividedBox、または VDividedBox コンテナには、次のデフォルトサイズ設定特定があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry><b>Vertical DividedBox</b> height は、デフォルトの高さまたは明示的に指定した高さを持つすべての子を収容し、さらに垂直方向の子同士の間隔、コンテナの上下のパディングを収容できる十分な大きさです。 width は、最も広い幅を持つ子のデフォルトの幅または明示的に指定した幅に、コンテナの左右のパディングを加えた値です。 <b>Horizontal DividedBox</b> width は、デフォルトの幅または明示的に指定した幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。 height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row><row>
           <entry>デフォルトの間隔</entry>
           <entry>水平方向および垂直方向の間隔は 10 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DividedBoxExample.mxml"><swfblock conref="examples/DividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_RELEASE_dividerRelease"><apiName>dividerRelease</apiName><shortdesc>
  ユーザーが仕切りを解放したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが仕切りを解放したときに送出されます。 <codeph>dividerRelease</codeph> イベントは、<codeph>dividerDrag</codeph> イベントの後、かつコンテナの子のサイズが変更される前に送出されます。仕切りの x プロパティと y プロパティは、このイベントのトリガー後まで更新されません。この結果、<codeph>hDividerBox.getDividerAt(0).x</codeph> の呼び出しでは、最初の仕切りの元の x 位置の値が返されます。移動後の仕切りの位置を取得する場合は、DividerBox の updateComplete イベントのトリガー後にその値にアクセスします。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_PRESS_dividerPress"><apiName>dividerPress</apiName><shortdesc>
  ユーザーがこのコンテナの仕切りを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_PRESS</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがこのコンテナの仕切りを押したときに送出されます。 <codeph>dividerPress</codeph> イベントが送出される前に、<codeph>dividerDrag</codeph> イベントが送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_DRAG_dividerDrag"><apiName>dividerDrag</apiName><shortdesc>
  ユーザーが仕切りをドラッグしている間、複数回送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_DRAG</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが仕切りをドラッグしている間、複数回送出されます。 <codeph>dividerDrag</codeph> イベントは、<codeph>dividerPress</codeph> イベントの後かつ <codeph>dividerRelease</codeph> イベントの前に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:DividedBox:DividedBox"><apiName>DividedBox</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:DividedBox:getDividerAt"><apiName>getDividerAt</apiName><shortdesc>
	  この DividedBox コンテナ内にある指定された BoxDivider オブジェクトへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>BoxDivider オブジェクトです。
	  
	  </apiDesc><apiOperationClassifier>mx.containers.dividedBoxClasses:BoxDivider</apiOperationClassifier></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>仕切りの 0 から始まるインデックスです。水平 DividedBox の場合は左から右の順、垂直 DividedBox の場合は上から下の順になります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  この DividedBox コンテナ内にある指定された BoxDivider オブジェクトへの参照を返します。 
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:DividedBox:moveDivider"><apiName>moveDivider</apiName><shortdesc>
	  特定の仕切りを、指定されたピクセル数移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>仕切りの 0 から始まるインデックスです。水平 DividedBox の場合は左から右の順、垂直 DividedBox の場合は上から下の順になります。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>amt</apiItemName><apiType value="Number"/><apiDesc>仕切りを移動するピクセル数です。 負の値を指定すると、仕切りを上または左に移動できます。 仕切りの動きは、ユーザーが手動で移動する場合と同様の制約を受けます。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  特定の仕切りを、指定されたピクセル数移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:DividedBox:protected:dividerClass"><apiName>dividerClass</apiName><shortdesc>
	  子と子の間の、仕切りのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/><apiDefaultValue>mx.containers.dividedBoxClasses.BoxDivider
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  子と子の間の、仕切りのクラスです。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:liveDragging"><apiName>liveDragging</apiName><shortdesc>
	  true の場合は、ユーザーが仕切りをドラッグしている間、その仕切りに隣接する子のサイズが連続的に変化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  <codeph>true</codeph> の場合は、ユーザーが仕切りをドラッグしている間、その仕切りに隣接する子のサイズが連続的に変化します。 <codeph>false</codeph> の場合は、ユーザーが仕切りを解放するまでサイズは変更されません。
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:numDividers:get"><apiName>numDividers</apiName><shortdesc>
 	  仕切りの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
 	  仕切りの数です。 この数は常に <codeph>numChildren</codeph> - 1 です。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
	  true の場合、DividedBox は自動的に子のサイズに変更されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  <codeph>true</codeph> の場合、DividedBox は自動的に子のサイズに変更されます。
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
  ApplicationControlBar コンテナには、Halo Application コンテナに対してグローバルなナビゲーションおよびアプリケーションコマンドを提供するコンポーネントが保持されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ApplicationControlBar" replacement="none" since="4.0">
<description>
  Flex 4 では、ApplicationControlBar コンポーネントは必要ありません。Spark Application クラスの <codeph>controlBarContent</codeph> プロパティを使用して、コントロールバー領域に含めるコンポーネントのセットを指定します。Spark Application クラスの <codeph>controlBarLayout</codeph> プロパティを使用して、コントロールバー領域のレイアウトを指定します。 
 </description>
	</Alternative><styles><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  コンテナの背景の着色に使用される色です。 均一な外観のコントロールを作成するには、両方の値で同じ色を渡します。 デフォルト値は <codeph>[0xFFFFFF,0xFFFFFF]</codeph> です。
 
  <p><codeph>fillAlphas</codeph> プロパティも、デフォルト値以外の値に設定する必要があります。これは、デフォルト値の <codeph>[0,0]</codeph> では色が非表示になるからです。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  コンテナの背景の塗りつぶしで使用するアルファ値です。 デフォルト値は <codeph>[0,0]</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ApplicationControlBar&gt;</code> tag 
  inherits all of the tag attributes of its superclass, and adds the
  following tag attributes.
  Unlike the ControlBar container, it is possible to set the
  <code>backgroundColor</code> style for an ApplicationControlBar
  container.</p>
 
  <pre>
  &lt;mx:ApplicationControlBar
    <strong>Properties</strong>
    dock="false|true"
  
    <strong>Styles</strong>
    fillAlphas="[0, 0]"
    fillColors="[0xFFFFFF, 0xFFFFFF]"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ApplicationControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:ControlBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  ApplicationControlBar コンテナには、Halo Application コンテナに対してグローバルなナビゲーションおよびアプリケーションコマンドを提供するコンポーネントが保持されます。エディターの ApplicationControlBar には例えば、フォントの太さを設定するための Button コントロール、フォントを選択するための ComboBox コントロール、および編集モードを選択するための MenuBar コントロールを含めることができます。 通常は、Halo Application コンテナの一番上に ApplicationControlBar コンテナを配置します。
 
  <p><b>メモ：</b> Spark Application コンテナでは、ApplicationControlBar コンテナはサポートされていません。この機能を追加するには、Spark Application コンテナのスキンを変更します。</p>
 
  <p>ApplicationControlBar コンテナは、次のいずれかのモードに設定できます。</p> 
  <ul>
    <li>ドッキングモード：バーは常に、アプリケーションの描画領域の最上部にあり、アプリケーションのクロムの一部になります。 どのアプリケーションレベルのスクロールバーもコンポーネントには適用されません。したがって、このバーは常に、表示可能領域の最上部に留まり、アプリケーションの幅一杯に広がります。 ドッキングバーを作成するには、<codeph>dock</codeph> プロパティの値を <codeph>true</codeph> に設定します。</li>
      
    <li>通常モード：バーはアプリケーション上のどこにでも配置できます。他のすべてのコンポーネントと同様にサイズ設定および配置でき、アプリケーションと共にスクロールされます。 通常のバーを作成するには、<codeph>dock</codeph> プロパティの値を <codeph>false</codeph>（デフォルト）に設定します。</li>
  </ul>
 
  <p>ApplicationControlBar コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。 通常モードでの width は、デフォルトの幅または明示的に指定した幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。 ドッキングモードでは、この幅はアプリケーションの幅に一致します。 アプリケーションの幅が、ApplicationControlBar コンテナ内のすべてのコントロールを収容できる十分な長さではない場合は、ApplicationControlBar はアプリケーション幅に合わせてクリッピングされます。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top の値は 5 ピクセルです。 bottom の値は 4 ピクセルです。 left および right の値は 8 ピクセルです。
           </entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleApplicationControlBarExample.mxml"><swfblock conref="examples/SimpleApplicationControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link></related-links><apiConstructor id="mx.containers:ApplicationControlBar:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:ApplicationControlBar:dock:get"><apiName>dock</apiName><shortdesc>
      true の場合は、アプリケーションの一番上に ApplicationControlBar をドッキングするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dockChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、アプリケーションの一番上に ApplicationControlBar をドッキングするように指定します。 <codeph>false</codeph> の場合は、ApplicationControlBar のサイズと位置を他のコンポーネントと同様に決定するように指定します。このプロパティは、アプリケーションタイプが <codeph>Application</codeph> のときにサポートされます。それ以外の場合、<codeph>dock</codeph> の値は効果がありません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
  HDividedBox コンテナは、HBox コンテナと同様に子を水平にレイアウトしますが、それぞれの子の間にはドラッグ可能な仕切りが挿入されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass except <code>direction</code> and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  HDividedBox コンテナは、HBox コンテナと同様に子を水平にレイアウトしますが、それぞれの子の間にはドラッグ可能な仕切りが挿入されます。 仕切りをドラッグすると、各子に割り当てられる領域のサイズを変更できます。 <codeph>&lt;mx:HDividedBox/></codeph> タグは <codeph>&lt;mx:DividedBox direction="horizontal"/></codeph> と同じです。
  
  <p>HDividedBox コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>width は、デフォルトの幅または明示的に指定した幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。 height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row><row>
           <entry>デフォルトの間隔</entry>
           <entry>水平方向および垂直方向の間隔は 10 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HDividedBoxExample.mxml"><swfblock conref="examples/HDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:HDividedBox:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:Grid"><apiName>Grid</apiName><shortdesc>
  Grid コンテナを使用すると、HTML テーブルのように、子をセルの行や列として配置できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。デフォルト値は 6 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。 デフォルト値は 8 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except the <code>Box.direction</code>
  property, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Grid
    <strong>Styles</strong>
    horizontalGap="8"
    verticalGap="6"
    &gt;
      ...
    <i>These child tags are examples only:</i>
       &lt;mx:GridRow id="row1"&gt;
        &lt;mx:GridItem
          rowSpan="1"
          colSpan="1">
            &lt;mx:Button label="Button 1"/&gt;
        &lt;/mx:GridItem&gt;
        ...
       &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Grid コンテナを使用すると、HTML テーブルのように、子をセルの行や列として配置できます。 Grid コンテナには 1 つ以上の行が含まれます。各行には 1 つ以上のセルやアイテムを含めることができます。 Grid コントロールを定義するには、次のタグを使用します。
 
  <ul>
     <li><codeph>&lt;mx:Grid></codeph> タグは Grid コンテナを定義します。</li>
 
     <li><codeph>&lt;mx:GridRow></codeph> タグはグリッド行を定義します。これには 1 つ以上のセルが含まれます。 グリッド行は、<codeph>&lt;Grid></codeph> タグの子である必要があります。</li>
 
     <li><codeph>&lt;mx:GridItem></codeph> タグはグリッドセルを定義します。これは <codeph>&lt;GridRow></codeph> タグの子である必要があります。 <codeph>&lt;mx:GridItem></codeph> タグには、任意の数の子を含めることができます。</li>
  </ul>
 
  <p>ある 1 行に含まれるセルの高さはすべて同じですが、行ごとに高さを変えることができます。 1 つの列に含まれるセルの幅はすべて同じですが、列ごとに幅を変えることができます。 Grid コンテナの行または列ごとに、異なるセル数を定義できます。 また、1 つのセルがコンテナの複数の列または行にまたがることもできます。</p>
  
  <p>Grid、GridRow および GridItem コンテナには、以下のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>グリッドの高さ</entry>
           <entry>すべての行のデフォルトの高さまたは明示的な高さの合計に、行間の間隔を加えた高さです。</entry>
        </row><row>
           <entry>グリッドの幅</entry>
           <entry>すべての列のデフォルトの幅または明示的な幅の合計に、列間の間隔を加えた幅です。</entry>
        </row><row>
           <entry>各行および各セルの高さ</entry>
           <entry>行内で最も高いアイテムのデフォルトの高さまたは明示的な高さです。 GridItem コンテナに明示的なサイズが設定されていない場合は、そのデフォルトの高さは、セル内の子のデフォルトまたは明示的な高さとなります。</entry>
        </row><row>
           <entry>各列および各セルの幅</entry>
           <entry>列内で最も幅広いアイテムのデフォルトの幅または明示的な幅です。 GridItem コンテナに明示的な幅が設定されていない場合は、そのデフォルトの幅は、セル内の子のデフォルトまたは明示的な幅となります。</entry>
        </row><row>
           <entry>行と列間の間隔</entry>
           <entry>Grid クラスの horizontalGap および verticalGap プロパティによって決まります。 どちらの間隔も、デフォルト値は 6 ピクセルです。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>3 つのコンテナクラスすべてにおいて、top、bottom、left および right の各値が 0 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Grid:protected:measure"><apiName>measure</apiName><shortdesc>
      Grid の推奨、最小および最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Grid の推奨、最小および最大サイズを計算します。

      <p>このメソッドは、サブクラスの処理で使用する高度なメソッドです。直接呼び出すことは避けてください。 <codeph>measure()</codeph> メソッドは、Flex LayoutManger によって適切なタイミングで呼び出されます。 Flex LayoutManager は、アプリケーションの起動時に、子から親に至るすべてのコンポーネントを測定してから、それぞれに最終的なサイズを設定しようとします。</p>
     
      <p>Grid コンテナがその寸法を計算する方法について理解するため、すべての GridItem コンテナの <codeph>rowSpan</codeph> プロパティおよび <codeph>colSpan</codeph> プロパティが 1 に設定されていると仮定します。Grid コンテナの最初の列の測定幅は、最初の列にあるすべての GridItem コンテナの測定幅の中で最大の値に等しくなります。 同様に、2 番目の列の測定幅は、2 番目の列にあるすべての GridItem コンテナの測定幅の中で最大の値になり、以降も同様に続きます。 Grid コンテナ全体の <codeph>measuredWidth</codeph> は、すべての列の測定幅の合計に、境界線の幅、左右のパディングおよび隣接グリッドセル間の水平方向の間隔を加えた値になります。</p>
     
      <p><codeph>measuredHeight</codeph>、<codeph>minWidth</codeph>、<codeph>minHeight</codeph>、<codeph>maxWidth</codeph> および <codeph>maxHeight</codeph> の各プロパティの値は、例えば GridItem コンテナの <codeph>measuredHeight</codeph> プロパティや <codeph>minWidth</codeph> プロパティなどの値を加算するというように、すべて同様の方法で計算されます。</p>
     
      <p>GridItem コンテナの <codeph>colSpan</codeph> プロパティが 3 の場合、この GridItem コンテナの <codeph>measuredWidth</codeph> は 3 列で割られます。 <codeph>measuredWidth</codeph> が等分されると、3 つの列のそれぞれが測定幅を計算します。このとき、GridItem コンテナがその列のみに存在し、GridItem コンテナの <codeph>measuredWidth</codeph> が実際の値の 1/3 であるかのように仮定して計算します。</p>
     
      <p>ただし、GridItem コンテナの <codeph>measuredWidth</codeph> プロパティは、このコンテナがまたがるすべての列の間で等分されるとは限りません。 列の一部のプロパティが <codeph>width</codeph> のパーセント値である場合、GridItem コンテナの <codeph>measuredWidth</codeph> プロパティが割られ、Grid コンテナの必要な比率を各列に配分しようとします。</p>
     
      <p>前述の値はすべて、Grid の<i/>計算された幅と高さです。 以下のプロパティの値を明示的に指定することにより、測定値をオーバーライドできます。</p>
     
      <ul>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>width</codeph></li>
      </ul>
     
      <p>このメソッドをオーバーライドする場合は、実装で <codeph>super.measure()</codeph> メソッドを呼び出すか、<codeph>measuredHeight</codeph> および <codeph>measuredWidth</codeph> プロパティを設定する必要があります。 また、オプションで次のプロパティも設定できます。</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>どちらのプロパティも前述のレイアウトプロパティに対応しているため、これ以上取り上げません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Grid:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Grid のそれぞれの子のサイズと位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Grid のそれぞれの子のサイズと位置を設定します。
     
      <p>このメソッドは、サブクラスの処理で使用する高度なメソッドです。直接呼び出すことは避けてください。 <codeph>updateDisplayList</codeph> メソッドは、Flex LayoutManager によって適切なタイミングで呼び出されます。 Flex LayoutManager は、アプリケーションの起動時に、ルートから始まって下方向にある全コンポーネントに対して <codeph>updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      <p>Grid コンテナは、VBox コンテナと同じレイアウト規則に従います。 GridRow コンテナの位置とサイズの計算方法は、VBox コンテナが子の位置とサイズを決める場合と同一です。 同様に、GridRow コンテナが GridItem コンテナの位置を決めるときに使用するレイアウトアルゴリズムは、HBox コンテナが使用するアルゴリズムと似ています。</p>
     
      <p>唯一の違いは、GridRow コンテナの場合、子の位置とサイズがすべて同一に設定されるように (Grid コンテナの列が一列に並ぶように)、すべてのコンテナ同士が協調することです。 </p>
     
      <p>このメソッドをオーバーライドする場合は、実装で <codeph>super.updateDisplayList()</codeph> メソッドを呼び出して、それぞれの子で <codeph>move()</codeph> および <codeph>setActualSize()</codeph> メソッドを呼び出す必要があります。 レイアウトを実行するために、このコンテナのサイズは <codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> の各プロパティから取得してください（<codeph>width</codeph> および <codeph>height</codeph> プロパティではなく）。 <codeph>width</codeph> および <codeph>height</codeph> プロパティは、このコンテナの <codeph>scaleX</codeph> および <codeph>scaleY</codeph> プロパティの値を考慮しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:TileDirection"><apiName>TileDirection</apiName><shortdesc>
  TileDirection コンテナは、Tile コンテナの direction プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileDirection コンテナは、Tile コンテナの <codeph>direction</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Tile"><linktext>mx.containers.Tile</linktext></link></related-links><apiValue id="mx.containers:TileDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Tile コンテナの子を最初の行から開始して水平方向にレイアウトするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Tile コンテナの子を最初の行から開始して水平方向にレイアウトするように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TileDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Tile コンテナの子を最初の列から開始して垂直方向にレイアウトするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Tile コンテナの子を最初の列から開始して垂直方向にレイアウトするように指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
  MX TabNavigator コンテナは、子コンテナ間での移動のために TabBar コンテナを取り込むことで、MX ViewStack コンテナを拡張します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><styles><style format="Length" inherit="no" name="tabOffset" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  TabNavigator コンテナの左端からの、タブバーの水平方向のオフセット（ピクセル単位）です。 正の値は、タブバーを右方向へ移動させます。 負の値は、タブバーを左方向へ移動させます。 
 
  </description>
<default>0 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabWidth" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  ピクセル単位で表した各タブの幅です。 デフォルト値は <codeph>undefined</codeph> です。 このプロパティが <codeph>undefined</codeph> の場合、各タブの幅は、この TabNavigator コンテナに適用されるフォントスタイルを使用したラベルテキストの幅によって決定されます。 タブの幅の合計が TabNavigator コンテナの幅より広い場合、計算されたタブ幅が縮小されます（最小 30 ピクセルまで）。 このプロパティを設定すると、この計算よりも設定値が優先されます。
 
  <p>タブのラベルテキストは、タブに収まらない場合切り詰められます。 タブラベルが切り詰められた場合、ユーザーがタブの上にマウスを移動すると、ツールヒントにラベルテキスト全体が表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  タブのスタイルを指定する CSS スタイル宣言の名前です。
  
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabHeight" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  ピクセル単位で表した各タブの高さです。 デフォルト値は <codeph>undefined</codeph> です。 このプロパティが <codeph>undefined</codeph> の場合、各タブの高さは、この TabNavigator コンテナに適用されるフォントスタイルによって決定されます。 このプロパティを設定すると、この計算よりも設定値が優先されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedTabTextStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  選択されたタブのテキストのスタイルを指定する CSS スタイル宣言の名前です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  最後のタブのスタイルを指定する CSS スタイル宣言の名前です。 指定されていない場合は、<codeph>tabStyleName</codeph> スタイルプロパティのデフォルト値が使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  ピクセル単位で表したタブ間の間隔です。 デフォルト値は -1 です。この場合、隣接するタブの境界線が重なります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  この TabNavigator コンテナ上部にあるタブの水平位置を表します。 可能な値は、<codeph>"left"</codeph>、<codeph>"center"</codeph>、および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> です。
 
  <p>値が <codeph>"left"</codeph> の場合、最初のタブの左端が TabNavigator コンテナの左端に揃えられます。 値が <codeph>"right"</codeph> の場合、最後のタブの右端が TabNavigator コンテナの右端に揃えられます。 値が <codeph>"center"</codeph> の場合、タブが TabNavigator コンテナ上部の中央に揃えられます。</p>
 
  <p>整列設定による違いが表示されるには、すべてのタブの幅の合計が TabNavigator コンテナの幅より小さい必要があります。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  最初のタブのスタイルを指定する CSS スタイル宣言の名前です。 指定されていない場合は、<codeph>tabStyleName</codeph> スタイルプロパティのデフォルト値が使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  フォーカス矩形のどの角を丸くするかを指定します。 この値は、スペースで区切られた String です。<codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> および <codeph>"br"</codeph> の任意の組み合わせを含めることができます。 例えば、右の角を丸くし、左の角を直角にするように指定するには、<codeph>"tr br"</codeph> とします。 <codeph>cornerRadius</codeph> スタイルプロパティは、角の丸みの半径を指定します。 デフォルト値は、コンポーネントのクラスによって異なります。クラスでオーバーライドされていない場合、デフォルト値は <codeph>"tl tr bl br"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  フォーカススキンのアルファ透明度値を指定します。Halo テーマのデフォルト値は <codeph>0.4</codeph> です。Spark テーマのデフォルト値は <codeph>0.55</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  コンポーネントの背景の塗りの着色で使用するカラーを指定します。 これは、RGB カラーを指定する 2 つまたは 4 つの uint 値から成る配列に設定する必要があります。 エレメント 0 および 1 は、カラーグラデーションの開始値と終了値を指定します。 エレメント 2 および 3 が存在する場合は、コンポーネントがマウスの置かれた状態にあるときに、エレメント 0 および 1 の代わりに使用されます。 均一な外観のコントロールでは、エレメント 0 と 1、およびエレメント 2 と 3 で同じカラーを設定します。デフォルト値は <codeph>[ 0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE ]</codeph> です。
  <p>ApplicationControlBar コンテナなど、一部のコンポーネントは異なる値を持ちます。 ApplicationControlBar コンテナのデフォルト値は <codeph>[ 0xFFFFFF, 0xFFFFFF ]</codeph> です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  コンポーネントの背景の塗りで使用されるアルファ透明度値を指定します。 これは、2 つまたは 4 つの数値から成る配列に設定する必要があります。 エレメント 0 および 1 は、アルファグラデーションの開始値と終了値を指定します。 エレメント 2 および 3 が存在する場合は、コンポーネントがマウスの置かれた状態にあるときに、エレメント 0 および 1 の代わりに使用されます。 グローバルなデフォルト値は <codeph>[ 0.60, 0.40, 0.75, 0.65 ]</codeph> です。 ApplicationControlBar コンテナなど、一部のコンポーネントは異なる値を持ちます。 ApplicationControlBar コンテナのデフォルト値は <codeph>[ 0.0, 0.0 ]</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TabNavigator&gt;</code> tag inherits all of the
  tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:TabNavigator
    <b>Styles</b>
    fillAlphas="[0.60, 0.40, 0.75, 0.65]"
    fillColors="[0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE]"
    firstTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    focusAlpha="0.4"
    focusRoundedCorners="tl tr bl br"
    horizontalAlign="left|center|right"
    horizontalGap="-1"
    lastTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    selectedTabTextStyleName="undefined"
    tabHeight="undefined"
    tabOffset="0"
    tabStyleName="<i>Name of CSS style declaration that specifies styles for the tabs</i>"
    tabWidth="undefined"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:TabNavigator&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.containers:ViewStack</apiBaseClassifier></apiClassifierDef><apiDesc>
  MX TabNavigator コンテナは、子コンテナ間での移動のために TabBar コンテナを取り込むことで、MX ViewStack コンテナを拡張します。
 
  <p><b>メモ：</b>MX ナビゲーターコンテナの直接の子は、MX コンテナ、MX レイアウトか MX ナビゲーターのどちらかのコンテナ、または Spark NavigatorContent コンテナであることが必要です。Spark NavigatorContent コンテナ以外のコントロールまたは Spark コンテナをナビゲーター内で直接ネストできません。子 MX コンテナの子であることが必要です。</p>
 
  <p>ViewStack コンテナと同様に、TabNavigator コンテナには子コンテナのコレクションが含まれます。一度に表示される子は 1 つのみです。 TabNavigator コンテナの上部には TabBar コンテナが自動的に作成され、これにより各子コンテナに 1 つのタブが対応します。 各タブには固有のラベルとアイコンを割り当てることができます。 ユーザーがタブをクリックすると、対応する子コンテナが、TabNavigator コンテナの選択された子として表示されます。</p>
 
  <p>現在表示されている子コンテナを変更するときには、非表示にするコンテナの <codeph>hideEffect</codeph> プロパティおよび新たに表示する子コンテナの <codeph>showEffect</codeph> プロパティを使用して、子コンテナにまとめてエフェクトを適用できます。 TabNavigator コンテナは、非表示にする子コンテナの <codeph>hideEffect</codeph> が完了するまで待機し、その後で新しい子コンテナを表示します。 エフェクトの再生を続けながら TabNavigator コンテナの <codeph>selectedIndex</codeph> プロパティを変更する場合には、現在再生中のエフェクトを中断できます。 </p>
  
  <p>TabNavigator でタブの外観を定義するには、次の例に示すように、Tab タイプセレクターでスタイルのプロパティを定義します。</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|Tab {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }  
  &lt;/fx:Style>
  </pre>
 
  <p>Tab タイプセレクターでは、非表示の mx.controls.tabBarClasses.Tab クラスの値を定義します。 Tab タイプセレクターのデフォルト値は、"defaults.css" ファイルで定義されています。</p>
 
  <p>また、次の例のように、<codeph>tabStyleName</codeph> スタイルプロパティを使用して指定するクラスセレクターで、スタイルを定義することもできます。</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|TabNavigator {
       tabStyleName:myTabStyle;
    }
 
    .myTabStyle {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }
  &lt;/fx:Style>
  </pre>
 
  <p>TabNavigator コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>最初にアクティブになる子のデフォルトまたは明示的な幅と高さに、タブのデフォルトまたは明示的な高さと幅を加えたサイズ。 デフォルトのタブの高さは、TabNavigator コンテナに適用されるフォント、スタイル、およびスキンによって決まります。</entry>
        </row><row>
           <entry>コンテナのサイズ変更規則</entry>
           <entry>デフォルトでは、TabNavigator コンテナのサイズは、最初の子コンテナのサイズに合わせて一度だけ設定されます。 他のコンテナに切り替えても、サイズは変更されません。 別の子コンテナに切り替えたときに TabNavigator コンテナのサイズを変更するには、resizeToContent プロパティを true に設定します。</entry>
        </row><row>
           <entry>子のレイアウト規則</entry>
           <entry>ただし、子のサイズが TabNavigator コンテナより大きい場合は、一部がクリッピングされます。 子コンテナが TabNavigator コンテナより小さい場合は、TabNavigator コンテナの左上隅に位置合わせされます。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabNavigatorExample.mxml"><swfblock conref="examples/TabNavigatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link></related-links><apiConstructor id="mx.containers:TabNavigator:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:TabNavigator:getTabAt"><apiName>getTabAt</apiName><shortdesc>
      指定されたインデックス位置にある、ナビゲーターの TabBar コントロールのタブを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置にあるタブです。
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>ナビゲーターの TabBar コントロール内のインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にある、ナビゲーターの TabBar コントロールのタブを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:measure"><apiName>measure</apiName><shortdesc>
      この TabNavigator コンテナのデフォルトサイズ、最小値、および最大値を計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      この TabNavigator コンテナのデフォルトサイズ、最小値、および最大値を計算します。 <codeph>UIComponent.measure()</codeph> メソッドを参照して、<codeph>measure()</codeph> メソッドの詳細を確認してください。
     
      <p>TabNavigator コンテナは、次の 2 つの点を除き、<codeph>ViewStack</codeph> コンテナと同じ測定ロジックを使用します。1 つ目は、タブが収まるように <codeph>measuredHeight</codeph> および <codeph>measuredMinHeight</codeph> プロパティの値を増加させる点です。 2 つ目は、各タブの幅が 30 ピクセル以上になるように、必要に応じて <codeph>measuredWidth</codeph> プロパティの値を増加させる点です。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link><link href="mx.containers.xml#ViewStack/measure()"><linktext>mx.containers.ViewStack.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に応答して、このコンテナのタブおよび子の位置とサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナのタブおよび子の位置とサイズを設定します。 <codeph>updateDisplayList()</codeph> メソッドの詳細については、<codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照してください。
     
      <p>TabNavigator コンテナの上部には、TabBar コンテナが配置されています。 TabBar の幅は TabNavigator の幅に設定され、TabBar の高さは <codeph>tabHeight</codeph> プロパティに基づいて設定されます。</p>
     
      <p>TabNavigator コンテナは、ViewStack コンテナと同じロジックを使用して、子コンテナの位置とサイズを TabBar の下に設定します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:TabNavigator:protected:tabBar"><apiName>tabBar</apiName><shortdesc>
      この TabNavigator 内の TabBar への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls:TabBar</apiValueClassifier></apiValueDef><apiDesc>
      この TabNavigator 内の TabBar への参照です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TabNavigator:protected:tabBarStyleFilters:get"><apiName>tabBarStyleFilters</apiName><shortdesc>
      TabNavigator から tabBar に渡すスタイルのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      TabNavigator から tabBar に渡すスタイルのセットです。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.containers:HBox"><apiName>HBox</apiName><shortdesc>
  Halo HBox コンテナは、子を単一の水平行にレイアウトします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:HBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:HBox" replacement="spark.components.HGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo HBox コンテナは、子を単一の水平行にレイアウトします。<codeph>&lt;mx:HBox></codeph> タグを <codeph>&lt;mx:Box></codeph> タグの代わりにショートカットとして使用すると、<codeph>direction</codeph> プロパティを <codeph>"horizontal"</codeph> に設定する必要がなくなります。
 
  <p><b>メモ：</b> 可能な場合は、Halo HBox コンテナではなく、Spark コンテナを HorizontalLayout と共に使用することをお勧めします。</p>
 
  <p>HBox コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>width は、デフォルトの幅または明示的に指定した幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。 height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。
           </entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HBoxExample.mxml"><swfblock conref="examples/HBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:HBox:HBox"><apiName>HBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:VBox"><apiName>VBox</apiName><shortdesc>
  Halo VBox コンテナは、子を単一の垂直列にレイアウトします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:VBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:VBox" replacement="spark.components.VGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p></p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo VBox コンテナは、子を単一の垂直列にレイアウトします。<codeph>&lt;mx:VBox></codeph> タグを <codeph>&lt;mx:Box></codeph> タグの代わりにショートカットとして使用すると、<codeph>direction</codeph> プロパティを <codeph>"vertical"</codeph> に設定する必要がなくなります。
 
  <p><b>メモ：</b> 可能な場合は、Halo VBox コンテナではなく、Spark コンテナを VerticalLayout と共に使用することをお勧めします。</p>
 
  <p>VBox コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さまたは明示的に指定した高さを持つすべての子を収容し、さらに垂直方向の子同士の間隔、コンテナの上下のパディングを収容できる十分な大きさです。 width は、最も広い幅を持つ子のデフォルトの幅または明示的に指定した幅に、コンテナの左右のパディングを加えた値です。
           </entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VBoxExample.mxml"><swfblock conref="examples/VBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link></related-links><apiConstructor id="mx.containers:VBox:VBox"><apiName>VBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  TitleWindow レイアウトコンテナには、タイトルバー、キャプション、境界線、および子のコンテンツ領域が含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:TitleWindow" replacement="spark.components.TitleWindow" since="4.0">
	</Alternative><styles><style inherit="no" name="closeButtonUpSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  閉じるボタンのスキンのアップ状態です。デフォルト値は、Assets.swf ファイル内の "CloseButtonUp" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonOverSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  閉じるボタンのスキンのオーバー状態です。デフォルト値は、Assets.swf ファイル内の "CloseButtonOver" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDownSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  閉じるボタンのスキンのダウン状態です。デフォルト値は、Assets.swf ファイル内の "CloseButtonDown" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDisabledSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  閉じるボタンのスキンの無効状態です。デフォルト値は、Assets.swf ファイル内の "CloseButtonDisabled" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  閉じるボタンのデフォルトスキンです。
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TitleWindow
   <b>Properties</b>
   showCloseButton="false|true"
 
   <b>Styles</b>
   closeButtonDisabledSkin="<i>'CloseButtonDisabled' symbol in Assets.swf</i>"
   closeButtonDownSkin="<i>'CloseButtonDown' symbol in Assets.swf</i>"
   closeButtonOverSkin="<i>'CloseButtonOver' symbol in Assets.swf</i>"
   closeButtonUpSkin="<i>'CloseButtonUp' symbol in Assets.swf</i>"
  
   <strong>Events</strong>
   close="<i>No default</i>"
   &gt;
    ...
      child tags
    ...
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  TitleWindow レイアウトコンテナには、タイトルバー、キャプション、境界線、および子のコンテンツ領域が含まれています。 通常 TitleWindow コンテナは、必要な機能をすべて備えたアプリケーションモジュールをラップするために使用します。 例えば、TitleWindow コンテナにフォームを含めることができます。 TitleWindow コンテナは、ユーザーがフォームへの入力を完了したら、プログラムによって閉じることも、ユーザーが閉じるボタンを押して閉じるようにすることもできます。
  
  <p>TitleWindow コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さまたは明示的に指定した高さを持つ、コンテンツ領域内のすべての子を収容し、さらにタイトルバーと境界線、垂直方向の子同士の間隔、コンテナの上下のパディングをすべて収容できる十分な大きさです。 width は、最も幅の広い子のデフォルト幅または明示的な幅にコンテナの左右のパディングを加えた値、またはタイトルテキストの幅のうち、いずれか大きい方の値です。</entry>
        </row><row>
           <entry>境界線</entry>
           <entry>left および right の値は 10 ピクセルです。 top の値は 2 ピクセルです。 bottom の値は 0 ピクセルです。
           </entry>
        </row><row>
           <entry>パディング</entry>
           <entry>top、bottom、left、および right の各値が 4 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><adobeApiEvent id="mx.containers:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  ユーザーが閉じるボタンを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3985
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>close イベント
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  ユーザーが閉じるボタンを選択したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:TitleWindow:showCloseButton:get"><apiName>showCloseButton</apiName><shortdesc>
      TitleWindow コンテナ内に閉じるボタンを表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3986
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue><apiTipTexts><apiTipText>true の場合、閉じるボタンが表示されます。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      TitleWindow コンテナ内に閉じるボタンを表示するかどうかを指定します。 デフォルト値は <codeph>false</codeph> です。閉じるボタンを表示する場合は、<codeph>true</codeph> に設定します。 ユーザーが閉じるボタンを選択すると <codeph>close</codeph> イベントが生成されますが、TitleWindow コンテナは閉じられません。 <codeph>close</codeph> イベントのハンドラーを記述し、その内部から TitleWindow を閉じる必要があります。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  FormHeading コンテナは、Form コンテナに含まれるコントロールのグループのヘッダーを表示するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  ヘッダーテキストの上余白の長さを示すピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  フォームラベルの幅です。 デフォルト値は、フォーム内で最も長いラベルの長さです。 FormHeading の場合、<codeph>labelWidth</codeph> はヘッダーテキストの左側のスペースです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  ラベル領域とヘッダーテキストの間隔を示すピクセル数です。
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.containers:FormHeading" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 有効な値は、<codeph>"left"</codeph>、<codeph>"right"</codeph> または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>）か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 有効な値は -200 ～ 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 Halo テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。Halo テーマ別 ColorPicker コントロールのデフォルトは 11 です。Spark テーマ内では、ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 12 です。Spark テーマ別 ColorPicker コントロールのデフォルトは 11 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 有効な値は -400 ～ 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 有効な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>） および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。Halo テーマのデフォルトフォントは <codeph>"Verdana"</codeph> です。Spark テーマのデフォルトフォントは <codeph>"Arial"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 有効な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。Halo テーマのデフォルト値は <codeph>0x0B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの右境界線からコンテンツ領域の右端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの左境界線からコンテンツ領域の左端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p>Halo テーマの Button コントロールデフォルト値は 10 で、Spark テーマの場合は 6 です。</p>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  <p>Tree コントロールのデフォルト値は 2 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  追加の行間を表します。
 
  <p>デフォルト値は 2 です。</p>
  <p>ComboBox コントロールのデフォルト値は 0 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormHeading&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Styles</strong>
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|subpixel|none"
    fontSharpness="0"
    fontSize="12"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    textAlign="<i>Calculated</i>"
    textDecoration="none|underline"
    textIndent="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormHeading コンテナは、Form コンテナに含まれるコントロールのグループのヘッダーを表示するために使用されます。 ヘッダーの左端は、フォーム内部のコントロールの左端に揃えられます。 1 つの Form コンテナ内に複数の FormHeading コンテナを指定できます。
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:FormHeading:label:get"><apiName>label</apiName><shortdesc>
	  Form のヘッダーテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Form のヘッダーテキストです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Accordion"><apiName>Accordion</apiName><shortdesc>
  MX Accordion ナビゲーターコンテナには一連の子 MX コンテナまたは Spark NavigatorContent コンテナが含まれていますが、一度に表示されるのはそのうち 1 つだけです。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="clipContent"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値は -1 です。この場合、隣接するヘッダーの上境界線と下境界線が重なります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  選択されたテキストの色です。 Halo テーマのデフォルト値は <codeph>0x2B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  マウスポインターが置かれたときのヘッダーテキストの色です。 Halo テーマのデフォルト値は <codeph>0x2B333C</codeph> です。Spark テーマのデフォルト値は <codeph>0x000000</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域との間にあるピクセル数です。 デフォルト値は -1 です。この場合、最初のヘッダーの上境界線が、Accordion コンテナの上境界線と重なります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線とコンテンツ領域との間にあるピクセル数です。 デフォルト値は -1 です。この場合、最後のヘッダーの下境界線が、Accordion コンテナの下境界線と重なります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.containers:Accordion" playerVersion="Flash9" type="Function">
<description>
  ある子から別の子へのアニメーションで使用されるトゥイーン関数です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  ある子から別の子へのアニメーションをミリ秒単位で表した継続時間です。 Halo テーマのデフォルト値は 250 です。Spark テーマのデフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  ピクセル単位で表した各アコーディオンヘッダーの高さです。 デフォルト値は、ヘッダーのフォントスタイルに基づいて、自動的に計算されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。 デフォルト値は 8 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.containers:Accordion" playerVersion="Flash9" type="String">
<description>
  アコーディオンヘッダー（タブ）のスタイルを指定する CSS スタイル宣言の名前です。
 
  <p>このクラスセレクターを使用して、AccordionHeader クラスのすべてのスタイルプロパティ（<codeph>fillAlphas</codeph>、<codeph>fillColors</codeph>、<codeph>focusAlpha</codeph>、<codeph>focusRounderCorners</codeph>、<codeph>focusSkin</codeph>、<codeph>focusThickness</codeph> および <codeph>selectedFillColors</codeph> を含む）の値を設定できます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Accordion&gt;</code> tag inherits all of the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Accordion
    <strong>Properties</strong>
    headerRenderer="<i>IFactory</i>"
    historyManagementEnabled="true|false"
    resizeToContent="false|true"
    selectedChild"<i>A reference to the first child</i>"
    selectedIndex="undefined"
  
    <strong>Styles</strong>
    headerHeight="depends on header font styles"
    headerStyleName="<i>No default</i>"
    horizontalGap="8"
    openDuration="250"
    openEasingFunction="undefined"
    paddingBottom="-1"
    paddingTop="-1"
    textRollOverColor="0xB333C"
    textSelectedColor="0xB333C"
    verticalGap="-1"
  
    <strong>Events</strong>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Accordion&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Accordion では、異なる子ビュー間を移動できます。
  </apiTipText></apiTipTexts><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  MX Accordion ナビゲーターコンテナには一連の子 MX コンテナまたは Spark NavigatorContent コンテナが含まれていますが、一度に表示されるのはそのうち 1 つだけです。 このコンテナは、子の間を移動するためのナビゲーターボタン（アコーディオンヘッダー）を作成および管理します。各子コンテナには 1 つのナビゲーターボタンが関連付けられます。各ナビゲーターボタンは、子ではなく Accordion コンテナに属します。ユーザーがナビゲーターボタンをクリックすると、関連付けられた子コンテナが表示されます。 新しい子へのトランジションでは、ある子が消えて別の子が現れることを明確に示すためにアニメーションが使用されます。
 
  <p><b>メモ：</b>MX ナビゲーターコンテナの直接の子は、MX コンテナ、MX レイアウトか MX ナビゲーターのどちらかのコンテナ、または Spark NavigatorContent コンテナであることが必要です。Spark NavigatorContent コンテナ以外のコントロールまたは Spark コンテナをナビゲーター内で直接ネストできません。子 MX コンテナの子であることが必要です。</p>
 
  <p>Accordion コンテナは ViewStack コンテナを拡張しませんが、<codeph>selectedIndex</codeph> や <codeph>selectedChild</codeph> など、ViewStack コンテナのすべてのプロパティ、メソッド、スタイル、およびイベントを実装します。</p>
 
  <p>Accordion コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>現在アクティブな子の幅と高さ。</entry>
        </row><row>
           <entry>コンテナのサイズ変更規則</entry>
           <entry>Accordion コンテナのサイズは、デフォルトでは、最初の子コンテナのサイズに合わせて一度だけ設定されます。 デフォルトでは、他のコンテナに切り替えても、サイズは変更されません。 別の子コンテナに切り替えたときに Accordion コンテナのサイズを変更するには、resizeToContent プロパティを true に設定します。</entry>
        </row><row>
           <entry>子のサイズ設定規則</entry>
           <entry>子のサイズはデフォルトサイズに設定されます。 子のサイズが Accordion コンテナより大きい場合は、一部がクリッピングされます。 子コンテナが Accordion コンテナより小さい場合は、Accordion コンテナの左上隅に位置合わせされます。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに -1 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="AccordionExample.mxml"><swfblock conref="examples/AccordionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links><adobeApiEvent id="mx.containers:Accordion_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  選択されている子コンテナが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3012
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>change イベント
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  選択されている子コンテナが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:Accordion:Accordion"><apiName>Accordion</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Accordion:getHeaderAt"><apiName>getHeaderAt</apiName><shortdesc>
      子コンテナに対応するナビゲーションボタンへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ナビゲーションボタンを表す Button オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子の 0 から始まるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      子コンテナに対応するナビゲーションボタンへの参照を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>ロードする、このオブジェクトの状態です。 アプリケーションの初期状態をロードしているとき、これは null になります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>このオブジェクトの状態です。
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Accordion:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      コンテンツが表示される領域の高さをピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される領域の高さをピクセル単位で表します。 コンテンツがコンテナの領域全体を占有しない場合は、この getter メソッドをオーバーライドできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      コンテンツが表示される領域の幅をピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される領域の幅をピクセル単位で表します。 コンテンツがコンテナの領域全体を占有しない場合は、この getter メソッドをオーバーライドできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      各子のナビゲーションボタンを作成するのに使用するファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      各子のナビゲーションボタンを作成するのに使用するファクトリです。 デフォルト値は、<codeph>mx.containers.accordionClasses.AccordionHeader</codeph> を作成するファクトリです。 作成したオブジェクトは Button のサブクラスであり、かつ <codeph>mx.core.IDataRenderer</codeph> インターフェイスを実装したものである必要があります。 <codeph>data</codeph> プロパティには、ヘッダーに関連付けられた内容が設定されます。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      true に設定した場合、このプロパティはこの Accordion コンテナ内の履歴管理を有効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> に設定した場合、このプロパティはこの Accordion コンテナ内の履歴管理を有効にします。 ユーザーがある子から別の子に移動すると、アクセスした子がブラウザーに記憶されます。 これにより、ユーザーはブラウザーの「戻る」および「進む」ボタンをクリックして、移動履歴をたどることができます。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      true に設定した場合、この Accordion は自動的に、現在の子のサイズに変更されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> に設定した場合、この Accordion は自動的に、現在の子のサイズに変更されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      現在表示されている子コンテナへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3401
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier><apiTipTexts><apiTipText>現在表示されている子ビューを指定します。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      現在表示されている子コンテナへの参照です。 デフォルト値は、最初の子への参照です。 子が存在しない場合は、このプロパティは <codeph>null</codeph> です。
     
      <p><b>メモ：</b> このプロパティは ActionScript ステートメントでのみ設定できます。MXML では設定できません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      現在表示されている子コンテナの 0 から始まるインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3402
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>現在表示されている子ビューのインデックスを指定します。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      現在表示されている子コンテナの 0 から始まるインデックスです。 子インデックスは、0、1、2、...、n - 1 の範囲内であり、n は子の数です。 デフォルト値は 0 で、これは最初の子に対応します。 子が存在しない場合は、このプロパティは <codeph>-1</codeph> です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ControlBar"><apiName>ControlBar</apiName><shortdesc>
  ControlBar コンテナを使用すると、Halo Panel または Halo TitleWindow コンテナの下部にコントロールを配置できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ControlBar" replacement="none" since="4.0">
<description>
  Flex 4 では、ControlBar コンポーネントは必要ありません。Spark Panel クラスの <codeph>controlBarContent</codeph> プロパティを使用して、コントロールバー領域に含めるコンポーネントのセットを指定します。Spark Panel クラスの <codeph>controlBarLayout</codeph> プロパティを使用して、コントロールバー領域のレイアウトを指定します。 
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ControlBar&gt;</code> tag inherits all the tag
  attributes but adds no additional attributes:</p>
 
  <pre>
  &lt;mx:ControlBar&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  ControlBar コンテナを使用すると、Halo Panel または Halo TitleWindow コンテナの下部にコントロールを配置できます。<codeph>&lt;mx:ControlBar></codeph> タグは、Halo Panel または Halo TitleWindow コンテナに対する囲みタグの最後の子タグにする必要があります。
 
  <p><b>メモ：</b> Spark Panel コンテナでは、ControlBar コンテナはサポートされていません。この機能を追加するには、Spark Panel コンテナのスキンを変更します。</p>
 
  <p>ControlBar は、背景およびデフォルトのスタイルプロパティを持つ Box です。</p>
 
  <p>ControlBar コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。 width は、デフォルトの幅または明示的に指定した幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、および right の各値が 10 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleControlBarExample.mxml"><swfblock conref="examples/SimpleControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.containers:ControlBar:ControlBar"><apiName>ControlBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:GridItem"><apiName>GridItem</apiName><shortdesc>
  GridItem コンテナは、GridRow コンテナ内のグリッドセルを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridItem&gt;</code> tag must be a child of the 
  <code>&lt;GridRow&gt;</code> tag, which defines a grid row.
  The <code>&lt;mx:GridItem&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes.</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow&gt;
      &lt;mx:GridItem
        rowSpan="1"
        colSpan="1">
          <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  GridItem コンテナは、GridRow コンテナ内のグリッドセルを定義します。 GridRow コンテナは、Grid コンテナ内の行を定義します。 GridItem コンテナには、任意の数の子を含めることができます。子は、HBox コンテナのようにレイアウトされます。 HBox 以外のレイアウトにする場合は、VBox コンテナのようなコンテナを GridItem コントロールの子として作成し、その子コンテナに他のコンポーネントを配置します。
 
  <p>GridItem コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>各行および各セルの高さ</entry>
           <entry>行内で最も高いアイテムのデフォルトの高さまたは明示的な高さです。 GridItem コンテナに明示的なサイズが設定されていない場合は、そのデフォルトの高さは、セル内の子のデフォルトまたは明示的な高さとなります。</entry>
        </row><row>
           <entry>各列および各セルの幅</entry>
           <entry>列内で最も幅広いアイテムのデフォルトの幅または明示的な幅です。 GridItem コンテナに明示的な幅が設定されていない場合は、そのデフォルトの幅は、セル内の子のデフォルトまたは明示的な幅となります。</entry>
        </row><row>
           <entry>行と列間の間隔</entry>
           <entry>Grid クラスの horizontalGap および verticalGap プロパティによって決まります。 どちらの間隔も、デフォルト値は 6 ピクセルです。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>3 つのコンテナクラスすべてにおいて、top、bottom、left および right の各値が 0 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link></related-links><apiConstructor id="mx.containers:GridItem:GridItem"><apiName>GridItem</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:GridItem:colSpan:get"><apiName>colSpan</apiName><shortdesc>
      セルの範囲となる Grid コンテナの列数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      セルの範囲となる Grid コンテナの列数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:GridItem:rowSpan:get"><apiName>rowSpan</apiName><shortdesc>
      セルの範囲となる Grid コンテナの行数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      セルの範囲となる Grid コンテナの行数です。 Grid コンテナ内の行数を超えてセルを拡張することはできません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Panel"><apiName>Panel</apiName><shortdesc>
  Halo Panel コンテナは、タイトルバー、キャプション、境界線、および子のコンテンツ領域から構成されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Panel" replacement="spark.components.Panel" since="4.0">
	</Alternative><effects><effect event="resizeStart" name="resizeStartEffect" owner="mx.containers:Panel">
<description>
  Resize エフェクトの再生前に再生するエフェクトを指定します。 Dissolve エフェクトを無効にして子を即座に非表示にするには、<codeph>resizeStartEffect</codeph> プロパティの値を <codeph>"none"</codeph> に設定します。  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resizeEnd" name="resizeEndEffect" owner="mx.containers:Panel">
<description>
  Resize エフェクトの再生後に再生するエフェクトを指定します。 Dissolve エフェクトを無効にして子を即座に非表示にするには、<codeph>resizeEndEffect</codeph> プロパティの値を <codeph>"none"</codeph> に設定します。  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style inherit="no" name="titleStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  タイトルバーのテキストのスタイル宣言の名前です。 デフォルト値は、タイトルにボールド体のテキストを表示する <codeph>"windowStyles"</codeph> です。
 
  </description>
<default>"windowStyles"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="titleBackgroundSkin" owner="mx.containers:Panel" playerVersion="Flash9" type="Class">
<description>
  タイトルの背景のスキンです。Halo テーマのデフォルト値は <codeph>mx.skins.halo.TitleBackground</codeph> です。Spark テーマのデフォルト値は <codeph>mx.core.UIComponent</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="statusStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  タイトルバーのステータスのスタイル宣言の名前です。
 
  </description>
<default>"windowStatus"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。 負の値を指定した場合、シャドウはパネルの上に移動します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 可能な値は <codeph>"left"</codeph>、<codeph>"center"</codeph>、および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="roundedBottomCorners" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンテナ下部の 2 つの角に丸みを適用するフラグです。 上部の 2 つの角は影響を受けず、通常の丸みのある角になります。 上部の 2 つの角を直角に設定するには、<codeph>cornerRadius</codeph> を 0 に設定します。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域との間にあるピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  コンテナの下側の境界とコンテンツ領域の間隔を示すピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  ヘッダーのハイライトの塗りつぶしで使用するアルファ値です。
 
  </description>
<default>[0.3,0]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  ヘッダーの高さを表します。 デフォルト値は、タイトルテキストのスタイルによって決まります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  ヘッダーの描画に使用される 2 色の配列です。 1 つ目のカラーは上のカラーです。 2 つ目の色は下の色です。 デフォルト値は <codeph>null</codeph> であり、ヘッダーの背景はパネルの背景と同じになります。
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="footerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  フッター（ControlBar コンテナの領域）の背景の描画に使用される 2 色の配列です。 1 つ目のカラーは上のカラーです。 2 つ目の色は下の色です。 デフォルト値は <codeph>null</codeph> であり、コントロールバーの背景はパネルの背景とまったく変わらないものになります。
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Panel コンテナのドロップシャドウの可視性を制御するブール型プロパティです。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  ウィンドウフレームの角に付いている丸みの半径です。Halo テーマのデフォルト値は <codeph>4</codeph> です。Spark テーマのデフォルト値は <codeph>0</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="controlBarStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  コントロールバーの子サブコントロールに適用するスタイルを指定する CSS スタイル宣言の名前です。
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessTop" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Panel の上境界線の幅です。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessRight" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Panel の右境界線の幅です。
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessLeft" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Panel の左境界線の幅です。
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessBottom" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Panel コントロールの下境界線の幅です。 このスタイルを設定せず、Panel コントロールに ControlBar コントロールが含まれている場合には、下境界線の幅がパネルの上境界線の幅と等しくなります。それ以外の場合は、左境界線の幅と等しくなります。
 
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  タイトルバー、コントロールバー、および Panel の両側のアルファ値です。 Halo テーマのデフォルト値は <codeph>0.4</codeph> です。Spark テーマのデフォルト値は <codeph>0.5</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウの開閉時に、モーダルの透明効果が再生される期間です（ミリ秒単位）。
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.containers:Panel" playerVersion="Flash9" type="uint">
<description>
  モーダルオーバーレイのレイヤーの色です。 このスタイルは、<codeph>modalTransparency</codeph> スタイルと共に、モーダルウィンドウを開いたときにアプリケーションに適用されるカラー化を決定するのに使用します。
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウが開いているとき、アプリケーションに適用されるぼかしです。 Blur エフェクトはイメージの細部をぼかします。 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  PopUp Manager によって起動されたコンポーネントのモーダル性は、コンポーネントの真下に大きな透明オーバーレイを作成することによってシミュレートされます。透明オブジェクトのレンダリング上の理由により、オーバーレイの下のオブジェクトが少し薄く表示されることがあります。 効果的な透明性を設定するには、<codeph>modalTransparency</codeph> の値を 0.0（完全に透明）から 1.0（完全に不透明）の範囲で調整します。 <codeph>modalTransparencyColor</codeph> スタイルを設定してオーバーレイの色を変更することもできます。
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の垂直方向の配置です。 有効な値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph> および <codeph>"bottom"</codeph> です。 デフォルト値は <codeph>"top"</codeph> ですが、ButtonBar、ControlBar、LinkBar、ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> ですが、ButtonBar や ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Panel
   <strong>Properties</strong>
   layout="vertical|horizontal|absolute"
   status=""
   title=""
   titleIcon="null"
  
   <strong>Styles</strong>
   borderAlpha="0.4"
   borderThicknessBottom="NaN"
   borderThicknessLeft="10"
   borderThicknessRight="10"
   borderThicknessTop="2"
   controlBarStyleName="null"
   cornerRadius="4"
   dropShadowEnabled="true|false"
   footerColors="null"
   headerColors="null"
   headerHeight="<i>Based on style of title</i>"
   highlightAlphas="[0.3,0]"
   horizontalAlign="left|center|right"
   horizontalGap="8"
   modalTransparency="0.5"
   modalTransparencyBlur="3"
   modalTransparencyColor="#DDDDDD"
   modalTransparencyDuration="100"
   paddingBottom="0"
   paddingTop="0"
   roundedBottomCorners="false|true"
   shadowDirection="center|left|right"
   shadowDistance="2"
   statusStyleName="windowStatus"
   titleBackgroundSkin="TitleBackground"
   titleStyleName="windowStyles"
   verticalAlign="top|middle|bottom"
   verticalGap="6"
  
   <strong>Effects</strong>
   resizeEndEffect="Dissolve"
   resizeStartEffect="Dissolve"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Panel&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo Panel コンテナは、タイトルバー、キャプション、境界線、および子のコンテンツ領域から構成されています。通常、Panel コンテナは最上位のアプリケーションモジュールをラップするために使用します。 例えば、Panel コンテナにショッピングカートを含めることもできます。
 
  <p><b>メモ：</b> 可能な場合は、Halo Panel コンテナではなく、Spark Panel コンテナを使用することをお勧めします。</p>
 
  <p>Panel コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さでのすべての子、垂直方向の子同士の間隔、上下のパディング、上下の境界線、およびタイトルバーを含めることのできる値です。 width は、最も幅の広い子のデフォルト幅にコンテナの左右のパディングを加えた値、またはタイトルテキストの幅に境界線を加えた値のうち、いずれか大きい方の値です。</entry>
        </row><row>
           <entry>パディング</entry>
           <entry>top、bottom、left、および right の各値が 4 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimplePanelExample.mxml"><swfblock conref="examples/SimplePanelExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Panel.xml"><linktext>spark.components.Panel</linktext></link><link href="mx.containers.xml#ControlBar"><linktext>mx.containers.ControlBar</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Panel:protected:getHeaderHeight"><apiName>getHeaderHeight</apiName><shortdesc>
      ヘッダーの高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ヘッダーの高さです (ピクセル単位)。     
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      ヘッダーの高さを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:measure"><apiName>measure</apiName><shortdesc>
      Panel コンテナのデフォルトの最小および最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Panel コンテナのデフォルトの最小および最大サイズを計算します。 <codeph>measure()</codeph> メソッドの詳細については、<codeph>UIComponent.measure()</codeph> メソッドを参照してください。
     
      <p><codeph>measure()</codeph> メソッドは、最初に <codeph>VBox.measure()</codeph> メソッドを呼び出し、次に <codeph>measuredWidth</codeph> および <codeph>measuredMinWidth</codeph> プロパティの幅がタイトルと ControlBar を表示するために十分であることを確認します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Panel:protected:startDragging"><apiName>startDragging</apiName><shortdesc>
      PopUpManager によってポップアップされたパネルのドラッグを開始したときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      PopUpManager によってポップアップされたパネルのドラッグを開始したときに呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:stopDragging"><apiName>stopDragging</apiName><shortdesc>
      PopUpManager によってポップアップされたパネルのドラッグを停止したときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      PopUpManager によってポップアップされたパネルのドラッグを停止したときに呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Panel:protected:controlBar"><apiName>controlBar</apiName><shortdesc>
      この Panel コンテナのコントロールバーへの参照です（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      この Panel コンテナのコントロールバーへの参照です（存在する場合）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:statusTextField"><apiName>statusTextField</apiName><shortdesc>
      ステータスを表示する UITextField サブコントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      ステータスを表示する UITextField サブコントロールです。 ステータスフィールドは <codeph>titleBar</codeph> サブコントロールの子です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:titleBar"><apiName>titleBar</apiName><shortdesc>
      Panel コンテナのタイトルバーを表示する TitleBar サブコントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:UIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Panel コンテナのタイトルバーを表示する TitleBar サブコントロールです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:titleTextField"><apiName>titleTextField</apiName><shortdesc>
      タイトルを表示する UITextField サブコントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      タイトルを表示する UITextField サブコントロールです。 タイトルフィールドは <codeph>titleBar</codeph> サブコントロールの子です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:closeButtonStyleFilters:get"><apiName>closeButtonStyleFilters</apiName><shortdesc>
      Panel から閉じるボタンに渡すスタイルのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Panel から閉じるボタンに渡すスタイルのセットです。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      このコンポーネントのフォントコンテキストを提供するモジュールファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      このコンポーネントのフォントコンテキストを提供するモジュールファクトリです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:layout:get"><apiName>layout</apiName><shortdesc>
      このコンテナで使用されるレイアウトメカニズムを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナで使用されるレイアウトメカニズムを指定します。 Panel コンテナは、<codeph>"vertical"</codeph>、<codeph>"horizontal"</codeph>、または <codeph>"absolute"</codeph> 配置を使用できます。 垂直配置では、指定された順序でコンテナの上部から下部へ垂直に子コンポーネントをレイアウトします。 水平配置では、指定された順序でコンテナの左から右へ水平に子コンポーネントをレイアウトします。 絶対配置では、自動レイアウトは行われないので、各子コンポーネントの位置を明示的に定義する必要があります。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:status:get"><apiName>status</apiName><shortdesc>
      タイトルバーのステータス領域のテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="statusChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      タイトルバーのステータス領域のテキストです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:titleIcon:get"><apiName>titleIcon</apiName><shortdesc>
      タイトルバーに表示されるアイコンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleIconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      タイトルバーに表示されるアイコンです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:title:get"><apiName>title</apiName><shortdesc>
      タイトルバーに表示されるタイトルまたはキャプションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3991
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue><apiTipTexts><apiTipText>タイトルバーに表示されるタイトルまたはキャプションを取得または設定します。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      タイトルバーに表示されるタイトルまたはキャプションです。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Tile"><apiName>Tile</apiName><shortdesc>
  Halo Tile コンテナは、均等なサイズのセルで構成されるグリッド内に子を配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Tile" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Tile" replacement="spark.components.TileGroup" since="4.0">
<description>
  Flex 3 のレイアウト固有のコンテナコンポーネントは、汎用レイアウトを使用する、より汎用的な Group コンポーネントで置き換えられています。新しい Group コンポーネントから同様の動作を取得するには、<codeph>layout</codeph> プロパティを <codeph>TileLayout</codeph> に設定するか、TileGroup コンテナを使用します。
 </description>
	</Alternative><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  タイルセル内の子の垂直方向の配置です。 可能な値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph>、および <codeph>"bottom"</codeph> です。 値が <codeph>"top"</codeph> の場合、各子の上端がセルの上端に揃えられます。 値が <codeph>"middle"</codeph> の場合、各子がセル内で垂直方向の中央に揃えられます。 値が <codeph>"bottom"</codeph> の場合、各子の下端がセルの下端に揃えられます。
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域との間にあるピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線とコンテンツ領域との間にあるピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  タイルセル内の子の水平方向の配置です。 可能な値は <codeph>"left"</codeph>、<codeph>"center"</codeph>、および <codeph>"right"</codeph> です。 値が <codeph>"left"</codeph> の場合、各子の左端がセルの左端に揃えられます。 値が <codeph>"center"</codeph> の場合、各子がセル内で水平方向の中央に揃えられます。 値が <codeph>"right"</codeph> の場合、各子の右端がセルの右端に揃えられます。
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Tile&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Tile
    <b>Properties</b>
    direction="horizontal|vertical"
    tileHeight="NaN"
    tileWidth="NaN"
 
    <b>Sttles</b>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
      ...
      <i>child tags</i>
     ...
  &lt;/mx:Tile&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo Tile コンテナは、均等なサイズのセルで構成されるグリッド内に子を配置します。セルのサイズを指定するには、<codeph>tileWidth</codeph> プロパティおよび <codeph>tileHeight</codeph> プロパティを使用します。このほか、Tile コンテナを使用すると、サイズの最も大きな子に基づいてセルサイズを求めることができます。 Tile コンテナの <codeph>direction</codeph> プロパティによって、セルが Tile コンテナの左上隅から水平に配置されるのか、垂直に配置されるのかが決まります。
 
  <p><b>メモ：</b> 可能な場合は、Halo Tile コンテナではなく、Spark コンテナを TileLayout と共に使用することをお勧めします。</p>
 
  <p>Tile コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>方向</entry>
           <entry>horizontal</entry>
        </row><row>
           <entry>全セルのデフォルトサイズ</entry>
           <entry>高さはデフォルトか、最も高さが大きい子の明示的な高さです。 幅はデフォルトか、最も幅が大きい子の明示的な幅です。 すべてのセルのデフォルトサイズは同一です。</entry>
        </row><row>
           <entry>Tile コンテナのデフォルトサイズ</entry>
           <entry>Flex は、子の数の平方根を計算し、最も近い整数に切り上げます。 例えば、子の数が 26 の場合、平方根は 5.1 になり、6 に切り上げられます。 次に、Tile コンテナが 6 x 6 のグリッドでレイアウトされます。 Tile コンテナのデフォルトの高さは、（タイルセルのデフォルトの高さ）<b>x</b>（子の数の切り上げられた平方根）で求めた値に、子同士の間隔とパディングをすべて加算した値となります。 デフォルトの幅は、（タイルセルのデフォルトの幅）<b>x</b>（子の数の切り上げられた平方根）で求めた値に、子同士の間隔とパディングをすべて加算した値となります。</entry>
        </row><row>
           <entry>Tile コンテナの最小サイズ</entry>
           <entry>単一のセルのデフォルトサイズです。 Flex では常に少なくとも 1 つのセルを表示できるだけの領域が割り当てられます。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileLayoutExample.mxml"><swfblock conref="examples/TileLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Tile:Tile"><apiName>Tile</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Tile:protected:measure"><apiName>measure</apiName><shortdesc>
      Tile コンテナのデフォルトの最小サイズおよび最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Tile コンテナのデフォルトの最小サイズおよび最大サイズを計算します。 <codeph>measure()</codeph> メソッドの詳細については、<codeph>UIComponent.measure()</codeph> メソッドを参照してください。
      
      <p>このメソッドでは、最初に各タイルセルのサイズを計算します。 セルサイズの決定方法の詳細については、<codeph>tileWidth</codeph> プロパティおよび <codeph>tileHeight</codeph> プロパティを参照してください。</p>
      
     <p>子がある Tile コンテナの測定サイズは、行数と列数が等しい N × N のグリッドでセルを表示するのに必要なサイズに、Tile コンテナのパディングおよび境界線を加えたサイズになります。 ただし、次のように特殊な事例もあります。</p>
     
      <ul>
      <li>水平方向に表示する Tile コンテナで明示的な幅が設定されていると、その設定値によって水平方向に収まるセルの数が決まり、すべての子を収めるのに必要な高さが計算され、行数と列数が異なる M × N のグリッドが生成されます。</li>
     
      <li>垂直方向に表示する Tile コンテナで明示的な高さが設定されていると、その設定値によって垂直方向に収まるセルの数が決まり、すべての子を収めるのに必要な高さが計算され、行数と列数が異なる N × M のグリッドが生成されます。</li>
      </ul>
     
      <p>子がない場合、測定サイズはパディングおよび境界線を表示するのに必要な大きさになります。</p>
      
      <p>子がある Tile コンテナの最小測定サイズは、1 つのタイルセルにパディングおよび境界線を加えたサイズになります。 子がない場合、最小測定サイズはパディングおよび境界線を表示するのに必要な大きさになります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Tile:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子の位置およびサイズを設定します。 <codeph>updateDisplayList()</codeph> メソッドの詳細については、<codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照してください。
      
      <p>このメソッドは、Tile コンテナのコンテンツ領域内（パディングより内側の領域）にある均等なサイズのセルで構成される格子状のグリッド内に子を配置します。 セルサイズの決定方法の詳細については、<codeph>tileWidth</codeph> プロパティおよび <codeph>tileHeight</codeph> プロパティを参照してください。</p>
      
      <p>セル同士の間隔は、<codeph>horizontalGap</codeph> および <codeph>verticalGap</codeph> スタイルによって決定されます。 各セル内に子を配置する場所は、<codeph>horizontalAlign</codeph> および <codeph>verticalAlign</codeph> スタイルによって決定されます。</p>
      
      <p>子を並べていく方向は、<codeph>direction</codeph> プロパティによって決定されます。 最初のセルは、常にコンテンツ領域の左上に配置されます。 <codeph>direction</codeph> が <codeph>"horizontal"</codeph> の場合、セルは一番上の行の左から右に、次に 2 行目の左から右に、という順序で配置されます。 <codeph>direction</codeph> が <codeph>"vertical"</codeph> の場合、セルは一番左の列の上から下に、次に 2 列目の上から下に、という順序で配置されます。</p>
      
      <p>子に <codeph>percentWidth</codeph> または <codeph>percentHeight</codeph> が設定されている場合、その子はタイルセルの指定した比率に合わせて縦方向または横方向にサイズ変更されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:Tile:direction:get"><apiName>direction</apiName><shortdesc>
      コンテナ内に子を配置する方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナ内に子を配置する方法を指定します。 有効な MXML 値は、<codeph>"horizontal"</codeph> および <codeph>"vertical"</codeph> です。 ActionScript では、値 TileDirection.HORIZONTAL または TileDirection.VERTICAL を使用して方向を設定できます。デフォルト値は <codeph>"horizontal"</codeph> です （コンテナが Tile のサブクラスである Legend コンテナの場合は <codeph>"vertical"</codeph> になります）。
     
      <p>最初の子は、常に Tile コンテナの左上に配置されます。 <codeph>direction</codeph> が <codeph>"horizontal"</codeph> の場合、子は一番上の行の左から右に、次に 2 行目の左から右に、という順序で配置されます。 値が <codeph>"vertical"</codeph> の場合、子は一番左の列の上から下に、次に 2 列目の上から下に、という順序で配置されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#TileDirection"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:Tile:tileHeight:get"><apiName>tileHeight</apiName><shortdesc>
      各タイルセルの高さです（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各タイルセルの高さです（ピクセル単位）。 このプロパティが <codeph>NaN</codeph> の場合、デフォルトでは、各セルの高さは最も高さが大きい子の高さに基づいて決定されます。 このプロパティを設定すると、この計算よりも設定値が優先されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Tile:tileWidth:get"><apiName>tileWidth</apiName><shortdesc>
      各タイルセルの幅です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各タイルセルの幅です（ピクセル単位）。 このプロパティが <codeph>NaN</codeph> の場合、デフォルトでは、各セルの幅は最も幅が大きい子の幅に基づいて決定されます。 このプロパティを設定すると、この計算よりも設定値が優先されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
  VDividedBox コンテナは、VBox コンテナと同様に子を垂直に配置しますが、それぞれの子の間にはドラッグ可能な仕切りが挿入されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  VDividedBox コンテナは、VBox コンテナと同様に子を垂直に配置しますが、それぞれの子の間にはドラッグ可能な仕切りが挿入されます。 仕切りをドラッグすると、各子に割り当てられる領域のサイズを変更できます。 <codeph>&lt;mx:VDividedBox/></codeph> タグは <codeph>&lt;mx:DividedBox direction="vertical"/></codeph> と同じです。
  
  <p>VDividedBox コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さまたは明示的に指定した高さを持つすべての子を収容し、さらに垂直方向の子同士の間隔、コンテナの上下のパディングを収容できる十分な大きさです。 width は、最も広い幅を持つ子のデフォルトの幅または明示的に指定した幅に、コンテナの左右のパディングを加えた値です。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row><row>
           <entry>デフォルトの間隔</entry>
           <entry>水平方向および垂直方向の間隔は 10 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VDividedBoxExample.mxml"><swfblock conref="examples/VDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:VDividedBox:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:BoxDirection"><apiName>BoxDirection</apiName><shortdesc>
  BoxDirection クラスは、Box コンテナの direction プロパティの値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  BoxDirection クラスは、Box コンテナの <codeph>direction</codeph> プロパティの値を指定します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link></related-links><apiValue id="mx.containers:BoxDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Box コンテナの子を水平方向にレイアウトすることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Box コンテナの子を水平方向にレイアウトすることを指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:BoxDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Box コンテナの子を垂直方向にレイアウトすることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Box コンテナの子を垂直方向にレイアウトすることを指定します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Form"><apiName>Form</apiName><shortdesc>
  Form コンテナでは、フォームのレイアウトを制御し、フォームフィールドが必須かオプションであるかを明示し、エラーメッセージを処理し、フォームデータを Flex データモデルにバインドしてデータのチェックと検証を実行することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域の上端との間にあるピクセル数です。 デフォルト値は 16 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線とコンテンツ領域の下端との間にあるピクセル数です。 デフォルト値は 16 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  フォームラベルの幅です。 デフォルトは、フォーム内で最も長いラベルの長さです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  ラベルと子コンポーネントの間隔を示すピクセル数です。 デフォルト値は 14 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Form
    <strong>Styles</strong>
    horizontalGap="8"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    paddingBottom="16"
    paddingTop="16"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Form コンテナでは、フォームのレイアウトを制御し、フォームフィールドが必須かオプションであるかを明示し、エラーメッセージを処理し、フォームデータを Flex データモデルにバインドしてデータのチェックと検証を実行することができます。 また、スタイルシートを使用してフォームの外観を設定することもできます。
 
  <p>次の表に、Flex でフォームを作成するために使用するコンポーネントを示します。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="3"><thead><row><entry>コンポーネント</entry><entry>タグ</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;mx:Form></codeph></entry>
           <entry>フォーム全体に対するコンテナ、およびフォーム全体のレイアウトを定義します。 フォームの内容は、FormHeading コントロールおよび FormItem コンテナを使用して定義します。 また、Form コンテナに他のタイプのコンポーネントを挿入することもできます。</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;mx:FormHeading></codeph></entry>
           <entry>フォーム内の見出しを定義します。 1 つの Form コンテナ内に複数の FormHeading コントロールを配置できます。</entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;mx:FormItem></codeph></entry>
           <entry>フォームに収容する子を、水平方向または垂直方向に揃えて配置します。 フォームの子には、コントロールやその他のコンテナなどがあります。 1 つの Form コンテナで複数の FormItem コンテナを保持できます。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:Form:Form"><apiName>Form</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Form:protected:measure"><apiName>measure</apiName><shortdesc>
      Form の推奨、最小、および最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Form の推奨、最小、および最大サイズを計算します。 <codeph>measure</codeph> メソッドの詳細については、<codeph>UIComponent.measure()</codeph> メソッドを参照してください。
      <p><codeph>Form.measure()</codeph> メソッドは、<codeph>measuredWidth</codeph> プロパティを、最大の子の幅に <codeph>paddingLeft</codeph> および <codeph>paddingRight</codeph> スタイルプロパティの値と境界線の幅を加えた値に設定します。</p>
     
      <p><codeph>measuredHeight</codeph> プロパティは、すべての子の <codeph>measuredHeight</codeph> の合計に、各子同士の <codeph>verticalGap</codeph> 間隔を加えた値に設定されます。 <codeph>paddingTop</codeph> および <codeph>paddingBottom</codeph> スタイルプロパティと、境界線の高さも追加されます。</p>
     
      <p><codeph>measuredMinWidth</codeph> プロパティは、子の最大の最小幅に設定されます。 <codeph>width</codeph> がパーセント値である子には <codeph>minWidth</codeph> プロパティが使用され、それ以外の子には <codeph>measuredWidth</codeph> プロパティが使用されます。 <codeph>paddingLeft</codeph> および <codeph>paddingRight</codeph> スタイルプロパティの値と、境界線の幅の値も追加されます。</p>
     
      <p><codeph>measuredMinHeight</codeph> プロパティは、<codeph>measuredHeight</codeph> プロパティの値と同じ値に設定されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Form:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。 <codeph>updateDisplayList()</codeph> メソッドの詳細については、<codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照してください。 
     
      <p><codeph>Form.updateDisplayList()</codeph> メソッドは、<codeph>verticalGap</codeph> スタイルプロパティによって間隔を指定される、垂直列内の子の位置を設定します。 <codeph>paddingLeft</codeph>、<codeph>paddingRight</codeph>、<codeph>paddingTop</codeph>、および <codeph>paddingBottom</codeph> スタイルプロパティが適用されます。</p>
     
      <p>幅がパーセント値に設定された子は、Form コンテナの指定されたパーセント値まで水平方向に拡大されます。それ以外の子は、それぞれの <codeph>measuredWidth</codeph> プロパティに設定されます。 子はそれぞれの <codeph>measuredHeight</codeph> プロパティに設定されます。</p>
     
      <p>このメソッドは、何を実行する前にも <codeph>super.updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Form:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
      このフォーム内の FormItems コンテナのラベルの最大の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="updateComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      このフォーム内の FormItems コンテナのラベルの最大の幅（ピクセル単位）です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ViewStack"><apiName>ViewStack</apiName><shortdesc>
  MX ViewStack ナビゲーターのコンテナは、積み重ねられた一連の子コンテナから成ります。子コンテナは一度に 1 つのみ表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域との間にあるピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線とコンテンツ領域との間にあるピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ViewStack&gt;</code> tag inherits the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ViewStack
    <b>Properties</b>
    historyManagementEnabled="false|true"
    resizeToContent="false|true"
    selectedIndex="0"
    
    <b>Styles</b>
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalGap="6"
    
    <b>Events</b>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:ViewStack&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  MX ViewStack ナビゲーターのコンテナは、積み重ねられた一連の子コンテナから成ります。子コンテナは一度に 1 つのみ表示されます。別の子コンテナが選択されると、同じ場所に表示されるため、このコンテナによって既存のコンテナが置き換えられたように見えます。 ただし、それまでの子コンテナもまだ存在しており、単に見えなくなっただけです。
 
  <p><b>メモ：</b>MX ナビゲーターコンテナの直接の子は、MX コンテナ、MX レイアウトか MX ナビゲーターのどちらかのコンテナ、または Spark NavigatorContent コンテナであることが必要です。Spark NavigatorContent コンテナ以外のコントロールまたは Spark コンテナをナビゲーター内で直接ネストできません。子 MX コンテナの子であることが必要です。</p>
 
  <p>ViewStack コンテナでは、現在表示される子コンテナを選択するためのユーザーインターフェイスが提供されません。 通常、このコンテナの <codeph>selectedIndex</codeph> または <codeph>selectedChild</codeph> プロパティは ActionScript で何らかのユーザー操作に応える形で設定します。 または、MX LinkBar、TabBar、ButtonBar、ToggleButtonBar コントロールまたは Spark ButtonBar コントロールを ViewStack コンテナに関連付け、ナビゲーションインターフェイスを提供する方法もあります。この場合は、LinkBar または TabBar コンテナの <codeph>dataProvider</codeph> プロパティの値として ViewStack コンテナを指定します。</p>
 
  <p>ViewStack コンテナより複雑な、TabNavigator コンテナや Accordion コンテナなどのナビゲーターコンテナを使用することもできます。 これらのコンテナは、子コンテナのコレクションを含むだけでなく、子の間を移動するための固有のユーザーインターフェイスコントロールを提供します。</p>
 
  <p>現在表示されている子コンテナを変更するときには、非表示にするコンテナの <codeph>hideEffect</codeph> プロパティおよび新たに表示する子コンテナの <codeph>showEffect</codeph> プロパティを使用して、子コンテナにまとめてエフェクトを適用できます。 ViewStack コンテナは、非表示にする子コンテナの <codeph>hideEffect</codeph> が完了するまで待機し、その後で新しい子コンテナを表示します。 エフェクトの再生を続けながら ViewStack コンテナの <codeph>selectedIndex</codeph> プロパティを変更する場合には、現在再生中のエフェクトを中断できます。</p>
 
  <p>ViewStack コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>最初にアクティブになる子の幅と高さ。</entry>
        </row><row>
           <entry>コンテナのサイズ変更規則</entry>
           <entry>デフォルトでは、ViewStack コンテナのサイズは、最初の子コンテナのサイズに合わせて一度だけ設定されます。 他のコンテナに切り替えても、サイズは変更されません。 別の子コンテナに切り替えたときに ViewStack コンテナのサイズを変更するには、resizeToContent プロパティを true に設定します。</entry>
        </row><row>
           <entry>子のサイズ設定規則</entry>
           <entry>子のサイズはデフォルトサイズに設定されます。 ただし、子のサイズが ViewStack コンテナより大きい場合は、一部がクリッピングされます。 子コンテナが ViewStack コンテナより小さい場合は、ViewStack コンテナの左上隅に位置合わせされます。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewStackExample.mxml"><swfblock conref="examples/ViewStackExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="" invalidHref="spark.components.ButtonBar.xml"><linktext>spark.components.ButtonBar</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><adobeApiEvent id="mx.containers:ViewStack_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  選択されている子コンテナが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択されている子コンテナが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:ViewStack:ViewStack"><apiName>ViewStack</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:ViewStack:protected:commitSelectedIndex"><apiName>commitSelectedIndex</apiName><shortdesc>
      選択されたインデックスを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      選択されたインデックスを処理します。 この関数は、プロパティの処理段階で、selectedIndex（または selectedItem）プロパティが変更されると呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>ロードする、このオブジェクトの状態です。 アプリケーションの初期状態をロードしているとき、これは null になります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:measure"><apiName>measure</apiName><shortdesc>
      ViewStack コンテナのデフォルトサイズ、最小値、および最大値を計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ViewStack コンテナのデフォルトサイズ、最小値、および最大値を計算します。 <codeph>measure()</codeph> メソッドの詳細については、<codeph>UIComponent.measure()</codeph> メソッドを参照してください。
     
      <p>ViewStack コンテナのデフォルトサイズは、現在選択されている子のデフォルトサイズにパディングおよび境界線を加えたサイズになります。 ViewStack コンテナに子がない場合には、デフォルトサイズはパディングおよび境界線だけを表示するのに必要な大きさになります。</p>
     
      <p>ViewStack コンテナの最小サイズは、現在選択されている子の最小サイズにパディングおよび境界線を加えたサイズになります。 ViewStack コンテナに子がない場合、最小サイズはパディングと境界線だけを表示するのに必要な大きさです。</p>
     
      <p>このメソッドでは、ViewStack コンテナの最大サイズは変更されず、無制限のままになります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:ViewStack:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>このオブジェクトの状態です。
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。 <codeph>updateDisplayList()</codeph> メソッドの詳細については、<codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照してください。
     
      <p>一度に表示されるのは 1 つの子のみであるため、ViewStack コンテナはその子の位置とサイズのみを設定します。</p>
     
      <p>選択されている子は、ViewStack コンテナのパディングと境界線のスペースを空けて、ViewStack コンテナの左上隅に配置されます。 </p>
     
      <p>選択されている子の <codeph>width</codeph> または <codeph>height</codeph> がパーセント値に設定されている場合は、ViewStack コンテナのコンテンツ領域（パディング内部の領域）の指定した比率にちょうど収まるように、その方向にサイズ変更されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:ViewStack:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      コンテンツが表示される領域の高さをピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される領域の高さをピクセル単位で表します。 コンテンツが ViewStack コンテナの領域全体を占有しない場合は、この getter をオーバーライドできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      コンテンツが表示される領域の幅をピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される領域の幅をピクセル単位で表します。 コンテンツが ViewStack コンテナの領域全体を占有しない場合は、この getter をオーバーライドできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentX:get"><apiName>contentX</apiName><shortdesc>
      コンテンツが表示される ViewStack コンテナの領域の x 座標をピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される ViewStack コンテナの領域の x 座標をピクセル単位で表します。 デフォルト値は <codeph>paddingLeft</codeph> スタイルプロパティの値に等しくなります。このスタイルプロパティのデフォルト値は 0 です。コンテンツのレイアウトを x = 0 から開始しない場合は、<codeph>get()</codeph> メソッドをオーバーライドします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentY:get"><apiName>contentY</apiName><shortdesc>
      コンテンツが表示される ViewStack コンテナの領域の y 座標をピクセル単位で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツが表示される ViewStack コンテナの領域の y 座標をピクセル単位で表します。 デフォルト値は <codeph>paddingTop</codeph> スタイルプロパティの値に等しくなります。このスタイルプロパティのデフォルト値は 0 です。コンテンツのレイアウトを y = 0 から開始しない場合は、<codeph>get()</codeph> メソッドをオーバーライドします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      true の場合、この ViewStack コンテナ内の履歴管理を有効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、この ViewStack コンテナ内の履歴管理を有効にします。 ユーザーがある子から別の子に移動すると、アクセスした子がブラウザーに記憶されます。 これにより、ユーザーはブラウザーの「戻る」および「進む」ボタンをクリックして、移動履歴をたどることができます。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:ViewStack:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      true の場合、ViewStack コンテナは自動的に、現在の子のサイズに変更されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、ViewStack コンテナは自動的に、現在の子のサイズに変更されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      現在表示されている子コンテナへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier></apiValueDef><apiDesc>
      現在表示されている子コンテナへの参照です。 デフォルトは最初の子への参照です。 子が存在しない場合は、このプロパティは <codeph>null</codeph> です。
     
      <p><b>メモ：</b> このプロパティは ActionScript ステートメントでのみ設定できます。MXML では設定できません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      現在表示されている子コンテナの 0 から始まるインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      現在表示されている子コンテナの 0 から始まるインデックスです。 子インデックスは、0、1、2、...、n - 1 の範囲内であり、<i>n</i> は子の数です。 デフォルト値は 0 で、これは最初の子に対応します。 子がない場合には、<codeph>-1</codeph> になります。
     
      <p><b>メモ：</b>ViewStack コンテナに新しい子を追加すると、選択した子がそのまま選択されるよう、<codeph>selectedIndex</codeph> プロパティが必要に応じて自動的に調整されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:GridRow"><apiName>GridRow</apiName><shortdesc>
  GridRow コンテナは、Grid コンテナ内の行を定義し、GridCell コンテナを格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/><Exclude kind="property" name="clipContent"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の垂直方向の配置です。 可能な値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph>、および <codeph>"bottom"</codeph> です。 デフォルト値は <codeph>"top"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 可能な値は <codeph>"left"</codeph>、<codeph>"center"</codeph>、および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridRow&gt;</code> must be a child of the 
  <code>&lt;mx:Grid&gt;</code> tag, and has one or more child 
  <code>&lt;mx:GridItem&gt;</code> tags that define the grid cells.</p>
 
  <p>The <code>&lt;mx:GridRow&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow
    <strong>Styles</strong>
      horizontalAlign="left|center|right"
      verticalAlign="top|middle|bottom"
    &gt;
      &lt;mx:GridItem
        <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  GridRow コンテナは、Grid コンテナ内の行を定義し、GridCell コンテナを格納します。
 
  <p>GridRow コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>各行および各セルの高さ</entry>
           <entry>行内で最も高いアイテムのデフォルトの高さまたは明示的な高さです。 GridItem コンテナに明示的なサイズが設定されていない場合は、そのデフォルトの高さは、セル内の子のデフォルトまたは明示的な高さとなります。</entry>
        </row><row>
           <entry>各列および各セルの幅</entry>
           <entry>列内で最も幅広いアイテムのデフォルトの幅または明示的な幅です。 GridItem コンテナに明示的な幅が設定されていない場合は、そのデフォルトの幅は、セル内の子のデフォルトまたは明示的な幅となります。</entry>
        </row><row>
           <entry>行と列間の間隔</entry>
           <entry>Grid クラスの horizontalGap および verticalGap プロパティによって決まります。 どちらの間隔も、デフォルト値は 6 ピクセルです。</entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>3 つのコンテナクラスすべてにおいて、top、bottom、left および right の各値が 0 ピクセルです。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:GridRow:GridRow"><apiName>GridRow</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:GridRow:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      GridRow コンテナの各子のサイズと位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      GridRow コンテナの各子のサイズと位置を設定します。 Grid のレイアウトアルゴリズムの詳細については、<xref href="Grid.html#updateDisplayList()">Grid.updateDisplayList()</xref> メソッドを参照してください。
     
      <p>このメソッドを直接呼び出すことは避けてください。 Flex LayoutManager が適切なタイミングで呼び出します。 Flex LayoutManager は、アプリケーションの起動時に、ルートから始まって下方向にある全コンポーネントに対して <codeph>updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      <p>これは、サブクラスの処理で使用する高度なメソッドです。 このメソッドをオーバーライドする場合は、実装で <codeph>super.updateDisplayList()</codeph> メソッドを呼び出して、それぞれの子で <codeph>move()</codeph> および <codeph>setActualSize()</codeph> メソッドを呼び出す必要があります。 レイアウトを実行するために、このコンテナのサイズは <codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> の各プロパティ（<codeph>width</codeph> および <codeph>height</codeph> プロパティではありません）から取得してください。 <codeph>width</codeph> および <codeph>height</codeph> プロパティは、このコンテナの <codeph>scaleX</codeph> および <codeph>scaleY</codeph> プロパティの値を考慮しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:FormItem"><apiName>FormItem</apiName><shortdesc>
  FormItem コンテナは、ラベル、および水平方向または垂直方向に配置されている子を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線とコンテンツ領域の上端との間にあるピクセル数です。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  コンテナの右の境界とコンテンツ領域の右端との間のピクセル数です。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線とコンテンツ領域の下端との間にあるピクセル数です。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  フォームラベルの幅です。 デフォルトは、フォーム内で最も長いラベルの長さです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelStyleName" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  FormItem のラベルのスタイルに使用する CSS スタイル宣言の名前です。 デフォルトでは、ラベルには FormItem の継承可能なスタイルまたは FormItemLabel で宣言されたスタイルが使用されます。 このスタイルは FormItemLabel の代わりに使用します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indicatorSkin" owner="mx.containers:FormItem" playerVersion="Flash9" type="Class">
<description>
  必須フィールドのインジケーターに使用するスキンを指定します。デフォルト値は、Assets.swf ファイル内の "mx.containers.FormItem.Required" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  フォームアイテムのラベルと子コンポーネントの間隔を示すピクセル数です。
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 可能な値は <codeph>"left"</codeph>、<codeph>"center"</codeph>、および <codeph>"right"</codeph> です。
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>paddingLeft</code>,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormItem
    <strong>Properties</strong>
    direction="vertical|horizontal"
    label=""
    required="false|true"
  
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    indicatorGap="14"
    indicatorSkin="<i>'mx.containers.FormItem.Required' symbol in Assets.swf</i>"
    labelStyleName=""
    labelWidth="<i>Calculated</i>"
    paddingBottom="0"
    paddingRight="0"
    paddingTop="0"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:FormItem&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormItem コンテナは、ラベル、および水平方向または垂直方向に配置されている子を定義します。 フォームの子には、コントロールやその他のコンテナなどがあります。 1 つの Form コンテナで複数の FormItem コンテナを保持できます。
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.controls.xml#FormItemLabel"><linktext>mx.controls.FormItemLabel</linktext></link></related-links><apiConstructor id="mx.containers:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:FormItem:protected:measure"><apiName>measure</apiName><shortdesc>
      FormItem の推奨、最小、および最大サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      FormItem の推奨、最小、および最大サイズを計算します。 <codeph>UIComponent.measure()</codeph> メソッドを参照して、<codeph>measure()</codeph> メソッドの詳細を確認してください。
     
      <p><codeph>FormItem.measure()</codeph> メソッドは、使用する列の数を最初に決定します。 <codeph>direction</codeph> プロパティが <codeph>FormItemDirection.HORIZONTAL</codeph> の場合、可能であればすべてのコントロールが 1 行に配置されます。 コントロールが 1 行に収まらない場合は、2 行に分割されます。 それでも収まらない場合は、1 つの列を使用してください。 <codeph>direction</codeph> が <codeph>FormItemDirection.VERTICAL</codeph> の場合、コントロールが 1 列に配置されます（例：<codeph>VBox</codeph>）。</p>
     
      <p>FormItem には、ラベル領域とコントロール領域の 2 つの領域が含まれてます。 ラベルのサイズは、コントロールの方向にかかわりなく同一です。 コントロール領域のサイズは、使用される行および列の数によって異なります。</p>
     
      <p>ラベル領域の幅は、<codeph>labelWidth</codeph> スタイルプロパティによって決定されます。 このプロパティが <codeph>undefined</codeph> の場合（デフォルト）、親 Form コンテナ内で最大のラベルの幅が使用されます。</p>
     
      <p>すべての子が 1 行に配置されている場合、コントロール領域の幅は、すべての子の幅に、子同士の <codeph>horizontalGap</codeph> 間隔を加えた値です。</p>
     
      <p>子が 1 列に配置されている場合、コントロール領域の幅は最も広い子の幅になります。</p>
     
      <p>子が複数の行および列に配置されている場合、最も広い子の幅が列幅になり、コントロール領域の幅は、列幅に列数を掛けた値に、各列間の <codeph>horizontalGap</codeph> 間隔を加えた値です。</p>
     
      <p><codeph>measuredWidth</codeph> は、ラベル領域の幅にコントロール領域の幅と <codeph>indicatorGap</codeph> スタイルプロパティの値を加えた値に設定されます。 <codeph>paddingLeft</codeph> および <codeph>paddingRight</codeph> スタイルプロパティの値と、境界線の幅の値も追加されます。</p>
     
      <p><codeph>measuredHeight</codeph> は、すべての子の行の推奨される高さの合計に、各子同士の <codeph>verticalGap</codeph> 間隔を加えた値に設定されます。 <codeph>paddingTop</codeph> および <codeph>paddingBottom</codeph> スタイルプロパティと、境界線の高さも追加されます。</p>
     
      <p><codeph>measuredMinWidth</codeph> は、ラベル領域の幅に、コントロール領域の最小幅と、<codeph>indicatorGap</codeph> スタイルプロパティの値を加えた値に設定されます。 <codeph>paddingLeft</codeph> および <codeph>paddingRight</codeph> スタイルプロパティの値と、境界線の幅の値も追加されます。</p>
     
      <p><codeph>measuredMinHeight</codeph> は、すべての子の行の最小の高さの合計に、各子同士の <codeph>verticalGap</codeph> 間隔を加えた値に設定されます。 <codeph>paddingTop</codeph> および <codeph>paddingBottom</codeph> スタイルプロパティと、境界線の高さも追加されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:FormItem:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナの子の位置およびサイズを設定します。 <codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照して、<codeph>updateDisplayList()</codeph> メソッドの詳細を確認してください。
     
      <p>FormItem コントロールの位置を設定する方法については、<codeph>FormItem.measure()</codeph> メソッドを参照してください。</p>
     
      <p>ラベルは <codeph>textAlign</codeph> スタイルプロパティの設定に従って、ラベル領域に配置されます。 フォーム内のすべてのラベルが一直線に配置されます。</p>
     
      <p><codeph>required</codeph> プロパティが <codeph>true</codeph> の場合、ラベルとコントロールの間に、フィールドが必要なことを示す記号が配置されます。</p>
     
      <p>コントロールは、<codeph>measure()</codeph> メソッドに関する説明に記載されている方法で、列内に配置されます。 <codeph>horizontalAlign</codeph> スタイルプロパティは、コントロールが水平方向に配置される場所を指定します。</p>
     
      <p><codeph>direction</codeph> プロパティが <codeph>"vertical"</codeph> の場合、<codeph>width</codeph> が設定されていない子の幅は、コントロール領域の 1/4 の幅になる直近値に切り上げられた <codeph>measuredWidth</codeph> を使用します。 これは、コントロールの右端がぎざぎざになるのを防ぐために実行されます。</p>
     
      <p>このメソッドは、何を実行する前にも <codeph>super.updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:FormItem:direction:get"><apiName>direction</apiName><shortdesc>
      FormItem サブコンポーネントの方向です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FormItemDirection.VERTICAL
      </apiDefaultValue></apiValueDef><apiDesc>
      FormItem サブコンポーネントの方向です。 可能な MXML 値は、<codeph>"vertical"</codeph> または <codeph>"horizontal"</codeph> です。 デフォルトの MXML 値は <codeph>"vertical"</codeph> です。 可能な ActionScript 値は、<codeph>FormItemDirection.VERTICAL</codeph> または <codeph>FormItemDirection.HORIZONTAL</codeph> です。
     
      <p><codeph>direction</codeph> が <codeph>"vertical"</codeph> の場合、FormItem の子は、FormItem ラベルの右側に垂直に重ねられます。 <codeph>direction</codeph> が <codeph>"horizontal"</codeph> の場合、子は 1 行に配置されるか（収まる場合）、または同一サイズの 2 行に配置されます。</p>
     
      <p>FormItem の子のレイアウトをさらに制御する必要がある場合は、FormItem の直接の子として Grid や Tile などのコンテナを使用し、このコンテナの内部に必要なコントロールを配置します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:FormItem:itemLabel:get"><apiName>itemLabel</apiName><shortdesc>
      FormItem のラベルを表示する、FormItemLabel サブコンポーネントへの読み取り専用の参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls:Label</apiValueClassifier></apiValueDef><apiDesc>
      FormItem のラベルを表示する、FormItemLabel サブコンポーネントへの読み取り専用の参照です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:label:get"><apiName>label</apiName><shortdesc>
      FormItem のテキストラベルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      FormItem のテキストラベルです。 このラベルは、フォームアイテムの子コンポーネントの左に表示されます。 ラベルの位置は、<codeph>textAlign</codeph> スタイルプロパティによって制御されます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:required:get"><apiName>required</apiName><shortdesc>
      true の場合、FormItem の子がユーザー入力を要求していることを示すインジケーターを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、FormItem の子がユーザー入力を要求していることを示すインジケーターを表示します。 <codeph>false</codeph> の場合、インジケーターは表示されません。
     
      <p>このプロパティは、インジケーターの表示のみを制御します。 入力を検証する必要がある場合は、子に検証を組み込む必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Box"><apiName>Box</apiName><shortdesc>
  Halo Box コンテナでは、子が単一の垂直列または水平行にレイアウトされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Box" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.VGroup" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.HGroup" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  コンテナの上の境界と、コンテンツ領域の上部との間のピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  コンテナの下の境界と、コンテンツ領域の下部との間のピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 6 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 8 になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の垂直方向の配置です。 有効な値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph> および <codeph>"bottom"</codeph> です。 デフォルト値は <codeph>"top"</codeph> ですが、ButtonBar、ControlBar、LinkBar、ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> ですが、ButtonBar や ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Box&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <p>
  <pre>
  &lt;mx:Box
    <strong>Properties</strong>
    direction="vertical|horizontal"
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Box&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Halo Box コンテナでは、子が単一の垂直列または水平行にレイアウトされます。垂直レイアウトと水平レイアウトのいずれを使用するかは、<codeph>direction</codeph> プロパティで指定します。デフォルトは垂直レイアウトです。
 
  <p><b>メモ：</b> 可能な場合は、Halo Box コンテナではなく、Spark コンテナを HorizontalLayout または VerticalLayout と共に使用することをお勧めします。</p>
 
  <p>Box クラスは、VBox と HBox の基本クラスです。 Box コンテナを定義するには、<codeph>&lt;mx:Box></codeph>、<codeph>&lt;mx:VBox></codeph>、および <codeph>&lt;mx:HBox></codeph> タグを使用します。</p>
 
  <p>Box コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry><b>垂直ボックス</b> height は、デフォルトの高さまたは明示的に指定した高さを持つすべての子を収容し、さらに垂直方向の子同士の間隔、コンテナの上下のパディングを収容できる十分な大きさです。 width は、最も広い幅を持つ子のデフォルトの幅または明示的に指定した幅に、コンテナの左右のパディングを加えた値です。 <b>水平ボックス</b> width は、デフォルトの幅を持つすべての子、水平方向の子同士の間隔、およびコンテナの左右のパディングをすべて収容できる十分な大きさです。 height は、最も高い子のデフォルトの高さまたは明示的に指定した高さに、コンテナの上下のパディングを加えた値です。
           </entry>
        </row><row>
           <entry>デフォルトパディング</entry>
           <entry>top、bottom、left、right ともに 0 ピクセル。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleBoxExample.mxml"><swfblock conref="examples/SimpleBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Box:Box"><apiName>Box</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Box:protected:measure"><apiName>measure</apiName><shortdesc>
      Box コンテナのデフォルトサイズ、および最小値と最大値を計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Box コンテナのデフォルトサイズ、および最小値と最大値を計算します。
     
      <p>Box コンテナの <codeph>direction</codeph> プロパティが <codeph>BoxDirection.HORIZONTAL</codeph> に設定されると、その <codeph>measuredWidth</codeph> プロパティはすべての子のデフォルトの幅の合計に境界線の幅、左右のパディング、および子同士の間の水平ギャップを加えたものと等しくなります。 <codeph>measuredHeight</codeph> プロパティの値は、子のデフォルトの高さの最大値に境界線の領域およびパディングの領域を加えたものになります。 Box コンテナの <codeph>direction</codeph> プロパティが <codeph>BoxDirection.VERTICAL</codeph> に設定されると、これら 2 つの値が入れ替わります。</p>
     
      <p>Box コンテナの <codeph>minWidth</codeph> および <codeph>minHeight</codeph> プロパティは、子の最小幅と最小高さを組み合わせて同様に計算されます。 子の <codeph>width</codeph> プロパティがパーセント値である場合、Box コンテナの最小幅は子の <codeph>minWidth</codeph> プロパティの値に等しくなります。 子の <codeph>width</codeph> が設定されていない場合や固定値である場合は、子は増大または縮小せず、Box コンテナの最小幅は子の <codeph>explicitWidth</codeph> プロパティの値に等しくなります。 子の最小高さも同様に計算されます。</p>
     
      <p>Box コンテナの <codeph>maxWidth</codeph> および <codeph>maxHeight</codeph> プロパティは計算されません。 Box コンテナの最大幅と最大高さは無限であると想定されます。</p>
     
      <p>前述の値はすべて、Box コンテナの<i>計算された</i>幅と高さです。 以下のプロパティの値を明示的に指定することにより、測定値をオーバーライドできます。</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p><codeph>measure()</codeph> メソッドは直接呼び出さないでください。 Flex LayoutManager が適切なタイミングで呼び出します。 Flex LayoutManager は、アプリケーションの起動時に、子から親に至るすべてのコンポーネントを測定してから、それぞれに最終的なサイズを設定しようとします。</p>
     
      <p>これは、サブクラスの処理で使用する高度なメソッドです。 このメソッドをオーバーライドする場合は、実装で <codeph>super.measure()</codeph> メソッドを呼び出すか、または <codeph>measuredHeight</codeph> および <codeph>measuredWidth</codeph> プロパティを設定する必要があります。 また、オプションで次のプロパティも設定できます。</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>どちらのプロパティも前述のレイアウトプロパティに対応しているため、これ以上取り上げません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:pixelsToPercent"><apiName>pixelsToPercent</apiName><shortdesc>
      ピクセル数を、このコンテナのコンテンツに対するパーセント値に変換するために使用するメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このコンテナの現在のレイアウト状態での <codeph>pxl</codeph> と等しいパーセント値です。 負の値は、コンテナが要求されたサイズを収めるために増大する必要があることを示します。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>pxl</apiItemName><apiType value="Number"/><apiDesc>パーセント値が必要なピクセルの数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ピクセル数を、このコンテナのコンテンツに対するパーセント値に変換するために使用するメソッドです。
     
      <p>パーセント値は、コンテナのサイズまたはレイアウトが変更されない間のみ適切です。 サイズやレイアウトを変更すると、このメソッドから返される値が最新のものではなくなることがあります。</p>
     
      <p>このメソッドの使用例として、コンポーネントを非表示にした後、そのサイズを特定のピクセル数に復元することなどが考えられます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Box コンテナの各子のサイズと位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Box コンテナの各子のサイズと位置を設定します。
     
      <p>Box コンテナのレイアウトアルゴリズムを理解するために、ここでは Box コンテナの方向が水平であると仮定します。</p>
     
      <p>Box コンテナの子すべてが単一の水平行に隣り合って配置されており、隣接する 2 つの子の間には <codeph>horizontalGap</codeph> で指定したピクセル数の間隔があります。 明示的な幅の値がない子の幅は、<codeph>measuredWidth</codeph> プロパティと同じ値に設定されます。</p>
     
      <p>子の <codeph>measuredWidth</codeph> プロパティの値の合計が Box コンテナの幅より大きくまたは小さくなり、<codeph>width</codeph> プロパティの値がパーセント値である子がある場合には、これらの子のサイズはすべての子が Box の幅に完全に収まるまで増大または縮小します。 ただし、子が <codeph>minWidth</codeph> プロパティの値より小さくなる、または <codeph>maxWidth</codeph> プロパティの値より大きくなることはありません。 増大する子の間に、子の <codeph>percentWidth</codeph> に比例して領域が追加されます。縮小する子の場合には、その子の間にある領域が percentWidth に比例して削除されます。 例えば、40% の <codeph>percentWidth</codeph> を持つ子は、領域がすべて満たされるか、指定したサイズに到達するまで、20% の <codeph>percentWidth</codeph> を持つ子の 2 倍に増大します。</p>
     
      <p>フレキシブルなすべての子が増大または縮小した後、子の幅の合計が Box コンテナの幅と一致するかどうかがチェックされます。 一致しない場合には、子が Box の左端、右端、または中央揃えに整列されるように、子のグループ全体が Box コンテナの <codeph>horizontalAlign</codeph> プロパティの値に応じてシフトします。</p>
     
      <p>子の高さを決定するために、Flex は子の <codeph>height</codeph> プロパティの値を確認します。 <codeph>height</codeph> が設定されない場合は、子の高さはその <codeph>measuredHeight</codeph> に設定されます。 <codeph>height</codeph> がピクセル値に設定されると、その値が使用されます。 <codeph>height</codeph> がパーセント値に設定されると、子の高さは Box の高さの指定したパーセントに一致するように増大または縮小します。ただし、子の高さが <codeph>minHeight</codeph> プロパティの値より小さくなる、または <codeph>maxHeight</codeph> プロパティの値より大きくなることはありません。</p>
     
      <p>子の垂直方向の位置は、Box コンテナの <codeph>verticalAlign</codeph> プロパティによって決定されます。 子はそれぞれ Box の上端、下端、または中央に整列されるようにシフトします。</p>
     
      <p>Box コンテナの <codeph>direction</codeph> が <codeph>vertical</codeph> である場合にもこれと同じ規則が当てはまりますが、幅と高さが入れ替わります。 子は、単一の垂直列に配置されます。</p>
     
      <p>このメソッドを直接呼び出すことは避けてください。 Flex LayoutManager が適切なタイミングで呼び出します。 Flex LayoutManager は、アプリケーションの起動時に、Application オブジェクトから始まって下方向にある全コンポーネントに対して <codeph>updateDisplayList()</codeph> メソッドを呼び出します。</p>
     
      <p>これは、サブクラスの処理で使用する高度なメソッドです。 このメソッドをオーバーライドする場合は、実装で <codeph>super.updateDisplayList()</codeph> メソッドを呼び出して、それぞれの子で <codeph>move()</codeph> および <codeph>setActualSize()</codeph> メソッドを呼び出す必要があります。 レイアウトを実行するために、このコンテナのサイズは <codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> の各プロパティから取得してください（<codeph>width</codeph> および <codeph>height</codeph> プロパティではなく）。 <codeph>width</codeph> および <codeph>height</codeph> プロパティは、このコンテナの <codeph>scaleX</codeph> および <codeph>scaleY</codeph> プロパティの値を考慮しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Box:direction:get"><apiName>direction</apiName><shortdesc>
      この Box コンテナが子をレイアウトする方向です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>BoxDirection.VERTICAL
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この Box コンテナが子をレイアウトする方向です。 有効な MXML 値は、<codeph>"horizontal"</codeph> および <codeph>"vertical"</codeph> です。 ActionScript で可能な値は、<codeph>BoxDirection.HORIZONTAL</codeph> および <codeph>BoxDirection.VERTICAL</codeph> です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>