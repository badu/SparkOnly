<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.managers"><apiName>mx.managers</apiName><apiDetail/><apiClassifier id="mx.managers:HistoryManager"><apiName>HistoryManager</apiName><shortdesc>
  履歴管理を使用すると、ユーザーは Web ブラウザーの「戻る」および「進む」ナビゲーション機能を使用して、Flex アプリケーション内を移動できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  履歴管理を使用すると、ユーザーは Web ブラウザーの「戻る」および「進む」ナビゲーション機能を使用して、Flex アプリケーション内を移動できます。 
  
  <p>一般に、アプリケーションの状態を維持し、URL およびブラウザー履歴を操作するには、BrowserManager クラスと深いリンクを使用する必要がありますが、古い Flex アプリケーションを維持する場合などの特定の状況では、HistoryManager クラスが役立ちます。 HistoryManager クラスと BrowserManager クラスを同じ Flex アプリケーション内で使用することはできません。これは、これらのクラスが同じサポートファイルのセットを使用する場合でも同じです。</p>
  
  <p>Accordion コンテナおよび TabNavigator コンテナの履歴管理は、デフォルトで有効になっています。 すなわち、Accordion コントロールのいずれかのペインを選択した場合、ブラウザーの戻るボタンまたは「戻る」ナビゲーション機能を使用して前のペインに戻ることができます。 ViewStack ナビゲーターコンテナでは、履歴管理はデフォルトで無効になっています。</p>
  
  <p>履歴管理を無効にするには、ナビゲーターコンテナの <codeph>historyManagementEnabled</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
  
  <p>他のオブジェクトも、HistoryManager に登録すれば、アプリケーションで履歴管理を有効にできます。 コンポーネントを HistoryManager クラスに登録するには、IHistoryManagerClient インターフェイスを実装するコンポーネントインスタンスへの参照を指定して、HistoryManager クラスの <codeph>register()</codeph> メソッドを呼び出します。 次の例では、Application コンポーネントの初期化時に、Application コンポーネント (<codeph>this</codeph>) を HistoryManager クラスに登録しています。
  <pre>
  &lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
    implements="mx.managers.IHistoryManagerClient" 
    initialize="mx.managers.HistoryManager.register(this);">
  </pre>
  コンポーネントの登録を完了するには、IHistoryManagerClient インターフェイスの <codeph>saveState()</codeph> メソッドおよび <codeph>loadState()</codeph> メソッドも実装する必要があります。 UIComponent を拡張するコンポーネントは、自動的に <codeph>loadState()</codeph> メソッドを継承します。</p>
  
  <p>HistoryManager のメソッドとプロパティはすべて静的なので、そのインスタンスを作成する必要はありません。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links><apiOperation id="mx.managers:HistoryManager:initialize"><apiName>initialize</apiName><shortdesc>
      非推奨 - HistoryManager を初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sm</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>このアプリケーションの SystemManager です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      非推奨 - HistoryManager を初期化します。 通常は、このメソッドを呼び出す必要はありません。<codeph>historyManagementEnabled</codeph> を使用してコンポーネントを追加すると常に、このメソッドが自動的に呼び出されるためです。 ただし、HistoryManager はトップレベルアプリケーションから初期化しないと、正しく機能しません。 アプリケーションに HistoryManager が有効になっているコンポーネントがない場合、HistoryManager が有効になっているコンポーネントを持つ別のサブアプリケーションをロードするときは、メインアプリケーションで <codeph>HistoryManager.initialize()</codeph> メソッドを呼び出す必要があります。通常これは、アプリケーションの <codeph>initialize</codeph> イベントハンドラーから行います。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:register"><apiName>register</apiName><shortdesc>
      オブジェクトを HistoryManager に登録します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>登録するオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      オブジェクトを HistoryManager に登録します。 このオブジェクトは、IHistoryManagerClient インターフェイスを実装する必要があります。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:HistoryManager:save"><apiName>save</apiName><shortdesc>
      アプリケーションの現在の状態を保存して、後で復元できるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      アプリケーションの現在の状態を保存して、後で復元できるようにします。 このメソッドは、ナビゲーターコンテナのナビゲーション状態が変わると、ナビゲーターコンテナによって自動的に呼び出されます。 インターフェイスを HistoryManager に登録した場合は、アプリケーションの状態が変わったときに <codeph>save()</codeph> メソッドを呼び出す必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:unregister"><apiName>unregister</apiName><shortdesc>
      オブジェクトを HistoryManager から登録解除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>登録解除するオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      オブジェクトを HistoryManager から登録解除します。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:PopUpManagerChildList"><apiName>PopUpManagerChildList</apiName><shortdesc>
  PopUpManagerChildList クラスは、PopUpManager の addPopUp() メソッドおよび createPopUp() メソッドの detail プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpManagerChildList クラスは、次の PopUpManager メソッドの <codeph>detail</codeph> プロパティの定数値を定義します。PopUpManager <codeph>addPopUp()</codeph> および <codeph>createPopUp()</codeph> メソッド
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManager"><linktext>PopUpManager</linktext></link></related-links><apiValue id="mx.managers:PopUpManagerChildList:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	  ポップアップがアプリケーションと同じ子のリストに配置されることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  ポップアップがアプリケーションと同じ子のリストに配置されることを示します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:PARENT"><apiName>PARENT</apiName><shortdesc>
	  ポップアップが親コンポーネントを含む子リストに配置されることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  ポップアップが親コンポーネントを含む子リストに配置されることを示します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:POPUP"><apiName>POPUP</apiName><shortdesc>
	  ポップアップがポップアップの子リストに配置されるため、アプリケーションレイヤーにあるその他のポップアップの上に浮動表示されることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>popup</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  ポップアップがポップアップの子リストに配置されるため、アプリケーションレイヤーにあるその他のポップアップの上に浮動表示されることを示します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComponent"><apiName>IFocusManagerComponent</apiName><shortdesc>
  IFocusManagerComponent インターフェイスは、フォーカス可能なコンポーネントが FocusManager からフォーカスを取得するために実装しなければならないインターフェイスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManagerComponent インターフェイスは、フォーカス可能なコンポーネントが FocusManager からフォーカスを取得するために実装しなければならないインターフェイスを提供します。 このインターフェイスの基本実装は UIComponent クラスで行われますが、UIComponent は完全な IFocusManagerComponent インターフェイスを実装しません。一部の UIComponent ではフォーカスを受け取ることが想定されていないためです。 そのため、UIComponent から派生したコンポーネントを有効なフォーカス可能コンポーネントにするには、単にクラス定義に「implements IFocusManagerComponent」を追加します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> の場合はフォーカスインジケーターを描画し、それ以外の場合は非表示にします。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。 コンポーネントは、コンポーネントにフォーカスがあることを示すグラフィックを描画するか、非表示にします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。 コンポーネントは、受け取ったフォーカスを内部コンポーネントに設定します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      コンポーネントが選択時にフォーカスを取得できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントが選択時にフォーカスを取得できるかどうかを示すフラグです。
     
      <p>最適化するには、使用するコンポーネントの子コンポーネントが IFocusManagerComponent インターフェイスを実装し、そのコンポーネントにフォーカスを取得させない場合、<codeph>focusEnabled</codeph> を <codeph>false</codeph> に設定します。これは、子コンポーネントで <codeph>addChild()</codeph> を呼び出す前に行います。</p>
     
      <p>これによって、FocusManager はこのコンポーネントを無視し、このコンポーネントの <codeph>tabFocusEnabled</codeph>、<codeph>hasFocusableChildren</codeph> および <codeph>mouseFocusEnabled</codeph> プロパティの変更を監視しなくなります。 これは、<codeph>addChild()</codeph> の後にはこの値を変更することも、FocusManager からの通知を期待することもできないことを意味します。</p>
     
      <p>メモ：これは、<codeph>setFocus()</codeph> メソッドで、プログラムによってこのオブジェクトにフォーカスを置くことができないことを意味するものではありません。これは単に、FocusManager に Tab およびマウスの検索でこの IFocusManagerComponent コンポーネントを無視するように指示するだけです。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc conref="mx.core.UIComponent#hasFocusableChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#hasFocusableChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      コンポーネントがマウスでの選択時にフォーカスを取得できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがマウスでの選択時にフォーカスを取得できるかどうかを示すフラグです。 <codeph>false</codeph> の場合、フォーカスは、<codeph>mouseFocusEnabled</codeph> である最初の親に移動されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Tab キーを使用して、このコンポーネントまでフォーカスを移動できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Tab キーを使用して、このコンポーネントまでフォーカスを移動できるかどうかを示すフラグです。 <codeph>false</codeph> の場合でも、マウスでの選択または <codeph>setFocus()</codeph> の呼び出しによって、フォーカスを移すことができます。このプロパティは、Flex アプリケーションでは true に設定する必要のある InteractiveObject.tabEnabled を置き換えます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabIndex:get"><apiName>tabIndex</apiName><shortdesc>
      tabFocusEnabled の場合、コンポーネントがフォーカスを受け取る順序を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph>tabFocusEnabled</codeph> の場合、コンポーネントがフォーカスを受け取る順序を示します。-1 の場合、コンポーネントは z 順序に応じてフォーカスを取得します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:BrowserManager"><apiName>BrowserManager</apiName><shortdesc>
  BrowserManager は、ブラウザーとアプリケーションとの間のプロキシとして機能するシングルトンマネージャーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  BrowserManager は、ブラウザーとアプリケーションとの間のプロキシとして機能するシングルトンマネージャーです。 これは、ブラウザーのアドレスバーの URL にアクセスするためのものであり、JavaScript の <codeph>document.location</codeph> プロパティに似ています。 <codeph>url</codeph> プロパティが変更されると、イベントが送出されます。 リスナーはこれを受けて URL を変更したり、他のインスタンスがイベントを取得しないようブロックしたりします。 
 
  <p>BrowserManager を使用するには、<codeph>getInstance()</codeph> メソッドを呼び出してマネージャーの現在のインスタンスを取得してから、そのマネージャーのメソッドを呼び出し、イベントをリッスンします。 使用するメソッド、プロパティおよびイベントについては、IBrowserManager クラスを参照してください。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#IBrowserManager"><linktext>mx.managers.IBrowserManager</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:BrowserManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。
      
      </apiDesc><apiOperationClassifier>mx.managers:IBrowserManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IHistoryManagerClient"><apiName>IHistoryManagerClient</apiName><shortdesc>
  History Manager に登録されたオブジェクトによって実装されるインターフェイス。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  History Manager に登録されたオブジェクトによって実装されるインターフェイス。 このインターフェイスのメソッドは、アプリケーションの履歴状態を保存およびロードするときに呼び出されます。
 
  <p>このインターフェイスは、Flex ナビゲーターコンテナである TabNavigator、Accordion、および ViewStack によって実装されます。 また、HistoryManager に登録されたこれ以外のコンポーネントによっても実装される必要があります。</p> 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:loadState"><apiName>loadState</apiName><shortdesc>
	  このオブジェクトの状態をロードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>ロードする、このオブジェクトの状態です。 アプリケーションの初期状態をロードしているとき、これは null になります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  このオブジェクトの状態をロードします。
	  
	  </apiDesc><example>以下のコードは、保存された状態から、選択されたインデックスおよび検索ストリングをロードします。
	  <pre>
	  public function loadState(state:Object):void
	  {
	  	// First, check to see if state is null. When the app is reset
	  	// back to its initial state, loadState() is passed null.
	  	if (state == null)
	  	{
	 		myList.selectedIndex = -1;
	  		mySearchInput.text = "";
	  	}
	  	else
	  	{
	  		myList.selectedIndex = state.selectedIndex;
	  		mySearchInput.text = state.searchString;
	  	}
	  }
	  </pre>
	  
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:saveState"><apiName>saveState</apiName><shortdesc>
	  このオブジェクトの状態を保存します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトの状態です。
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	  このオブジェクトの状態を保存します。 このオブジェクトには、状態とともに保存される、各プロパティの名前と値のペアが含まれます。 
	 
	  <p>History Manager は、すべてのコンポーネントから状態情報を収集し、その情報を URL 形式でエンコードします。 ほとんどのブラウザーで URL の長さに制限があるため、返される状態情報は、可能な限り短くする必要があります。</p>
	 
	  </apiDesc><example>以下のコードは、リストで選択されたインデックス、および検索ストリングを保存します。
	  <pre>
	  public function saveState():Object
	  {
	  	var state:Object = {};
	 
	  	state.selectedIndex = myList.selectedIndex;
	  	state.searchString = mySearchInput.text;
	 
	  	return state;
	 }
	 </pre>
	 
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:toString"><apiName>toString</apiName><shortdesc>
	  このオブジェクトを一意のストリングに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトの一意の ID です。
	  
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  このオブジェクトを一意のストリングに変換します。 UIComponent によって実装されます。
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:ISystemManager"><apiName>ISystemManager</apiName><shortdesc>
  ISystemManager は「アプリケーションウィンドウ」を管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISystemManager は「アプリケーションウィンドウ」を管理します。 デスクトップ上またはブラウザーで実行されるすべてのアプリケーションには、アプリケーションのビジュアルオブジェクトが表示される領域があります。 これは、オペレーティングシステムのウィンドウである場合と、ブラウザー内の領域である場合があります。 これが「アプリケーションウィンドウ」で、アプリケーション内のメインの「最上位」ウィンドウである <codeph>mx.core.Application</codeph> のインスタンスとは異なります。
 
  <p>すべてのアプリケーションには ISystemManager があります。 ISystemManager は、アプリケーションウィンドウのサイズが変更されたときにイベントを送信します（アプリケーションウィンドウのサイズは、オペレーティングシステムのウィンドウまたはブラウザーでの操作によってのみ変更可能で、アプリケーション内から変更することはできません）。 これは、メイン mx.core.Application のインスタンスやすべてのポップアップ、ツールヒント、カーソルなど、アプリケーション内で表示可能なすべてのアイテムの親となります。 ISystemManager を親とするオブジェクトは、ツールヒントやカーソルであっても、「最上位」ウィンドウと見なされます。</p>
 
  <p>また、複数の IFocusManagerContainer が表示されていて、ユーザーがこれらの IFocusManagerContainer 内のコンポーネントを操作している場合、ISystemManager は最上位ウィンドウ間でフォーカスを切り替えます。</p>
 
  <p>ISystemManager では明示的にトラップされないキーボード操作およびマウス操作がすべて認識されるため、操作を監視する必要がある場合には適切な監視場所となります。</p>
 
  <p>アプリケーションが別のアプリケーションにロードされた場合でも、ISystemManager は作成されますが、セキュリティやドメインの規則によっては「アプリケーションウィンドウ」を監視しないことがあります。 その代わり、<codeph>content</codeph>（ロードを行った <codeph>Loader</codeph>）になり、単にサブアプリケーションの親として機能します。</p>
 
  <p>ISystemManager では、ツールヒント、カーソル、ポップアップウィンドウごとに、子のリストを維持します。 これによって、ポップアップウィンドウがメインアプリケーションウィンドウの上に「浮動表示」され、その上にツールヒントが浮動表示され、さらにその上にカーソルが浮動表示されるようになります。 ISystemManager の <codeph>numChildren</codeph> プロパティまたは <codeph>getChildAt()</codeph> メソッドを調べる場合は、メインアプリケーションウィンドウや、ポップアップ表示されないその他のウィンドウにアクセスすることになります。 ポップアップ、ツールヒント、およびカーソルを含むすべてのウィンドウのリストを取得するには、<codeph>rawChildren</codeph> プロパティを使用します。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      マウスシールドを展開または削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>マウスシールドを展開する場合は <codeph>true</codeph>、マウスシールドを削除する場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      マウスシールドを展開または削除します。マウスシールドは、信頼されていないアプリケーションへのマウス入力をブロックします。マウス入力をブロックする理由は、信頼されていないアプリケーションにドラッグした場合に、通常はマウス移動イベントを受信できないためです。Flash Player では、セキュリティを考慮して、信頼されている境界と信頼されていない境界をまたがってイベントは送信されません。信頼されていないアプリケーションをマウスシールドで保護することにより (その親であることが前提です)、マウス移動メッセージを取得でき、ドラッグ操作が期待どおりに動作します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
	  指定されたストリングをクラスか、またはパッケージレベルの関数に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>name</codeph> で表されるクラス、または null。
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>クラスの名前。例えば、「mx.video.VideoManager」などがあります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  指定されたストリングをクラスか、またはパッケージレベルの関数に変換します。 別のアプリケーションにロードされるかどうかに基づいて、適切な <codeph>ApplicationDomain.getDefinition()</codeph> メソッドを呼び出します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      この SecurityDomain のすべての最上位システムマネージャーのルートであるシステムマネージャーを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>サンドボックス内の最上位の systemManager です。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      この SecurityDomain のすべての最上位システムマネージャーのルートであるシステムマネージャーを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      メインアプリケーションにあるシステムマネージャーの取得を試行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>セキュリティ制限によって許可されている場合はメインアプリケーションの systemManager、異なる SecurityDomain にある場合は null です。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      メインアプリケーションにあるシステムマネージャーの取得を試行します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトの可視部分を含む <codeph>Rectangle</codeph> です。矩形はグローバル座標にあります。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>オプションです。可視矩形の開始境界です。境界はグローバル座標にあります。<codeph>bounds</codeph> が null の場合、開始境界はシステムマネージャーの <codeph>screen</codeph> プロパティによって定義されます。 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      親の SWFLoader にアプリケーションのサイズが変更された可能性があることを通知しようとします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      親の SWFLoader にアプリケーションのサイズが変更された可能性があることを通知しようとします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      このアプリケーションに必須フォントが埋め込まれている場合、または Font.registerFont() メソッドを使用してグローバルに登録されている場合は true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このアプリケーションに必須フォントが埋め込まれている場合、または <codeph>Font.registerFont()</codeph> メソッドを使用してグローバルに登録されている場合は <codeph>true</codeph> となります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>tf</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>文字フォーマット情報を表す TextFormat クラスです。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      このアプリケーションに必須フォントが埋め込まれている場合、または <codeph>Font.registerFont()</codeph> メソッドを使用してグローバルに登録されている場合は <codeph>true</codeph> を返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
      このシステムマネージャーが、すべての最上位システムマネージャーのルートかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>SystemManager が表示リストのすべての SystemManager のルートである場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      このシステムマネージャーが、すべての最上位システムマネージャーのルートかどうかをテストします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
	  この ISystemManager がアプリケーションウィンドウを管理する場合は true を返します。このアプリケーションが別のアプリケーションにロードされている場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この ISystemManager がアプリケーションウィンドウを管理する場合は <codeph>true</codeph> となります。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  この ISystemManager がアプリケーションウィンドウを管理する場合は <codeph>true</codeph> を返します。このアプリケーションが別のアプリケーションにロードされている場合は <codeph>false</codeph> を返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
	  この ISystemManager を親とするカスタムカーソルのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  この ISystemManager を親とするカスタムカーソルのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、最上位ウィンドウ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。 カスタムカーソルには、<codeph>cursorChildren</codeph> プロパティを使用してアクセスできます。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>cursorChildren.numChildren</codeph> はカスタムカーソルの数（0 または 1 のいずれか）を示し、カスタムカーソルが存在する場合には <codeph>cursorChildren.getChildAt(0)</codeph> を使用してアクセスできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:document:get"><apiName>document</apiName><shortdesc>
	  ドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  ドキュメントオブジェクトへの参照です。 ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または AS コンポーネントの階層の最上位にあるオブジェクトです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
	  コンポーネント間で共有される単一の Sprite で、フォーカスを描画するためのオーバーレイとして使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
	  コンポーネント間で共有される単一の Sprite で、フォーカスを描画するためのオーバーレイとして使用されます。 フォーカスがあるコンポーネントの親である場合はこれを共有し、IFocusManagerComponent の場合は共有しません。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
	  ISystemManager がプロキシであり、ルートクラスでない場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  ISystemManager がプロキシであり、ルートクラスでない場合は true です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc>
	  アプリケーションに関する情報を表す LoaderInfo オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc>
	  アプリケーションに関する情報を表す LoaderInfo オブジェクトです。
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      モーダルウィンドウの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      モーダルウィンドウの数です。  
     
      <p>通常、別のウィンドウでクリックすると、そのウィンドウの FocusManager がアクティブになりますが、モーダルウィンドウではこのクリック操作は許可されません。 PopUpManager は、モーダルウィンドウを作成したとき、および破棄したときに、このカウントを変更します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
	  この ISystemManager を親とする topMost （ポップアップ）ウィンドウのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  この ISystemManager を親とする topMost （ポップアップ）ウィンドウのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。 最上位ウィンドウには、<codeph>popUpChildren</codeph> プロパティを使用してアクセスできます。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>popUpChildren.numChildren</codeph> は最上位ウィンドウの数を示し、これらのウィンドウには <codeph>popUpChildren.getChildAt(i)</codeph> を使用してアクセスできます。</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  この ISystemManager を親とするすべての子のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  この ISystemManager を親とするすべての子のリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:screen:get"><apiName>screen</apiName><shortdesc>
	  アプリケーションウィンドウのサイズと位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  アプリケーションウィンドウのサイズと位置です。 Rectangle オブジェクトには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> および <codeph>height</codeph> プロパティがあります。Rectangle はサンドボックスルート座標にあります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:stage:get"><apiName>stage</apiName><shortdesc>
	  この SystemManager にマッピングされたアプリケーションを表す flash.display.Stage です。
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
	  この SystemManager にマッピングされたアプリケーションを表す flash.display.Stage です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
	  この ISystemManager を親とするツールヒントのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  この ISystemManager を親とするツールヒントのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、最上位ウィンドウ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>toolTipChildren.numChildren</codeph> はツールヒントの数（0 または 1 のいずれか）を示し、ツールヒントが存在する場合には <codeph>toolTipChildren.getChildAt(0)</codeph> を使用してアクセスできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
	  アプリケーションウィンドウを管理する ISystemManager です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
	  アプリケーションウィンドウを管理する ISystemManager です。 このアプリケーションが別のアプリケーションにロードされている場合を除き、同じ ISystemManager となります。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ToolTipManager"><apiName>ToolTipManager</apiName><shortdesc>
  ToolTipManager を使用すると、ツールヒントの表示の遅延時間や無効化など、ツールヒントやエラーヒントの基本的な機能を設定できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToolTipManager を使用すると、ツールヒントの表示の遅延時間や無効化など、ツールヒントやエラーヒントの基本的な機能を設定できます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link></related-links><apiOperation id="mx.managers:ToolTipManager:createToolTip"><apiName>createToolTip</apiName><shortdesc>
      指定されたテキストを使用した ToolTip クラスのインスタンスを作成し、ステージ座標の指定された位置に表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>新しく作成されたツールヒントです。
     
      
      </apiDesc><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>ツールヒントのインスタンスに表示するテキストです。
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>ツールヒントのステージ座標での水平座標。 複数のステージがある場合は、<codeph>context</codeph> 引数から、関連するステージを判別します。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>ツールヒントのステージ座標での垂直座標。 複数のステージがある場合は、<codeph>context</codeph> 引数から、関連するステージを判別します。
     
      </apiDesc></apiParam><apiParam><apiItemName>errorTipBorderStyle</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>エラーヒントの境界線スタイル。 このメソッドのパラメーターは、null、「errorTipRight」、「errorTipAbove」、または「errorTipBelow」のいずれかになります。 null の場合、<codeph>createToolTip()</codeph> メソッドは標準ツールヒントを作成します。 「errorTipRight」、「errorTipAbove」、または「errorTipBelow」の場合、<codeph>createToolTip()</codeph> メソッドはエラーヒントを作成し、このパラメーターによってエラーヒントの矢印がどこを指すかが決定されます（エラーのターゲット）。 例えば、「errorTipRight」を渡すと、エラーヒントは（x および y パラメーターを使用して）エラーターゲットの右側に配置されます。矢印は、エラーヒントの左端にあります。
     
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>使用する StyleManager を決定します。通常は、ツールヒントが表示されるオブジェクトを渡すため、ツールヒントの StyleManager は、そのオブジェクトで使用されるものと同じです。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたテキストを使用した ToolTip クラスのインスタンスを作成し、ステージ座標の指定された位置に表示します。
     
      <p>ツールヒントは、カーソルを除いたすべてのエレメントの上部に独自の層で表示されます。</p>
     
      <p>ツールヒントの標準的な使用方法は、<codeph>toolTip</codeph> プロパティが設定されたオブジェクト上にユーザーがマウスを移動したときに、ツールヒントの表示と非表示を ToolTipManager によって自動的に切り替えるようにすることです。 ToolTipManager の <codeph>enabled</codeph> プロパティを <codeph>false</codeph> に設定すると、この自動ツールヒント管理を無効にできます。</p>
     
      <p>一方、このメソッド（および <codeph>destroyToolTip()</codeph>）を使用すると、ツールヒントをプログラムで制御できます。 ツールヒントをいつ、どこに表示するかを選択することが可能で、さらに必要に応じて複数のツールヒントを同時に表示することもできます （ToolTipManager でこのような操作を行うことはありません。これを行うと、通常はユーザーを混乱させることになるためです）。</p>
     
      <p>このメソッドは ToolTip の新しいインスタンスを作成してから、<codeph>addChild()</codeph> メソッドを呼び出して、このインスタンスを SystemManager のツールヒントレイヤーに配置します。 エラーヒントを表示する場合は、このメソッドによって適切なスタイルが設定されます。 次に、このメソッドは、ツールヒントのテキストを設定し、そのテキストに基づいてツールヒントのサイズを設定して、指定された場所に配置します。</p>
     
      <p>このメソッドが返すツールヒントへの参照を保存して、<codeph>destroyToolTip()</codeph> メソッドに渡せるようにする必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ToolTipManager:destroyToolTip"><apiName>destroyToolTip</apiName><shortdesc>
      createToolTip() メソッドで作成された特定の ToolTip を破棄します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toolTip</apiItemName><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier><apiDesc>破棄する ToolTip のインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>createToolTip()</codeph> メソッドで作成された特定の ToolTip を破棄します。
     
      <p>このメソッドは <codeph>removeChild()</codeph> メソッドを呼び出して、指定された ToolTip を SystemManager のツールヒントレイヤーから削除します。 このツールヒントへの参照を維持しない限り、ツールヒントはガベージコレクションされます。</p>
     
      <p>このメソッドは、ToolTipManager の <codeph>currentToolTip</codeph> では使用しないでください。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ToolTipManager:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
      現在ツールヒントを表示している UIComponent です。表示されているツールヒントがない場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      現在ツールヒントを表示している UIComponent です。表示されているツールヒントがない場合は <codeph>null</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:currentToolTip:get"><apiName>currentToolTip</apiName><shortdesc>
      現在表示されている ToolTip オブジェクトです。表示されている ToolTip オブジェクトがない場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IToolTip</apiValueClassifier></apiValueDef><apiDesc>
      現在表示されている ToolTip オブジェクトです。表示されている ToolTip オブジェクトがない場合は <codeph>null</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:enabled:get"><apiName>enabled</apiName><shortdesc>
      true の場合、ユーザーがマウスポインターをコンポーネント上に移動すると、ToolTipManager が自動的にツールヒントを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、ユーザーがマウスポインターをコンポーネント上に移動すると、ToolTipManager が自動的にツールヒントを表示します。 <codeph>false</codeph> の場合、ツールヒントは表示されません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideDelay:get"><apiName>hideDelay</apiName><shortdesc>
      表示されたツールヒントを非表示にするまでに Flex が待機する時間（ミリ秒）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示されたツールヒントを非表示にするまでに Flex が待機する時間（ミリ秒）です。 非表示になったツールヒントを再び表示するには、いったんコンポーネントの外側にマウスを移動してから、再度そのコンポーネント上にマウスを移動する必要があります。 <codeph>hideDelay</codeph> プロパティを <codeph>Infinity</codeph> に設定した場合、マウスをコンポーネントの外側に移動するなど、ユーザーが何らかのイベントをトリガーするまでツールヒントは表示されたままになります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideEffect:get"><apiName>hideEffect</apiName><shortdesc>
      ツールヒントを非表示にするときに再生するエフェクトです。エフェクトを使用せずにツールヒントを非表示にする場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ツールヒントを非表示にするときに再生するエフェクトです。エフェクトを使用せずにツールヒントを非表示にする場合は <codeph>null</codeph> になります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:scrubDelay:get"><apiName>scrubDelay</apiName><shortdesc>
      ユーザーがコントロール間でマウスポインターを移動したときに、Flex が次のツールヒントを表示するまでの時間（showDelay で指定された時間）を再度待機するまでの時間（ミリ秒）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがコントロール間でマウスポインターを移動したときに、Flex が次のツールヒントを表示するまでの時間（<codeph>showDelay</codeph> で指定された時間）を再度待機するまでの時間（ミリ秒）です。
     
      <p>この設定は、ユーザーがコントロール間でマウスを素早く移動した場合に役立ちます。例えば、Flex が最初のツールヒントを表示した後、待機せずにすぐに別のツールヒントを表示するようにできます。 <codeph>scrubDelay</codeph> の設定が短いほど、ユーザーが、次のツールヒントが表示されるまでに <codeph>showDelay</codeph> に指定された時間を待機する必要性が高くなります。 このプロパティは、ツールバーに複数のボタンがあり、ユーザーがそれぞれの簡潔な説明を見てすばやくそれらの機能を把握する場合に有効です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showDelay:get"><apiName>showDelay</apiName><shortdesc>
      ツールヒントを持つコンポーネント上にマウスを移動したとき、ツールヒントボックスを表示させるまでに Flex が待機する時間（ミリ秒）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ツールヒントを持つコンポーネント上にマウスを移動したとき、ツールヒントボックスを表示させるまでに Flex が待機する時間（ミリ秒）です。 ツールヒントを即時に表示するには、<codeph>showDelay</codeph> を 0 に設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showEffect:get"><apiName>showEffect</apiName><shortdesc>
      ツールヒントを表示するときに再生するエフェクトです。エフェクトを使用せずにツールヒントを表示する場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ツールヒントを表示するときに再生するエフェクトです。エフェクトを使用せずにツールヒントを表示する場合は <codeph>null</codeph> になります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:toolTipClass:get"><apiName>toolTipClass</apiName><shortdesc>
      ツールヒントの作成に使用するクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>mx.controls.ToolTip
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ツールヒントの作成に使用するクラスです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManagerPriority"><apiName>CursorManagerPriority</apiName><shortdesc>
  CursorManagerPriority クラスは、CursorManager.setCursor() メソッドに対する priority 引数の定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  CursorManagerPriority クラスは、<codeph>priority</codeph> 引数の定数値（<codeph>CursorManager.setCursor()</codeph> メソッド）を定義します。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links><apiValue id="mx.managers:CursorManagerPriority:HIGH"><apiName>HIGH</apiName><shortdesc>
	  setCursor() に対する priority 引数として渡される、カーソルの最も高い優先度を指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  <codeph>priority</codeph> 引数（<codeph>setCursor()</codeph>）として渡される、カーソルの最も高い優先度を指定する定数です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:LOW"><apiName>LOW</apiName><shortdesc>
	  setCursor() に対する argument 引数として渡される、カーソルの最も低い優先度を指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  <codeph>priority</codeph> 引数（<codeph>setCursor()</codeph>）として渡される、カーソルの最も低い優先度を指定する定数です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:MEDIUM"><apiName>MEDIUM</apiName><shortdesc>
	  setCursor() に対する priority 引数として渡される、カーソルの中程度の優先度を指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  <codeph>priority</codeph> 引数（<codeph>setCursor()</codeph>）として渡される、カーソルの中程度の優先度を指定する定数です。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:DragManager"><apiName>DragManager</apiName><shortdesc>
  DragManager クラスは、Flex アプリケーションでデータを移動する際のドラッグ &amp; ドロップ操作を管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="rejectCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  拒否操作の場合に表示されるカーソル。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.DragReject" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="moveCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  移動操作中に表示されるカーソル。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.DragMove" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  リンク操作中に表示されるカーソル。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.DragLink" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDragImageSkin" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  デフォルトドラッグイメージの描画に使用されるスキン。ドラッグプロキシとも呼ばれます。
 
  </description>
<default>mx.skins.halo.DefaultDragImage (for both Halo and Spark themes)
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="copyCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  コピー操作中に表示されるカーソル。デフォルト値は、Assets.swf ファイル内の "mx.skins.cursor.DragCopy" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  DragManager クラスは、Flex アプリケーションでデータを移動する際のドラッグ＆ドロップ操作を管理します。 例えば、List コントロールや Flex コントロールのアイテム、Image コントロールなどのオブジェクトを選択して他のコンポーネントまでドラッグし、そのコンポーネントに追加することができます。
  
  <p>DragManager のメソッドとプロパティはすべて静的なので、そのインスタンスを作成する必要はありません。</p>
  
  <p>すべての Flex コンポーネントはドラッグ＆ドロップ操作をサポートしています。 Flex では、List、Tree、および DataGrid の各コントロールへのドラッグ＆ドロップ操作もサポートしています。</p>
  
  <p>ユーザーがマウスでアイテムを選択した場合、選択されたコンポーネントをドラッグイニシエータと呼びます。 ドラッグ操作中に表示されるイメージをドラッグプロキシと呼びます。</p>
  
  <p>ユーザーがドラッグプロキシを他のコンポーネント上に移動すると、<codeph>dragEnter</codeph> イベントがそのコンポーネントに送られます。 ドラッグを受け入れたコンポーネントはドロップターゲットとなり、<codeph>dragOver</codeph>、<codeph>dragExit</codeph> および <codeph>dragDrop</codeph> の各イベントを受け取ります。</p>
  
  <p>ドラッグが完了すると、<codeph>dragComplete</codeph> イベントがドラッグイニシエータに送られます。</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DragSource"><linktext>mx.core.DragSource</linktext></link><link href="mx.events.xml#DragEvent"><linktext>mx.events.DragEvent</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><apiOperation id="mx.managers:DragManager:acceptDragDrop"><apiName>acceptDragDrop</apiName><shortdesc>
      ドラッグまたはドロップデータを受け入れる場合、dragEnter イベントハンドラーからこのメソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>ドラッグを受け入れるドロップターゲット。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグまたはドロップデータを受け入れる場合、<codeph>dragEnter</codeph> イベントハンドラーからこのメソッドを呼び出します。 通常は、ドロップターゲットのデータ型に <codeph>event.target</codeph> をキャストします。次の例では、ドロップターゲットは MX Canvas コンテナです。 
     
      <pre>DragManager.acceptDragDrop(Canvas(event.target));</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:doDrag"><apiName>doDrag</apiName><shortdesc>
      ドラッグ＆ドロップ操作を開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>ドラッグを開始するコンポーネントを指定する IUIComponent です。
     
      </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiDesc>ドラッグされているデータを含む DragSource オブジェクトです。
     
      </apiDesc></apiParam><apiParam><apiItemName>mouseEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>ドラッグを開始するためのマウス情報を含む MouseEvent です。
     
      </apiDesc></apiParam><apiParam><apiItemName>dragImage</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>ドラッグするイメージ。 この引数はオプションです。省略した場合、ドラッグ＆ドロップ操作時には標準的なドラッグ長方形が使用されます。 イメージを指定する場合は、イメージの高さと幅を明示的に設定しないとイメージが表示されません。
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc><codeph>dragImage</codeph> の x オフセットをピクセル単位で指定する数値です。 この引数はオプションです。これを省略すると、ドラッグプロキシはドラッグイニシエータの左上隅に表示されます。 このオフセットは、ドラッグプロキシの左端からドラッグイニシエータの左端までのピクセル数として表され、通常は負の数値になります。
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc><codeph>dragImage</codeph> の y オフセットをピクセル単位で指定する数値です。 この引数はオプションです。これを省略すると、ドラッグプロキシはドラッグイニシエータの左上隅に表示されます。 このオフセットは、ドラッグプロキシの上端からドラッグイニシエータの上端までのピクセル数として表され、通常は負の数値になります。
     
      </apiDesc></apiParam><apiParam><apiItemName>imageAlpha</apiItemName><apiType value="Number"/><apiData>0.5</apiData><apiDesc>dragImage に使用されるアルファ値を指定する数値です。 この引数はオプションです。省略した場合、デフォルトのアルファ値は 0.5 です。 値 0.0 はイメージが透明であることを示し、値 1.0 は完全に不透明であることを示します。 
         
          </apiDesc></apiParam><apiParam><apiItemName>allowMove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>ドロップターゲットで、ドラッグしたデータの移動が可能かどうかを示します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグ＆ドロップ操作を開始します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:getFeedback"><apiName>getFeedback</apiName><shortdesc>
      現在のドラッグ＆ドロップフィードバックを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>有効な戻り値は <codeph>DragManager.COPY</codeph>、<codeph>DragManager.MOVE</codeph>、<codeph>DragManager.LINK</codeph> または <codeph>DragManager.NONE</codeph> です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      現在のドラッグ＆ドロップフィードバックを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:showFeedback"><apiName>showFeedback</apiName><shortdesc>
      ドラッグ＆ドロップ操作のフィードバックインジケーターを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>feedback</apiItemName><apiType value="String"/><apiDesc>表示するフィードバックインジケーターのタイプ。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグ＆ドロップ操作のフィードバックインジケーターを設定します。 有効な値は <codeph>DragManager.COPY</codeph>、<codeph>DragManager.MOVE</codeph>、<codeph>DragManager.LINK</codeph> または <codeph>DragManager.NONE</codeph> です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:DragManager:COPY"><apiName>COPY</apiName><shortdesc>
      ドラッグアクションのタイプを「copy」に指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ドラッグアクションのタイプを「copy」に指定する定数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:LINK"><apiName>LINK</apiName><shortdesc>
      ドラッグアクションのタイプを「link」に指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ドラッグアクションのタイプを「link」に指定する定数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:MOVE"><apiName>MOVE</apiName><shortdesc>
      ドラッグアクションのタイプを「move」に指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ドラッグアクションのタイプを「move」に指定する定数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:NONE"><apiName>NONE</apiName><shortdesc>
      ドラッグアクションのタイプを「none」に指定する定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ドラッグアクションのタイプを「none」に指定する定数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:isDragging:get"><apiName>isDragging</apiName><shortdesc>
      ドラッグが実行中の場合は true を返す、読み取り専用プロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ドラッグが実行中の場合は <codeph>true</codeph> を返す、読み取り専用プロパティです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerContainer"><apiName>IFocusManagerContainer</apiName><shortdesc>
  IFocusManagerContainer インターフェイスは、コンテナが FocusManager をホストするために実装するインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManagerContainer インターフェイスは、コンテナが FocusManager をホストするために実装するインターフェイスを定義します。 PopUpManager は自動的に、ポップアップ表示する IFocusManagerContainer 内に FocusManager をインストールします。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:contains"><apiName>contains</apiName><shortdesc>
      指定された表示オブジェクトが、コンテナインスタンスの子またはコンテナインスタンス自体であるかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子オブジェクトがコンテナの子であるか、コンテナ自体である場合、<codeph>true</codeph> となります。そうでない場合は、<codeph>false</codeph> となります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>テストする子オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された表示オブジェクトが、コンテナインスタンスの子またはコンテナインスタンス自体であるかを判別します。 検索には、このコンテナインスタンスの入った表示リスト全体が含まれます。 孫、ひ孫などがそれぞれ <codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。 コンテナ内のコントロールにフォーカスがあるときは、Enter キーを押すことと、この Button コントロールをクリックすることが同義です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      このコンポーネントの FocusManager です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      このコンポーネントの FocusManager です。 FocusManager は <codeph>focusManager</codeph> プロパティに含まれる必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManager"><apiName>ILayoutManager</apiName><shortdesc>
  LayoutManager は、Flex の測定およびレイアウト手順の背後にあるエンジンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  LayoutManager は、Flex の測定およびレイアウト手順の背後にあるエンジンです。 レイアウトは、処理、測定、およびレイアウトの 3 段階で実行されます。
 
  <p>各段階はそれぞれ独立しており、1 つの段階の UIComponent がすべて処理されてから、次の段階に進みます。 ある段階の UIComponent を処理しているときに、UIComponent を他の段階で再処理する要求が発生することがあります。 このような要求はキューに格納され、再処理が必要な段階が次回実行されるときに処理されます。</p>
 
  <p><b>処理</b>段階は <codeph>validateProperties()</codeph> の呼び出しで始まります。（ネストレベルの逆順で並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateProperties()"> <codeph>validateProperties()</codeph></xref> メソッドを順番に呼び出します。</p>
 
  <p>リストにあるオブジェクトは、ネストレベルが<b>最も浅い</b>オブジェクトからネストの順番とは逆の順番で処理されます。 これは、トップダウン順、または正順とも呼ばれます。</p>
 
  <p>この段階では、測定段階およびレイアウト段階に入る前に、プロパティの設定に依存するコンテンツを持つコンポーネントを構成できます。 コンポーネントのプロパティ設定メソッドでは、パフォーマンスの観点から、新しいプロパティ値に更新する処理の一部を実行しないことがあります。 代わりに、<codeph>invalidateProperties()</codeph> メソッドを呼び出して、この段階が実行されるまで処理を延期します。 これにより、プロパティが何回も設定される場合に、不要な作業の発生を防止します。</p>
 
  <p><b>測定</b>段階は <codeph>validateSize()</codeph> の呼び出しで始まります。（ネストレベルで並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph></xref> メソッドを順番に呼び出し、オブジェクトのサイズが変更されていないかを確認します。</p>
 
  <p>オブジェクトの <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> メソッドが以前に呼び出されている場合は、<codeph>validateSize()</codeph> メソッドが呼び出されます。 <codeph>validateSize()</codeph> が呼び出された結果、オブジェクトのサイズまたは位置が変更された場合は、オブジェクトの <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> メソッドが呼び出されます。このオブジェクトは処理待ちのキューに追加され、次回レイアウト段階が実行されるときに処理されます。 さらに、このオブジェクトの親は、<xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> の呼び出しによって測定段階に、<xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> の呼び出しによってレイアウト段階の両方にマークされます。</p>
 
  <p>リスト内のオブジェクトは、ネストレベルが<b>最も深い</b>オブジェクトからネストの順番に処理されます。 これは、ボトムアップ順、または逆順とも呼ばれます。</p>
 
  <p><b>レイアウト</b>段階は <codeph>validateDisplayList()</codeph> の呼び出しで始まります。（ネストレベルの逆順で並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateDisplayList()"> <codeph>validateDisplayList()</codeph></xref> メソッドを順番に呼び出し、オブジェクトに対して、そこに含まれているすべてのコンポーネント（つまり、子）のサイズと位置を設定することを要求します。</p>
 
  <p>オブジェクトの <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> メソッドが以前に呼び出されている場合は、オブジェクトに対して <codeph>validateDisplayList()</codeph> メソッドが呼び出されます。</p>
 
  <p>リストにあるオブジェクトは、ネストレベルが<b>最も浅い</b>オブジェクトからネストの順番とは逆の順番で処理されます。 これは、トップダウン順、または正順とも呼ばれます。</p>
 
  <p>通常、コンポーネントは <codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>validateDisplayList()</codeph> の各メソッドをオーバーライドしません。 UIComponents の場合、ほとんどのコンポーネントが <codeph>commitProperties()</codeph>、<codeph>measure()</codeph> または <codeph>updateDisplayList()</codeph> メソッドをオーバーライドします。これらのメソッドはそれぞれ、<codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>validateDisplayList()</codeph> メソッドによって呼び出されます。</p>
 
  <p>アプリケーションの起動時に、LayoutManager の単一のインスタンスが作成され、<codeph>UIComponent.layoutManager</codeph> プロパティに格納されます。 すべてのコンポーネントは、このインスタンスを使用する必要があります。 UIComponent オブジェクトにアクセスできない場合は、静的 <codeph>LayoutManager.getInstance()</codeph> メソッドを使用して LayoutManager にアクセスすることもできます。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  コンポーネントが変更され、コンポーネントのレイアウトやビジュアルオブジェクトの変更が必要な場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>変更されたオブジェクトです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  コンポーネントが変更され、コンポーネントのレイアウトやビジュアルオブジェクトの変更が必要な場合に呼び出されます。 この場合、コンポーネントのサイズが変更されていなくても、コンポーネントのレイアウトアルゴリズムを実行する必要があります。 例えば、新しい子コンポーネントが追加された場合、スタイルプロパティが変更された場合、コンポーネントの親によってコンポーネントに新しいサイズが指定された場合などがあります。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  validateProperties() メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>プロパティが変更されたオブジェクト。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  <codeph>validateProperties()</codeph> メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。 コンポーネントは、プロパティが変更されたときにこのメソッドを呼び出す必要があります。 通常、プロパティ設定メソッドでは、新規の値を一時変数に格納し、<codeph>invalidateProperties()</codeph> メソッドを呼び出して、後でこの新規の値が実際にコンポーネントやコンポーネントの子に適用されるときに <codeph>validateProperties()</codeph> メソッドおよび <codeph>commitProperties()</codeph> メソッドが呼び出されるようにします。 この手順の利点は、複数のプロパティを一度に変更して、これらのプロパティが相互にやり取りできるようにしたり、プロパティを特定の順序で適用する（必要がある）ときにコードを繰り返したりできることです。 この手順を使用すると、最も効率的に新規のプロパティ値を適用できます。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  validateSize() メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>サイズが変更されたオブジェクト。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  <codeph>validateSize()</codeph> メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。 オブジェクトのサイズが変化したときに呼び出されます。
	 
	  <p>オブジェクトのサイズは、次の 2 つの理由により変化する場合があります。</p>
	 
	  <ol>
	    <li>オブジェクトの内容が変化した場合。 例えば、ラベルが変更されるとボタンの <codeph>label</codeph> が変更されます。</li>
	    <li><codeph>minWidth</codeph>、<codeph>minHeight</codeph>、<codeph>explicitWidth</codeph>、<codeph>explicitHeight</codeph>、<codeph>maxWidth</codeph> または <codeph>maxHeight</codeph> プロパティのいずれかが、スクリプトによって明示的に変更された場合。</li>
	  </ol>
	 
	  <p>前者の場合は、オブジェクトの寸法を再計算する必要があります。 後者の場合は、新しいオブジェクトのサイズがわかっているので、寸法を再計算する必要はありません。 ただし、オブジェクトの親を再測定して再レイアウトする必要があります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
	  検証が必要なコンポーネントがある場合は true を返します。すべてのコンポーネントの検証が完了している場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>検証が必要なコンポーネントがある場合は <codeph>true</codeph> を返します。すべてのコンポーネントの検証が完了している場合は <codeph>false</codeph> を返します。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  検証が必要なコンポーネントがある場合は <codeph>true</codeph> を返します。すべてのコンポーネントの検証が完了している場合は <codeph>false</codeph> を返します。
          
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
	  プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>ここに渡されるコンポーネントは、どのコンポーネントを検証する必要があるかをテストするために使用されます。 このコンポーネントに含まれるすべてのコンポーネントに対して、<codeph>validateProperties()</codeph>、<codeph>commitProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>measure()</codeph>、<codeph>validateDisplayList()</codeph> および <codeph>updateDisplayList()</codeph> の各メソッドが呼び出されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、<codeph>validateDisplayList()</codeph> メソッドおよび <codeph>updateDisplayList()</codeph> メソッドを呼び出しません。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。 通常、コンポーネントは LayoutManager の無効化メソッドを呼び出して、プロパティを後で適用します。 設定した実際のプロパティはすぐに読み出すことができますが、プロパティがコンポーネント内の他のプロパティ、あるいはコンポーネントの子や親に影響を与えるものである場合、これらの他のプロパティはすぐには更新されません。  
	 
	  <p>値が必ず更新されるようにするには、<codeph>validateClient()</codeph> メソッドを呼び出します。 このメソッドは、ネストレベルがターゲットコンポーネント以上であるすべてのコンポーネントのすべてのプロパティを更新してから終了します。 このメソッドを呼び出すと計算の負荷が大きいため、このメソッドは必要な場合にのみ使用してください。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
	  プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。 通常、コンポーネントは LayoutManager の無効化メソッドを呼び出して、プロパティを後で適用します。 設定した実際のプロパティはすぐに読み出すことができますが、プロパティがコンポーネント内の他のプロパティ、あるいはコンポーネントの子や親に影響を与えるものである場合、これらの他のプロパティはすぐには更新されません。 値が必ず更新されるようにするには、<codeph>validateNow()</codeph> メソッドを呼び出します。 このメソッドは、コンポーネントのすべてのプロパティを更新してから終了します。 このメソッドを呼び出すと計算の負荷が大きいため、このメソッドは必要な場合にのみ使用してください。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
	  LayoutManager で段階と段階の間での画面更新が許可されているかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  LayoutManager で段階と段階の間での画面更新が許可されているかどうかを示すフラグです。 <codeph>true</codeph> の場合、測定およびレイアウトの段階ごとに画面更新が行われます。 コンポーネントのすべてのプロパティが検証されるまで、すべてのコンポーネントの <codeph>validateProperties()</codeph> メソッドおよび <codeph>commitProperties()</codeph> メソッドが呼び出されます。 検証が完了すると、画面が更新されます。  
	 
	  <p>次に、すべてのコンポーネントの測定が完了するまで、すべてのコンポーネントの <codeph>validateSize()</codeph> メソッドおよび <codeph>measure()</codeph> メソッドが呼び出されます。測定が完了すると、画面が再び更新されます。  </p>
	 
	  <p>最後に、すべてのコンポーネントの検証が完了するまで、すべてのコンポーネントの <codeph>validateDisplayList()</codeph> メソッドおよび <codeph>updateDisplayList()</codeph> メソッドが呼び出されます。検証が完了すると、画面が再び更新されます。 1 つの段階の検証で、前の段階が無効化されると、LayoutManager が始めからやり直します。 多数のコンポーネントを作成して初期化する場合には、より効率的です。 フレームワークが、このプロパティを設定します。</p>
	 
	  <p><codeph>false</codeph> の場合、3 つの段階すべてが完了してから画面が更新されます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:FocusManager"><apiName>FocusManager</apiName><shortdesc>
  FocusManager クラスは、マウスやキーボード（Tab キー）の操作に応じてコンポーネント上のフォーカスを管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  FocusManager クラスは、マウスやキーボード（Tab キー）の操作に応じてコンポーネント上のフォーカスを管理します。 1 つのアプリケーションには複数の FocusManager インスタンスが存在する場合があります。 FocusManager のそれぞれのインスタンスが、「タブループ」を構成するコンポーネントのセットを管理します。 Tab キーを何度も押すと、フォーカスがコンポーネントのセットを一巡し、最終的には最初にフォーカスが置かれていたコンポーネントに戻ります。 これが「タブループ」と呼ばれるもので、FocusManager のインスタンスがこのループを管理します。 ポップアップウィンドウの「タブループ」が固有のコンポーネントのセットで構成されている場合、このポップアップウィンドウは固有の FocusManager のインスタンスを持ちます。 メインアプリケーションは常に FocusManager インスタンスを持っています。
   <p>FocusManager は、「コンポーネントレベル」からフォーカスを管理します。 Flex では、コンポーネントの UITextField が、テキストのキーボード入力を可能にする唯一の方法となります。 Flash Player または AIR から見て、フォーカスはこの UITextField にあります。  一方 FocusManager から見ると、フォーカスは UITextField の親であるコンポーネントにあります。 つまり、コンポーネントレベルと Flash Player レベルのフォーカスには違いがあります。 アプリケーション開発者は一般的にコンポーネントレベル以外のフォーカスを扱う必要はありませんが、コンポーネント開発者は Flash Player レベルのフォーカスを理解していなければなりません。</p>
   <p>FocusManager で管理できるすべてのコンポーネントは、mx.managers.IFocusManagerComponent を実装する必要がありますが、Flash Player レベルのフォーカスで管理されるオブジェクトではその必要はありません。</p>  
   <p>FocusManager では defaultButton の概念も管理します。これは、Enter キーが押されたときに、その時点でのフォーカスの位置に応じて click イベントを送出するフォーム上の Button オブジェクトです。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.managers:FocusManager:FocusManager"><apiName>FocusManager</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerContainer</apiOperationClassifier><apiDesc>FocusManager をホストする IFocusManagerContainer。
           </apiDesc></apiParam><apiParam><apiItemName>popup</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、コンテナがポップアップコンポーネントであり、メインアプリケーションではないことを示します。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
           <p>FocusManager は、IFocusManagerContainer の子の中でフォーカスを管理します。 これは、コンストラクターの実行中に IFocusManagerContainer に自動インストールされます。</p>
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:FocusManager:activate"><apiName>activate</apiName><shortdesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。 FocusManager が非アクティブ化されている IFocusManagerContainer の中でマウスがクリックされると、その FocusManager を対象とする <codeph>activate()</codeph> メソッドが SystemManager から呼び出されます。 アクティブにされた FocusManager の <codeph>deactivate()</codeph> メソッドは、他の FocusManager がアクティブにされる前に呼び出されます。
           <p>FocusManager ではイベントハンドラーを追加して、キーボードおよびマウス操作に関連するフォーカスを監視できるようにします。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。 FocusManager が非アクティブ化されている IFocusManagerContainer の中でマウスがクリックされると、その FocusManager を対象とする <codeph>activate()</codeph> メソッドが SystemManager から呼び出されます。 アクティブにされた FocusManager の <codeph>deactivate()</codeph> メソッドは、他の FocusManager がアクティブにされる前に呼び出されます。
           <p>FocusManager ではイベントハンドラーを削除して、キーボードおよびマウス操作に関連するフォーカスを監視できるようにします。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      
      指定されたオブジェクトが含まれている IFocusManagerComponent を返します（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>o</codeph> が格納されている IFOcusManagerComponent、または <codeph>null</codeph> です。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>プレーヤーレベルのフォーカスを取得できるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたオブジェクトが含まれている IFocusManagerComponent を返します（存在する場合）。 プレーヤーでは Flex コンポーネントのサブコンポーネントにフォーカスを設定できるため、このメソッドでは、コンポーネント側から見てどの IFocusManagerComponent にフォーカスがあるかを判別します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      
      現在フォーカスを持っている IFocusManagerComponent コンポーネントを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>フォーカスを持っている IFocusManagerComponent オブジェクト。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      現在フォーカスを持っている IFocusManagerComponent コンポーネントを取得します。 このメソッドを呼び出すと、どのコンポーネントにフォーカスがあるかが示されるので、Stage オブジェクトよりもこのメソッドを使用することをお勧めします。 Stage オブジェクトは、該当コンポーネント内のサブコンポーネントを返す場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      
      ユーザーが Tab キーを押して別のコンポーネントにナビゲートするとフォーカスを取得する IFocusManagerComponent を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>フォーカスを取得するコンポーネント。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、Shift+Tab キーを押した場合と同じオブジェクトを返します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      ユーザーが Tab キーを押して別のコンポーネントにナビゲートするとフォーカスを取得する IFocusManagerComponent を返します。 アプリケーション内に他に有効なコンポーネントがない場合は、現在フォーカスがあるコンポーネントと同じコンポーネントを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      
      showFocusIndicator を false に設定し、フォーカスがあるオブジェクト（存在する場合）から可視のフォーカスインジケーターを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      <codeph>showFocusIndicator</codeph> を <codeph>false</codeph> に設定し、フォーカスがあるオブジェクト（存在する場合）から可視のフォーカスインジケーターを削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      
      フォーカスを IFocusManagerComponent コンポーネントに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>フォーカスを取得可能なコンポーネント。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      フォーカスを IFocusManagerComponent コンポーネントに設定します。コンポーネントの可視性や、有効にされた状態またはその他の状態はチェックされません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      
      showFocusIndicator を true に設定し、フォーカスがあるオブジェクト（存在する場合）に可視のフォーカスインジケーターを描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      <codeph>showFocusIndicator</codeph> を <codeph>true</codeph> に設定し、フォーカスがあるオブジェクト（存在する場合）に可視のフォーカスインジケーターを描画します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:toString"><apiName>toString</apiName><shortdesc>
      FocusManager オブジェクトをホストするコンポーネントのストリング表現を返します。このストリングの末尾には「.focusManager」というストリングが追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>FocusManager オブジェクトをホストするコンポーネントのストリング表現を返します。このストリングの末尾には「<codeph>.focusManager</codeph>」というストリングが追加されます。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      FocusManager オブジェクトをホストするコンポーネントのストリング表現を返します。このストリングの末尾には「<codeph>.focusManager</codeph>」というストリングが追加されます。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:FocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      
      FocusManager がデフォルトボタンをアクティブ化するときに Enter キーが押されていることをチェックするかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      デフォルトボタンをアクティブ化するために Enter キーが押されていることを FocusManager がチェックするかどうかを示すフラグです。 <codeph>Enter</codeph> キーを認識する必要のある TextArea およびその他のコンポーネントでは、このプロパティを <codeph>false</codeph> に設定し、デフォルトボタンが存在する場合に Enter キーがデフォルトボタンの <codeph>click</codeph> イベントを送出しないようにします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      
      元のデフォルト Button コントロールへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      
      元のデフォルト Button コントロールへの参照です。 任意の Button コントロールにフォーカスがあるときに Enter キーを押すと、マウスでクリックした場合と同様に、Button コントロールの <codeph>click</codeph> イベントが送出され、その Button コントロールがアクティブになります。 実際のデフォルト Button コントロールは、フォーカスが別の Button コントロールに移ると変更されますが、フォーカスがボタンにない場合は元に戻ります。
     
      <p>このプロパティは Flex コンテナによって管理されるため、デフォルトボタンを指定するために直接設定しないでください。</p>
     
      <p><codeph>defaultButton</codeph> は、<codeph>mx.controls.Button</codeph> クラスでなければなりません。これは、このプロパティが <codeph>IUIComponent</codeph> タイプの場合でも同様です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      コンテナ間でフォーカスが移動されるときにコンテナ間で移動する単一の Sprite オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      コンテナ間でフォーカスが移動されるときにコンテナ間で移動する単一の Sprite オブジェクトです。 Sprite は、コンポーネントがフォーカスを持つ可視インジケーターの親として使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      
      このタブループで次に使用する一意のタブインデックス。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このタブループで次に使用する一意のタブインデックス。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      
      コンポーネントがフォーカスを持っていることを表すインジケーターを表示するかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      コンポーネントがフォーカスを持っていることを表すインジケーターを表示するかどうかを示すフラグです。 <codeph>true</codeph> の場合、フォーカスを取得するコンポーネントは、そのコンポーネントがフォーカスを持つ可視インジケーターを描画します。
     
      <p>デフォルトは <codeph>false</codeph> で、ユーザーが Tab キーを使用すると <codeph>true</codeph> に設定されます。</p>
     
      <p><codeph>showFocus()</codeph> メソッドおよび <codeph>hideFocus()</codeph> メソッド使用してこのプロパティを変更すると、コンポーネントがフォーカスを持つ可視インジケーターも更新されるため、通常はこれらのメソッドを使用することをお勧めします。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComplexComponent"><apiName>IFocusManagerComplexComponent</apiName><shortdesc>
  IFocusManagerComplexComponent インターフェイスは、複数の内部フォーカスターゲットを持つことができるコンポーネントが、FocusManager からフォーカスを取得するために実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManagerComplexComponent インターフェイスは、複数の内部フォーカスターゲットを持つことができるコンポーネントが、FocusManager からフォーカスを取得するために実装する必要があるインターフェイスを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:assignFocus"><apiName>assignFocus</apiName><shortdesc>
	  コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Shift キーを押しながら TAB キーが押された場合は "bottom"、それ以外の場合は "top" です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  コンポーネントがフォーカスを受け取ったときに FocusManager によって呼び出されます。 コンポーネントは、受け取ったフォーカスを内部コンポーネントに設定します。マウスでフォーカスされるとコンポーネントの setFocus() メソッドが呼び出されますが、キーボードによってフォーカスが変更されたときはこのメソッドが使用されます。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:hasFocusableContent:get"><apiName>hasFocusableContent</apiName><shortdesc>
	  現在コンポーネントに現在内部フォーカス可能なターゲットがあるかどうかを示すフラグです。
	 
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  現在コンポーネントに現在内部フォーカス可能なターゲットがあるかどうかを示すフラグです。
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IBrowserManager"><apiName>IBrowserManager</apiName><shortdesc>
  BrowserManager の共有インスタンスが実装するインターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  BrowserManager の共有インスタンスが実装するインターフェイスです。 アプリケーションでは、共有インスタンスのイベントをリッスンしたり、メソッドを呼び出したり、プロパティにアクセスしたりします。共有インスタンスへのアクセスには、<codeph>BrowserManager.getInstance()</codeph> メソッドを使用します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link></related-links><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.URL_CHANGE_urlChange"><apiName>urlChange</apiName><shortdesc>
  アプリケーションによって URL が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションによって URL が変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE_browserURLChange"><apiName>browserURLChange</apiName><shortdesc>
  ブラウザーによって URL が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ブラウザーによって URL が変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザーがブラウザーを操作するか、AIR でアプリケーションを起動するか、またはプロパティをプログラムから設定することによって URL が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがブラウザーを操作するか、AIR でアプリケーションを起動するか、またはプロパティをプログラムから設定することによって URL が変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:initForHistoryManager"><apiName>initForHistoryManager</apiName><shortdesc> 
      BrowserManager を初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      BrowserManager を初期化します。 HistoryManager はこのメソッドを呼び出して、HistoryManager からの後続の呼び出しに対する BrowserManager の準備を行います。 HistoryManager を使用しながら、同時にアプリケーションから <codeph>setFragment()</codeph> メソッドを呼び出すことはできません。 そのため、<codeph>init()</codeph> メソッドは通常、<codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> プロパティの値を <codeph>false</codeph> に設定して、HistoryManager を無効にします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:init"><apiName>init</apiName><shortdesc> 
      BrowserManager を初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>初期 URL にフラグメントがない場合に使用するフラグメントです。
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>初期 URL にフラグメントがない場合に使用するタイトルです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      BrowserManager を初期化します。 BrowserManager は、初期 URL を取得します。初期 URL にフラグメントがある場合、BrowserManager は <codeph>BROWSER_URL_CHANGE</codeph> イベントを送出します。 HistoryManager は通常、アプリケーションによる URL フラグメントの処理の妨げになるので、このメソッドは <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> プロパティの値を <codeph>false</codeph> に設定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setFragment"><apiName>setFragment</apiName><shortdesc> 
      ブラウザーで URL の "#" 以降の部分を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>URL の "#" の後に使用する新しいフラグメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      ブラウザーで URL の "#" 以降の部分を変更します。 ブラウザーの履歴でこの URL の追跡を試みます。
     
      <p>タイトルが設定されている場合、ブラウザーの古いタイトルが新しいタイトルに置き換えられます。</p>
     
      <p>URL を格納するために、<codeph>setBrowserURL()</codeph> という名前の JavaScript メソッドが呼び出されます。 この JavaScript メソッドをアプリケーションの HTML ラッパー内に記述しておく必要があります。この JavaScript メソッドは、URL の値を受け取り、ブラウザーの履歴スキームおよびアドレスバーにこの値を登録するためのメカニズムを実装している必要があります。</p>
     
      <p>設定されると、<codeph>APPLICATION_URL_CHANGE</codeph> イベントが送出されます。 このイベントがキャンセルされた場合、<codeph>setBrowserURL()</codeph> メソッドは呼び出されません。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setTitle"><apiName>setTitle</apiName><shortdesc> 
      ブラウザーのタイトルバーのテキストを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>ブラウザーのタイトルバーに使用する新しいタイトルです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      ブラウザーのタイトルバーのテキストを変更します。 このメソッドは、ブラウザーの履歴には影響を与えません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:base:get"><apiName>base</apiName><shortdesc>
      ブラウザーのアドレスバーに表示されている現在の URL の「#」より前の部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ブラウザーのアドレスバーに表示されている現在の URL の「#」より前の部分。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:fragment:get"><apiName>fragment</apiName><shortdesc>
      ブラウザーのアドレスバーに表示されている現在の URL の「#」より後の部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ブラウザーのアドレスバーに表示されている現在の URL の「#」より後の部分。 この値を変更するには、<codeph>setURLFragment()</codeph> メソッドを使用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:title:get"><apiName>title</apiName><shortdesc>
      ブラウザーの履歴に表示される、アプリケーションのタイトルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ブラウザーの履歴に表示される、アプリケーションのタイトルです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:url:get"><apiName>url</apiName><shortdesc>
      ブラウザーのアドレスバーに表示される現在の URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ブラウザーのアドレスバーに表示される現在の URL。  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:PopUpManager"><apiName>PopUpManager</apiName><shortdesc>
  PopUpManager シングルトンクラスは、新しい最上部ウィンドウを作成し、作成したウィンドウをその他すべての表示ウィンドウの上のレイヤーに追加したり、またはそのレイヤーから削除したりします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpManager シングルトンクラスは、新しい最上部ウィンドウを作成し、作成したウィンドウをその他すべての表示ウィンドウの上のレイヤーに追加したり、またはそのレイヤーから削除したりします。 レイヤーの説明については、SystemManager を参照してください。 このクラスは、ポップアップダイアログ、メニュー、および ComboBox コントロール内のドロップダウンなどのコンポーネントに使用されます。
 
  <p>PopUpManager はモーダル性も提供するため、ポップアップの下にあるウィンドウはマウスイベントを受け取ることができず、またユーザーがウィンドウの外側でマウスをクリックした場合のイベントも提供するため、開発者はウィンドウを閉じるかユーザーに警告するかを選択することができます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links><apiOperation id="mx.managers:PopUpManager:addPopUp"><apiName>addPopUp</apiName><shortdesc>
      最上位ウィンドウをポップアップ表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>window</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>ポップアップ表示される IFlexDisplayObject です。
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>どの SystemManager レイヤーを使用するかを決定するときに使用する DisplayObject オブジェクトです。オプションとして、新しい最上位ウィンドウを中央に配置するための基準点を指定できます。 ポップアップの実際の親でない場合があります。SystemManager がすべてのポップアップの親となるためです。
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合は、ウィンドウがモーダルになります。モーダルウィンドウが表示されているときは、そのウィンドウを閉じない限り、ユーザーが他のポップアップを操作できません。
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>ポップアップを追加する子のリスト。 <codeph>PopUpManagerChildList.APPLICATION</codeph>、<codeph>PopUpManagerChildList.POPUP</codeph> または <codeph>PopUpManagerChildList.PARENT</codeph> （デフォルト）のいずれかです。
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>このポップアップが埋め込みフォントとスタイルマネージャーを検索する moduleFactory です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      最上位ウィンドウをポップアップ表示します。 <codeph>removePopUp()</codeph> を呼び出して、<codeph>addPopUp()</codeph> メソッドで作成したポップアップを削除することをお勧めします。 クラスで IFocusManagerContainer を実装すると、ウィンドウが独自の FocusManager を持つことになります。これにより、ユーザーが TAB キーを使用してコントロール間を移動するときには、ウィンドウ内のコントロールだけにアクセスすることになります。
     
      <p><b>例</b></p> 
     
      <pre>var tw:TitleWindow = new TitleWindow();
        tw.title = "My Title";
        mx.managers.PopUpManager.addPopUp(tw, pnl, false);</pre>
     
      <p>TitleWindow の <codeph>tw</codeph> インスタンスを使用してポップアップウィンドウを作成し、<codeph>pnl</codeph> を Sprite として使用してポップアップを配置する位置を決定します。 このウィンドウは、非モーダルウィンドウとして定義されます。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:bringToFront"><apiName>bringToFront</apiName><shortdesc>
      ポップアップウィンドウは、その子のリストに含まれる他のオブジェクトのレベルより高くなければなりません。これは、ポップアップが最上位ウィンドウで、マウスが置かれている場合は、SystemManager によって自動的に行われますが、それ以外の場合は手動で行う必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>ポップアップを表す IFlexDisplayObject です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ポップアップウィンドウは、その子のリストに含まれる他のオブジェクトのレベルより高くなければなりません。これは、ポップアップが最上位ウィンドウで、マウスが置かれている場合は、SystemManager によって自動的に行われますが、それ以外の場合は手動で行う必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:centerPopUp"><apiName>centerPopUp</apiName><shortdesc>
      createPopUp() メソッドまたは addPopUp() メソッドの呼び出し時に使用されていたウィンドウの上で、ポップアップウィンドウを中央に配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>ポップアップを表す IFlexDisplayObject です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>createPopUp()</codeph> メソッドまたは <codeph>addPopUp()</codeph> メソッドの呼び出し時に使用されていたウィンドウの上で、ポップアップウィンドウを中央に配置します。
     
      <p>この呼び出しの後、ポップアップウィンドウの位置はすぐに変更されない場合があります。ポップアップウィンドウを中央に配置する前に、計算してレイアウトする必要があるためです。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:createPopUp"><apiName>createPopUp</apiName><shortdesc>
      最上位のウィンドウを作成し、z 順序において他のウィンドウより前面に配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>新しい最上位ウィンドウへの参照です。
     
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>どの SystemManager レイヤーを使用するかを決定するときに使用する DisplayObject オブジェクトです。オプションとして、新しい最上位ウィンドウを中央に配置するための基準点を指定できます。 ポップアップの実際の親でない場合があります。SystemManager がすべてのポップアップの親となるためです。
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="Class"/><apiDesc>ポップアップ用に作成されるオブジェクトのクラスです。 このクラスは IFlexDisplayObject を実装する必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合は、ウィンドウがモーダルになります。モーダルウィンドウが表示されているときは、そのウィンドウを閉じない限り、ユーザーが他のポップアップを操作できません。
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>ポップアップを追加する子のリスト。 <codeph>PopUpManagerChildList.APPLICATION</codeph>、<codeph>PopUpManagerChildList.POPUP</codeph> または <codeph>PopUpManagerChildList.PARENT</codeph> （デフォルト）のいずれかです。
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>このポップアップが埋め込みフォントとスタイルマネージャーを検索する moduleFactory です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      最上位のウィンドウを作成し、z 順序において他のウィンドウより前面に配置します。 <codeph>removePopUp()</codeph> メソッドを呼び出して、<codeph>createPopUp()</codeph> メソッドで作成したポップアップを削除することをお勧めします。 クラスで IFocusManagerContainer を実装すると、ウィンドウが独自の FocusManager を持つことになります。これにより、ユーザーが TAB キーを使用してコントロール間を移動するときには、ウィンドウ内のコントロールだけにアクセスすることになります。
     
      <p><b>例</b></p> 
     
      <pre>pop = mx.managers.PopUpManager.createPopUp(pnl, TitleWindow, false); </pre>
      
      <p>TitleWindow クラスに基づいてポップアップウィンドウを作成し、<codeph>pnl</codeph> を MovieClip として使用してポップアップの配置を決定します。 このウィンドウは非モーダルウィンドウとして定義されます。つまり、他のウィンドウはマウスイベントを受け取ることができます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:removePopUp"><apiName>removePopUp</apiName><shortdesc>
      createPopUp() メソッドまたは addPopUp() メソッドでポップアップ表示されたポップアップウィンドウを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>ポップアップウィンドウを表す IFlexDisplayObject です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>createPopUp()</codeph> メソッドまたは <codeph>addPopUp()</codeph> メソッドでポップアップ表示されたポップアップウィンドウを削除します。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IFocusManager"><apiName>IFocusManager</apiName><shortdesc>
  IFocusManager インターフェイスは、マウスまたはキーボード（Tab キー）の操作に応じてコンポーネントのフォーカスを管理し、デフォルトボタンをサポートするためにコンポーネントが実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManager インターフェイスは、マウスまたはキーボード（Tab キー）の操作に応じてコンポーネントのフォーカスを管理し、デフォルトボタンをサポートするためにコンポーネントが実装する必要があるインターフェイスを定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#FocusManager"><linktext>mx.managers.FocusManager</linktext></link></related-links><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:activate"><apiName>activate</apiName><shortdesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。 FocusManager が非アクティブ化されている IFocusManagerContainer の中でマウスがクリックされると、その FocusManager を対象とする <codeph>activate()</codeph> メソッドが SystemManager から呼び出されます。 アクティブにされた FocusManager の <codeph>deactivate()</codeph> メソッドは、他の FocusManager がアクティブにされる前に呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      複数の IFocusManagerContainer が同時に可視である場合、SystemManager は FocusManager をアクティブまたは非アクティブにします。 FocusManager が非アクティブ化されている IFocusManagerContainer の中でマウスがクリックされると、その FocusManager を対象とする <codeph>activate()</codeph> メソッドが SystemManager から呼び出されます。 アクティブにされた FocusManager の <codeph>deactivate()</codeph> メソッドは、他の FocusManager がアクティブにされる前に呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      指定されたオブジェクトが含まれている IFocusManagerComponent を返します（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>o</codeph> が格納されている IFOcusManagerComponent、または <codeph>null</codeph> です。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>プレーヤーレベルのフォーカスを取得できるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたオブジェクトが含まれている IFocusManagerComponent を返します（存在する場合）。 プレーヤーでは Flex コンポーネントのサブコンポーネントにフォーカスを設定できるため、このメソッドでは、コンポーネント側から見てどの IFocusManagerComponent にフォーカスがあるかを判別します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      現在フォーカスを持っている IFocusManagerComponent コンポーネントを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>フォーカスを持っている IFocusManagerComponent オブジェクト。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      現在フォーカスを持っている IFocusManagerComponent コンポーネントを取得します。 このメソッドを呼び出すと、どのコンポーネントにフォーカスがあるかが示されるので、Stage オブジェクトよりもこのメソッドを使用することをお勧めします。 Stage オブジェクトは、該当コンポーネント内のサブコンポーネントを返す場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      ユーザーが Tab キーを押して別のコンポーネントにナビゲートするとフォーカスを取得する IFocusManagerComponent を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>フォーカスを取得するコンポーネント。
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、Shift+Tab キーを押した場合と同じオブジェクトを返します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ユーザーが Tab キーを押して別のコンポーネントにナビゲートするとフォーカスを取得する IFocusManagerComponent を返します。 アプリケーション内に他に有効なコンポーネントがない場合は、現在フォーカスがあるコンポーネントと同じコンポーネントを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      showFocusIndicator を false に設定し、フォーカスがあるオブジェクト（存在する場合）から可視のフォーカスインジケーターを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>showFocusIndicator</codeph> を <codeph>false</codeph> に設定し、フォーカスがあるオブジェクト（存在する場合）から可視のフォーカスインジケーターを削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      フォーカスを IFocusManagerComponent コンポーネントに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>フォーカスを取得可能なコンポーネント。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      フォーカスを IFocusManagerComponent コンポーネントに設定します。コンポーネントの可視性や、有効にされた状態またはその他の状態はチェックされません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      showFocusIndicator を true に設定し、フォーカスがあるオブジェクト（存在する場合）に可視のフォーカスインジケーターを描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>showFocusIndicator</codeph> を <codeph>true</codeph> に設定し、フォーカスがあるオブジェクト（存在する場合）に可視のフォーカスインジケーターを描画します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      FocusManager がデフォルトボタンをアクティブ化するときに Enter キーが押されていることをチェックするかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      デフォルトボタンをアクティブ化するために Enter キーが押されていることを FocusManager がチェックするかどうかを示すフラグです。 <codeph>Enter</codeph> キーを認識する必要のある TextArea およびその他のコンポーネントでは、このプロパティを <codeph>false</codeph> に設定し、デフォルトボタンが存在する場合に Enter キーがデフォルトボタンの <codeph>click</codeph> イベントを送出しないようにします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      元のデフォルト Button コントロールへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      元のデフォルト Button コントロールへの参照です。 任意の Button コントロールにフォーカスがあるときに Enter キーを押すと、マウスでクリックした場合と同様に、Button コントロールの <codeph>click</codeph> イベントが送出され、その Button コントロールがアクティブになります。 実際のデフォルト Button コントロールは、フォーカスが別の Button コントロールに移ると変更されますが、フォーカスがボタンにない場合は元に戻ります。
     
      <p>このプロパティは Flex コンテナによって管理されるため、デフォルトボタンを指定するために直接設定しないでください。</p>
     
      <p><codeph>defaultButton</codeph> は、<codeph>mx.controls.Button</codeph> クラスでなければなりません。これは、このプロパティが <codeph>IUIComponent</codeph> タイプの場合でも同様です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      コンテナ間でフォーカスが移動されるときにコンテナ間で移動する単一の Sprite オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      コンテナ間でフォーカスが移動されるときにコンテナ間で移動する単一の Sprite オブジェクトです。 Sprite は、コンポーネントがフォーカスを持つ可視インジケーターの親として使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      このタブループで次に使用する一意のタブインデックス。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このタブループで次に使用する一意のタブインデックス。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      コンポーネントがフォーカスを持っていることを表すインジケーターを表示するかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを持っていることを表すインジケーターを表示するかどうかを示すフラグです。 <codeph>true</codeph> の場合、フォーカスを取得するコンポーネントは、そのコンポーネントがフォーカスを持つ可視インジケーターを描画します。
     
      <p>デフォルトは <codeph>false</codeph> で、ユーザーが Tab キーを使用すると <codeph>true</codeph> に設定されます。</p>
     
      <p><codeph>showFocus()</codeph> メソッドおよび <codeph>hideFocus()</codeph> メソッド使用してこのプロパティを変更すると、コンポーネントがフォーカスを持つ可視インジケーターも更新されるため、通常はこれらのメソッドを使用することをお勧めします。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerGroup"><apiName>IFocusManagerGroup</apiName><shortdesc>
  IFocusManagerGroup インターフェイスは、コンポーネントがセット単位でグループ化されている場合に実装する必要のあるインターフェイスを定義します。セット内で選択できるメンバーは常に 1 つだけです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManagerGroup インターフェイスは、コンポーネントがセット単位でグループ化されている場合に実装する必要のあるインターフェイスを定義します。セット内で選択できるメンバーは常に 1 つだけです。 例えば、同じグループに一連の RadioButton がある場合は一度に 1 つの RadioButton しか選択できないため、RadioButton は IFocusManagerGroup を実装します。これは、FocusManager が、Tab キーを使用してフォーカスが移動されたときに、選択されていない RadioButton にフォーカスを置かないようにするためです。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:groupName:get"><apiName>groupName</apiName><shortdesc>
	 コントロールが属するコントロールグループの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	 コントロールが属するコントロールグループの名前です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:selected:get"><apiName>selected</apiName><shortdesc>
	 このコントロールが選択されているかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 このコントロールが選択されているかどうかを示すフラグです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:SystemManager"><apiName>SystemManager</apiName><shortdesc>
  SystemManager クラスはアプリケーションウィンドウを管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>mx.managers:ISystemManager</apiBaseInterface><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  SystemManager クラスはアプリケーションウィンドウを管理します。 デスクトップ上またはブラウザー内で実行されるすべてのアプリケーションには、アプリケーションのビジュアルオブジェクトが表示される領域があります。 これは、オペレーティングシステムのウィンドウである場合と、ブラウザー内の領域である場合があります。 これが「アプリケーションウィンドウ」で、アプリケーション内のメインまたは最上位ウィンドウである <codeph>mx.core.Application</codeph> のインスタンスとは異なります。
   <p>すべてのアプリケーションには SystemManager があります。 SystemManager は、アプリケーションウィンドウのサイズが変更されたときにイベントを送信します（アプリケーションウィンドウのサイズは、オペレーティングシステムのウィンドウまたはブラウザーでの操作によってのみ変更可能で、アプリケーション内から変更することはできません）。 SystemManager は、メイン mx.core.Application インスタンスやすべてのポップアップ、ツールヒント、カーソルなど、アプリケーション内で表示可能なすべてのアイテムの親となります。 SystemManager を親とするオブジェクトは、ツールヒントやカーソルであっても、最上位ウィンドウと見なされます。</p>
   <p>また、複数の IFocusManagerContainer が表示されていて、ユーザーがこれらの IFocusManagerContainer 内のコンポーネントを操作している場合、SystemManager は最上位ウィンドウ間でフォーカスを切り替えます。  </p>
   <p>SystemManager では、明示的にトラップされないキーボード操作およびマウス操作がすべて認識されるため、操作を監視する必要がある場合には適切な監視場所となります。</p>
   <p>アプリケーションが別のアプリケーションにロードされた場合でも、SystemManager は作成されますが、セキュリティやドメインの規則によっては「アプリケーションウィンドウ」を監視しないことがあります。 その代わり、<codeph>content</codeph>（ロードを行った <codeph>Loader</codeph>）になり、単にサブアプリケーションの親として機能します。</p>
   <p>SystemManager では、ツールヒント、カーソル、ポップアップウィンドウごとに、子のリストを維持します。 これによって、ポップアップウィンドウがメインアプリケーションウィンドウの上に「浮動表示」され、その上にツールヒントが浮動表示され、さらにその上にカーソルが浮動表示されるようになります。 SystemManager で単に <codeph>numChildren</codeph> プロパティを調べたり、<codeph>getChildAt()</codeph> メソッドを呼び出す場合は、メインアプリケーションウィンドウや、ポップアップ表示されないその他のウィンドウにアクセスすることになります。 ポップアップ、ツールヒント、およびカーソルを含むすべてのウィンドウのリストを取得するには、<codeph>rawChildren</codeph> プロパティを使用します。</p>
   <p>SystemManager は、アプリケーション内で最初に作成される表示クラスです。 このクラスは <codeph>mx.preloaders.Preloader</codeph> を作成する役割を持ちます。このクラスは、アプリケーションがロードを完了するときに <codeph>mx.preloaders.SparkDownloadProgressBar</codeph> を表示し、次に <codeph>mx.core.Application</codeph> のインスタンスを作成します。</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.managers:SystemManager_flash.events.Event.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  ステージのサイズが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.RESIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ステージのサイズが変更されたときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.IDLE_idle"><apiName>idle</apiName><shortdesc>
  キーボードまたはマウスが 1 秒間操作されていない場合、100 ミリ秒ごとに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.IDLE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  キーボードまたはマウスが 1 秒間操作されていない場合、100 ミリ秒ごとに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  アプリケーションの初期化が完了すると送出されます。
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションの初期化が完了すると送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.managers:SystemManager:SystemManager"><apiName>SystemManager</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
           <p>これは、すべての Flex アプリケーションの開始ポイントです。 このクラスは、Flex SWF ファイルのルートクラスとなるように設定されます。 Flash Player はこのコンストラクターが呼び出されるようにすることによって、このクラスのインスタンスをインスタンス化します。</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:SystemManager:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      
      preloadedRSLs リストに RSL を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>読み込まれた RSL の loaderInfo です。
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>RSL の構成情報です。 RSLData のベクトルです。 配列の最初のエレメントはプライマリ RSL です。 残りのエレメントはフェイルオーバー RSL です。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      preloadedRSLs リストに RSL を追加します。このメソッドは、子のモジュールファクトリが、このモジュールファクトリのアプリケーションドメインに RSL を追加読み込みする際に、子のモジュールファクトリによって呼び出されます。
           <p>このメソッドは直接呼び出さないでください。 このメソッドは、子のモジュールファクトリが、このモジュールファクトリのアプリケーションドメインに RSL を追加読み込みする際に、子のモジュールファクトリによって呼び出されます。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      この SystemManager に関連付けられている SWF に加え、この SystemManager によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowDomain() を呼び出します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      この SystemManager に関連付けられている SWF に加え、この SystemManager によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowDomain() を呼び出します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      この SystemManager に関連付けられている SWF に加え、この SystemManager によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowInsecureDomain() を呼び出します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      この SystemManager に関連付けられている SWF に加え、この SystemManager によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowInsecureDomain() を呼び出します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:create"><apiName>create</apiName><shortdesc>
      モジュールが認識している定義のインスタンスを要求するファクトリメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>モジュールのインスタンス、または <codeph>null</codeph> です。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>params</apiItemName><apiType value="restParam"/><apiDesc>パラメーターのオプションのリストです。 パラメーターはいくつでも渡すことができ、渡されたパラメーターは <codeph>parameters</codeph> という名前の配列に格納されます。 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      モジュールが認識している定義のインスタンスを要求するファクトリメソッドです。作成ファクトリにパラメーターのオプションのセットを渡して、この入力を基に、作成されるインスタンスに変更を加えることができます。null を渡すと、可能な場合はデフォルトの定義が作成されます。このメソッドは、自動生成されたクラスでオーバーライドされます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      
      マウスシールドを展開または削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>マウスシールドを展開する場合は <codeph>true</codeph>、マウスシールドを削除する場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      マウスシールドを展開または削除します。マウスシールドは、信頼されていないアプリケーションへのマウス入力をブロックします。マウス入力をブロックする理由は、信頼されていないアプリケーションにドラッグした場合に、通常はマウス移動イベントを受信できないためです。Flash Player では、セキュリティを考慮して、信頼されている境界と信頼されていない境界をまたがってイベントは送信されません。信頼されていないアプリケーションをマウスシールドで保護することにより (その親であることが前提です)、マウス移動メッセージを取得でき、ドラッグ操作が期待どおりに動作します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
      
	  指定されたストリングをクラスか、またはパッケージレベルの関数に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>name</codeph> で表されるクラス、または null。
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>クラスの名前。例えば、「mx.video.VideoManager」などがあります。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  指定されたストリングをクラスか、またはパッケージレベルの関数に変換します。 別のアプリケーションにロードされるかどうかに基づいて、適切な <codeph>ApplicationDomain.getDefinition()</codeph> メソッドを呼び出します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      明示的に定義された高さを使用するのか、測定した高さを使用するのかを判断する便利なメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定義されている場合は <codeph>explicitHeight</codeph> の数値で、定義されていない場合は <codeph>measuredHeight</codeph> プロパティとなります。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      明示的に定義された高さを使用するのか、測定した高さを使用するのかを判断する便利なメソッドです。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      明示的に定義された幅を使用するのか、測定した幅を使用するのかを判断する便利なメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定義されている場合は <codeph>explicitWidth</codeph> の数値で、定義されていない場合は <codeph>measuredWidth</codeph> プロパティとなります。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      明示的に定義された幅を使用するのか、測定した幅を使用するのかを判断する便利なメソッドです。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSWFRoot"><apiName>getSWFRoot</apiName><shortdesc>
      指定されたオブジェクトのコードが含まれる SWF のルート DisplayObject を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ルート DisplayObject
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="Object"/><apiDesc>任意のオブジェクト。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたオブジェクトのコードが含まれる SWF のルート DisplayObject を返します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      親チェーンに移動して、この SecurityDomain の最上位システムマネージャーを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この SecurityDomain のルートシステムマネージャー。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      親チェーンに移動して、この SecurityDomain の最上位システムマネージャーを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      親チェーンに移動して、最上位システムマネージャーを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ルートシステムマネージャー。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      親チェーンに移動して、最上位システムマネージャーを取得します。表示リストに表示されていない場合、または最上位システムマネージャーにアクセスできない場合は <codeph>null</codeph> を返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
     
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトの可視部分を含む <codeph>Rectangle</codeph> です。矩形はグローバル座標にあります。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>オプションです。可視矩形の開始境界です。境界はグローバル座標にあります。<codeph>bounds</codeph> が null の場合、開始境界はシステムマネージャーの <codeph>screen</codeph> プロパティによって定義されます。 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
     
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      親の SWFLoader にアプリケーションのサイズが変更されたことを通知しようとします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      親の SWFLoader にアプリケーションのサイズが変更されたことを通知しようとします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      
      このアプリケーションに必須フォントが埋め込まれている場合、または Font.registerFont() メソッドを使用してグローバルに登録されている場合は true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このアプリケーションに必須フォントが埋め込まれている場合、または <codeph>Font.registerFont()</codeph> メソッドを使用してグローバルに登録されている場合は <codeph>true</codeph> となります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>textFormat</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>文字フォーマット情報を表す TextFormat クラスです。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      このアプリケーションに必須フォントが埋め込まれている場合、または <codeph>Font.registerFont()</codeph> メソッドを使用してグローバルに登録されている場合は <codeph>true</codeph> を返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
     
      このシステムマネージャーが、すべての最上位システムマネージャーのルートかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>SystemManager が表示リストのすべての SystemManager のルートである場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      このシステムマネージャーが、すべての最上位システムマネージャーのルートかどうかをテストします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelWindow"><apiName>isTopLevelWindow</apiName><shortdesc>
          指定された DisplayObject が最上位ウィンドウであるかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された DisplayObject が最上位ウィンドウの場合は、<codeph>true</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>テストする DisplayObject です。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定された DisplayObject が最上位ウィンドウであるかどうかを判別します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
      
	  この ISystemManager がアプリケーションウィンドウを管理する場合は true を返します。このアプリケーションが別のアプリケーションにロードされている場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この ISystemManager がアプリケーションウィンドウを管理する場合は <codeph>true</codeph> となります。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
	  この ISystemManager がアプリケーションウィンドウを管理する場合は <codeph>true</codeph> を返します。このアプリケーションが別のアプリケーションにロードされている場合は <codeph>false</codeph> を返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:move"><apiName>move</apiName><shortdesc>
      move() メソッドはアプリケーションウィンドウまたはローダーに直接マッピングされるため、このメソッドを呼び出しても効果がありません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>新しい x 座標。
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>新しい y 座標。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>move()</codeph> メソッドはアプリケーションウィンドウまたはローダーに直接マッピングされるため、このメソッドを呼び出しても効果がありません。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      setActualSize() メソッドがアプリケーションウィンドウに直接マッピングされていて、そのアプリケーションウィンドウが最上部ウィンドウである場合は、このメソッドを呼び出しても効果はありません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>新しい幅。
           </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>新しい高さ。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>setActualSize()</codeph> メソッドがアプリケーションウィンドウに直接マッピングされていて、そのアプリケーションウィンドウが最上部ウィンドウである場合は、このメソッドを呼び出しても効果はありません。 これ以外の場合は、必要に応じて子を切り詰めて、サイズを変更しようとします。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:SystemManager:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      
      allowDomain() の呼び出しによって許可されるドメインが、呼び出しの後に読み込まれる RSL でも許可されるかどうかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph>allowDomain()</codeph> の呼び出しによって許可されるドメインが、呼び出しの後に読み込まれる RSL でも許可されるかどうかを制御します。 サブアプリケーションやモジュールによって、追加の RSL がこのモジュールファクトリに読み込まれる場合があります。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      
      allowInsecureDomain() の呼び出しによって許可されるドメインが、呼び出しの後に読み込まれる RSL でも許可されるかどうかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph>allowInsecureDomain()</codeph> の呼び出しによって許可されるドメインが、呼び出しの後に読み込まれる RSL でも許可されるかどうかを制御します。 サブアプリケーションやモジュールによって、追加の RSL がこのモジュールファクトリに追加される場合があります。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:application:get"><apiName>application</apiName><shortdesc>
      この SystemManager を親とするアプリケーション。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      この SystemManager を親とするアプリケーション。 SystemManager は、別のアプリケーションにロードされた場合でも、Application のインスタンスを作成します。 そのため、SWF が別のアプリケーションにロードされていると、このアプリケーションは mx.core.Application.application と一致しない場合があります。
      <p>ロード時間に関するパフォーマンスを考慮して、このプロパティは、mx.core.Application 型ではありませんが、mx.core.Application に強制的に変換することができます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.managers:SystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
      
	  この ISystemManager を親とするカスタムカーソルのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  この ISystemManager を親とするカスタムカーソルのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、最上位ウィンドウ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。 カスタムカーソルには、<codeph>cursorChildren</codeph> プロパティを使用してアクセスできます。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>cursorChildren.numChildren</codeph> はカスタムカーソルの数（0 または 1 のいずれか）を示し、カスタムカーソルが存在する場合には <codeph>cursorChildren.getChildAt(0)</codeph> を使用してアクセスできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:document:get"><apiName>document</apiName><shortdesc>
      
	  ドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
	  ドキュメントオブジェクトへの参照です。 ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または AS コンポーネントの階層の最上位にあるオブジェクトです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:embeddedFontList:get"><apiName>embeddedFontList</apiName><shortdesc>
      このアプリケーション内の埋め込みフォントのテーブルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      このアプリケーション内の埋め込みフォントのテーブルです。 このオブジェクトは、フォント名でインデックス付けされたテーブルです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      このオブジェクトの明示的な幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      このオブジェクトの明示的な幅です。 SystemManager では、アプリケーションが別のアプリケーションにロードされている場合を除き、これは常に NaN となります。 アプリケーションが別のアプリケーションにロードされていない場合、この値を設定しても効果はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      このオブジェクトの明示的な幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      このオブジェクトの明示的な幅です。 SystemManager では、アプリケーションが別のアプリケーションにロードされている場合を除き、これは常に NaN となります。 アプリケーションが別のアプリケーションにロードされていない場合、この値を設定しても効果はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc conref="mx.core.UIComponent#focusPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="mx.core.UIComponent#focusPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:height:get"><apiName>height</apiName><shortdesc>
      このオブジェクトの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      このオブジェクトの高さです。 SystemManager では、アプリケーションが別のアプリケーションにロードされた場合を除き、これは常にステージの幅になります。 アプリケーションが別のアプリケーションにロードされていない場合、この値を設定しても効果はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
      SystemManager がプロキシであり、ルートクラスでない場合は true です
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      SystemManager がプロキシであり、ルートクラスでない場合は true です
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      measuredHeight は、メイン mx.core.Application ウィンドウの明示的な高さまたは測定された高さです。メインウィンドウがまだ作成されてないか、または存在しない場合は、SWF の開始高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      measuredHeight は、メイン mx.core.Application ウィンドウの明示的な高さまたは測定された高さです。メインウィンドウがまだ作成されてないか、または存在しない場合は、SWF の開始高さです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      measuredWidth は、メイン mx.core.Application ウィンドウの明示的な幅または測定された幅です。メインウィンドウがまだ作成されていないか、または存在しない場合は、SWF の開始幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      measuredWidth は、メイン mx.core.Application ウィンドウの明示的な幅または測定された幅です。メインウィンドウがまだ作成されていないか、または存在しない場合は、SWF の開始幅です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      浮動表示されないウィンドウの数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      浮動表示されないウィンドウの数。 これは、メインアプリケーションウィンドウに、SystemManager に追加されたウィンドウ（ただし、ポップアップ、ツールヒント、カーソルのウィンドウ除く）の数を加えた数値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      モーダルウィンドウの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      モーダルウィンドウの数です。 通常、別のウィンドウでクリックすると、そのウィンドウの FocusManager がアクティブになりますが、モーダルウィンドウではこのクリック操作は許可されません。 PopUpManager は、モーダルウィンドウを作成したとき、および破棄したときに、このカウントを変更します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parent:get"><apiName>parent</apiName><shortdesc>
     親プロパティをオーバーライドして、親が別のサンドボックス内にあるケースを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
     親プロパティをオーバーライドして、親が別のサンドボックス内にあるケースを処理します。親が同じサンドボックスにある場合は、親が返されます。親が別のサンドボックスにある場合は、null が返されます。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
      
	  この ISystemManager を親とする topMost （ポップアップ）ウィンドウのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  この ISystemManager を親とする topMost （ポップアップ）ウィンドウのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。 最上位ウィンドウには、<codeph>popUpChildren</codeph> プロパティを使用してアクセスできます。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>popUpChildren.numChildren</codeph> は最上位ウィンドウの数を示し、これらのウィンドウには <codeph>popUpChildren.getChildAt(i)</codeph> を使用してアクセスできます。</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      
      アプリケーションが起動する前にこの SystemManager または FlexModuleFactory によって読み込まれた RSL です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      
      アプリケーションが起動する前にこの SystemManager または FlexModuleFactory によって読み込まれた RSL です。このディクショナリには、他のモジュールまたはサブアプリケーションによってこのモジュールファクトリのアプリケーションドメインに読み込まれた RSL も含まれる場合があります。 子のモジュールファクトリによって新規ディクショナリエントリが追加されると、ディクショナリを所有するモジュールファクトリによって <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> イベントが送出されます。 preloadedRSLs に関する情報は、Dictionary に格納されます。キーは RSL の LoaderInfo です。値は RSLData のベクトルです。この値の最初のエレメントはプライマリ RSL で、残りのエレメントはフェイルオーバー RSL です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundAlpha:get"><apiName>preloaderBackgroundAlpha</apiName><shortdesc>
      プリローダーの子が使用する背景の透明度です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      プリローダーの子が使用する背景の透明度です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundColor:get"><apiName>preloaderBackgroundColor</apiName><shortdesc>
      プリローダーの子が使用する背景色です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      プリローダーの子が使用する背景色です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundImage:get"><apiName>preloaderBackgroundImage</apiName><shortdesc>
      プリローダーの子が使用する背景色です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      プリローダーの子が使用する背景色です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundSize:get"><apiName>preloaderBackgroundSize</apiName><shortdesc>
      プリローダーの子が使用する背景のサイズです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      プリローダーの子が使用する背景のサイズです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      
	  この ISystemManager を親とするすべての子のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  この ISystemManager を親とするすべての子のリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:screen:get"><apiName>screen</apiName><shortdesc>
      
	  アプリケーションウィンドウのサイズと位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
	  アプリケーションウィンドウのサイズと位置です。 Rectangle オブジェクトには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> および <codeph>height</codeph> プロパティがあります。Rectangle はサンドボックスルート座標にあります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
      
	  この ISystemManager を親とするツールヒントのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  この ISystemManager を親とするツールヒントのリストです。
	 
	  <p>ISystemManager には、アプリケーション、ポップアップ、最上位ウィンドウ、ツールヒント、カスタムカーソルなど、さまざまなタイプの子があります。</p>
	 
	  <p>IChildList オブジェクトには、<codeph>getChildAt()</codeph> などのメソッドと、<codeph>numChildren</codeph> などのプロパティがあります。 例えば、<codeph>toolTipChildren.numChildren</codeph> はツールヒントの数（0 または 1 のいずれか）を示し、ツールヒントが存在する場合には <codeph>toolTipChildren.getChildAt(0)</codeph> を使用してアクセスできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
      アプリケーションウィンドウを管理する SystemManager を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      アプリケーションウィンドウを管理する SystemManager を返します。 このアプリケーションが別のアプリケーションにロードされている場合を除き、同じ SystemManager となります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:width:get"><apiName>width</apiName><shortdesc>
      このオブジェクトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      このオブジェクトの幅です。 SystemManager では、アプリケーションが別のアプリケーションにロードされた場合を除き、これは常にステージの幅になります。 アプリケーションが別のアプリケーションにロードされていない場合、この値を設定しても効果はありません。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:LayoutManager"><apiName>LayoutManager</apiName><shortdesc>
  LayoutManager は、Flex の測定およびレイアウト手順の背後にあるエンジンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  LayoutManager は、Flex の測定およびレイアウト手順の背後にあるエンジンです。 レイアウトは、処理、測定、およびレイアウトの 3 段階で実行されます。
 
  <p>各段階はそれぞれ独立しており、1 つの段階の UIComponent がすべて処理されてから、次の段階に進みます。 ある段階の UIComponent を処理しているときに、UIComponent を他の段階で再処理する要求が発生することがあります。 このような要求はキューに格納され、再処理が必要な段階が次回実行されるときに処理されます。</p>
 
  <p><b>処理</b>段階は <codeph>validateProperties()</codeph> の呼び出しで始まります。（ネストレベルの逆順で並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateProperties()"> <codeph>validateProperties()</codeph></xref> メソッドを順番に呼び出します。</p>
 
  <p>リストにあるオブジェクトは、ネストレベルが<b>最も浅い</b>オブジェクトからネストの順番とは逆の順番で処理されます。 これは、トップダウン順、または正順とも呼ばれます。</p>
 
  <p>この段階では、測定段階およびレイアウト段階に入る前に、プロパティの設定に依存するコンテンツを持つコンポーネントを構成できます。 コンポーネントのプロパティ設定メソッドでは、パフォーマンスの観点から、新しいプロパティ値に更新する処理の一部を実行しないことがあります。 代わりに、<codeph>invalidateProperties()</codeph> メソッドを呼び出して、この段階が実行されるまで処理を延期します。 これにより、プロパティが何回も設定される場合に、不要な作業の発生を防止します。</p>
 
  <p><b>測定</b>段階は <codeph>validateSize()</codeph> の呼び出しで始まります。（ネストレベルで並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateSize()"><codeph>validateSize()</codeph></xref> メソッドを順番に呼び出し、オブジェクトのサイズが変更されていないかを確認します。</p>
 
  <p>オブジェクトの <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> メソッドが以前に呼び出されている場合は、<codeph>validateSize()</codeph> メソッドが呼び出されます。 <codeph>validateSize()</codeph> が呼び出された結果、オブジェクトのサイズまたは位置が変更された場合は、オブジェクトの <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> メソッドが呼び出されます。このオブジェクトは処理待ちのキューに追加され、次回レイアウト段階が実行されるときに処理されます。 さらに、このオブジェクトの親は、<xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> の呼び出しによって測定段階に、<xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> の呼び出しによってレイアウト段階の両方にマークされます。</p>
 
  <p>リスト内のオブジェクトは、ネストレベルが<b>最も深い</b>オブジェクトからネストの順番に処理されます。 これは、ボトムアップ順、または逆順とも呼ばれます。</p>
 
  <p><b>レイアウト</b>段階は <codeph>validateDisplayList()</codeph> の呼び出しで始まります。（ネストレベルの逆順で並べ替えた）オブジェクトのリストで、各オブジェクトの <xref href="../core/UIComponent.html#validateDisplayList()"> <codeph>validateDisplayList()</codeph></xref> メソッドを順番に呼び出し、オブジェクトに対して、そこに含まれているすべてのコンポーネント（つまり、子）のサイズと位置を設定することを要求します。</p>
 
  <p>オブジェクトの <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> メソッドが以前に呼び出されている場合は、オブジェクトに対して <codeph>validateDisplayList()</codeph> メソッドが呼び出されます。</p>
 
  <p>リストにあるオブジェクトは、ネストレベルが<b>最も浅い</b>オブジェクトからネストの順番とは逆の順番で処理されます。 これは、トップダウン順、または正順とも呼ばれます。</p>
 
  <p>通常、コンポーネントは <codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>validateDisplayList()</codeph> の各メソッドをオーバーライドしません。 UIComponents の場合、ほとんどのコンポーネントが <codeph>commitProperties()</codeph>、<codeph>measure()</codeph> または <codeph>updateDisplayList()</codeph> メソッドをオーバーライドします。これらのメソッドはそれぞれ、<codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>validateDisplayList()</codeph> メソッドによって呼び出されます。</p>
 
  <p>アプリケーションの起動時に、LayoutManager の単一のインスタンスが作成され、<codeph>UIComponent.layoutManager</codeph> プロパティに格納されます。 すべてのコンポーネントは、このインスタンスを使用する必要があります。 UIComponent オブジェクトにアクセスできない場合は、静的 <codeph>LayoutManager.getInstance()</codeph> メソッドを使用して LayoutManager にアクセスすることもできます。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:LayoutManager:attachListeners"><apiName>attachListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。
          
          </apiDesc><apiOperationClassifier>mx.managers:LayoutManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      このシングルトンクラスの唯一のインスタンスを返します。インスタンスが存在しない場合は、作成します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      コンポーネントが変更され、コンポーネントのレイアウトやビジュアルオブジェクトの変更が必要な場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>変更されたオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンポーネントが変更され、コンポーネントのレイアウトやビジュアルオブジェクトの変更が必要な場合に呼び出されます。 この場合、コンポーネントのサイズが変更されていなくても、コンポーネントのレイアウトアルゴリズムを実行する必要があります。 例えば、新しい子コンポーネントが追加された場合、スタイルプロパティが変更された場合、コンポーネントの親によってコンポーネントに新しいサイズが指定された場合などがあります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      validateProperties() メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>プロパティが変更されたオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>validateProperties()</codeph> メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。 コンポーネントは、プロパティが変更されたときにこのメソッドを呼び出す必要があります。 通常、プロパティ設定メソッドでは、新規の値を一時変数に格納し、<codeph>invalidateProperties()</codeph> メソッドを呼び出して、後でこの新規の値が実際にコンポーネントやコンポーネントの子に適用されるときに <codeph>validateProperties()</codeph> メソッドおよび <codeph>commitProperties()</codeph> メソッドが呼び出されるようにします。 この手順の利点は、複数のプロパティを一度に変更して、これらのプロパティが相互にやり取りできるようにしたり、プロパティを特定の順序で適用する（必要がある）ときにコードを繰り返したりできることです。 この手順を使用すると、最も効率的に新規のプロパティ値を適用できます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      validateSize() メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>サイズが変更されたオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>validateSize()</codeph> メソッドが呼び出されるのを待機しているコンポーネントのリストにオブジェクトを追加します。 オブジェクトのサイズが変化したときに呼び出されます。
     
      <p>オブジェクトのサイズは、次の 2 つの理由により変化する場合があります。</p>
     
      <ol>
        <li>オブジェクトの内容が変化した場合。 例えば、ラベルが変更されるとボタンの <codeph>label</codeph> が変更されます。</li>
        <li><codeph>minWidth</codeph>、<codeph>minHeight</codeph>、<codeph>explicitWidth</codeph>、<codeph>explicitHeight</codeph>、<codeph>maxWidth</codeph> または <codeph>maxHeight</codeph> プロパティのいずれかが、スクリプトによって明示的に変更された場合。</li>
      </ol>
     
      <p>前者の場合は、オブジェクトの寸法を再計算する必要があります。 後者の場合は、新しいオブジェクトのサイズがわかっているので、寸法を再計算する必要はありません。 ただし、オブジェクトの親を再測定して再レイアウトする必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
      検証が必要なコンポーネントがある場合は true を返します。すべてのコンポーネントの検証が完了している場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>検証が必要なコンポーネントがある場合は <codeph>true</codeph> を返します。すべてのコンポーネントの検証が完了している場合は <codeph>false</codeph> を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      検証が必要なコンポーネントがある場合は <codeph>true</codeph> を返します。すべてのコンポーネントの検証が完了している場合は <codeph>false</codeph> を返します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
      プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>ここに渡されるコンポーネントは、どのコンポーネントを検証する必要があるかをテストするために使用されます。 このコンポーネントに含まれるすべてのコンポーネントに対して、<codeph>validateProperties()</codeph>、<codeph>commitProperties()</codeph>、<codeph>validateSize()</codeph>、<codeph>measure()</codeph>、<codeph>validateDisplayList()</codeph> および <codeph>updateDisplayList()</codeph> の各メソッドが呼び出されます。
     
        </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、<codeph>validateDisplayList()</codeph> メソッドおよび <codeph>updateDisplayList()</codeph> メソッドを呼び出しません。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。 通常、コンポーネントは LayoutManager の無効化メソッドを呼び出して、プロパティを後で適用します。 設定した実際のプロパティはすぐに読み出すことができますが、プロパティがコンポーネント内の他のプロパティ、あるいはコンポーネントの子や親に影響を与えるものである場合、これらの他のプロパティはすぐには更新されません。  
     
      <p>値が必ず更新されるようにするには、<codeph>validateClient()</codeph> メソッドを呼び出します。 このメソッドは、ネストレベルがターゲットコンポーネント以上であるすべてのコンポーネントのすべてのプロパティを更新してから終了します。 このメソッドを呼び出すと計算の負荷が大きいため、このメソッドは必要な場合にのみ使用してください。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
      プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      プロパティが変更されても、一般的にはコンポーネントはその変更をすぐに適用しません。 通常、コンポーネントは LayoutManager の無効化メソッドを呼び出して、プロパティを後で適用します。 設定した実際のプロパティはすぐに読み出すことができますが、プロパティがコンポーネント内の他のプロパティ、あるいはコンポーネントの子や親に影響を与えるものである場合、これらの他のプロパティはすぐには更新されません。 値が必ず更新されるようにするには、<codeph>validateNow()</codeph> メソッドを呼び出します。 このメソッドは、コンポーネントのすべてのプロパティを更新してから終了します。 このメソッドを呼び出すと計算の負荷が大きいため、このメソッドは必要な場合にのみ使用してください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:LayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
      LayoutManager で段階と段階の間での画面更新が許可されているかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      LayoutManager で段階と段階の間での画面更新が許可されているかどうかを示すフラグです。 <codeph>true</codeph> の場合、測定およびレイアウトの段階ごとに画面更新が行われます。 コンポーネントのすべてのプロパティが検証されるまで、すべてのコンポーネントの <codeph>validateProperties()</codeph> メソッドおよび <codeph>commitProperties()</codeph> メソッドが呼び出されます。 検証が完了すると、画面が更新されます。  
     
      <p>次に、すべてのコンポーネントの測定が完了するまで、すべてのコンポーネントの <codeph>validateSize()</codeph> メソッドおよび <codeph>measure()</codeph> メソッドが呼び出されます。測定が完了すると、画面が再び更新されます。  </p>
     
      <p>最後に、すべてのコンポーネントの検証が完了するまで、すべてのコンポーネントの <codeph>validateDisplayList()</codeph> メソッドおよび <codeph>updateDisplayList()</codeph> メソッドが呼び出されます。検証が完了すると、画面が再び更新されます。 1 つの段階の検証で、前の段階が無効化されると、LayoutManager が始めからやり直します。 多数のコンポーネントを作成して初期化する場合には、より効率的です。 フレームワークが、このプロパティを設定します。</p>
     
      <p><codeph>false</codeph> の場合、3 つの段階すべてが完了してから画面が更新されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IMarshalSystemManager"><apiName>IMarshalSystemManager</apiName><shortdesc>
  IMarshalSystemManager インターフェイスは、クロスバージョン構成の他のアプリケーションへのブリッジの追加、削除、アクセスを行う場合に、クラスが実装する必要があるメソッドとプロパティを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IMarshalSystemManager インターフェイスは、クロスバージョン構成の他のアプリケーションへのブリッジの追加、削除、アクセスを行う場合に、クラスが実装する必要があるメソッドとプロパティを定義します。
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildBridge"><apiName>addChildBridge</apiName><shortdesc> 
      システムマネージャーに子ブリッジを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>子のブリッジです。
     
      </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>子の SWFLoader です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      システムマネージャーに子ブリッジを追加します。各子ブリッジは、別のサンドボックス内のコンポーネントまたは Flex の別のバージョンでコンパイルされたコンポーネントを表します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildToSandboxRoot"><apiName>addChildToSandboxRoot</apiName><shortdesc> 
      要求されたレイヤーのサンドボックスルートに指定された子を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>SystemManager 内の IChildList の名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>追加する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      要求されたレイヤーのサンドボックスルートに指定された子を追加します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:dispatchEventFromSWFBridges"><apiName>dispatchEventFromSWFBridges</apiName><shortdesc>
      同じ SecurityDomain にあるかどうかに関係なく、この SystemManager の SWF ブリッジグループ内のすべての親および子アプリケーションにメッセージを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>送出するイベントです。
          
          </apiDesc></apiParam><apiParam><apiItemName>skip</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>メッセージを送出しない IEventDispatcher を指定します。これは通常、イベントを生成した IEventDispatcher をスキップするために使用されます。
     
          </apiDesc></apiParam><apiParam><apiItemName>trackClones</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>送出されるイベントへの参照を保持するかどうかを示します。
          
          </apiDesc></apiParam><apiParam><apiItemName>toOtherSystemManagers</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>AIR 内の他の最上位 SystemManager にイベントを送出するかどうかを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      同じ SecurityDomain にあるかどうかに関係なく、この SystemManager の SWF ブリッジグループ内のすべての親および子アプリケーションにメッセージを送出します。オプションで、このメソッドのパラメーターでアプリケーションを除外できます。
     
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:isDisplayObjectInABridgedApplication"><apiName>isDisplayObjectInABridgedApplication</apiName><shortdesc>
      表示オブジェクトが互換モードでロードされた子アプリケーション内または信頼されていないサンドボックス内にあるかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> は <codeph>displayObject</codeph> が互換モードでロードされた子アプリケーション内または信頼されていないサンドボックス内にあることを示し、<codeph>false</codeph> はそれ以外の場合を示します。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>テストする DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      表示オブジェクトが互換モードでロードされた子アプリケーション内または信頼されていないサンドボックス内にあるかどうかをテストします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc> 
      システムマネージャーに子ブリッジを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>子のブリッジです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      システムマネージャーに子ブリッジを追加します。各子ブリッジは、別のサンドボックス内のコンポーネントまたは Flex の別のバージョンでコンパイルされたコンポーネントを表します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildFromSandboxRoot"><apiName>removeChildFromSandboxRoot</apiName><shortdesc> 
      要求されたレイヤーのサンドボックスルートから指定された子を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>SystemManager 内の IChildList の名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>追加する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      要求されたレイヤーのサンドボックスルートから指定された子を削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:useSWFBridge"><apiName>useSWFBridge</apiName><shortdesc>
      このシステムマネージャーを使用している呼び出し元が、他のマネージャーと直接通信する必要があるかどうか、またはブリッジと通信する必要があるかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このシステムマネージャーを使用している呼び出し元がサンドボックスブリッジを使用して通信する必要がある場合は <codeph>true</codeph> です。システムマネージャーが参照を介して他のマネージャーを直接呼び出すことができる場合は <codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      このシステムマネージャーを使用している呼び出し元が、他のマネージャーと直接通信する必要があるかどうか、またはブリッジと通信する必要があるかどうかを判断します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:swfBridgeGroup:get"><apiName>swfBridgeGroup</apiName><shortdesc>
      このアプリケーションが接続している他のアプリケーションへのすべてのブリッジを含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:ISWFBridgeGroup</apiValueClassifier></apiValueDef><apiDesc>
      このアプリケーションが接続している他のアプリケーションへのすべてのブリッジを含みます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManagerClient"><apiName>ILayoutManagerClient</apiName><shortdesc>
  ILayoutManagerClient インターフェイスは、コンポーネントが LayoutManager の処理、測定、レイアウトシーケンスの対象となるために実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ILayoutManagerClient インターフェイスは、コンポーネントが LayoutManager の処理、測定、レイアウトシーケンスの対象となるために実装する必要があるインターフェイスを定義します。  
 
  <p>このインターフェイスを実装するオブジェクトは、LayoutManager の <codeph>invalidateProperties()</codeph> メソッドに渡すことができます。 LayoutManager は、プロパティの処理段階に入ると、このオブジェクトの <codeph>validateProperties()</codeph> メソッドを呼び出します。</p>
 
  <p>同様に、オブジェクトが LayoutManager の <codeph>invalidateSize()</codeph> メソッドに渡されると、LayoutManager は測定段階でそのオブジェクトの <codeph>validateSize()</codeph> メソッドを呼び出し、オブジェクトが LayoutManager の <codeph>invalidateDisplayList()</codeph> メソッドに渡されると、LayoutManager はレイアウト段階でそのオブジェクトの <codeph>validateDisplayList()</codeph> メソッドを呼び出します。</p>
 
  <p>ILayoutManagerClient インターフェイスは、UIComponent クラスと ProgrammaticSkin クラスによって実装されます。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      子の位置とサイズを検証し、その他のビジュアルオブジェクトを描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      子の位置とサイズを検証し、その他のビジュアルオブジェクトを描画します。 <codeph>LayoutManager.invalidateDisplayList()</codeph> メソッドがこの ILayoutManagerClient クライアントを指定して呼び出された場合、表示リストの更新時に <codeph>validateDisplayList()</codeph> メソッドが呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      コンポーネントのプロパティを検証します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントのプロパティを検証します。 <codeph>LayoutManager.invalidateProperties()</codeph> メソッドがこの ILayoutManagerClient クライアントを指定して呼び出された場合、プロパティ値の処理時に <codeph>validateProperties()</codeph> メソッドが呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateSize"><apiName>validateSize</apiName><shortdesc>
      コンポーネントの測定サイズを検証します。LayoutManager.invalidateSize() メソッドがこの ILayoutManagerClient を指定して呼び出された場合、測定の実行時に validateSize() メソッドが呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、このメソッドをオブジェクトの子で呼び出します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンポーネントの測定サイズを検証します。<codeph>LayoutManager.invalidateSize()</codeph> メソッドがこの ILayoutManagerClient を指定して呼び出された場合、測定の実行時に <codeph>validateSize()</codeph> メソッドが呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:initialized:get"><apiName>initialized</apiName><shortdesc>
      オブジェクトが 3 段階のレイアウト検証を完了しているかどうかを示すフラグです（いずれかが必須であった場合）。このフラグは LayoutManager のみによって変更されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが 3 段階のレイアウト検証を完了しているかどうかを示すフラグです（いずれかが必須であった場合）。このフラグは LayoutManager のみによって変更されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      最上位の SystemManager の nestLevel は 1 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      最上位の SystemManager の nestLevel は 1 です。 その直下の子（最上位の Application およびポップアップウィンドウ）の <codeph>nestLevel</codeph> は 2 です。 その下の子の <codeph>nestLevel</codeph> は 3、というように続きます。 <codeph>nestLevel</codeph> は、測定およびレイアウト段階で ILayoutManagerClient をソートするために使用されます。 処理段階では、LayoutManager は昇順の <codeph>nestLevel</codeph> でクライアントのプロパティを処理するため、Flex がオブジェクト自体のプロパティを処理する前にオブジェクトの子のプロパティの処理は完了しています。測定段階では、LayoutManager は降順の <codeph>nestLevel</codeph> でクライアントを測定するため、Flex がオブジェクト自体を測定する前にオブジェクトの子の測定は完了しています。 レイアウト段階では、LayoutManager は昇順の <codeph>nestLevel</codeph> でクライアントをレイアウトするため、子オブジェクトがそれぞれの子の位置とサイズを決定する前に、オブジェクトがその子のサイズを設定できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      オブジェクトが updateComplete イベントの送出を待っているかどうかを判別するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが <codeph>updateComplete</codeph> イベントの送出を待っているかどうかを判別するフラグです。 このフラグは、LayoutManager によってのみ変更されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IToolTipManagerClient"><apiName>IToolTipManagerClient</apiName><shortdesc>
  IToolTipManagerClient を実装するコンポーネントにはツールヒントを表示できるため、toolTip の getter と setter が必要です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IToolTipManagerClient を実装するコンポーネントにはツールヒントを表示できるため、toolTip の getter と setter が必要です。 IToolTipManagerClient であるコンポーネントでは、ToolTipManager クラスがツールヒントの表示と非表示を管理します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.core.xml#IToolTip"><linktext>mx.core.IToolTip</linktext></link></related-links><apiValue id="mx.managers:IToolTipManagerClient:mx.managers:IToolTipManagerClient:toolTip:get"><apiName>toolTip</apiName><shortdesc>
	  このコンポーネントのツールヒントのテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  このコンポーネントのツールヒントのテキストです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManager"><apiName>CursorManager</apiName><shortdesc>
  CursorManager クラスではカーソルの優先順位リストが制御されており、リスト内で優先度が最も高いカーソルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="busyCursorBackground" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  ビジーカーソルの背景のスキンとして使用するクラスです。デフォルト値は、Assets.swf ファイルの "cursorStretch" シンボルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="busyCursor" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  ビジーカーソルのスキン。
 
  </description>
<default>mx.skins.halo.BusyCursor
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  CursorManager クラスではカーソルの優先順位リストが制御されており、リスト内で優先度が最も高いカーソルが表示されます。 同じ優先度を持つカーソルがカーソルリストに複数ある場合、最も新しく作成されたカーソルが表示されます。
  
  <p>例えば、完了するまでユーザーが待つ必要があるような処理がアプリケーションで実行される場合、カーソルを変更することで、今は待ち状態であることを表すことができます。 この場合は、カーソルを砂時計などのイメージに変更します。</p>
  
  <p>また、ユーザーが実行できるアクションを示すために、カーソルを変更してユーザーにフィードバックする場合もあります。 例えば、ユーザー入力が有効な場合を示すカーソルイメージと、ユーザー入力が無効な場合を示すカーソルイメージを変えることができます。 カーソルイメージには、JPEG、GIF、PNG、または SVG イメージや、Sprite オブジェクト、SWF ファイルを使用できます。</p>
  
  <p>CursorManager のメソッドとプロパティはすべて静的なので、そのインスタンスを作成する必要はありません。</p>
 
  <p>AIR では、各 mx.core.Window インスタンスは CursorManager クラスの独自のインスタンスを使用します。 CursorManager クラスの静的メソッドとプロパティを直接参照するのではなく、<codeph>Window.cursorManager</codeph> プロパティを使用して、Window インスタンスに対する CursorManager インスタンスを参照します。 </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link><link href="" invalidHref="mx.core.Window.xml"><linktext>mx.core.Window</linktext></link></related-links><apiOperation id="mx.managers:CursorManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      AIR アプリケーション内の各 mx.core.Window インスタンスには、独自の CursorManager インスタンスがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>AIR アプリケーション内のメイン Window インスタンスの CursorManager インスタンスです。  
      
      </apiDesc><apiType value="mx.managers:ICursorManager"/></apiReturn></apiOperationDef><apiDesc>
      AIR アプリケーション内の各 mx.core.Window インスタンスには、独自の CursorManager インスタンスがあります。 このメソッドは、メイン Window インスタンスの CursorManager インスタンスを返します。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:hideCursor"><apiName>hideCursor</apiName><shortdesc>
      カーソルを非表示にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      カーソルを非表示にします。 カーソルの可視性は参照カウントされません。 1 回の <codeph>hideCursor()</codeph> メソッドの呼び出しで、常にカーソルが非表示になります。これは、<codeph>showCursor()</codeph> メソッドの呼び出し回数に関係ありません。
     
      <p>このメソッドを呼び出しても、システムカーソルには影響がありません。 システムカーソルを直接制御するには、<codeph>Mouse.show()</codeph> メソッドおよび <codeph>Mouse.hide()</codeph> メソッドを使用します。 </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeAllCursors"><apiName>removeAllCursors</apiName><shortdesc>
      カーソルリストからすべてのカーソルを削除して、システムカーソルを復元します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      カーソルリストからすべてのカーソルを削除して、システムカーソルを復元します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeBusyCursor"><apiName>removeBusyCursor</apiName><shortdesc>
      カーソルリストからビジーカーソルを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      カーソルリストからビジーカーソルを削除します。 他のビジーカーソル要求がカーソルリスト内でまだアクティブな場合、つまり <codeph>setBusyCursor()</codeph> メソッドを 2 回以上呼び出していた場合には、ビジーカーソルがリストからすべて削除されるまで、ビジーカーソルは消えません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeCursor"><apiName>removeCursor</apiName><shortdesc>
      カーソルリストから 1 つのカーソルを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursorID</apiItemName><apiType value="int"/><apiDesc>削除するカーソルの ID です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      カーソルリストから 1 つのカーソルを削除します。 削除対象のカーソルが現在表示されている場合、CursorManager は、リスト内に次のカーソルがあれば、そのカーソルを表示します。 リストが空になると、CursorManager はデフォルトのシステムカーソルを表示します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setBusyCursor"><apiName>setBusyCursor</apiName><shortdesc>
      ビジーカーソルを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ビジーカーソルを表示します。 ビジーカーソルの優先度は CursorManagerPriority.LOW です。このため、これより高い優先度のカーソルがカーソルリストに含まれている場合、そのカーソルが削除されるまでビジーカーソルは表示されません。 より高い優先度のビジーカーソルを作成するには、<codeph>setCursor()</codeph> メソッドを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setCursor"><apiName>setCursor</apiName><shortdesc>
      新しいカーソルを作成し、必要に応じてカーソルに優先度を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>カーソルの ID です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>cursorClass</apiItemName><apiType value="Class"/><apiDesc>表示するカーソルのクラスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>2</apiData><apiDesc>カーソルの優先度レベルを指定する整数。 有効な値は、<codeph>CursorManagerPriority.HIGH</codeph>、<codeph>CursorManagerPriority.MEDIUM</codeph> および <codeph>CursorManagerPriority.LOW</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>マウスポインターを基準としたカーソルの x オフセットをピクセル単位で指定する数値です。
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>マウスポインターを基準としたカーソルの y オフセットをピクセル単位で指定する数値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      新しいカーソルを作成し、必要に応じてカーソルに優先度を設定します。 新しいカーソルはカーソルリストに追加されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:CursorManager:showCursor"><apiName>showCursor</apiName><shortdesc>
      カーソルを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      カーソルを表示します。 カーソルの可視性は参照カウントされません。 1 回の <codeph>showCursor()</codeph> メソッドの呼び出しで、常にカーソルが表示されます。これは、<codeph>hideCursor()</codeph> メソッドの呼び出し回数に関係ありません。
     
      <p>このメソッドを呼び出しても、システムカーソルには影響がありません。 システムカーソルを直接制御するには、<codeph>Mouse.show()</codeph> メソッドおよび <codeph>Mouse.hide()</codeph> メソッドを使用します。 </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:CursorManager:NO_CURSOR"><apiName>NO_CURSOR</apiName><shortdesc>
      CursorManager で管理されているカーソルがないため、システムカーソルが表示されている場合に、currentCursorID プロパティの値となる定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
      CursorManager で管理されているカーソルがないため、システムカーソルが表示されている場合に、<codeph>currentCursorID</codeph> プロパティの値となる定数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorID:get"><apiName>currentCursorID</apiName><shortdesc>
      現在のカスタムカーソルの ID です。システムカーソルが表示されている場合は NO_CURSOR になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      現在のカスタムカーソルの ID です。システムカーソルが表示されている場合は NO_CURSOR になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorXOffset:get"><apiName>currentCursorXOffset</apiName><shortdesc>
      マウスポインターを基準としたカスタムカーソルの x オフセット（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      マウスポインターを基準としたカスタムカーソルの x オフセット（ピクセル単位）です。
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorYOffset:get"><apiName>currentCursorYOffset</apiName><shortdesc>
      マウスポインターを基準としたカスタムカーソルの y オフセット（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      マウスポインターを基準としたカスタムカーソルの y オフセット（ピクセル単位）です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>