<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.collections"><apiName>mx.collections</apiName><apiDetail/><apiClassifier id="mx.collections:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
  La classe ItemResponder fournit une implémentation par défaut de l’interface mx.rpc.IResponder.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.rpc:IResponder</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ItemResponder fournit une implémentation par défaut de l’interface <codeph>mx.rpc.IResponder</codeph>. Elle représente un répondeur qui permet de spécifier les méthodes à appeler au terme d’une demande, qu’elle aboutisse ou qu’elle génère une erreur. L’objet de la classe permet également de fournir des données (un jeton) devant être utilisées par les méthodes de répondeur.
 
 <p>Vous pouvez utiliser un objet <codeph>ItemResponder</codeph> dans l’instruction <codeph>catch</codeph> d’un bloc try pour obtenir des données distantes, comme l’illustre l’exemple de code ci-dessous :</p>
 
  <pre><codeph>
     import mx.collections.ItemResponder;
     //...
 
     try
     {
        //...
        cursor.moveNext();
     }
    catch(e:ItemPendingError)
     {
        e.addResponder(new ItemResponder(myResultFunction, myFaultFunction, {info:"..."}));
     }
  </codeph></pre>
 
  <p>La méthode result spécifiée doit présenter la signature suivante :</p>
 
  <codeph><pre>
     public function myResultFunction(result:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>La méthode fault spécifiée doit présenter la signature suivante :</p>
 
  <codeph><pre>
     public function myFaultFunction(error:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>Toute autre signature provoquera une erreur d’exécution.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links><apiConstructor id="mx.collections:ItemResponder:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
	  Construit une occurrence du répondeur avec les données et les gestionnaires spécifiés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>result</apiItemName><apiType value="Function"/><apiDesc>Fonction à appeler lorsque la demande aboutit. Elle doit présenter la signature suivante : <codeph><pre>
	     		    public function (result:Object, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>fault</apiItemName><apiType value="Function"/><apiDesc>Fonction à appeler lorsque la demande génère une erreur. Elle doit présenter la signature suivante : <codeph><pre>
	     		    public function (error:ErrorMessage, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>token</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Informations supplémentaires facultatives sur l’objet à associer à cette demande. Cet objet est transmis aux fonctions result et fault en tant que deuxième paramètre.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Construit une occurrence du répondeur avec les données et les gestionnaires spécifiés.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ItemResponder:fault"><apiName>fault</apiName><shortdesc>
	  Cette méthode est appelée par un service lorsqu’une erreur est reçue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>Objet contenant des informations sur l’erreur survenue.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Cette méthode est appelée par un service lorsqu’une erreur est reçue.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ItemResponder:result"><apiName>result</apiName><shortdesc>
	  Cette méthode est appelée par un service lorsque la valeur de retour est reçue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les informations renvoyées par la demande.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Cette méthode est appelée par un service lorsque la valeur de retour est reçue.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.collections:Sort"><apiName>Sort</apiName><shortdesc>
  Fournit les informations de tri requises pour réaliser un tri dans une vue existante (interface ICollectionView ou classe implémentant l’interface).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:Sort" replacement="spark.collections.Sort" since="4.5">
	</Alternative><DefaultProperty name="fields"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sort&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:Sort
  <b>Properties</b>
  compareFunction="<em>Internal compare function</em>"
  fields="null"
  unique="false | true"
  /&gt;
  </pre>
 
  <p>In case items have inconsistent data types or items have complex data 
  types, the use of the default built-in compare functions is not recommended.
  Inconsistent sorting results may occur in such cases. To avoid such problem,
  provide a custom compare function and/or make the item types consistent.</p>
 
  <p>Just like any other <code>AdvancedStyleClient</code>-based classes, 
  the <code>Sort</code> and <code>SortField</code> classes do not have a 
  parent-child relationship in terms of event handling. Locale changes in a 
  <code>Sort</code> instance are not dispatched to its <code>SortField</code> 
  instances automatically. The only exceptional case is the internal default 
  <code>SortField</code> instance used when no explicit fields are provided.
  In this case, the internal default <code>SortField</code> instance follows 
  the locale style that the owner <code>Sort</code> instance has.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISort</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fournit les informations de tri requises pour réaliser un tri dans une vue existante (interface ICollectionView ou classe implémentant l’interface). Après avoir affecté une occurrence Sort à la propriété <codeph>sort</codeph> de la vue, vous devez appeler la méthode <codeph>refresh()</codeph> de la vue pour appliquer les critères de tri. Le tri est généralement défini pour des collections d’éléments complexes, c’est-à-dire pour des collections dans lesquelles le tri est réalisé sur une ou plusieurs propriétés des objets de la collection. L’exemple suivant illustre cette utilisation :
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     // In the real world, the collection would have more than one item.
     col.addItem({first:"Anders", last:"Dickerson"});
     // Create the Sort instance.
     var sort:Sort = new Sort();
     // Set the sort field; sort on the last name first, first name second.
     // Both fields are case-insensitive.
     sort.fields = [new SortField("last",true), new SortField("first",true)];
       // Assign the Sort object to the view.
     col.sort = sort;
     // Apply the sort to the collection.
     col.refresh();
  </codeph></pre>
 
  <p>Dans certaines situations, la collection contient des éléments simples de type <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph>, etc. Dans ce cas, appliquez le tri directement au type simple. Lorsque vous réalisez un tri pour des éléments simples, utilisez un seul champ de tri et spécifiez la valeur <codeph>null</codeph> pour le (premier) paramètre <codeph>name</codeph> du constructeur d’objet SortField. Par exemple :
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     // There is only one sort field, so use a <codeph>null</codeph> 
     // first parameter.
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
     col.refresh();
  </codeph></pre>
  </p>
 
  <p>Les implémentations Flex de l’interface ICollectionView extraient tous les éléments d’un emplacement distant avant de procéder au tri. Si vous utilisez la pagination avec une liste triée, appliquez le tri à la collection distante avant d’extraire les données.
  </p>
 
  <p>Par défaut, cette classe de tri ne permet pas d’effectuer correctement un tri spécifique par langue des chaînes de caractères. Pour ce type de tri, reportez-vous aux classes <codeph>spark.collections.Sort</codeph> et <codeph>spark.collections.SortField</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:Sort:Sort"><apiName>Sort</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Crée un nouvel objet Sort dont aucun champ n’est défini et qui ne contient aucun comparateur personnalisé.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:Sort:findItem"><apiName>findItem</apiName><shortdesc>
      
      Retrouve l’objet spécifié dans le tableau spécifié (ou le point d’insertion s’il est demandé) et retourne l’index si cet objet est retrouvé, ou -1 dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>int Index de l’élément retrouvé dans le tableau. Si la valeur du paramètre <codeph>returnInsertionIndex</codeph> est <codeph>false</codeph> et que l’élément est introuvable, la valeur retournée est -1. Si la valeur du paramètre <codeph>returnInsertionIndex</codeph> est <codeph>true</codeph> et que l’élément est introuvable, la valeur retournée est l’index du point où les valeurs seraient insérées dans le tableau trié.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Tableau dans lequel la recherche doit être réalisée.
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les propriétés à rechercher (ou l’objet à rechercher lui-même). L’objet doit se composer de paires nom/valeur, où les noms de champ sont les noms des champs spécifiés par la propriété <codeph>fields</codeph>, dans l’ordre dans lequel ils sont utilisés dans cette propriété. Il n’est pas obligatoire de spécifier tous les champs de la propriété <codeph>fields</codeph>, mais vous ne pouvez pas ignorer des champs si d’autres champs figurant après dans la séquence sont définis. Par conséquent, si la propriété <codeph>fields</codeph> contient trois champs, vous pouvez spécifier les premier et deuxième champs de ce paramètre, mais vous ne pouvez pas spécifier uniquement les premier et troisième champs.
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>Chaîne contenant le type de recherche à réaliser. Valeurs valides :
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>Retourne une position valide pour les valeurs.</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>Retourne la position où la première occurrence de la valeur a été retrouvée.</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>Retourne la position où la dernière occurrence de la valeur spécifiée a été retrouvée.
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la méthode ne retrouve pas d’élément identifié par le paramètre <codeph>values</codeph> et que la valeur de ce paramètre est <codeph>true</codeph>, la méthode <codeph>findItem()</codeph> retourne le point d’insertion des valeurs, c’est-à-dire le point où vous devez insérer l’élément, dans l’ordre de tri.
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Fonction de comparaison à utiliser pour retrouver l’élément. Si vous ne spécifiez pas ce paramètre ou si vous spécifiez une valeur <codeph>null</codeph>, la fonction <codeph>findItem()</codeph> utilise la fonction de comparaison déterminée par la propriété <codeph>compareFunction</codeph> de l’occurrence <codeph>ISort</codeph> et transmet le tableau de champs déterminé par l’objet de valeurs et les objets <codeph>SortField</codeph> actuels. Si vous fournissez une valeur non nulle, la fonction <codeph>findItem()</codeph> l’utilise en tant que fonction de comparaison. La signature de la fonction transmise comme <codeph>compareFunction</codeph> doit avoir la forme suivante : <codeph>function myCompareFunction(a:Object, b:Object):int</codeph>. Notez l’absence de troisième argument contrairement à la fonction de comparaison pour la propriété <codeph>ISort.compareFunction()</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Retrouve l’objet spécifié dans le tableau spécifié (ou le point d’insertion s’il est demandé) et retourne l’index si cet objet est retrouvé, ou -1 dans le cas contraire. Les méthodes <codeph>find<i>xxx</i>()</codeph> de la classe <codeph>ListCollectionView</codeph> utilisent cette méthode pour retrouver l’élément demandé. Bien souvent, il est plus simple d’utiliser ces fonctions plutôt que la méthode <codeph>findItem()</codeph> pour retrouver des données dans les objets <codeph>ListCollectionView</codeph>. Appelez directement la méthode <codeph>findItem()</codeph> lorsque vous écrivez une classe prenant en charge le tri, par exemple une nouvelle implémentation <codeph>ICollectionView</codeph>. Le tableau d’éléments en entrée doit être trié avant l’appel de cette fonction. Dans le cas contraire, cette fonction ne peut pas trouver la valeur spécifiée correctement.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      
      Retourne une valeur indiquant si la propriété spécifiée est utilisée dans le contrôle du tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Indique si la valeur de la propriété est susceptible d’influer sur le résultat du tri. Lorsque le tri utilise la fonction compareFunction par défaut, la valeur <codeph>true</codeph> est retournée si le paramètre <codeph>property</codeph> spécifie un champ de tri. Si le tri ou un objet <codeph>ISortField</codeph> utilisent un comparateur personnalisé, il est impossible de savoir si la propriété peut influer sur le résultat du tri. La valeur retournée est alors <codeph>true</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Nom du champ à tester.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Retourne une valeur indiquant si la propriété spécifiée est utilisée dans le contrôle du tri. La fonction ne peut pas fournir une réponse définitive si le tri fait appel à un comparateur personnalisé. Dans ce cas, elle retourne toujours la valeur <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:reverse"><apiName>reverse</apiName><shortdesc>
      
      Parcourt le tableau fields et appelle la méthode reverse() sur chacun des objets ISortField dans le tableau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Parcourt le tableau <codeph>fields</codeph> et appelle la méthode <codeph>reverse()</codeph> sur chacun des objets <codeph>ISortField</codeph> dans le tableau. Si le champ était trié dans l’ordre décroissant, il est maintenant classé dans l’ordre croissant et inversement.
     
      <p>Remarque : une interface <codeph>ICollectionView</codeph> n’est pas automatiquement mise à jour lorsque les objets du tableau <codeph>fields</codeph> sont modifiés. Appelez sa méthode <codeph>refresh()</codeph> pour actualiser la vue.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:sort"><apiName>sort</apiName><shortdesc>
      
      Applique le tri actuel au tableau spécifié et non à une copie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments à trier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Applique le tri actuel au tableau spécifié et non à une copie. Pour empêcher la modification du tableau, créez une copie et utilisez-la dans le paramètre <codeph>items</codeph>.
     
      <p>Les implémentations Flex de l’interface <codeph>ICollectionView</codeph> appellent automatiquement la méthode <codeph>sort</codeph> et font en sorte que le tri soit réalisé sur une copie des données sous-jacentes.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:Sort:ANY_INDEX_MODE"><apiName>ANY_INDEX_MODE</apiName><shortdesc>
      Lors de l’exécution d’une recherche, retourne l’index d’un élément correspondant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Lors de l’exécution d’une recherche, retourne l’index d’un élément correspondant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:FIRST_INDEX_MODE"><apiName>FIRST_INDEX_MODE</apiName><shortdesc>
      Lors de l’exécution d’une recherche, retourne l’index du premier élément correspondant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>first</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Lors de l’exécution d’une recherche, retourne l’index du premier élément correspondant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:LAST_INDEX_MODE"><apiName>LAST_INDEX_MODE</apiName><shortdesc>
      Lors de l’exécution d’une recherche, renvoie l’index du dernier élément correspondant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>last</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Lors de l’exécution d’une recherche, renvoie l’index du dernier élément correspondant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      
      Méthode utilisée pour comparer des éléments lors du tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      Méthode utilisée pour comparer des éléments lors du tri. Si vous spécifiez cette propriété, Flex ignore les propriétés <codeph>compareFunction</codeph> que vous spécifiez dans les objets <codeph>ISortField</codeph> utilisés dans cette classe.
     
      <p>La fonction de comparaison doit présenter la signature suivante :</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>Cette fonction doit retourner les valeurs suivantes : value:
      <ul>
            <li>-1, si <codeph>Object a</codeph> doit apparaître avant <codeph>Object b</codeph> dans l’ordre de tri.</li>
            <li>0, si <codeph>Object a</codeph> est égal à <codeph>Object b</codeph>.</li>
            <li>1, si <codeph>Object a</codeph> doit apparaître après <codeph>Object b</codeph> dans l’ordre de tri.</li>
      </ul></p>
      <p>Pour renvoyer à la fonction de comparaison interne, définissez cette valeur sur <codeph>null</codeph>.</p>
      <p>
      Le tableau <codeph>fields</codeph> spécifie les champs d’objet à comparer. En général, l’algorithme compare les propriétés jusqu’à ce que la fin de la liste des champs soit atteinte ou jusqu’à ce qu’une valeur autre que zéro puisse être renvoyée. Par exemple :</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>La valeur par défaut est une fonction de comparaison interne qui réalise une comparaison de chaîne, de nombre ou de date dans l’ordre croissant ou décroissant. Spécifiez votre propre fonction uniquement si vous souhaitez disposer d’un algorithme de comparaison personnalisé. Normalement, cela est nécessaire uniquement lorsqu’un champ calculé est utilisé dans un affichage.</p>
     
      <p>Vous pouvez également spécifier des fonctions de comparaison séparées pour chaque champ de tri, en utilisant la propriété <codeph>compareFunction</codeph> de la classe <codeph>ISortField</codeph>. Il est ainsi possible d’utiliser la comparaison par défaut pour certains champs et une comparaison personnalisée pour d’autres.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:fields:get"><apiName>fields</apiName><shortdesc>
      
      Tableau d’objets ISortField spécifiant les champs à comparer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="fieldsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Composant <codeph>Array</codeph> d’objets <codeph>ISortField</codeph> spécifiant les champs à comparer. L’ordre des objets ISortField dans le tableau détermine l’ordre de priorité des champs lors du tri. Le comparateur de tri par défaut vérifie les champs de tri dans l’ordre du tableau, jusqu’à ce qu’il détermine un ordre de tri pour les deux champs comparés.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#SortField"><linktext>SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:Sort:unique:get"><apiName>unique</apiName><shortdesc>
      
      Indique si le tri doit être unique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Indique si le tri doit être unique. Les tris uniques échouent si une valeur ou une combinaison de valeurs spécifiée par les champs de la propriété fields engendre un ordre de tri indéterminé ou non unique, par exemple lorsque deux éléments ou plus ont les mêmes valeurs de tri. Une erreur est renvoyée si le tri n’est pas unique. La logique de tri utilise cette valeur de propriété <codeph>unique</codeph> seulement si les champs de tri sont spécifiés de façon explicite. En l’absence de champs de tri spécifiés de façon explicite, aucune erreur n’est renvoyée, même lorsqu’il existe des éléments de valeur identique.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISortField"><apiName>ISortField</apiName><shortdesc>
  L’interface ISortField définit l’interface des classes utilisées avec les classes ISort, afin de fournir les informations de tri requises pour trier les champs spécifiques ou les propriétés d’une vue de collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface <codeph>ISortField</codeph> définit l’interface des classes utilisées avec les classes <codeph>ISort</codeph>, afin de fournir les informations de tri requises pour trier les champs spécifiques ou les propriétés d’une vue de collection.
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      Fonction d’assistance appelée par la classe de tri pour définir la fonction de comparaison par défaut et réaliser une comparaison en fonction de l’un de ces trois éléments : si une fonction de comparaison personnalisée a été définie ou non, le type de données du champ spécifié ou la valeur de la propriété numeric.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Objet qui contient les données. Si le nom du champ a été défini avec la propriété name, le nom est utilisé pour accéder à la valeur de données à partir de cet objet. Dans tous les autres cas, l’objet lui-même est utilisé en tant que valeur de données.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction d’assistance appelée par la classe <codeph>Sort</codeph> pour définir la fonction de comparaison par défaut et réaliser une comparaison en fonction de l’un de ces trois éléments : si une fonction de comparaison personnalisée a été définie ou non, le type de données du champ spécifié ou la valeur de la propriété numeric. Si la propriété <codeph>numeric</codeph> a la valeur true, une comparaison numérique est effectuée lors du tri.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISortField:mx.collections:ISortField:reverse"><apiName>reverse</apiName><shortdesc>
      Inverse les critères de ce champ de tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Inverse les critères de ce champ de tri. Si le champ était trié dans l’ordre décroissant, par exemple, il est trié dans l’ordre croissant.
           <p>Remarque : une interface <codeph>ICollectionView</codeph> n’est pas automatiquement mise à jour lorsque les objets <codeph>ISortField</codeph> sont modifiés. Appelez sa méthode <codeph>refresh()</codeph> pour actualiser la vue.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISortField:mx.collections:ISortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph/><codeph/> Les autres utilisations de cette propriété ne sont pas prises en charge. Renvoie la valeur -1 si ISortField ne doit pas être utilisé par la classe <codeph>Sort</codeph> pour trier le champ (il n’existe aucune fonction compareFunction ni de nom). Dans le cas contraire, renvoie un masque binaire d’options de tri.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Fonction comparant deux éléments lors d’un tri d’éléments pour la collection associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction comparant deux éléments lors d’un tri d’éléments pour la collection associée. Si vous spécifiez une propriété <codeph>compareFunction</codeph> dans un objet ISort, Flex ignore les propriétés <codeph>compareFunction</codeph> des objets ISortField de l’objet ISort.
      <p>La fonction de comparaison doit présenter la signature suivante :</p>
           <p><codeph>function myCompare(a:Object, b:Object):int</codeph></p>
           <p>Cette fonction renvoie les valeurs suivantes :</p>
            <ul>
            <li>-1 si <codeph>a</codeph> apparaît avant <codeph>b</codeph> dans la séquence triée</li>
            <li>0 si <codeph>a</codeph> = <codeph>b</codeph></li>
            <li>1 si <codeph>a</codeph> apparaît après <codeph>b</codeph> dans la séquence triée</li>
      </ul>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:descending:get"><apiName>descending</apiName><shortdesc>
      Détermine si ce champ doit être trié dans l’ordre décroissant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si ce champ doit être trié dans l’ordre décroissant.
           <p>La valeur par défaut est <codeph>false</codeph> (ordre croissant).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:name:get"><apiName>name</apiName><shortdesc>
      Nom du champ à trier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom du champ à trier.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      Force le comparateur à utiliser une comparaison numérique si le champ trié contient des valeurs numériques (number/int/uint) ou des représentations de chaîne de valeurs numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
           </apiDefaultValue></apiValueDef><apiDesc>
      Force le comparateur à utiliser une comparaison numérique si le champ trié contient des valeurs numériques (<codeph>number/int/uint</codeph>) ou des représentations de chaîne de valeurs numériques.
      <p>
      Cette propriété est utilisée par la classe <codeph>SortField</codeph> si aucune fonction de comparaison personnalisée n’est fournie.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>true</codeph>, la fonction de comparaison numérique intégrée est utilisée. Chacun des éléments de données est projeté vers une fonction <codeph>Number()</codeph> avant la comparaison.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>false</codeph>, la fonction de comparaison de chaînes intégrée est utilisée. Chacun des éléments de données est projeté vers une fonction <codeph>String()</codeph> avant la comparaison.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>null</codeph>, le premier élément de données est introspecté afin de déterminer s’il s’agit d’un nombre ou d’une chaîne. Le tri est réalisé en fonction de cette introspection.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISortField:mx.collections:ISortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      La valeur est true si cet objet ISortField utilise une fonction de comparaison personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><compareFunction>      </compareFunction></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      La valeur est true si cet objet <codeph>ISortField</codeph> utilise une fonction de comparaison personnalisée.
           </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayList"><apiName>ArrayList</apiName><shortdesc>
  La classe ArrayList est une simple implémentation de l’interface IList qui utilise un tableau de sauvegarde comme source de données. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ArrayList est une simple implémentation de l’interface IList qui utilise un tableau de sauvegarde comme source de données. Les éléments du tableau de sauvegarde peuvent être accédés et manipulés avec les méthodes et les propriétés de l’interface <codeph>IList</codeph>. Les opérations réalisées sur une occurrence ArrayList modifient la source de données. Par exemple, si vous utilisez la méthode <codeph>removeItemAt()</codeph> sur une classe ArrayList, vous supprimez l’élément du tableau sous-jacent. Cette classe de base ne renverra pas d’objets ItemPendingError mais il est possible qu’une sous-classe le puisse. 
 
  <pre>
  &lt;mx:ArrayList
  <b>Properties</b>
  source="null"
  />
  </pre>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ArrayList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque l’interface IList a été mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’interface IList a été mise à jour.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ArrayList:ArrayList"><apiName>ArrayList</apiName><shortdesc>
      Construire une nouvelle classe ArrayList à l’aide du tableau spécifié comme source. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau à utiliser en tant que source pour la classe ArrayList.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Construire une nouvelle classe ArrayList à l’aide du tableau spécifié comme source. Si aucune source n’est spécifiée, un tableau vide est utilisé.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ArrayList:addAllAt"><apiName>addAllAt</apiName><shortdesc conref="mx.collections.ListCollectionView#addAllAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Liste d’éléments à ajouter à la liste actuelle.
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Emplacement de la liste actuelle où les nouveaux éléments doivent être placés.
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAllAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addAll"><apiName>addAll</apiName><shortdesc conref="mx.collections.ListCollectionView#addAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Liste d’éléments à ajouter à la liste actuelle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Ajoutez l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si l’index est inférieur à 0 ou supérieur à la longueur
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>l’élément à placer à l’index
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>l’index sur lequel placer l’élément
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoutez l’élément à l’index spécifié. Tout élément qui était après cet index est déplacé d’une placce.   
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItem"><apiName>addItem</apiName><shortdesc>
      Ajoutez l’élément spécifié à la fin de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à ajouter
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoutez l’élément spécifié à la fin de la liste. Equivaut à addItemAt(élément, longueur) ;
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Obtenez l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si les données de cet index doivent être chargées à partir d’un emplacement distant
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>si l’index &lt; 0 ou index >= longueur
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>l’élément qui se trouve à cet index ou null si aucun élément n’est retrouvé
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>l’index dans la liste à partir duquel récupérer l’élément
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Valeur int indiquant le nombre d’éléments à récupérer au cours de la demande si l’élément n’est pas local, ainsi que leur direction.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtenez l’élément à l’index spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Retourne l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’index de l’élément, -1 si l’élément n’est pas dans la liste.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à retrouver
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément. Notez que, dans cette implémentation, la recherche est linéaire et est donc O(n).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:itemUpdateHandler"><apiName>itemUpdateHandler</apiName><shortdesc>
      Appelé lorsqu’un des éléments contenus dans la liste distribue un événement ObjectChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:PropertyChangeEvent</apiOperationClassifier><apiDesc>Objet événement de l’événement ObjectChange.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un des éléments contenus dans la liste distribue un événement ObjectChange. <codeph>L’enveloppe dans un objet CollectionEventKind.UPDATE</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Signale à la vue qu’un élément a été mis à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément mis à jour dans la vue.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Chaîne, valeur QName ou entier indiquant la propriété modifiée.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété (si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément).
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété (si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la vue qu’un élément a été mis à jour. Cette méthode est utile lorsque le contenu de la vue n’implémente pas l’interface <codeph>IPropertyDispatcher</codeph>. Si une propriété est spécifiée, il est possible que la vue puisse optimiser son mécanisme de notification. Dans le cas contraire, elle peut simplement choisir d’actualiser l’ensemble de la vue.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ArrayList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Supprime tous les éléments de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Supprime tous les éléments de la liste.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque index &lt; 0 ou index >= length.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément qui a été supprimé.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel l’élément doit être supprimé.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie. Tous les éléments qui se trouvent après cet index se trouvent désormais avancés d’un index.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItem"><apiName>removeItem</apiName><shortdesc>
      Supprime l’élément spécifié de cette liste, s’il existe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur booléenne qui indique si l’élément a été supprimé. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Référence de l’objet de l’élément qui doit être supprimé. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’élément spécifié de cette liste, s’il existe. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Placez l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si l’index est inférieur à 0 ou supérieur ou égal à la longueur
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément remplacé ou null si aucun élément n’a été remplacé
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Nouvelle valeur de l’index
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>l’index sur lequel placer l’élément
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Placez l’élément à l’index spécifié. Si un élément se trouvait déjà à cet index, le nouvel élément le remplace et il est retourné.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:startTrackUpdates"><apiName>startTrackUpdates</apiName><shortdesc> 
      Si l’élément est une interface IEventDispatcher, recherchez les mises à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément transmis à la méthode<codeph>addItemAt()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Si l’élément est une interface IEventDispatcher, recherchez les mises à jour. Cette méthode est appelée par la méthode <codeph>addItemAt()</codeph> et lorsque la source est affectée initialement.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:stopTrackUpdates"><apiName>stopTrackUpdates</apiName><shortdesc> 
      Si l’élément est une interface IEventDispatcher, arrêtez de rechercher les mises à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément transmis à la méthode<codeph>removeItemAt()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Si l’élément est une interface IEventDispatcher, arrêtez de rechercher les mises à jour. Cette méthode est appelée par les méthodes <codeph>removeItemAt()</codeph> et <codeph>removeAll()</codeph>, et avant l’affectation d’une nouvelle source.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toArray"><apiName>toArray</apiName><shortdesc>
      Renvoyez un tableau rempli dans le même ordre que l’implémentation de l’interface IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si les données n’ont pas encore été entièrement chargées à partir d’un emplacement distant
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>Tableau rempli dans le même ordre que l’implémentation de l’interface IList.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoyez un tableau rempli dans le même ordre que l’implémentation de l’interface IList.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toString"><apiName>toString</apiName><shortdesc>
      Imprime le contenu de cette classe ArrayList dans une chaîne et la retourne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne contenant le contenu de la classe ArrayList.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Imprime le contenu de cette classe ArrayList dans une chaîne et la retourne.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ArrayList:length:get"><apiName>length</apiName><shortdesc>
      Obtenez le nombre d’éléments de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Obtenez le nombre d’éléments de la liste. Une classe ArrayList doit toujours connaître sa longueur. Il ne doit donc pas être renvoyé -1, une sous-classe peut annuler ce comportement. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:source:get"><apiName>source</apiName><shortdesc>
      Le tableau source pour cette classe ArrayList. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Le tableau source pour cette classe ArrayList. Toutes les modifications effectuées à l’aide de l’interface IList seront répercutées dans le tableau source. Si aucun tableau source n’a été fourni, la classe ArrayList va en créer un en interne. Les modifications apportées directement au tableau sous-jacent (par exemple, en appelant <codeph>theList.source.pop()</codeph> n’entraîneront pas la distribution de classes <codeph>CollectionEvents</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:uid:get"><apiName>uid</apiName><shortdesc>
      Permet d’accéder à l’ID unique de cette liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Permet d’accéder à l’ID unique de cette liste.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:SortField"><apiName>SortField</apiName><shortdesc>
  Fournit les informations de tri requises pour réaliser un tri sur un champ ou une propriété dans une vue de collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.collections:SortField" replacement="spark.collections.SortField" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SortField&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:SortField
  <b>Properties</b>
  caseInsensitive="false"
  compareFunction="<em>Internal compare function</em>"
  descending="false"
  name="null"
  numeric="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ISortField</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fournit les informations de tri requises pour réaliser un tri sur un champ ou une propriété dans une vue de collection. La classe SortField est destinée à une utilisation avec la classe Sort. Le tri est généralement défini pour des collections d’éléments complexes, c’est-à-dire pour des éléments dans lesquels le tri est réalisé sur les propriétés de ces objets. Exemple :
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem({first:"Anders", last:"Dickerson"});
     var sort:Sort = new Sort();
     sort.fields = [new SortField("first", true)];
     col.sort = sort;
  </codeph></pre>
 
  Dans certaines situations, la collection contient des éléments simples de type <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph>, etc. Dans ce cas, le tri doit être appliqué directement au type simple. Lorsque vous créez un tri pour cette fonction, un seul champ de tri est nécessaire. Sa propriété <codeph>name</codeph> ne doit pas être définie. Par exemple :
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
  </codeph></pre>
 
  <p>Par défaut, la comparaison fournie par la classe SortField ne permet pas d’effectuer correctement un tri spécifique par langue des chaînes de caractères. Pour ce type de tri, reportez-vous aux classes <codeph>spark.collections.Sort</codeph> et <codeph>spark.collections.SortField</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#Sort"><linktext>mx.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.Sort.xml"><linktext>spark.collections.Sort</linktext></link><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links><apiConstructor id="mx.collections:SortField:SortField"><apiName>SortField</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Nom de la propriété utilisée par ce champ dans le cadre de la comparaison. Si l’objet est de type simple, transmettez la valeur <codeph>null</codeph>.
      </apiDesc></apiParam><apiParam><apiItemName>caseInsensitive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Lors du tri de chaînes, indique au comparateur s’il faut ignorer la casse des valeurs.
      </apiDesc></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indique au comparateur si les éléments doivent être classés dans l’ordre décroissant.
      </apiDesc></apiParam><apiParam><apiItemName>numeric</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Indique au comparateur si les éléments de tri doivent être comparés en tant que nombres et non selon l’ordre alphabétique.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:SortField:initializeDefaultCompareFunction"><apiName>initializeDefaultCompareFunction</apiName><shortdesc>
      
      Fonction d’assistance appelée par la classe de tri pour définir la fonction de comparaison par défaut et réaliser une comparaison en fonction de l’un de ces trois éléments : si une fonction de comparaison personnalisée a été définie ou non, le type de données du champ spécifié ou la valeur de la propriété numeric.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Objet qui contient les données. Si le nom du champ a été défini avec la propriété name, le nom est utilisé pour accéder à la valeur de données à partir de cet objet. Dans tous les autres cas, l’objet lui-même est utilisé en tant que valeur de données.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Fonction d’assistance appelée par la classe <codeph>Sort</codeph> pour définir la fonction de comparaison par défaut et réaliser une comparaison en fonction de l’un de ces trois éléments : si une fonction de comparaison personnalisée a été définie ou non, le type de données du champ spécifié ou la valeur de la propriété numeric. Si la propriété <codeph>numeric</codeph> a la valeur true, une comparaison numérique est effectuée lors du tri.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:SortField:reverse"><apiName>reverse</apiName><shortdesc>
      
      Inverse les critères de ce champ de tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Inverse les critères de ce champ de tri. Si le champ était trié dans l’ordre décroissant, par exemple, il est trié dans l’ordre croissant.
           <p>Remarque : une interface <codeph>ICollectionView</codeph> n’est pas automatiquement mise à jour lorsque les objets <codeph>ISortField</codeph> sont modifiés. Appelez sa méthode <codeph>refresh()</codeph> pour actualiser la vue.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:SortField:arraySortOnOptions:get"><apiName>arraySortOnOptions</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     
      <codeph/><codeph/> Les autres utilisations de cette propriété ne sont pas prises en charge. Renvoie la valeur -1 si ISortField ne doit pas être utilisé par la classe <codeph>Sort</codeph> pour trier le champ (il n’existe aucune fonction compareFunction ni de nom). Dans le cas contraire, renvoie un masque binaire d’options de tri.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:caseInsensitive:get"><apiName>caseInsensitive</apiName><shortdesc>
      Détermine si le tri de ce champ doit ou non être sensible à la casse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caseInsensitiveChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si le tri de ce champ doit ou non être sensible à la casse.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Fonction comparant deux éléments lors d’un tri d’éléments pour la collection associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction comparant deux éléments lors d’un tri d’éléments pour la collection associée. Si vous spécifiez une propriété <codeph>compareFunction</codeph> dans un objet ISort, Flex ignore les propriétés <codeph>compareFunction</codeph> des objets SortField de l’objet ISort.
      <p>La fonction de comparaison doit présenter la signature suivante :</p>
     
      <p><codeph>function myCompare(a:Object, b:Object):int</codeph></p>
     
      <p>Cette fonction doit retourner les valeurs suivantes :</p>
     
       <ul>
            <li>-1 si <codeph>a</codeph> apparaît avant <codeph>b</codeph> dans la séquence triée</li>
            <li>0 si <codeph>a</codeph> = <codeph>b</codeph></li>
            <li>1 si <codeph>a</codeph> apparaît après <codeph>b</codeph> dans la séquence triée</li>
      </ul>
     
      <p>La valeur par défaut est une fonction de comparaison interne qui réalise une comparaison de chaîne, de nombre ou de date dans l’ordre croissant ou décroissant, en prenant ou non en compte la casse des chaînes. Spécifiez votre propre fonction uniquement si vous souhaitez disposer d’un algorithme de comparaison personnalisé. Normalement, cela est nécessaire uniquement lorsqu’un champ calculé est utilisé dans un affichage.</p>
      
      Remarque : si vous avez besoin d’effectuer un tri spécifique par langue, utilisez la classe <codeph>spark.collections.SortField</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.collections.SortField.xml"><linktext>spark.collections.SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:SortField:descending:get"><apiName>descending</apiName><shortdesc>
      
      Détermine si ce champ doit être trié dans l’ordre décroissant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="descendingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Détermine si ce champ doit être trié dans l’ordre décroissant.
           <p>La valeur par défaut est <codeph>false</codeph> (ordre croissant).</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:name:get"><apiName>name</apiName><shortdesc>
      
      Nom du champ à trier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="nameChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Nom du champ à trier.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      
      Force le comparateur à utiliser une comparaison numérique si le champ trié contient des valeurs numériques (number/int/uint) ou des représentations de chaîne de valeurs numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numericChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Force le comparateur à utiliser une comparaison numérique si le champ trié contient des valeurs numériques (<codeph>number/int/uint</codeph>) ou des représentations de chaîne de valeurs numériques.
      <p>
      Cette propriété est utilisée par la classe <codeph>SortField</codeph> si aucune fonction de comparaison personnalisée n’est fournie.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>true</codeph>, la fonction de comparaison numérique intégrée est utilisée. Chacun des éléments de données est projeté vers une fonction <codeph>Number()</codeph> avant la comparaison.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>false</codeph>, la fonction de comparaison de chaînes intégrée est utilisée. Chacun des éléments de données est projeté vers une fonction <codeph>String()</codeph> avant la comparaison.
      </p>
      <p>
      Si la valeur de cette propriété est <codeph>null</codeph>, le premier élément de données est introspecté afin de déterminer s’il s’agit d’un nombre ou d’une chaîne. Le tri est réalisé en fonction de cette introspection.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:usingCustomCompareFunction:get"><apiName>usingCustomCompareFunction</apiName><shortdesc>
      
      La valeur est true si cet objet ISortField utilise une fonction de comparaison personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      La valeur est true si cet objet <codeph>ISortField</codeph> utilise une fonction de comparaison personnalisée.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
  La classe AsyncListView est une implémentation de l’interface IList qui gère les erreurs ItemPendingErrors renvoyées par les méthodes getItemAt(), removeItemAt() et toArray(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AsyncListView&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:AsyncListView
  <b>Properties</b>
    createFailedItemFunction="null"
    createPendingItemFunction="null"
    list="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier>mx.utils:OnDemandEventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe AsyncListView est une implémentation de l’interface IList qui gère les erreurs ItemPendingErrors renvoyées par les méthodes <codeph>méthode getItemAt()</codeph>, <codeph>méthode additem()</codeph> et <codeph>toArray()</codeph>. 
 
  <p>La méthode <codeph>getItemAt()</codeph> gère les erreurs ItemPendingErrors en renvoyant un élément « en attente » provisoire jusqu’à ce que la demande sous-jacente aboutisse ou échoue. L’élément provisoire est produit par l’appel de la fonction spécifiée par la propriété <codeph>createPendingItemFunction</codeph>. Si la demande aboutit, l’élément réel remplace celui provisoire. Si elle échoue, l’élément provisoire est remplacé par l’élément renvoyé en appelant la fonction spécifiée par la propriété <codeph>createFailedItemFunction</codeph>. </p>
 
  <p>Cette classe délègue les méthodes et les propriétés IList à sa <codeph>list</codeph>. Si aucune liste n’est spécifiée, les méthodes qui font muter la collection ne sont pas opératoires et les méthodes qui interrogent la collection renvoient une valeur vide comme null ou zéro, selon le cas. </p>
 
  <p>Cette classe est conçue pour être utilisée avec les composants Spark basés sur la classe DataGroup, tels que List et ComboBox. Les classes Spark ne fournissent pas de prise en charge intrinsèque de la gestion des erreurs ItemPendingError. </p>
 
  <p>AsyncListView ne prend pas en charge la réinsertion d’éléments qui sont en attente ou qui ont échoué. Dès qu’un élément qui a échoué ou qui est en attente est supprimé, sa connexion à une demande en attente de données est perdue. L’utilisation de Glisser-déposer pour déplacer un élément en attente dans une ASyncListView ou le tri d’une ASyncListView contenant des éléments qui sont en attente ou qui ont échoué n’est pas pris en charge car ces opérations suppriment puis réinsèrent des éléments de liste. </p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:AsyncListView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque la longueur de la liste a été modifiée ou qu’un élément list est remplacé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la longueur de la liste a été modifiée ou qu’un élément list est remplacé. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:AsyncListView:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>Valeur initiale de la propriété list, IList auquel nous déléguons. 
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:AsyncListView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      
      Ajoute l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à placer à l’index.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Ajoute l’élément à l’index spécifié. L’index de tout élément supérieur à l’index de l’élément ajouté est augmenté d’une unité. Si l’index spécifié est inférieur à zéro ou supérieur à la longueur de la liste, une erreur RangeError est renvoyée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:addItem"><apiName>addItem</apiName><shortdesc>
      
      Ajoute l’élément spécifié à la fin de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à ajouter.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Ajoute l’élément spécifié à la fin de la liste. Equivaut à <codeph>addItemAt(élément, longueur)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Renvoie la valeur list.getItemAt(index) </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque <codeph>index &lt; 0</codeph> ou <codeph>index >= length</codeph>.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément de liste présent à l’index spécifié. 
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de liste à partir duquel l’élément doit être récupéré.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Valeur <codeph>int</codeph> indiquant le nombre d’éléments à récupérer au cours de la demande si l’élément n’est pas local, ainsi que leur direction.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur de <codeph>List.getItemAt(index)</codeph>. 
     
      <p>Cette méthode intercepte les erreurs ItemPendingErrors (IPE) générées suite à l’appel de la méthode <codeph>getItemAt()</codeph>. Si une IPE est renvoyée, un <codeph>IResponder</codeph> est ajouté à l’IPE et un élément « en attente » provisoire, créé à l’aide de <codeph>createPendingItemFunction</codeph> est renvoyé. Si la demande sous-jacente réussit, l’élément en attente est remplacé par le véritable élément. Dans le cas contraire, l’élément en attente est remplacé par une valeur produite par un l’appel de <codeph>createFailedItemFunction</codeph>. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.rpc.xml#IResponder"><linktext>mx.rpc.IResponder</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’élément ou -1 s’il ne se trouve pas dans la liste.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à retrouver.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.
     
      <p>Remarque : contrairement aux méthodes <codeph>IViewCursor.find<i>xxx</i>()</codeph>, la méthode <codeph>getItemIndex()</codeph> n’accepte pas les paramètres contenant uniquement un sous-ensemble des champs de l’élément recherché. Cette méthode recherche toujours un élément qui correspond exactement au paramètre d’entrée.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Signale à la vue qu’un élément a été mis à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément mis à jour dans la vue.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nom de la propriété mise à jour.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété (si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément).
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété (si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la vue qu’un élément a été mis à jour. Cette méthode est utile lorsque le contenu de la vue n’implémente pas l’interface <codeph>IEventDispatcher</codeph> et distribue un événement <codeph>PropertyChangeEvent</codeph>. Si une propriété est spécifiée, il est possible que la vue puisse optimiser son mécanisme de notification. Dans le cas contraire, elle peut simplement choisir d’actualiser l’ensemble de la vue.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeAll"><apiName>removeAll</apiName><shortdesc>
       
      Supprime tous les éléments de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
      Supprime tous les éléments de la liste.
     
      <p>Si un élément n’est pas local et qu’une opération asynchrone doit être réalisée, une erreur <codeph>ItemPendingError</codeph> est renvoyée.</p>
     
      <p>Pour plus d’informations sur l’utilisation de la classe <codeph>ItemPendingError</codeph>, voir la documentation relative à ItemPendingError et aux collections.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Supprime l’élément actuel ou en attente qui se trouve à l’index spécifié et le renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque <codeph>index &lt; 0</codeph> ou <codeph>index >= length</codeph>.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément qui a été supprimé ou qui est null. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de liste à partir duquel l’élément doit être récupéré.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’élément actuel ou en attente qui se trouve à l’index spécifié et le renvoie. L’index de tous les éléments dont l’index est supérieur à celui spécifié est réduit de 1. 
     
      <p>En l’absence d’élément actuel ou en attente à l’index spécifié, par exemple si un appel de la méthode <codeph>getItemAt(index)</codeph> n’a pas provoqué la pagination des données, la <codeph>list</codeph> sous-jacente peut renvoyer une erreur ItemPendingError. L’implémentation ignore l’erreur ItemPendingError et renvoie null. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      
      Place l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément remplacé ou <codeph>null</codeph> si aucun élément n’a été remplacé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Nouvel élément à placer à l’index spécifié.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Place l’élément à l’index spécifié. Si un élément se trouvait déjà à cet index, le nouvel élément le remplace et il est retourné.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toArray"><apiName>toArray</apiName><shortdesc>
      Renvoie un tableau contenant les mêmes éléments que cette AsyncListView. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>tableau contenant les mêmes éléments que cette AsyncListView. 
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau contenant les mêmes éléments que cette AsyncListView. Le tableau est initialisé en récupérant chaque élément avec <codeph>getItemAt()</codeph>, de manière à ce que les éléments en attente soient substitués là où des valeurs réelles se sont pas encore disponibles. Le tableau ne sera pas mis à jour lorsque la classe ASyncListView remplace les éléments en attente par des valeurs réelles (ou qui ont échoué). 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toString"><apiName>toString</apiName><shortdesc>
      Renvoie une chaîne qui contient la longueur de la liste et le nombre de requêtes d’éléments en attente. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Brève description de la liste. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une chaîne qui contient la longueur de la liste et le nombre de requêtes d’éléments en attente. Il ne déclenche pas de demandes en attente. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:AsyncListView:createFailedItemFunction:get"><apiName>createFailedItemFunction</apiName><shortdesc>
      Une fonction de rappel utilisée pour créer un élément de substitution lorsqu’une demande ayant entraîné le renvoi d’une erreur ItemPendingError échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      Une fonction de rappel utilisée pour créer un élément de substitution lorsqu’une demande ayant entraîné le renvoi d’une erreur <codeph>ItemPendingError</codeph> échoue. L’élément existant, généralement un élément en attente créé par la fonction de rappel spécifiée par la propriété <codeph>createPendingItemFunction()</codeph>, est remplacé par l’élément ayant échoué. 
      
      <p>La valeur de cette propriété doit être une fonction à deux paramètres, l’index de l’élément demandé et l’objet « info » d’échec, qui est transmis à partir de la méthode IResponder <codeph>fault()</codeph>. Dans la plupart des cas, vous pouvez ignorer le second paramètre. Vous trouverez ci-dessous un exemple d’implémentation de la fonction callback :</p> 
     
      <pre>
     function createFailedItem(index:int, info:Object):Object
     {
         return "[" + index + "request failed]";        
     }
       </pre>
      
     
      <p>La définition de cette propriété n’affecte pas les éléments en échec qui ont déjà été créés. La définition de cette propriété sur null empêche la création des éléments en échec. 
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createPendingItemFunction"><linktext>createPendingItemFunction</linktext></link><link href="mx.rpc.xml#IResponder/fault"><linktext>mx.rpc.IResponder.fault</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:createPendingItemFunction:get"><apiName>createPendingItemFunction</apiName><shortdesc>
      Une fonction de rappel utilisée pour créer un élément provisoire lorsque la demande initiale provoque le renvoi d’une erreur ItemPendingError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      Une fonction de rappel utilisée pour créer un élément provisoire lorsque la demande initiale provoque le renvoi d’une erreur <codeph>ItemPendingError</codeph>. Si la demande aboutit, l’élément provisoire est automatiquement remplacé par l’élément actuel. Si la demande échoue, l’élément est remplacé par un autre élément créé avec la fonction de rappel spécifiée par la propriété <codeph>createFailedItemFunction</codeph>. 
      
      <p>La valeur de cette propriété doit être une fonction à deux paramètres, l’index de l’élément de fournisseur de données demandé et ItemPendingError. Dans la plupart des cas, le second paramètre peut être ignoré. L’exemple suivant illustre une implémentation de la fonction de rappel : 
     
       <pre>
     function createPendingItem(index:int, ipe:ItemPendingError):Object
     {
         return "[" + index + "request is pending...]";        
     }
       </pre>
       </p>
     
      <p>La définition de cette propriété n’affecte pas les éléments en attente provisoires qui ont déjà été créés. La définition de cette propriété sur null empêche la création d’éléments en attente provisoires. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt()"><linktext>getItemAt()</linktext></link><link href="mx.collections.xml#AsyncListView/createFailedItemFunction"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:length:get"><apiName>length</apiName><shortdesc>
      
      Nombre d’éléments dans cette collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Nombre d’éléments dans cette collection. 0 signifie que la collection ne contient aucun élément. -1 signifie que la longueur de la collection est inconnue. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:AsyncListView:list:get"><apiName>list</apiName><shortdesc>
      Objet IList enveloppé par cette collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier><apiDefaultValue>null  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet IList enveloppé par cette collection. C’est-à-dire l’objet auquel l’ensemble des méthodes IList sont déléguées. 
     
      <p>Si cette propriété est null, les méthodes de mutation IList, telles que <codeph>setItemAt()</codeph>, ne sont pas opératoires. Les méthodes de requête IList, par exemple <codeph>getItemAt()</codeph>, renvoient la valeur null ou zéro (-1 pour <codeph>getItemIndex()</codeph>), selon le cas. </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
  La classe ArrayCollection est une classe d’enveloppe qui présente un tableau sous la forme d’une collection accessible, pouvant être manipulée à l’aide des méthodes et propriétés des interfaces ICollectionView ou IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ArrayCollection&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:ArrayCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ArrayCollection est une classe d’enveloppe qui présente un tableau sous la forme d’une collection accessible, pouvant être manipulée à l’aide des méthodes et propriétés des interfaces <codeph>ICollectionView</codeph> ou <codeph>IList</codeph>. Les opérations réalisées sur une occurrence ArrayCollection modifient la source de données. Par exemple, si vous utilisez la méthode <codeph>removeItemAt()</codeph> sur une occurrence ArrayCollection, vous supprimez l’élément du tableau sous-jacent.
 
  </apiDesc><example>Le code suivant crée un objet ArrayCollection simple accédant et manipulant un tableau contenant un élément Object unique. Il extrait l’élément à l’aide de la méthode <codeph>getItemAt</codeph> de l’interface IList et d’un objet IViewCursor obtenu par le biais de la méthode <codeph>createCursor</codeph> de l’interface ICollectionView.
  <pre>
  var myCollection:ArrayCollection = new ArrayCollection([ { first: 'Matt', last: 'Matthews' } ]);
  var myCursor:IViewCursor = myCollection.createCursor();
  var firstItem:Object = myCollection.getItemAt(0);
  var firstItemFromCursor:Object = myCursor.current;
  if (firstItem == firstItemFromCursor)
        doCelebration();
  </pre>
  
  </example></apiClassifierDetail><apiConstructor id="mx.collections:ArrayCollection:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau source.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Crée une nouvelle occurrence ArrayCollection à l’aide du tableau source spécifié. Si aucun tableau n’est spécifié, un tableau vide est utilisé.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.collections:ArrayCollection:source:get"><apiName>source</apiName><shortdesc>
      Source des données dans l’occurrence ArrayCollection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Source des données dans l’occurrence ArrayCollection. L’objet ArrayCollection ne représente pas les modifications apportées directement au tableau source. Utilisez systématiquement les méthodes ICollectionView ou IList pour modifier la collection.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ISort"><apiName>ISort</apiName><shortdesc>
      L’interface ISort définit l’interface des classes qui fournissent les informations de tri requises pour trier les données d’une vue de collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      L’interface <codeph>ISort</codeph> définit l’interface des classes qui fournissent les informations de tri requises pour trier les données d’une vue de collection.
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ISortField"><linktext>mx.collections.ISortField</linktext></link></related-links><apiOperation id="mx.collections:ISort:mx.collections:ISort:findItem"><apiName>findItem</apiName><shortdesc>
      Retrouve l’objet spécifié dans le tableau spécifié (ou le point d’insertion s’il est demandé) et retourne l’index si cet objet est retrouvé, ou -1 dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>S’il existe des erreurs de paramètres, le critère de recherche n'est pas compatible avec le tri ou la fonction de comparaison associée au tri ne peut pas être déterminée.
     
      </apiDesc><apiItemName>SortError</apiItemName><apiOperationClassifier>SortError</apiOperationClassifier></apiException><apiReturn><apiDesc>int Index de l’élément retrouvé dans le tableau. Si la valeur du paramètre <codeph>returnInsertionIndex</codeph> est <codeph>false</codeph> et que l’élément est introuvable, la valeur retournée est -1. Si la valeur du paramètre <codeph>returnInsertionIndex</codeph> est <codeph>true</codeph> et que l’élément est introuvable, la valeur retournée est l’index du point où les valeurs seraient insérées dans le tableau trié.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Tableau dans lequel la recherche doit être réalisée.
      </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les propriétés à rechercher (ou l’objet à rechercher lui-même). L’objet doit se composer de paires nom/valeur, où les noms de champ sont les noms des champs spécifiés par la propriété <codeph>fields</codeph>, dans l’ordre dans lequel ils sont utilisés dans cette propriété. Il n’est pas obligatoire de spécifier tous les champs de la propriété <codeph>fields</codeph>, mais vous ne pouvez pas ignorer des champs si d’autres champs figurant après dans la séquence sont définis. Par conséquent, si la propriété <codeph>fields</codeph> contient trois champs, vous pouvez spécifier les premier et deuxième champs de ce paramètre, mais vous ne pouvez pas spécifier uniquement les premier et troisième champs.
      </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>Chaîne contenant le type de recherche à réaliser. Valeurs valides :
                 <adobetable>
                   
                   
                   
                   <tgroup cols="2"><thead><row><entry>ANY_INDEX_MODE</entry><entry>Retourne une position valide pour les valeurs.</entry></row></thead><tbody><row>
                     <entry>FIRST_INDEX_MODE</entry> 
                     <entry>Retourne la position où la première occurrence de la valeur a été retrouvée.</entry>
                   </row><row>
                     <entry>LAST_INDEX_MODE</entry> 
                     <entry>Retourne la position où la dernière occurrence de la valeur spécifiée a été retrouvée.
                     </entry>
                   </row></tbody></tgroup></adobetable>
      </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la méthode ne retrouve pas d’élément identifié par le paramètre <codeph>values</codeph> et que la valeur de ce paramètre est <codeph>true</codeph>, la méthode <codeph>findItem()</codeph> retourne le point d’insertion des valeurs, c’est-à-dire le point où vous devez insérer l’élément, dans l’ordre de tri.
      </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Fonction de comparaison à utiliser pour retrouver l’élément. Si vous ne spécifiez pas ce paramètre ou si vous spécifiez une valeur <codeph>null</codeph>, la fonction <codeph>findItem()</codeph> utilise la fonction de comparaison déterminée par la propriété <codeph>compareFunction</codeph> de l’occurrence <codeph>ISort</codeph> et transmet le tableau de champs déterminé par l’objet de valeurs et les objets <codeph>SortField</codeph> actuels. Si vous fournissez une valeur non nulle, la fonction <codeph>findItem()</codeph> l’utilise en tant que fonction de comparaison. La signature de la fonction transmise comme <codeph>compareFunction</codeph> doit avoir la forme suivante : <codeph>function myCompareFunction(a:Object, b:Object):int</codeph>. Notez l’absence de troisième argument contrairement à la fonction de comparaison pour la propriété <codeph>ISort.compareFunction()</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retrouve l’objet spécifié dans le tableau spécifié (ou le point d’insertion s’il est demandé) et retourne l’index si cet objet est retrouvé, ou -1 dans le cas contraire. Les méthodes <codeph>find<i>xxx</i>()</codeph> de la classe <codeph>ListCollectionView</codeph> utilisent cette méthode pour retrouver l’élément demandé. Bien souvent, il est plus simple d’utiliser ces fonctions plutôt que la méthode <codeph>findItem()</codeph> pour retrouver des données dans les objets <codeph>ListCollectionView</codeph>. Appelez directement la méthode <codeph>findItem()</codeph> lorsque vous écrivez une classe prenant en charge le tri, par exemple une nouvelle implémentation <codeph>ICollectionView</codeph>. Le tableau d’éléments en entrée doit être trié avant l’appel de cette fonction. Dans le cas contraire, cette fonction ne peut pas trouver la valeur spécifiée correctement.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      Retourne une valeur indiquant si la propriété spécifiée est utilisée dans le contrôle du tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Indique si la valeur de la propriété est susceptible d’influer sur le résultat du tri. Lorsque le tri utilise la fonction compareFunction par défaut, la valeur <codeph>true</codeph> est retournée si le paramètre <codeph>property</codeph> spécifie un champ de tri. Si le tri ou un objet <codeph>ISortField</codeph> utilisent un comparateur personnalisé, il est impossible de savoir si la propriété peut influer sur le résultat du tri. La valeur retournée est alors <codeph>true</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Nom du champ à tester.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne une valeur indiquant si la propriété spécifiée est utilisée dans le contrôle du tri. La fonction ne peut pas fournir une réponse définitive si le tri fait appel à un comparateur personnalisé. Dans ce cas, elle retourne toujours la valeur <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:reverse"><apiName>reverse</apiName><shortdesc>
      Parcourt le tableau fields et appelle la méthode reverse() sur chacun des objets ISortField dans le tableau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Parcourt le tableau <codeph>fields</codeph> et appelle la méthode <codeph>reverse()</codeph> sur chacun des objets <codeph>ISortField</codeph> dans le tableau. Si le champ était trié dans l’ordre décroissant, il est maintenant classé dans l’ordre croissant et inversement.
     
      <p>Remarque : une interface <codeph>ICollectionView</codeph> n’est pas automatiquement mise à jour lorsque les objets du tableau <codeph>fields</codeph> sont modifiés. Appelez sa méthode <codeph>refresh()</codeph> pour actualiser la vue.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ISort:mx.collections:ISort:sort"><apiName>sort</apiName><shortdesc>
      Applique le tri actuel au tableau spécifié et non à une copie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments à trier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Applique le tri actuel au tableau spécifié et non à une copie. Pour empêcher la modification du tableau, créez une copie et utilisez-la dans le paramètre <codeph>items</codeph>.
     
      <p>Les implémentations Flex de l’interface <codeph>ICollectionView</codeph> appellent automatiquement la méthode <codeph>sort</codeph> et font en sorte que le tri soit réalisé sur une copie des données sous-jacentes.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ISort:mx.collections:ISort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Méthode utilisée pour comparer des éléments lors du tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Méthode utilisée pour comparer des éléments lors du tri. Si vous spécifiez cette propriété, Flex ignore les propriétés <codeph>compareFunction</codeph> que vous spécifiez dans les objets <codeph>ISortField</codeph> utilisés dans cette classe.
     
      <p>La fonction de comparaison doit présenter la signature suivante :</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>Cette fonction doit retourner les valeurs suivantes : value:
      <ul>
            <li>-1, si <codeph>Object a</codeph> doit apparaître avant <codeph>Object b</codeph> dans l’ordre de tri.</li>
            <li>0, si <codeph>Object a</codeph> est égal à <codeph>Object b</codeph>.</li>
            <li>1, si <codeph>Object a</codeph> doit apparaître après <codeph>Object b</codeph> dans l’ordre de tri.</li>
      </ul></p>
      <p>Pour renvoyer à la fonction de comparaison interne, définissez cette valeur sur <codeph>null</codeph>.</p>
      <p>
      Le tableau <codeph>fields</codeph> spécifie les champs d’objet à comparer. En général, l’algorithme compare les propriétés jusqu’à ce que la fin de la liste des champs soit atteinte ou jusqu’à ce qu’une valeur autre que zéro puisse être renvoyée. Par exemple :</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>La valeur par défaut est une fonction de comparaison interne qui réalise une comparaison de chaîne, de nombre ou de date dans l’ordre croissant ou décroissant. Spécifiez votre propre fonction uniquement si vous souhaitez disposer d’un algorithme de comparaison personnalisé. Normalement, cela est nécessaire uniquement lorsqu’un champ calculé est utilisé dans un affichage.</p>
     
      <p>Vous pouvez également spécifier des fonctions de comparaison séparées pour chaque champ de tri, en utilisant la propriété <codeph>compareFunction</codeph> de la classe <codeph>ISortField</codeph>. Il est ainsi possible d’utiliser la comparaison par défaut pour certains champs et une comparaison personnalisée pour d’autres.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:fields:get"><apiName>fields</apiName><shortdesc>
      Tableau d’objets ISortField spécifiant les champs à comparer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Composant <codeph>Array</codeph> d’objets <codeph>ISortField</codeph> spécifiant les champs à comparer. L’ordre des objets ISortField dans le tableau détermine l’ordre de priorité des champs lors du tri. Le comparateur de tri par défaut vérifie les champs de tri dans l’ordre du tableau, jusqu’à ce qu’il détermine un ordre de tri pour les deux champs comparés.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ISortField"><linktext>ISortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:ISort:mx.collections:ISort:unique:get"><apiName>unique</apiName><shortdesc>
      Indique si le tri doit être unique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le tri doit être unique. Les tris uniques échouent si une valeur ou une combinaison de valeurs spécifiée par les champs de la propriété fields engendre un ordre de tri indéterminé ou non unique, par exemple lorsque deux éléments ou plus ont les mêmes valeurs de tri. Une erreur est renvoyée si le tri n’est pas unique. La logique de tri utilise cette valeur de propriété <codeph>unique</codeph> seulement si les champs de tri sont spécifiés de façon explicite. En l’absence de champs de tri spécifiés de façon explicite, aucune erreur n’est renvoyée, même lorsqu’il existe des éléments de valeur identique.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
  La classe XMLListCollection fournit une fonctionnalité de collecte à un objet XMLList et permet d’accéder à certaines méthodes de la classe native XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:XMLListCollection&gt;</code> tag inherits all
  the attributes of its superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:XMLListCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe XMLListCollection fournit une fonctionnalité de collecte à un objet XMLList et permet d’accéder à certaines méthodes de la classe native XMLList.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.collections.XMLList.xml"><linktext>XMLList</linktext></link><link href="" invalidHref="mx.collections.XML.xml"><linktext>XML</linktext></link></related-links><apiConstructor id="mx.collections:XMLListCollection:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="XMLList"/><apiData>null</apiData><apiDesc>Objet XMLList contenant les données devant être représentées par l’objet XMLListCollection.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Crée un nouvel objet XMLListCollection à partir de l’objet XMLList spécifié.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:XMLListCollection:attribute"><apiName>attribute</apiName><shortdesc>
      Appelle la méthode attribute() de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList, correspondant au nom attributeName concerné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant les objets XML correspondants.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value="Object"/><apiDesc>Attribut pour lequel une correspondance doit être recherchée dans les objets XML de l’objet XMLList.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>attribute()</codeph> de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList, correspondant au nom <codeph>attributeName</codeph> concerné.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attribute()"><linktext>XML.attribute()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:attributes"><apiName>attributes</apiName><shortdesc>
      Appelle la méthode attributes() de chaque objet XML de l’objet XMLList et renvoie une liste d’attributs XMLList pour chaque objet XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant les objets XML résultants, répertoriant les différents attributs.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>attributes()</codeph> de chaque objet XML de l’objet XMLList et renvoie une liste d’attributs XMLList pour chaque objet XML.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:child"><apiName>child</apiName><shortdesc>
      Appelle la méthode child() de chaque objet XML de l’objet XMLList et renvoie un objet XMLList contenant les enfants correspondant au nom de propriété spécifié, dans l’ordre correct.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList des enfants d’objets XML correspondants dans l’objet XMLList d’origine.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="Object"/><apiDesc>Propriété pour laquelle une correspondance doit être recherchée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>child()</codeph> de chaque objet XML de l’objet XMLList et renvoie un objet XMLList contenant les enfants correspondant au nom de propriété spécifié, dans l’ordre correct.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/child()"><linktext>XML.child()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:children"><apiName>children</apiName><shortdesc>
      Appelle la méthode children() de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant les enfants d’objets XML présents dans l’objet XMLList d’origine.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Appelle la méthode children() de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/children()"><linktext>XML.children()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:copy"><apiName>copy</apiName><shortdesc>
      Renvoie une copie profonde de l’objet XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Copie de l’objet XMLList.
      
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une copie profonde de l’objet XMLList.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:XMLListCollection:descendants"><apiName>descendants</apiName><shortdesc>
      Appelle la méthode descendants() de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant les descendants (enfants, petits-enfants, etc.) d’objets XML correspondants présents dans l’objet XMLList d’origine.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="Object"/><apiData>*</apiData><apiDesc>Nom des éléments pour lesquels une correspondance doit être établie.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>descendants()</codeph> de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList. Le paramètre <codeph>name</codeph> est transmis à la méthode <codeph>descendants()</codeph> de l’objet XML. Si vous ne spécifiez pas de paramètre, la chaîne « ~~ » est transmise à la méthode <codeph>descendants()</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/descendants()"><linktext>XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:elements"><apiName>elements</apiName><shortdesc>
      Appelle la méthode elements() de chaque objet XML de l’objet XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant les éléments enfant d’objets XML correspondants dans l’objet XMLList d’origine.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>*</apiData><apiDesc>Nom des éléments pour lesquels une correspondance doit être établie.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>elements()</codeph> de chaque objet XML de l’objet XMLList. Le paramètre <codeph>name</codeph> est transmis à la méthode <codeph>elements()</codeph> de l’objet XML. Si vous ne spécifiez pas de paramètre, la chaîne « ~~ » est transmise à la méthode <codeph>elements()</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/elements()"><linktext>XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:text"><apiName>text</apiName><shortdesc>
     Appelle la méthode text() de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet XMLList contenant le résultat.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
     Appelle la méthode <codeph>text()</codeph> de chaque objet XML de l’objet XMLList et renvoie une liste de résultats XMLList.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/text()"><linktext>XML.text()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toString"><apiName>toString</apiName><shortdesc>
      Renvoie une représentation de chaîne de l’objet XMLList en appelant la méthode toString() pour chaque objet XML de l’objet XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Représentation sous forme de chaîne de l’objet XMLList.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une représentation de chaîne de l’objet XMLList en appelant la méthode <codeph>toString()</codeph> pour chaque objet XML de l’objet XMLList. Si la propriété <codeph>prettyPrinting</codeph> de la classe <codeph>XML</codeph> est définie sur <codeph>true</codeph>, les résultats de chaque objet XML de l’objet XMLList sont séparés par le caractère de retour. Dans le cas contraire, si la propriété <codeph>prettyPrinting</codeph> est définie sur <codeph>false</codeph>, les résultats sont tout simplement concaténés et ne sont pas séparés par des caractères de retour.
     
      <p>Pour les objets XML dont le contenu est simple, la méthode <codeph>toString()</codeph> enlève les informations suivantes de la chaîne renvoyée : balise de début, attributs, déclarations d’espace de nom et balise de fin. Utilisez la méthode <codeph>toXMLString()</codeph> si vous souhaitez préserver ces informations dans la chaîne renvoyée pour les objets XML dont le contenu est simple.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toXMLString"><apiName>toXMLString</apiName><shortdesc>
      Renvoie une représentation de chaîne de l’objet XMLList en appelant la méthode toXMLString() pour chaque objet XML de l’objet XMLList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Représentation sous forme de chaîne de l’objet XMLList.
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une représentation de chaîne de l’objet XMLList en appelant la méthode <codeph>toXMLString()</codeph> pour chaque objet XML de l’objet XMLList. Si la propriété <codeph>prettyPrinting</codeph> de la classe <codeph>XML</codeph> est définie sur <codeph>true</codeph>, les résultats de chaque objet XML de l’objet XMLList sont séparés par le caractère de retour. Dans le cas contraire, si la propriété <codeph>prettyPrinting</codeph> est définie sur <codeph>false</codeph>, les résultats sont concaténés et ne sont pas séparés par des caractères de retour.
     
      <p>Pour les objets XML dont le contenu est simple, la méthode <codeph>toXMLString()</codeph> conserve les informations suivantes dans la chaîne renvoyée : balise de début, attributs, déclarations d’espace de nom et balise de fin. Utilisez la méthode <codeph>toString()</codeph> si vous souhaitez enlever ces informations de la chaîne renvoyée pour les objets XML dont le contenu est simple.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiValue id="mx.collections:XMLListCollection:source:get"><apiName>source</apiName><shortdesc>
      Objet XMLList sous-jacent de cette collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XMLList"/></apiValueDef><apiDesc>
      Objet XMLList sous-jacent de cette collection. L’objet XMLListCollection ne représente pas les modifications apportées directement à l’objet XMLList source. Utilisez systématiquement les méthodes XMLListCollection pour modifier la collection.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IList"><apiName>IList</apiName><shortdesc>
  Collection d’éléments organisés par ordinaux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Collection d’éléments organisés par ordinaux. Fournit des méthodes d’accès et de manipulation basées sur l’index.  
  
  <p>Une interface <codeph>IList</codeph> peut être une vue contenant des données extraites à partir d’un emplacement distant. Lorsque vous écrivez une collection susceptible d’être distante, vous devez envisager les situations où les données ne sont pas encore disponibles, signalées par l’erreur <codeph>ItemPendingError</codeph>.</p>
  
  <p>L’interface <codeph>ICollectionView</codeph> constitue une alternative à l’interface <codeph>IList</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ListCollectionView"><linktext>mx.collections.ListCollectionView</linktext></link></related-links><adobeApiEvent id="mx.collections:IList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque l’interface IList a été mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’interface IList a été mise à jour.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IList:mx.collections:IList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Ajoute l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque l’index est inférieur à 0 ou supérieur à la longueur de la liste. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à placer à l’index.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute l’élément à l’index spécifié. L’index de tout élément supérieur à l’index de l’élément ajouté est augmenté d’une unité. Si l’index spécifié est inférieur à zéro ou supérieur à la longueur de la liste, une erreur RangeError est renvoyée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:addItem"><apiName>addItem</apiName><shortdesc>
      Ajoute l’élément spécifié à la fin de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à ajouter.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute l’élément spécifié à la fin de la liste. Equivaut à <codeph>addItemAt(élément, longueur)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Obtient l’élément qui se trouve à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque les données de cet index doivent être chargées à partir d’un emplacement distant.
     
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>Erreur renvoyée lorsque <codeph>index &lt; 0</codeph> ou <codeph>index >= length</codeph>.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément qui se trouve à cet index ou <codeph>null</codeph> si aucun élément n’est retrouvé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la liste à partir duquel extraire l’élément.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Valeur <codeph>int</codeph> indiquant le nombre d’éléments à récupérer au cours de la demande si l’élément n’est pas local, ainsi que leur direction.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient l’élément qui se trouve à l’index spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’élément ou -1 s’il ne se trouve pas dans la liste.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à retrouver.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.
     
      <p>Remarque : contrairement aux méthodes <codeph>IViewCursor.find<i>xxx</i>()</codeph>, la méthode <codeph>getItemIndex()</codeph> n’accepte pas les paramètres contenant uniquement un sous-ensemble des champs de l’élément recherché. Cette méthode recherche toujours un élément qui correspond exactement au paramètre d’entrée.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Signale à la vue qu’un élément a été mis à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément mis à jour dans la vue.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nom de la propriété mise à jour.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété (si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément).
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété (si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la vue qu’un élément a été mis à jour. Cette méthode est utile lorsque le contenu de la vue n’implémente pas l’interface <codeph>IEventDispatcher</codeph> et distribue un événement <codeph>PropertyChangeEvent</codeph>. Si une propriété est spécifiée, il est possible que la vue puisse optimiser son mécanisme de notification. Dans le cas contraire, elle peut simplement choisir d’actualiser l’ensemble de la vue.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Supprime tous les éléments de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Supprime tous les éléments de la liste.
     
      <p>Si un élément n’est pas local et qu’une opération asynchrone doit être réalisée, une erreur <codeph>ItemPendingError</codeph> est renvoyée.</p>
     
      <p>Pour plus d’informations sur l’utilisation de la classe <codeph>ItemPendingError</codeph>, voir la documentation relative à ItemPendingError et aux collections.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque l’index est inférieur à 0 ou supérieur à la longueur. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément qui a été supprimé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel l’élément doit être supprimé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie. Tous les éléments qui se trouvent après cet index se trouvent désormais avancés d’un index.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Place l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque l’index est inférieur à 0 ou supérieur à la longueur.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément remplacé ou <codeph>null</codeph> si aucun élément n’a été remplacé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Nouvel élément à placer à l’index spécifié.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Place l’élément à l’index spécifié. Si un élément se trouvait déjà à cet index, le nouvel élément le remplace et il est retourné.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:toArray"><apiName>toArray</apiName><shortdesc>
      Retourne un tableau rempli dans le même ordre en tant que qu’implémentation IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque les données n’ont pas encore été entièrement chargées à partir d’un emplacement distant.
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>Tableau.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau rempli dans le même ordre en tant que qu’implémentation IList. Cette méthode peut renvoyer une erreur ItemPendingError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:IList:mx.collections:IList:length:get"><apiName>length</apiName><shortdesc>
      Nombre d’éléments dans cette collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’éléments dans cette collection. 0 signifie que la collection ne contient aucun élément. -1 signifie que la longueur de la collection est inconnue. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
 La classe ListCollectionView ajoute les propriétés et méthodes de l’interface ICollectionView à un objet conforme à l’interface IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ListCollectionView&gt;</code> has the following attributes,
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:ListCollectionView
  <b>Properties</b>
  filterFunction="null"
  list="null"
  sort="null"
  <b>Events</b>
  collectionChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ICollectionView</apiBaseInterface><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe ListCollectionView ajoute les propriétés et méthodes de l’interface <codeph>ICollectionView</codeph> à un objet conforme à l’interface <codeph>IList</codeph>. Ainsi, vous pouvez transmettre un objet de cette classe à n’importe quelle méthode nécessitant une interface <codeph>IList</codeph> ou <codeph>ICollectionView</codeph>.
 
 <p>Cette classe permet également d’utiliser la notation de tableau [ ] pour accéder aux méthodes <codeph>getItemAt()</codeph> et <codeph>setItemAt()</codeph>. Si vous utilisez du code tel que <codeph>myListCollectionView[index]</codeph>, Flex appelle la méthode <codeph>getItemAt()</codeph> ou <codeph>setItemAt()</codeph> de l’objet <codeph>myListCollectionView</codeph>.</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ListCollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque l’interface ICollectionView a été mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’interface ICollectionView a été mise à jour.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ListCollectionView:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
      Constructeur ListCollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>Interface IList que la classe ListCollectionView est censée envelopper.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur ListCollectionView.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ListCollectionView:addAllAt"><apiName>addAllAt</apiName><shortdesc>
      Ajoute une liste d’éléments à la liste actuelle, en les plaçant à l’index de position transmis à la fonction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Erreur renvoyée lorsque l’index est inférieur à 0 ou supérieur à la longueur de la liste. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Liste d’éléments à ajouter à la liste actuelle.
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Emplacement de la liste actuelle où les nouveaux éléments doivent être placés.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute une liste d’éléments à la liste actuelle, en les plaçant à l’index de position transmis à la fonction. Les éléments sont placés à l’emplacement de l’index, dans l’ordre dans lequel ils sont reçus.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addAll"><apiName>addAll</apiName><shortdesc>
      Ajoute une liste d’éléments à la liste actuelle, en les plaçant à la fin de la liste, dans l’ordre dans lequel ils sont transmis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Liste d’éléments à ajouter à la liste actuelle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute une liste d’éléments à la liste actuelle, en les plaçant à la fin de la liste, dans l’ordre dans lequel ils sont transmis.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addEventListener"><apiName>addEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
     
      Ajoute l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à placer à l’index.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Ajoute l’élément à l’index spécifié. L’index de tout élément supérieur à l’index de l’élément ajouté est augmenté d’une unité. Si l’index spécifié est inférieur à zéro ou supérieur à la longueur de la liste, une erreur RangeError est renvoyée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItem"><apiName>addItem</apiName><shortdesc>
     
      Ajoute l’élément spécifié à la fin de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à ajouter.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Ajoute l’élément spécifié à la fin de la liste. Equivaut à <codeph>addItemAt(élément, longueur)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:contains"><apiName>contains</apiName><shortdesc>
      
      Indique en retour si la vue contient l’objet spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si après application du filtre éventuel, l’interface ICollectionView contient l’élément ; false dans le cas contraire.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Objet à rechercher.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Indique en retour si la vue contient l’objet spécifié. Contrairement aux méthodes <codeph>IViewCursor.find<i>xxx</i></codeph>, cette recherche aboutit uniquement si un élément correspondant exactement au paramètre est trouvé. Si un filtre est appliqué à la vue, cette méthode peut renvoyer <codeph>false</codeph>, même si la collection sous-jacente contient bien l’élément.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ListCollectionView/enableAutoUpdate()"><linktext>enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      
      Crée une nouvelle interface IViewCursor fonctionnant avec cette vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle implémentation IViewCursor.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Crée une nouvelle interface IViewCursor fonctionnant avec cette vue.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      
      Empêche la vue de distribuer les modifications apportées à la collection et aux éléments de la collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Empêche la vue de distribuer les modifications apportées à la collection et aux éléments de la collection. Empêche également la vue de mettre à jour les positions des éléments si les positions au sein de la collection changent. Les modifications sont mises en file d’attente et distribuées de façon appropriée après l’appel de la méthode <codeph>enableAutoUpdate</codeph>. S’il y a plus d’événements de que mises à jour réalisées sur un élément unique, il se peut que la vue soit réinitialisée. La méthode <codeph>disableAutoUpdate</codeph> fonctionne de manière cumulative : pour que la vue distribue les événements et soit actualisée, le nombre d’appels doit être identique au nombre d’appels de la méthode <codeph>enableAutoUpdate</codeph>. Sachez que la méthode <codeph>disableAutoUpdate</codeph> affecte uniquement les vues individuelles. Les modifications peuvent être détectées au coup par coup par les autres vues.
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/enableAutoUpdate()"><linktext>mx.collections.ICollectionView.enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      
      Active la mise à jour automatique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Active la mise à jour automatique. Pour plus d’informations, voir <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>mx.collections.ICollectionView.disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
     
      Obtient l’élément qui se trouve à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément qui se trouve à cet index ou <codeph>null</codeph> si aucun élément n’est retrouvé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la liste à partir duquel extraire l’élément.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Valeur <codeph>int</codeph> indiquant le nombre d’éléments à récupérer au cours de la demande si l’élément n’est pas local, ainsi que leur direction.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Obtient l’élément qui se trouve à l’index spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
     
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’élément ou -1 s’il ne se trouve pas dans la liste.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à retrouver.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Renvoie l’index de l’élément s’il se trouve dans la liste, de sorte que getItemAt(index) == élément.
     
      <p>Remarque : contrairement aux méthodes <codeph>IViewCursor.find<i>xxx</i>()</codeph>, la méthode <codeph>getItemIndex()</codeph> n’accepte pas les paramètres contenant uniquement un sous-ensemble des champs de l’élément recherché. Cette méthode recherche toujours un élément qui correspond exactement au paramètre d’entrée.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:initialized"><apiName>initialized</apiName><shortdesc>
       Appelée automatiquement par le compilateur MXML lorsqu’une occurrence ListCollectionView est créée en utilisant une balise MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML contenant cette occurrence ListCollectionView.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Ignoré.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Appelée automatiquement par le compilateur MXML lorsqu’une occurrence ListCollectionView est créée en utilisant une balise MXML. Si vous créez l’occurrence ListCollectionView par le biais d’ActionScript, vous devez appeler cette méthode en transmettant le document MXML et la valeur <codeph>null</codeph> pour la propriété <codeph>id</codeph>.
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Signale à la vue qu’un élément a été mis à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément mis à jour dans la vue.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nom de la propriété mise à jour.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété (si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément).
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété (si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la vue qu’un élément a été mis à jour. Cette méthode est utile lorsque le contenu de la vue n’implémente pas l’interface <codeph>IPropertyChangeNotifier</codeph>. Si l’appel de cette méthode inclut un paramètre <codeph>property</codeph>, il est possible que la vue puisse optimiser son mécanisme de notification. Dans le cas contraire, elle peut simplement choisir d’actualiser l’ensemble de la vue.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:refresh"><apiName>refresh</apiName><shortdesc>
     
      Applique le tri et le filtre à la vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la méthode refresh() est terminée et <codeph>false</codeph> si cela n’est pas le cas.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Applique le tri et le filtre à la vue. L’interface ICollectionView ne détecte pas automatiquement les modifications apportées à un tri ou à un filtre. Par conséquent, vous devez appeler la méthode <codeph>refresh()</codeph> pour actualiser la vue après avoir défini la propriété <codeph>sort</codeph> ou <codeph>filterFunction</codeph>. Si l’implémentation ICollectionView implémente également l’interface IMXMLObject, vous devez appeler la méthode <codeph>refresh()</codeph> à partir de la méthode <codeph>initialized()</codeph>.
	 
      <p>Renvoie <codeph>true</codeph> si l’actualisation aboutit et <codeph>false</codeph> si le tri n’est pas encore terminé (c’est-à-dire si des éléments sont toujours en attente). Un client de la vue doit attendre un événement CollectionEvent dont la propriété <codeph>CollectionEventKind.REFRESH</codeph> est définie sur <codeph>kind</codeph> pour faire en sorte que l’opération <codeph>refresh()</codeph> aboutisse.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeAll"><apiName>removeAll</apiName><shortdesc>
     Supprime tous les éléments de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Supprime tous les éléments de la liste.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
     
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément qui a été supprimé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel l’élément doit être supprimé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Supprime l’élément qui se trouve à l’index spécifié et le renvoie. Tous les éléments qui se trouvent après cet index se trouvent désormais avancés d’un index.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
     
      Place l’élément à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément remplacé ou <codeph>null</codeph> si aucun élément n’a été remplacé.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Nouvel élément à placer à l’index spécifié.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index auquel placer l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Place l’élément à l’index spécifié. Si un élément se trouvait déjà à cet index, le nouvel élément le remplace et il est retourné.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toArray"><apiName>toArray</apiName><shortdesc>
     
      Retourne un tableau rempli dans le même ordre en tant que qu’implémentation IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
     
      Renvoie un tableau rempli dans le même ordre en tant que qu’implémentation IList. Cette méthode peut renvoyer une erreur ItemPendingError.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toString"><apiName>toString</apiName><shortdesc>
      Imprime le contenu de cette vue dans une chaîne et la renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Contenu de cette vue, sous forme de chaîne.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Imprime le contenu de cette vue dans une chaîne et la renvoie.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:willTrigger"><apiName>willTrigger</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.collections:ListCollectionView:protected:localIndex"><apiName>localIndex</apiName><shortdesc>
      Lorsque la vue est triée ou filtrée, la propriété localIndex contient un tableau d’éléments dans la vue triée ou filtrée (ordonnée ou réduite), dans l’ordre de tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Lorsque la vue est triée ou filtrée, la propriété <codeph>localIndex</codeph> contient un tableau d’éléments dans la vue triée ou filtrée (ordonnée ou réduite), dans l’ordre de tri. La classe ListCollectionView utilise cette propriété pour accéder aux éléments de la vue. La propriété <codeph>localIndex</codeph> ne doit pas contenir d’élément non présent dans la source, mais elle ne doit pas obligatoirement contenir tous les éléments de la source. La valeur de cette propriété est <codeph>null</codeph> lorsqu’aucun tri n’est réalisé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      
      Fonction que la vue utilisera pour éliminer les éléments qui ne correspondent pas aux critères de la fonction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="filterFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      Fonction que la vue utilisera pour éliminer les éléments qui ne correspondent pas aux critères de la fonction. Une fonction filterFunction doit présenter la signature suivante :
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  Où la valeur de retour est <codeph>true</codeph> si l’élément spécifié doit rester dans la vue.
	 
      <p>Si un filtre n’est pas pris en charge, Flex renvoie une erreur lors de l’accès à cette propriété. Pour que la vue soit mise à jour, vous devez appeler la méthode <codeph>refresh()</codeph> après avoir défini la propriété <codeph>filterFunction</codeph>.</p>
	 
 	  <p>Remarque : les implémentations Flex de l’interface ICollectionView extraient tous les éléments d’un emplacement distant avant d’exécuter la fonction de filtrage. Si vous utilisez la pagination, appliquez le filtre à la collection distante avant d’extraire les données.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ListCollectionView:length:get"><apiName>length</apiName><shortdesc>
      
      Nombre d’éléments présents dans cette vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Nombre d’éléments présents dans cette vue. 0 signifie qu’elle ne contient aucun élément et -1 signifie que la longueur est inconnue.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:list:get"><apiName>list</apiName><shortdesc>
      Interface IList enveloppée par cette vue de collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="listChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier></apiValueDef><apiDesc>
      Interface IList enveloppée par cette vue de collection.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      
      L’objet ISort qui sera appliqué à l’interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      
      L’objet ISort qui sera appliqué à l’interface ICollectionView. Le fait de définir le tri n’actualise pas automatiquement la vue. Par conséquent, vous devez appeler la méthode <codeph>refresh()</codeph> après avoir défini cette propriété. Si un tri n’est pas pris en charge, une erreur est renvoyée lors de l’accès à cette propriété.
	 
	  <p>Remarque : les implémentations Flex de l’interface ICollectionView extraient tous les éléments d’un emplacement distant avant de procéder au tri. Si vous utilisez la pagination avec une liste triée, appliquez le tri à la collection distante avant d’extraire les données.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ICollectionView"><apiName>ICollectionView</apiName><shortdesc>
  Une interface ICollectionView est une vue contenant une collection de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Une interface <codeph>ICollectionView</codeph> est une vue contenant une collection de données. La vue peut être modifiée de façon à afficher des données triées en fonction de divers critères ou des données filtrées, sans modifier les données sous-jacentes. Une interface IViewCursor permet d’accéder aux éléments présents dans une collection. Vous pouvez modifier la collection à l’aide des méthodes <codeph>insert()</codeph> et <codeph>remove()</codeph> de l’interface IViewCursor.
 
  <p>Une interface <codeph>ICollectionView</codeph> peut être une vue contenant des données extraites à partir d’un emplacement distant. Lorsque vous implémentez cette interface pour des données susceptibles d’être distantes, vous devez envisager les situations où les données ne sont pas encore disponibles, signalées par l’erreur <codeph>ItemPendingError</codeph>.</p>
 
  <p>L’interface <codeph>IList</codeph> constitue une alternative à l’interface <codeph>ICollectionView</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor"><linktext>mx.collections.IViewCursor</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link></related-links><adobeApiEvent id="mx.collections:ICollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Distribué lorsque l’interface ICollectionView a été mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’interface ICollectionView a été mise à jour.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:contains"><apiName>contains</apiName><shortdesc>
      Indique en retour si la vue contient l’objet spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si après application du filtre éventuel, l’interface ICollectionView contient l’élément ; false dans le cas contraire.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Objet à rechercher.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Indique en retour si la vue contient l’objet spécifié. Contrairement aux méthodes <codeph>IViewCursor.find<i>xxx</i></codeph>, cette recherche aboutit uniquement si un élément correspondant exactement au paramètre est trouvé. Si un filtre est appliqué à la vue, cette méthode peut renvoyer <codeph>false</codeph>, même si la collection sous-jacente contient bien l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      Crée une nouvelle interface IViewCursor fonctionnant avec cette vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle implémentation IViewCursor.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Crée une nouvelle interface IViewCursor fonctionnant avec cette vue.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      Empêche la vue de distribuer les modifications apportées à la collection et aux éléments de la collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Empêche la vue de distribuer les modifications apportées à la collection et aux éléments de la collection. Empêche également la vue de mettre à jour les positions des éléments si les positions au sein de la collection changent. Les modifications sont mises en file d’attente et distribuées de façon appropriée après l’appel de la méthode <codeph>enableAutoUpdate</codeph>. S’il y a plus d’événements de que mises à jour réalisées sur un élément unique, il se peut que la vue soit réinitialisée. La méthode <codeph>disableAutoUpdate</codeph> fonctionne de manière cumulative : pour que la vue distribue les événements et soit actualisée, le nombre d’appels doit être identique au nombre d’appels de la méthode <codeph>enableAutoUpdate</codeph>. Sachez que la méthode <codeph>disableAutoUpdate</codeph> affecte uniquement les vues individuelles. Les modifications peuvent être détectées au coup par coup par les autres vues.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      Active la mise à jour automatique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Active la mise à jour automatique. Pour plus d’informations, voir <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Signale à la vue qu’un élément a été mis à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément mis à jour dans la vue.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nom de la propriété mise à jour.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ancienne valeur de cette propriété (si la valeur de la propriété était null, il peut s’agir de l’ancienne valeur de l’élément).
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nouvelle valeur de cette propriété (si la valeur de la propriété était null, il n’est pas nécessaire de la spécifier, car l’élément est supposé correspondre à la nouvelle valeur).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la vue qu’un élément a été mis à jour. Cette méthode est utile lorsque le contenu de la vue n’implémente pas l’interface <codeph>IPropertyChangeNotifier</codeph>. Si l’appel de cette méthode inclut un paramètre <codeph>property</codeph>, il est possible que la vue puisse optimiser son mécanisme de notification. Dans le cas contraire, elle peut simplement choisir d’actualiser l’ensemble de la vue.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:refresh"><apiName>refresh</apiName><shortdesc>
      Applique le tri et le filtre à la vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la méthode refresh() est terminée et <codeph>false</codeph> si cela n’est pas le cas.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Applique le tri et le filtre à la vue. L’interface ICollectionView ne détecte pas automatiquement les modifications apportées à un tri ou à un filtre. Par conséquent, vous devez appeler la méthode <codeph>refresh()</codeph> pour actualiser la vue après avoir défini la propriété <codeph>sort</codeph> ou <codeph>filterFunction</codeph>. Si l’implémentation ICollectionView implémente également l’interface IMXMLObject, vous devez appeler la méthode <codeph>refresh()</codeph> à partir de la méthode <codeph>initialized()</codeph>.
	 
      <p>Renvoie <codeph>true</codeph> si l’actualisation aboutit et <codeph>false</codeph> si le tri n’est pas encore terminé (c’est-à-dire si des éléments sont toujours en attente). Un client de la vue doit attendre un événement CollectionEvent dont la propriété <codeph>CollectionEventKind.REFRESH</codeph> est définie sur <codeph>kind</codeph> pour faire en sorte que l’opération <codeph>refresh()</codeph> aboutisse.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      Fonction que la vue utilisera pour éliminer les éléments qui ne correspondent pas aux critères de la fonction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction que la vue utilisera pour éliminer les éléments qui ne correspondent pas aux critères de la fonction. Une fonction filterFunction doit présenter la signature suivante :
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  Où la valeur de retour est <codeph>true</codeph> si l’élément spécifié doit rester dans la vue.
	 
      <p>Si un filtre n’est pas pris en charge, Flex renvoie une erreur lors de l’accès à cette propriété. Pour que la vue soit mise à jour, vous devez appeler la méthode <codeph>refresh()</codeph> après avoir défini la propriété <codeph>filterFunction</codeph>.</p>
	 
 	  <p>Remarque : les implémentations Flex de l’interface ICollectionView extraient tous les éléments d’un emplacement distant avant d’exécuter la fonction de filtrage. Si vous utilisez la pagination, appliquez le filtre à la collection distante avant d’extraire les données.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:length:get"><apiName>length</apiName><shortdesc>
      Nombre d’éléments présents dans cette vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’éléments présents dans cette vue. 0 signifie qu’elle ne contient aucun élément et -1 signifie que la longueur est inconnue.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      L’objet ISort qui sera appliqué à l’interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:ISort</apiValueClassifier></apiValueDef><apiDesc>
      L’objet ISort qui sera appliqué à l’interface ICollectionView. Le fait de définir le tri n’actualise pas automatiquement la vue. Par conséquent, vous devez appeler la méthode <codeph>refresh()</codeph> après avoir défini cette propriété. Si un tri n’est pas pris en charge, une erreur est renvoyée lors de l’accès à cette propriété.
	 
	  <p>Remarque : les implémentations Flex de l’interface ICollectionView extraient tous les éléments d’un emplacement distant avant de procéder au tri. Si vous utilisez la pagination avec une liste triée, appliquez le tri à la collection distante avant d’extraire les données.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>refresh()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
  Encapsule les aspects relatifs à la position d’un curseur dans une interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Encapsule les aspects relatifs à la position d’un curseur dans une interface <codeph>ICollectionView</codeph>. Les signets permettent de replacer un curseur à sa position absolue au sein de l’interface <codeph>ICollectionView</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor/bookmark"><linktext>mx.collections.IViewCursor.bookmark</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>mx.collections.IViewCursor.seek()</linktext></link></related-links><apiConstructor id="mx.collections:CursorBookmark:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
      Crée une nouvelle occurrence d’un signet en utilisant la valeur spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur de ce signet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Crée une nouvelle occurrence d’un signet en utilisant la valeur spécifiée.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:CursorBookmark:getViewIndex"><apiName>getViewIndex</apiName><shortdesc>
      Obtient l’index approximatif de l’élément représenté par ce signet dans la vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’élément. Si l’élément ne se trouve pas dans la vue actuelle, cette méthode retourne -1. Cette méthode retourne également -1 s’il est impossible de connaître l’emplacement à l’aide de l’index.
      
      </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
      Obtient l’index approximatif de l’élément représenté par ce signet dans la vue. Si l’élément ne fait plus l’objet d’une pagination, cette méthode peut renvoyer une erreur ItemPendingError.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:CursorBookmark:CURRENT:get"><apiName>CURRENT</apiName><shortdesc>
      Signet représentant l’élément actuel de l’interface IViewCursor dans une interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Signet représentant l’élément actuel de l’interface <codeph>IViewCursor</codeph> dans une interface <codeph>ICollectionView</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:FIRST:get"><apiName>FIRST</apiName><shortdesc>
      Signet du premier élément dans une interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Signet du premier élément dans une interface <codeph>ICollectionView</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:LAST:get"><apiName>LAST</apiName><shortdesc>
      Signet du dernier élément dans une interface ICollectionView.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Signet du dernier élément dans une interface <codeph>ICollectionView</codeph>. Si la vue ne contient aucun élément, ce curseur se trouve à ce signet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:value:get"><apiName>value</apiName><shortdesc>
      Représentation du marqueur sous-jacent du signet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Représentation du marqueur sous-jacent du signet. Cette valeur est en général comprise uniquement par une implémentation <codeph>IViewCursor</codeph> ou <codeph>ICollectionView</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IViewCursor"><apiName>IViewCursor</apiName><shortdesc>
  Définit l’interface permettant d’énumérer une vue de collection de manière bidirectionnelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Définit l’interface permettant d’énumérer une vue de collection de manière bidirectionnelle. Ce curseur fournit des fonctions de recherche et de gestion de signets, ainsi que des méthodes de modification (insertion et suppression). Lorsqu’un curseur est extrait pour la première fois à partir d’une vue (en général à l’aide de la méthode <codeph>createCursor()</codeph> de l’interface ICollectionView), la valeur de la propriété <codeph>current</codeph> doit être le premier élément de la vue, sauf si celle-ci est vide.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:IViewCursor_mx.events.FlexEvent.CURSOR_UPDATE_cursorUpdate"><apiName>cursorUpdate</apiName><shortdesc>
  Distribué lorsque la position du curseur est mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CURSOR_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la position du curseur est mise à jour.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findAny"><apiName>findAny</apiName><shortdesc>
      Retrouve dans la collection un élément correspondant aux propriétés spécifiées et place le curseur sur cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Lorsque toutes les données sont locales, cette méthode retourne <codeph>true</codeph> si l’élément est retrouvé, <codeph>false</codeph> dans le cas contraire. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Critères de recherche. Les valeurs de l’objet doivent être configurées comme paires nom-valeur, comme dans un tableau associatif, ou correspondre à l’objet réel à rechercher. Les valeurs des noms spécifiés doivent correspondre aux propriétés spécifiées dans le tri. Par exemple, si les propriétés <codeph>x</codeph>, <codeph>y</codeph> et <codeph>z</codeph> sont définies dans le tri actuel, les valeurs spécifiées doivent être <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retrouve dans la collection un élément correspondant aux propriétés spécifiées et place le curseur sur cet élément. Si l’élément est introuvable, l’emplacement du curseur ne change pas.
     
      <p>La méthode <codeph>findAny()</codeph> peut uniquement être appelée sur des vues triées. Si la vue n’est pas triée, une erreur <codeph>CursorError</codeph> est renvoyée.</p>
      
      <p>Si la collection associée est distante et que tous les éléments n’ont pas été mis en cache localement, cette méthode procède à une récupération asynchrone à partir de la collection distante. Si une demande de récupération est déjà en cours, cette méthode attend qu’elle soit terminée avant de procéder à une nouvelle demande de récupération.</p>
     
      <p>Si plusieurs éléments correspondent aux critères de recherche, l’élément retrouvé est non déterministe. S’il s’avère indispensable de retrouver la première ou la dernière occurrence d’un élément dans un index non unique, utilisez la méthode <codeph>findFirst()</codeph> ou <codeph>findLast()</codeph>.</p>
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findFirst"><apiName>findFirst</apiName><shortdesc>
      Retrouve dans la collection le premier élément correspondant aux propriétés spécifiées et place le curseur sur cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Lorsque toutes les données sont locales, cette méthode retourne <codeph>true</codeph> si l’élément est retrouvé, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Critères de recherche. Les valeurs de l’objet doivent être configurées comme paires nom-valeur, comme dans un tableau associatif, ou correspondre à l’objet réel à rechercher. Les valeurs des noms spécifiés doivent correspondre aux propriétés spécifiées dans le tri. Par exemple, si les propriétés <codeph>x</codeph>, <codeph>y</codeph> et <codeph>z</codeph> sont définies dans le tri actuel, les valeurs spécifiées doivent être <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retrouve dans la collection le premier élément correspondant aux propriétés spécifiées et place le curseur sur cet élément. Si l’élément est introuvable, l’emplacement du curseur ne change pas.
     
      <p>La méthode <codeph>findFirst()</codeph> peut uniquement être appelée sur des vues triées. Si la vue n’est pas triée, une erreur <codeph>CursorError</codeph> est renvoyée.</p>
      
      <p>Si la collection associée est distante et que tous les éléments n’ont pas été mis en cache localement, cette méthode procède à une récupération asynchrone à partir de la collection distante. Si une demande de récupération est déjà en cours, cette méthode attend qu’elle soit terminée avant de procéder à une nouvelle demande de récupération.</p>
     
      <p>S’il n’est pas nécessaire de retrouver la première occurrence d’un élément dans un index non unique, utilisez la méthode <codeph>findAny()</codeph>, qui est parfois plus rapide que la méthode <codeph>findFirst</codeph>.</p>
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findLast"><apiName>findLast</apiName><shortdesc>
      Retrouve dans la collection le dernier élément correspondant aux propriétés spécifiées et place le curseur sur cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Lorsque toutes les données sont locales, cette méthode retourne <codeph>true</codeph> si l’élément est retrouvé, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Critères de recherche. Les valeurs de l’objet doivent être configurées comme paires nom-valeur, comme dans un tableau associatif, ou correspondre à l’objet réel à rechercher. Les valeurs des noms spécifiés doivent correspondre aux propriétés spécifiées dans le tri. Par exemple, si les propriétés <codeph>x</codeph>, <codeph>y</codeph> et <codeph>z</codeph> sont définies dans le tri actuel, les valeurs spécifiées doivent être <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retrouve dans la collection le dernier élément correspondant aux propriétés spécifiées et place le curseur sur cet élément. Si l’élément est introuvable, l’emplacement du curseur ne change pas.
     
      <p>La méthode <codeph>findLast()</codeph> peut uniquement être appelée sur des vues triées. Si la vue n’est pas triée, une erreur <codeph>CursorError</codeph> est renvoyée.</p>
      
      <p>Si la collection associée est distante et que tous les éléments n’ont pas été mis en cache localement, cette méthode procède à une récupération asynchrone à partir de la collection distante. Si une demande de récupération est déjà en cours, cette méthode attend qu’elle soit terminée avant de procéder à une nouvelle demande de récupération.</p>
     
      <p>S’il n’est pas indispensable de retrouver la dernière occurrence d’un élément dans un index non unique, utilisez la méthode <codeph>findAny()</codeph>, qui sera peut-être plus rapide.</p>
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:insert"><apiName>insert</apiName><shortdesc>
      Insère l’élément spécifié avant la position actuelle du curseur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à insérer avant la position actuelle du curseur.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Insère l’élément spécifié avant la position actuelle du curseur. Si le curseur se trouve en position <codeph>afterLast</codeph>, l’insertion est réalisée à la fin de la vue. Si le curseur se trouve en position <codeph>beforeFirst</codeph> dans une vue non vide, une erreur est renvoyée.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:moveNext"><apiName>moveNext</apiName><shortdesc>
      Déplace le curseur sur l’élément suivant dans la collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la valeur est toujours dans la liste, <codeph>false</codeph> si la valeur de la propriété <codeph>current</codeph> était initialement <codeph>afterLast</codeph> ou si elle a depuis pris cette valeur.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Déplace le curseur sur l’élément suivant dans la collection. Si l’opération aboutit, la propriété <codeph>current</codeph> est mise à jour de manière à faire référence à l’objet, à son nouvel emplacement. Renvoie <codeph>true</codeph> si la propriété <codeph>current</codeph> résultante est valide ou <codeph>false</codeph> dans le cas contraire (la valeur de la propriété est <codeph>afterLast</codeph>).
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée. Pour plus d’informations sur l’utilisation de la classe ItemPendingError, voir la documentation relative à ItemPendingError et aux collections.</p>
     
      </apiDesc><example>
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      while (!cursor.afterLast)
      {
          trace(cursor.current);
          cursor.moveNext();
      }
      </pre>
      
      </example></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:movePrevious"><apiName>movePrevious</apiName><shortdesc>
      Déplace le curseur sur l’élément précédent dans la collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la valeur est toujours dans la liste, <codeph>false</codeph> si la valeur de la propriété <codeph>current</codeph> était initialement <codeph>beforeFirst</codeph> ou si elle a depuis pris cette valeur. Par exemple :
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      cursor.seek(CursorBookmark.last);
      while (!cursor.beforeFirst)
      {
          trace(current);
          cursor.movePrevious();
      }
      </pre>
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Déplace le curseur sur l’élément précédent dans la collection. Si l’opération aboutit, la propriété <codeph>current</codeph> est mise à jour de manière à faire référence à l’objet, à son nouvel emplacement. Renvoie <codeph>true</codeph> si la propriété <codeph>current</codeph> résultante est valide ou <codeph>false</codeph> dans le cas contraire (la valeur de la propriété est <codeph>beforeFirst</codeph>).
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée. Pour plus d’informations sur l’utilisation de la classe ItemPendingError, voir la documentation relative à ItemPendingError et aux collections.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:remove"><apiName>remove</apiName><shortdesc>
      Supprime l’élément actuel et le renvoie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément qui a été supprimé.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Supprime l’élément actuel et le renvoie. Si la position du curseur est <codeph>beforeFirst</codeph> ou <codeph>afterLast</codeph>, renvoie une erreur CursorError. Si vous supprimez un élément autre que le dernier élément, le curseur passe à l’élément suivant. Si vous supprimez le dernier élément, le curseur est placé au niveau du signet AFTER_LAST.
      
      <p>Si après la suppression de l’élément, l’élément n’est pas local et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée. Pour plus d’informations sur l’utilisation de la classe ItemPendingError, voir la documentation relative à ItemPendingError et aux collections.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:seek"><apiName>seek</apiName><shortdesc>
      Déplace le curseur sur une position décalée par rapport au signet spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bookmark</apiItemName><apiOperationClassifier>mx.collections:CursorBookmark</apiOperationClassifier><apiDesc>Référence <codeph>CursorBookmark</codeph> aux informations de marqueur permettant de replacer le curseur sur une position spécifique. Vous pouvez définir ce paramètre sur la valeur renvoyée par la propriété <codeph>bookmark</codeph> ou sur l’une des valeurs de constante de signet suivantes :
      <ul>
        <li><codeph>CursorBookmark.FIRST</codeph> : démarre la recherche à partir du début de la collection (premier élément)</li>
        <li><codeph>CursorBookmark.CURRENT</codeph> : démarre la recherche à partir de la position actuelle dans la collection</li>
        <li><codeph>CursorBookmark.LAST</codeph> : démarre la recherche à partir de la fin de la collection (dernier élément)</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Indique jusqu’où effectuer la recherche, à partir du signet spécifié. Si le nombre spécifié est négatif, le curseur essaie de se déplacer devant le signet spécifié. Si le décalage spécifié est extérieur à la collection, le curseur est placé par rapport à la fin, sur la positon <codeph>beforeFirst</codeph> ou <codeph>afterLast</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Paramètre utilisé pour les données distantes. Indique l’intention de procéder à une itération dans une direction spécifique une fois l’opération de recherche terminée. Cela réduit le nombre d’allers-retours réseau requis pendant la recherche. Si la direction de l’itération est connue au moment de la demande, la quantité adaptée de données peut être renvoyée avant la demande pour réaliser l’itération.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Déplace le curseur sur une position décalée par rapport au signet spécifié. Le décalage peut être négatif, auquel cas le curseur est placé devant le signet spécifié, la valeur <codeph>offset</codeph> désignant le nombre d’éléments entre le curseur et ce signet.
     
      <p>Si la collection associée est distante et que tous les éléments n’ont pas été mis en cache localement, cette méthode procède à une récupération asynchrone à partir de la collection distante.</p>
     
      <p>Si les données ne sont pas locales et qu’une opération asynchrone doit être réalisée, une erreur ItemPendingError est renvoyée. Pour plus d’informations sur l’utilisation de la classe ItemPendingError, voir la documentation relative à ItemPendingError et aux collections.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:afterLast:get"><apiName>afterLast</apiName><shortdesc>
      Si le curseur se trouve après le dernier élément de la vue, la valeur de cette propriété est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Si le curseur se trouve après le dernier élément de la vue, la valeur de cette propriété est <codeph>true</codeph>. Si l’interface ICollectionView est vide (longueur == 0), la valeur de cette propriété est <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:beforeFirst:get"><apiName>beforeFirst</apiName><shortdesc>
      Si le curseur se trouve avant le premier élément de la vue, la valeur de cette propriété est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Si le curseur se trouve avant le premier élément de la vue, la valeur de cette propriété est <codeph>true</codeph>. Si l’interface ICollectionView est vide (longueur == 0), la valeur de cette propriété est <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:bookmark:get"><apiName>bookmark</apiName><shortdesc>
      Permet d’accéder à un signet correspondant à l’élément renvoyé par la propriété current.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Permet d’accéder à un signet correspondant à l’élément renvoyé par la propriété <codeph>current</codeph>. Le signet peut être utilisé pour déplacer le curseur sur un élément précédemment visité ou sur une position relative à cet élément (pour plus d’informations, voir la méthode <codeph>seek()</codeph>).
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:current:get"><apiName>current</apiName><shortdesc>
      Permet d’accéder à l’objet qui se trouve à l’emplacement référencé par le curseur dans la collection source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="cursorUpdate"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Permet d’accéder à l’objet qui se trouve à l’emplacement référencé par le curseur dans la collection source. Si le curseur est au-delà des limites de la collection (en position <codeph>beforeFirst</codeph> ou <codeph>afterLast</codeph>), la valeur retournée est <codeph>null</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link><link href="mx.collections.xml#IViewCursor/beforeFirst"><linktext>beforeFirst</linktext></link><link href="mx.collections.xml#IViewCursor/afterLast"><linktext>afterLast</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:view:get"><apiName>view</apiName><shortdesc>
      Référence à l’interface ICollectionView à laquelle ce curseur est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’interface ICollectionView à laquelle ce curseur est associé.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>