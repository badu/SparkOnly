<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.containers"><apiName>mx.containers</apiName><apiDetail/><apiClassifier id="mx.containers:Canvas"><apiName>Canvas</apiName><shortdesc>
  Un conteneur de mise en forme Halo Canvas définit une région rectangulaire dans laquelle vous placez des conteneurs et contrôles enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingRight"/><Exclude kind="style" name="paddingLeft"/><Exclude kind="style" name="paddingBottom"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Canvas" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Canvas" replacement="spark.components.Group" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Canvas&gt;</code> tag inherits all the tag attributes
  of its superclass. Use the following syntax:</p>
 
  <p>
  <pre>
  &lt;mx:Canvas&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Canvas&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur de mise en forme Halo Canvas définit une région rectangulaire dans laquelle vous placez des conteneurs et contrôles enfant. Il s’agit du seul conteneur qui vous permet de spécifier explicitement la position de ses enfants au sein du conteneur, par le biais des propriétés <codeph>x</codeph> et <codeph>y</codeph> de chaque enfant.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser les conteneurs Spark avec la classe BasicLayout plutôt que le conteneur Halo Canvas.</p>
 
  <p>Flex utilise la largeur et la hauteur recommandées d’un enfant d’un conteneur de mise en forme Canvas pour définir la taille de cet enfant. Vous pouvez remplacer la valeur de largeur recommandée d’un enfant en définissant sa propriété <codeph>width</codeph> sur un nombre de pixels fixe ou sur un pourcentage de la taille du conteneur. Vous pouvez définir la hauteur recommandée de la même manière.</p>
 
  <p>Si vous définissez une taille en pourcentage dans un conteneur Canvas, il se peut que certains composants se chevauchent. Si vous ne le souhaitez pas, réfléchissez bien aux positions et aux tailles de vos composants.</p>
 
  <p>Le conteneur Canvas présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment importante pour contenir tous les enfants à leur taille par défaut</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleCanvasExample.mxml"><swfblock conref="examples/SimpleCanvasExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Canvas:Canvas"><apiName>Canvas</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Canvas:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles recommandées minimale et maximale du conteneur Canvas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles recommandées minimale et maximale du conteneur Canvas.
     
      <p>La valeur <codeph>measuredWidth</codeph> du conteneur Canvas correspond à la valeur la plus petite permettant de contenir tous les enfants à leur largeur recommandée sans provoquer d’écrêtement. La méthode <codeph>measure()</codeph> calcule la position de l’enfant le plus à droite et la position du bord droit de cet enfant, puis ajoute un espace suffisant pour l’épaisseur de la bordure du conteneur Canvas et la marge droite. La valeur <codeph>measuredHeight</codeph> est calculée de la même manière.</p>
     
      <p>Les propriétés <codeph>minWidth</codeph> et <codeph>minHeight</codeph> du conteneur Canvas ne sont pas calculées. Par conséquent, Flex utilise la valeur par défaut 0.</p>
     
      <p>Les propriétés <codeph>maxWidth</codeph> et <codeph>maxHeight</codeph> du conteneur Canvas ne sont pas calculées. La largeur et la hauteur du conteneur sont supposées être illimitées.</p>
     
      <p>Toutes les valeurs décrites précédemment correspondent aux largeurs et hauteurs <i>mesurées</i> du conteneur Canvas. L’utilisateur peut remplacer les valeurs mesurées en spécifiant explicitement une valeur pour les propriétés suivantes :</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p>Vous ne devez pas appeler cette méthode directement. La classe LayoutManager de Flex l’appelle lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex essaie de mesurer tous les composants, enfant comme parent, avant de définir leur taille finale.</p>
     
      <p>Il s’agit d’une méthode avancée à utiliser avec des sous-classes. Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.measure()</codeph> ou définir les propriétés <codeph>measuredHeight</codeph> et <codeph>measuredWidth</codeph>. Si vous le souhaitez, vous pouvez définir les propriétés facultatives suivantes :
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
      Ces propriétés correspondent aux propriétés de mise en forme mentionnées précédemment. Elles ne font donc pas l’objet d’une documentation séparée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Canvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Définit la taille de chaque enfant du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la taille de chaque enfant du conteneur.
     
      <p>Le conteneur Canvas ne modifie pas les positions de ses enfants. Chaque enfant est placé en fonction des valeurs de ses propriétés <codeph>x</codeph> et <codeph>y</codeph>.</p>
     
      <p>En revanche, le conteneur Canvas définit la largeur et la hauteur de chaque enfant, de sorte qu’elles correspondent aux valeurs <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph> de cet enfant, si les valeurs <codeph>width</codeph> et <codeph>height</codeph> ne sont pas précisées. Il est également possible de permettre le redimensionnement de l’enfant en définissant les valeurs <codeph>width</codeph> et/ou <codeph>height</codeph> en pourcentage. La taille des enfants redimensionnables dépend des bords droit et inférieur du conteneur Canvas. Dans ce cas, les valeurs <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>maxWidth</codeph> et <codeph>maxHeight</codeph> de l’enfant sont respectées.</p>
     
      <p>Vous ne devez pas appeler cette méthode directement. La classe LayoutManager de Flex l’appelle lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex appelle la méthode <codeph>updateDisplayList()</codeph> sur chaque composant, en commençant par l’objet Application et en progressant vers le bas.</p>
     
      <p>Il s’agit d’une méthode avancée à utiliser avec des sous-classes. Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.updateDisplayList()</codeph> et appeler les méthodes <codeph>move()</codeph> et <codeph>setActualSize()</codeph> sur chaque enfant. Pour les besoins de la mise en forme, vous devez obtenir la taille de ce conteneur à partir des propriétés <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph>, et non à partir des propriétés <codeph>width</codeph> et <codeph>height</codeph>. Les propriétés <codeph>width</codeph> et <codeph>height</codeph> ne prennent pas en compte la valeur des propriétés <codeph>scaleX</codeph> et <codeph>scaleY</codeph> de ce conteneur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Canvas:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Canvas:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormItemDirection"><apiName>FormItemDirection</apiName><shortdesc>
  La classe FormItemDirection définit les valeurs de constante de la propriété direction de la classe FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FormItemDirection définit les valeurs de constante de la propriété <codeph>direction</codeph> de la classe FormItem.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiValue id="mx.containers:FormItemDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      Indique que les enfants du conteneur FormItem doivent être placés horizontalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les enfants du conteneur FormItem doivent être placés horizontalement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItemDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      Indique que les enfants du conteneur FormItem doivent être placés verticalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les enfants du conteneur FormItem doivent être placés verticalement.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:DividedBox"><apiName>DividedBox</apiName><shortdesc>
  Un conteneur DividedBox mesure et place ses enfants horizontalement ou verticalement, de la même manière qu’un conteneur Box, mais des séparateurs déplaçables sont insérés entre les enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style inherit="no" name="verticalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Habillage de curseur d’un objet DividedBox vertical. La valeur par défaut est le symbole « mx.skins.cursor.VBoxDivider » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalDividerCursor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Habillage de curseur d’un objet DividedBox horizontal. La valeur par défaut est le symbole « mx.skins.cursor.HBoxDivider » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerThickness" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Epaisseur en pixels des séparateurs, lorsque l’utilisateur clique sur un séparateur ou le fait glisser et que la propriété <codeph>liveDragging</codeph> est définie sur <codeph>false</codeph> (si la propriété <codeph>liveDragging</codeph> est définie sur <codeph>true</codeph>, seul le bouton du séparateur est affiché). L’épaisseur visible ne peut pas être définie sur une valeur supérieure à la valeur autorisée.
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerSkin" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Class">
<description>
  Habillage du séparateur. La valeur par défaut est le symbole « mx.skin.BoxDividerSkin » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dividerColor" owner="mx.containers:DividedBox" playerVersion="Flash9" type="uint">
<description>
  Couleur des séparateurs lorsque l’utilisateur clique sur un séparateur ou le fait glisser et que la propriété <codeph>liveDragging</codeph> est définie sur <codeph>false</codeph>. Si la propriété <codeph>liveDragging</codeph> est définie sur <codeph>true</codeph>, seul le bouton du séparateur est affiché.
 
  </description>
<default>0x6F7777
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dividerAlpha" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Valeur alpha value déterminant la transparence des séparateurs. La valeur <codeph>0.0</codeph> signifie que le séparateur est entièrement transparent et la valeur <codeph>1.0</codeph> qu’il est entièrement opaque.
  
  </description>
<default>0.75
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="dividerAffordance" owner="mx.containers:DividedBox" playerVersion="Flash9" type="Number">
<description>
  Epaisseur de la zone dans laquelle l’utilisateur peut cliquer pour faire glisser un séparateur, en pixels. Cette zone est centrée dans les espaces séparant les enfants du conteneur, qui sont définis par la propriété de style <codeph>horizontalGap</codeph> ou <codeph>verticalGap</codeph>. La valeur acceptable ne peut pas être supérieure à la taille de l’espace. Un curseur de redimensionnement s’affiche lorsque le pointeur de la souris survole cette zone.
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:DividedBox
    <strong>Properties</strong>
    liveDragging="false|true"
    resizeToContent="false|true"
  
    <strong>Styles</strong>
    dividerAffordance="6"
    dividerAlpha="0.75"
    dividerColor="0x6F7777"
    dividerSkin="<i>'mx.skins.BoxDividerSkin' symbol in Assets.swf</i>"
    dividerThickness="3"
    horizontalDividerCursor="<i>'mx.skins.cursor.HBoxDivider' symbol in Assets.swf</i>"
    verticalDividerCursor="<i>'mx.skins.cursor.VBoxDivider' symbol in Assets.swf</i>"
 
    <strong>Events</strong>
    dividerPress="<i>No default</i>"
    dividerDrag="<i>No default</i>"
    dividerRelease="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:DividedBox&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur DividedBox mesure et place ses enfants horizontalement ou verticalement, de la même manière qu’un conteneur Box, mais des séparateurs déplaçables sont insérés entre les enfants. Les utilisateurs peuvent faire glisser un séparateur pour redimensionner les enfants de part et d’autre.
  
  <p>La classe DividedBox est la classe de base des classes HDividedBox et VDividedBox, qui sont utilisées plus fréquemment.</p>
 
  <p>La propriété <codeph>direction</codeph> d’un conteneur DividedBox, héritée d’un conteneur Box, détermine si la mise en forme est horizontale ou verticale.</p>
  
  <p>Les conteneurs DividedBox, HDividedBox et VDividedBox présentent les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur <b>Vertical DividedBox</b> est suffisamment importante pour contenir tous les enfants à leur hauteur par défaut ou explicite, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond à somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite du conteneur. La largeur <b>Horizontal DividedBox</b> est suffisamment importante pour contenir tous les enfants à la largeur par défaut ou explicite de ces enfants, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur. La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row><row>
           <entry>Espace par défaut</entry>
           <entry>10 pixels pour les espaces horizontal et vertical.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DividedBoxExample.mxml"><swfblock conref="examples/DividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_RELEASE_dividerRelease"><apiName>dividerRelease</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche un séparateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche un séparateur. L’événement <codeph>dividerRelease</codeph> est distribué après les événements <codeph>dividerDrag</codeph>, mais avant le redimensionnement des enfants du conteneur. Les propriétés x et y du séparateur ne sont pas mises à jour tant que cet événement n’a pas été déclenché. Par conséquent, l’appel de la méthode <codeph>hDividerBox.getDividerAt(0).x</codeph> retourne la valeur de la position x d’origine du premier séparateur. Si vous souhaitez obtenir la position du séparateur après le déplacement, vous pouvez y accéder une fois que l’événement updateComplete du conteneur DividerBox a été déclenché.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_PRESS_dividerPress"><apiName>dividerPress</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur un séparateur présent dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_PRESS</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur un séparateur présent dans ce conteneur. L’événement <codeph>dividerPress</codeph> est distribué avant les événements <codeph>dividerDrag</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.containers:DividedBox_mx.events.DividerEvent.DIVIDER_DRAG_dividerDrag"><apiName>dividerDrag</apiName><shortdesc>
  Distribué à plusieurs reprises lorsque l’utilisateur déplace un séparateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DividerEvent.DIVIDER_DRAG</apiEventType><adobeApiEventClassifier>mx.events.DividerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à plusieurs reprises lorsque l’utilisateur déplace un séparateur. L’événement <codeph>dividerDrag</codeph> est distribué après l’événement <codeph>dividerPress</codeph>, mais avant l’événement <codeph>dividerRelease</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:DividedBox:DividedBox"><apiName>DividedBox</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:DividedBox:getDividerAt"><apiName>getDividerAt</apiName><shortdesc>
	  Retourne une référence à l’objet BoxDivider de ce conteneur DividedBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet BoxDivider.
	  
	  </apiDesc><apiOperationClassifier>mx.containers.dividedBoxClasses:BoxDivider</apiOperationClassifier></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>Index de base zéro d’un séparateur, à partir de la gauche dans le cas d’un conteneur DividedBox horizontal, à partir du haut dans le cas d’un conteneur DividedBox vertical.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Retourne une référence à l’objet BoxDivider de ce conteneur DividedBox. 
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:DividedBox:moveDivider"><apiName>moveDivider</apiName><shortdesc>
	  Déplace un séparateur spécifique d’un nombre donné de pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>Index de base zéro d’un séparateur, à partir de la gauche dans le cas d’un conteneur DividedBox horizontal, à partir du haut dans le cas d’un conteneur DividedBox vertical.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>amt</apiItemName><apiType value="Number"/><apiDesc>Nombre de pixels de déplacement du séparateur. Un nombre négatif peut être spécifié, de façon à déplacer un séparateur vers le haut ou vers la gauche. Le mouvement du séparateur est limité, comme lorsqu’un utilisateur le déplace.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Déplace un séparateur spécifique d’un nombre donné de pixels.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:DividedBox:protected:dividerClass"><apiName>dividerClass</apiName><shortdesc>
	  Classe du séparateur présent entre les enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/><apiDefaultValue>mx.containers.dividedBoxClasses.BoxDivider
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Classe du séparateur présent entre les enfants.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:liveDragging"><apiName>liveDragging</apiName><shortdesc>
	  Si la valeur est true, les enfants voisins d’un séparateur sont redimensionnés en permanence, à mesure que l’utilisateur le déplace.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Si la valeur est <codeph>true</codeph>, les enfants voisins d’un séparateur sont redimensionnés en permanence, à mesure que l’utilisateur le déplace. Si la valeur est <codeph>false</codeph>, ils sont redimensionnés uniquement lorsque l’utilisateur relâche le bouton de la souris.
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:numDividers:get"><apiName>numDividers</apiName><shortdesc>
 	  Nombre de séparateurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
 	  Nombre de séparateurs. Le nombre est toujours égal à <codeph>numChildren</codeph> - 1.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:DividedBox:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
	  Si la valeur est true, le conteneur DividedBox est redimensionné automatiquement en fonction de la taille de ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Si la valeur est <codeph>true</codeph>, le conteneur DividedBox est redimensionné automatiquement en fonction de la taille de ses enfants.
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
  Le conteneur ApplicationControlBar contient des composants fournissant des commandes globales de navigation et d’application au conteneur Halo Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ApplicationControlBar" replacement="none" since="4.0">
<description>
  A partir de Flex 4, le composant ApplicationControlBar n’est plus nécessaire. Utilisez la propriété <codeph>controlBarContent</codeph> de la classe Spark Application pour spécifier l’ensemble de composants à inclure dans la zone de la barre de contrôle. Utilisez la propriété <codeph>controlBarLayout</codeph> de la classe Spark Application pour spécifier la mise en forme de la zone de la barre de contrôle.  
 </description>
	</Alternative><styles><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  Couleurs utilisées pour la teinte de l’arrière-plan du conteneur. Transmettez la même couleur pour les deux valeurs si vous souhaitez que le contrôle semble être « plat ». La valeur par défaut est <codeph>[0xFFFFFF,0xFFFFFF]</codeph>.
 
  <p>Vous devez également définir la propriété <codeph>fillAlphas</codeph> sur une valeur autre que la valeur par défaut, car sa couleur par défaut <codeph>[0,0]</codeph> rend les couleurs invisibles.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:ApplicationControlBar" playerVersion="Flash9" type="Array">
<description>
  Valeurs alpha utilisées pour le remplissage d’arrière-plan du conteneur. La valeur par défaut est <codeph>[0,0]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ApplicationControlBar&gt;</code> tag 
  inherits all of the tag attributes of its superclass, and adds the
  following tag attributes.
  Unlike the ControlBar container, it is possible to set the
  <code>backgroundColor</code> style for an ApplicationControlBar
  container.</p>
 
  <pre>
  &lt;mx:ApplicationControlBar
    <strong>Properties</strong>
    dock="false|true"
  
    <strong>Styles</strong>
    fillAlphas="[0, 0]"
    fillColors="[0xFFFFFF, 0xFFFFFF]"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ApplicationControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:ControlBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur ApplicationControlBar contient des composants fournissant des commandes globales de navigation et d’application au conteneur Halo Application. Le conteneur ApplicationControlBar d’un éditeur, par exemple, peut contenir des contrôles Button permettant de définir l’épaisseur de la police, un contrôle ComboBox permettant de sélectionner la police, ainsi qu’un contrôle MenuBar permettant de sélectionner le mode d’édition. En général, un conteneur ApplicationControlBar est placé en haut d’un conteneur Halo Application.
 
  <p><b>Remarque :</b> le conteneur Spark Application ne prend pas en charge le conteneur ApplicationControlBar. Modifiez l’habillage du conteneur Spark Application pour ajouter cette fonctionnalité.</p>
 
  <p>Le conteneur ApplicationControlBar offre différents modes de fonctionnement :</p> 
  <ul>
    <li>Mode ancré : la barre est toujours affichée en haut de la zone de tracé de l’application et fait partie du chrome de l’application. Les barres de défilement définies au niveau de l’application ne s’appliquent pas au composant. Celui-ci reste donc toujours en haut de la zone visible et la barre est élargie pour remplir la largeur de l’application. Pour créer une barre ancrée, définissez la valeur de la propriété <codeph>dock</codeph> sur <codeph>true</codeph>.</li>
      
    <li>Mode normal : la barre peut être placée n’importe où dans l’application, et sa taille et sa position sont définies comme n’importe quel autre composant. Elle défile en même temps que l’application. Pour créer une barre normale, définissez la valeur de la propriété <codeph>dock</codeph> sur <codeph>false</codeph> (valeur par défaut).</li>
  </ul>
 
  <p>Le conteneur ApplicationControlBar présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur. En mode normal, la largeur est suffisamment importante pour contenir tous les enfants à leur largeur par défaut ou explicite, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur. En mode ancré, la largeur est égale à la largeur de l’application. Si l’application n’est pas suffisamment large pour contenir tous les contrôles du conteneur ApplicationControlBar, la barre est écrêtée.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>5 pixels en haut. 4 pixels en bas. 8 pixels à gauche et à droite.
           </entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleApplicationControlBarExample.mxml"><swfblock conref="examples/SimpleApplicationControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link></related-links><apiConstructor id="mx.containers:ApplicationControlBar:ApplicationControlBar"><apiName>ApplicationControlBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:ApplicationControlBar:dock:get"><apiName>dock</apiName><shortdesc>
      Si la valeur est true, le conteneur ApplicationControlBar est ancré en haut de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dockChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, le conteneur ApplicationControlBar est ancré en haut de l’application. Si la valeur est <codeph>false</codeph>, la taille et la position du conteneur ApplicationControlBar sont définies comme pour n’importe quel autre composant. Cette propriété est prise en charge lorsque l’application est de type <codeph>Application</codeph>. Sinon, la valeur de <codeph>dock</codeph> n’est pas prise en compte.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
  Le conteneur HDividedBox place ses enfants horizontalement, de la même manière qu’un conteneur HBox, mais un séparateur déplaçable est inséré entre les enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass except <code>direction</code> and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur HDividedBox place ses enfants horizontalement, de la même manière qu’un conteneur HBox, mais un séparateur déplaçable est inséré entre les enfants. Les utilisateurs peuvent faire glisser le séparateur pour redimensionner la zone allouée à chaque enfant. La balise <codeph>&lt;mx:HDividedBox/></codeph> est identique à <codeph>&lt;mx:DividedBox direction="horizontal"/></codeph>.
  
  <p>Le conteneur HDividedBox présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La largeur est suffisamment importante pour contenir tous les enfants à leur largeur par défaut ou explicite, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur. La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row><row>
           <entry>Espace par défaut</entry>
           <entry>10 pixels pour les espaces horizontal et vertical.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HDividedBoxExample.mxml"><swfblock conref="examples/HDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#VDividedBox"><linktext>mx.containers.VDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:HDividedBox:HDividedBox"><apiName>HDividedBox</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:Grid"><apiName>Grid</apiName><shortdesc>
  Un conteneur Grid permet de présenter les enfants sous forme de lignes et de colonnes de cellules, comme dans un tableau HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Grid" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, horizontalement. La valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except the <code>Box.direction</code>
  property, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Grid
    <strong>Styles</strong>
    horizontalGap="8"
    verticalGap="6"
    &gt;
      ...
    <i>These child tags are examples only:</i>
       &lt;mx:GridRow id="row1"&gt;
        &lt;mx:GridItem
          rowSpan="1"
          colSpan="1">
            &lt;mx:Button label="Button 1"/&gt;
        &lt;/mx:GridItem&gt;
        ...
       &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur Grid permet de présenter les enfants sous forme de lignes et de colonnes de cellules, comme dans un tableau HTML. Le conteneur Grid contient une ou plusieurs lignes, chacune d’entre elles pouvant contenir une ou plusieurs cellules ou éléments. Utilisez les balises suivantes pour définir un contrôle Grid :
 
  <ul>
     <li>La balise <codeph>&lt;mx:Grid></codeph> définit un conteneur Grid.</li>
 
     <li>La balise <codeph>&lt;mx:GridRow></codeph> définit une ligne de grille contenant une ou plusieurs cellules. La ligne de grille doit être un enfant de la balise <codeph>&lt;Grid></codeph>.</li>
 
     <li>La balise <codeph>&lt;mx:GridItem></codeph> définit une cellule de grille et doit être un enfant de la balise <codeph>&lt;GridRow></codeph>. La balise <codeph>&lt;mx:GridItem></codeph> peut contenir un nombre illimité d’enfants.</li>
  </ul>
 
  <p>La hauteur de toutes les cellules d’une même ligne est la même, mais la hauteur peut varier d’une ligne à une autre. La largeur de toutes les cellules d’une même colonne est la même, mais la largeur peut varier d’une colonne à une autre. Vous pouvez définir un nombre différent de cellules pour chacune des lignes ou colonnes du conteneur Grid. Par ailleurs, une cellule peut s’étendre sur plusieurs colonnes ou plusieurs lignes du conteneur.</p>
  
  <p>Les conteneurs Grid, GridRow et GridItem présentent les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Hauteur de la grille</entry>
           <entry>Somme des hauteurs par défaut ou explicites de toutes les lignes et des espaces séparant les lignes.</entry>
        </row><row>
           <entry>Largeur de la grille</entry>
           <entry>Somme de la largeur par défaut ou explicite de toutes les colonnes et des espaces séparant les colonnes.</entry>
        </row><row>
           <entry>Hauteur de chaque ligne et de chaque cellule</entry>
           <entry>Hauteur par défaut ou explicite de l’élément le plus grand de la ligne. Si un conteneur GridItem n’a pas de taille explicite, sa hauteur par défaut correspond à la hauteur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Largeur de chaque colonne et de chaque cellule</entry>
           <entry>Largeur par défaut ou explicite de l’élément le plus large de la colonne. Si un conteneur GridItem n’a pas de largeur explicite, sa largeur par défaut correspond à la largeur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Espace entre les lignes et les colonnes</entry>
           <entry>Déterminé par les propriétés horizontalGap et verticalGap de la classe Grid. La valeur par défaut des deux espaces est de 6 pixels.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite, pour les trois classes de conteneur.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Grid:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur Grid.

      <p>N’appelez pas cette méthode directement : il s’agit d’une méthode avancée à utiliser avec une sous-classe. La classe LayoutManager de Flex appelle la méthode <codeph>measure()</codeph> lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex essaie de mesurer tous les composants, enfant comme parent, avant de définir leur taille finale.</p>
     
      <p>Pour comprendre comment le conteneur Grid calcule ses mesures, supposons que les propriétés <codeph>rowSpan</codeph> et <codeph>colSpan</codeph> de chaque conteneur sont définies sur 1. La largeur mesurée de la première colonne du conteneur Grid est égale à la plus grande des largeurs mesurées de tous les conteneurs GridItem de la première colonne. De même, la largeur mesurée de la deuxième colonne est égale à la plus grande des largeurs mesurées de tous les conteneurs GridItem de la deuxième colonne, et ainsi de suite. La largeur <codeph>measuredWidth</codeph> de l’ensemble du conteneur Grid correspond à la somme de toutes les largeurs mesurées des colonnes, de l’épaisseur de la bordure, des marges gauche et droite et de l’espace horizontal entre les cellules de la grille.</p>
     
      <p>Les valeurs des propriétés <codeph>measuredHeight</codeph>, <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>maxWidth</codeph> et <codeph>maxHeight</codeph> sont toutes calculées de la même manière, en additionnant les valeurs des propriétés <codeph>measuredHeight</codeph>, <codeph>minWidth</codeph>, etc. des conteneurs GridItem.</p>
     
      <p>Si la valeur de la propriété <codeph>colSpan</codeph> d’un conteneur GridItem est 3, la largeur <codeph>measuredWidth</codeph> de ce conteneur GridItem est répartie entre les trois colonnes. Si la largeur <codeph>measuredWidth</codeph> est divisée en parts égales, chacune des trois colonnes calcule sa largeur mesurée comme si le conteneur GridItem était présent uniquement dans cette colonne et que la largeur <codeph>measuredWidth</codeph> de ce conteneur GridItem était égale à un tiers de sa valeur réelle.</p>
     
      <p>Cependant, la valeur <codeph>measuredWidth</codeph> du conteneur GridItem n’est pas toujours divisée à parts égales entre toutes les colonnes sur lesquelles le conteneur s’étend. Si certaines colonnes contiennent une propriété dont la largeur <codeph>width</codeph> est définie en pourcentage, la propriété <codeph>measuredWidth</codeph> du conteneur GridItem est divisée en conséquence, en essayant de faire en sorte que chaque colonne occupe du pourcentage demandé du conteneur Grid.</p>
     
      <p>Toutes les valeurs décrites précédemment correspondent aux largeurs et hauteurs <i>mesurées</i> du conteneur Grid. L’utilisateur peut remplacer les valeurs mesurées en spécifiant explicitement une valeur pour les propriétés suivantes :</p>
     
      <ul>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>width</codeph></li>
      </ul>
     
      <p>Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.measure()</codeph> ou définir les propriétés <codeph>measuredHeight</codeph> et <codeph>measuredWidth</codeph>. Si vous le souhaitez, vous pouvez définir les propriétés facultatives suivantes :</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>Ces propriétés correspondent aux propriétés de mise en forme mentionnées précédemment. Elles ne font donc pas l’objet d’une documentation séparée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Grid:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Définit la taille et la position de chaque enfant du conteneur Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la taille et la position de chaque enfant du conteneur Grid.
     
      <p>N’appelez pas cette méthode directement : il s’agit d’une méthode avancée à utiliser avec une sous-classe. La classe LayoutManager de Flex appelle la méthode <codeph>updateDisplayList</codeph> lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex appelle la méthode <codeph>updateDisplayList()</codeph> sur chaque composant, en commençant par la racine et en progressant vers le bas.</p>
     
      <p>Le conteneur Grid suit les mêmes règles de mise en forme que le conteneur VBox. La position et la taille des conteneurs GridRow sont calculées de la même manière que lorsqu’un conteneur VBox détermine la position et la taille de ses enfants. De même, un conteneur GridRow place ses conteneurs GridItem en utilisant un algorithme de mise en forme similaire à celui d’un conteneur HBox.</p>
     
      <p>La seule différence réside dans le fait que tous les conteneurs GridRow fonctionnent de façon coordonnée : ils choisissent tous la même position et la même taille pour leurs enfants, de sorte que les colonnes du conteneur Grid soient alignées. </p>
     
      <p>Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.updateDisplayList()</codeph> et appeler les méthodes <codeph>move()</codeph> et <codeph>setActualSize()</codeph> sur chaque enfant. Pour les besoins de la mise en forme, vous devez obtenir la taille de ce conteneur à partir des propriétés <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph>, et non à partir des propriétés <codeph>width</codeph> et <codeph>height</codeph>. Les propriétés <codeph>width</codeph> et <codeph>height</codeph> ne prennent pas en compte les valeurs des propriétés <codeph>scaleX</codeph> et <codeph>scaleY</codeph> de ce conteneur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:TileDirection"><apiName>TileDirection</apiName><shortdesc>
  La classe TileDirection définit les valeurs de constante de la propriété direction du conteneur Tile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TileDirection définit les valeurs de constante de la propriété <codeph>direction</codeph> du conteneur Tile.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Tile"><linktext>mx.containers.Tile</linktext></link></related-links><apiValue id="mx.containers:TileDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Indique que les enfants du conteneur Tile doivent être placés horizontalement, c’est-à-dire en commençant par la première ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que les enfants du conteneur Tile doivent être placés horizontalement, c’est-à-dire en commençant par la première ligne.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TileDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Indique que les enfants du conteneur Tile doivent être placés verticalement, c’est-à-dire en commençant par la première colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que les enfants du conteneur Tile doivent être placés verticalement, c’est-à-dire en commençant par la première colonne.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
  Le conteneur MX TabNavigator étend le conteneur MX ViewStack en incluant un conteneur TabBar permettant l’accès aux différents conteneurs Halo enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><styles><style format="Length" inherit="no" name="tabOffset" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Décalage horizontal de la barre d’onglets par rapport au bord gauche du conteneur TabNavigator, en pixels. Une valeur positive déplace la barre d’onglets vers la droite. Une valeur négative déplace la barre d’onglets vers la gauche. 
 
  </description>
<default>0 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabWidth" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Largeur de chaque onglet, en pixels. La valeur par défaut est <codeph>undefined</codeph>. Lorsque la valeur de cette propriété est <codeph>undefined</codeph>, la largeur de chaque onglet est déterminée par la largeur de son texte de libellé, en fonction des styles de police appliqués à ce conteneur TabNavigator. Si la largeur totale des onglets s’avère être supérieure à la largeur du conteneur TabNavigator, la largeur calculée de l’onglet est réduite, mais jamais au point de devenir inférieure à la valeur minimale de 30 pixels. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
 
  <p>Le texte de libellé d’un onglet est tronqué si l’onglet est trop petit pour le contenir en entier. Si un libellé d’onglet est tronqué, une info-bulle contenant le texte de libellé complet s’affiche lorsque le pointeur de la souris survole l’onglet.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles des onglets.
  
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabHeight" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Hauteur de chaque onglet, en pixels. La valeur par défaut est <codeph>undefined</codeph>. Lorsque la valeur de cette propriété est <codeph>undefined</codeph>, la hauteur de chaque onglet est déterminée par les styles de police appliqués à ce conteneur TabNavigator. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedTabTextStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles du texte de l’onglet sélectionné.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles du dernier onglet. Si la valeur de cette propriété n’est pas spécifiée, la valeur par défaut de la propriété de style <codeph>tabStyleName</codeph> est utilisée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Séparation entre les onglets, en pixels. La valeur par défaut est -1. Dans ce cas, les bordures des onglets adjacents sont superposées.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Positionnement horizontal des onglets en haut de ce conteneur TabNavigator. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. La valeur par défaut est <codeph>"left"</codeph>.
 
  <p>Si la valeur est <codeph>"left"</codeph>, le bord gauche du premier onglet est aligné avec le bord gauche du conteneur TabNavigator. Si la valeur est <codeph>"right"</codeph>, le bord droit du dernier onglet est aligné avec le bord droit du conteneur TabNavigator. Si la valeur est <codeph>"center"</codeph>, les onglets sont centrés en haut du conteneur TabNavigator.</p>
 
  <p>Pour que la différence entre ces modes d’alignement soit visible, la largeur totale de tous les onglets doit être inférieure à la largeur du conteneur TabNavigator.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstTabStyleName" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles du premier onglet. Si la valeur de cette propriété n’est pas spécifiée, la valeur par défaut de la propriété de style <codeph>tabStyleName</codeph> est utilisée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="String">
<description>
  Spécifie quels angles du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.containers:TabNavigator" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus. La valeur par défaut du thème Halo est <codeph>0.4</codeph>. La valeur par défaut du thème est Spark <codeph>0.55</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Spécifie les couleurs utilisées pour la teinte du remplissage d’arrière-plan du conteneur. Il est conseillé de le définir sur un tableau de deux ou quatre valeurs d’unité spécifiant les couleurs RVB. Les éléments 0 et 1 spécifient les valeurs de début et de fin d’un dégradé de couleurs. Si les éléments 2 et 3 sont définis, ils sont utilisés en lieu et place des éléments 0 et 1 lorsque le composant est survolé par la souris. Pour un contrôle d’apparence plate, définissez la même couleur pour les éléments 0 et 1 et pour les éléments 2 et 3. La valeur par défaut est <codeph>[ 0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE ]</codeph>.
  <p>Certains composants, tels que le conteneur ApplicationControlBar, ont une autre valeur par défaut. Dans le cas du conteneur ApplicationControlBar, la valeur par défaut est <codeph>[ 0xFFFFFF, 0xFFFFFF ]</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.containers:TabNavigator" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Spécifie les valeurs de transparence alpha utilisées pour le remplissage d’arrière-plan des composants. Définissez cette propriété sur un tableau contenant deux ou quatre nombres. Les éléments 0 et 1 spécifient les valeurs de début et de fin d’un dégradé alpha. Si les éléments 2 et 3 sont définis, ils sont utilisés en lieu et place des éléments 0 et 1 lorsque le composant est survolé par la souris. La valeur par défaut globale est <codeph>[ 0.60, 0.40, 0.75, 0.65 ]</codeph>. Certains composants, tels que le conteneur ApplicationControlBar, ont une autre valeur par défaut. Dans le cas du conteneur ApplicationControlBar, la valeur par défaut est <codeph>[ 0.0, 0.0 ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TabNavigator&gt;</code> tag inherits all of the
  tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:TabNavigator
    <b>Styles</b>
    fillAlphas="[0.60, 0.40, 0.75, 0.65]"
    fillColors="[0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE]"
    firstTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    focusAlpha="0.4"
    focusRoundedCorners="tl tr bl br"
    horizontalAlign="left|center|right"
    horizontalGap="-1"
    lastTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    selectedTabTextStyleName="undefined"
    tabHeight="undefined"
    tabOffset="0"
    tabStyleName="<i>Name of CSS style declaration that specifies styles for the tabs</i>"
    tabWidth="undefined"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:TabNavigator&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.containers:ViewStack</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur MX TabNavigator étend le conteneur MX ViewStack en incluant un conteneur TabBar permettant l’accès aux différents conteneurs Halo enfants.
 
  <p><b>Remarque :</b> les enfants directs d’un conteneur de navigateur MX doivent être des conteneurs MX (de présentation MX ou navigateur MX) ou le conteneur Spark NavigatorContent. Vous ne pouvez pas imbriquer directement un contrôle ou un conteneur Spark autre que le conteneur NavigatorContent dans un navigateur. Ils doivent être les enfants d’un conteneur MX enfant. </p>
 
  <p>Comme les conteneurs ViewStack, un conteneur TabNavigator contient une collection de conteneurs enfant, dans laquelle un seul enfant est visible à la fois. Flex crée automatiquement un conteneur TabBar en haut du conteneur TabNavigator, chaque onglet correspondant à un conteneur enfant. Chaque onglet peut contenir ses propres libellé et icône. Lorsque l’utilisateur clique sur un onglet, le conteneur enfant correspondant devient visible en tant qu’enfant sélectionné du conteneur TabNavigator.</p>
 
  <p>Lorsque le conteneur enfant actuellement visible change, vous pouvez utiliser la propriété <codeph>hideEffect</codeph> du conteneur masqué et la propriété <codeph>showEffect</codeph> du conteneur enfant devenu visible pour appliquer un effet aux conteneurs enfant. Le conteneur TabNavigator attend que l’effet <codeph>hideEffect</codeph> du conteneur enfant masqué soit terminé avant de faire apparaître le nouveau conteneur enfant. Vous pouvez interrompre un effet en cours en modifiant la propriété <codeph>selectedIndex</codeph> du conteneur TabNavigator pendant la lecture d’un effet. </p>
  
  <p>Pour définir l’apparence des onglets dans un conteneur TabNavigator, vous pouvez définir les propriétés de style dans un sélecteur de type Tab, comme l’illustre l’exemple suivant :</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|Tab {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }  
  &lt;/fx:Style>
  </pre>
 
  <p>Le sélecteur de type Tab définit les valeurs de la classe masquée mx.controls.tabBarClasses.Tab. Les valeurs par défaut du sélecteur de type Tab sont définies dans le fichier defaults.css.</p>
 
  <p>Vous pouvez également définir les styles dans un sélecteur de classe que vous spécifiez par le biais de la propriété de style <codeph>tabStyleName</codeph>. Exemple :</p>
  <pre>
  &lt;fx:Style>
    @namespace mx "library://ns.adobe.com/flex/mx"
    mx|TabNavigator {
       tabStyleName:myTabStyle;
    }
 
    .myTabStyle {
       fillColors: #006699, #cccc66;
       upSkin: ClassReference("CustomSkinClass");
       overSkin: ClassReference("CustomSkinClass");
       downSkin: ClassReference("CustomSkinClass");
    }
  &lt;/fx:Style>
  </pre>
 
  <p>Le conteneur TabNavigator présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur par défaut ou explicites du premier enfant actif et des onglets, à leurs hauteur et largeur explicites ou par défaut. La hauteur par défaut des onglets dépend de la police, du style et de l’habillage appliqués au conteneur TabNavigator.</entry>
        </row><row>
           <entry>Règles de redimensionnement de conteneur</entry>
           <entry>Par défaut, la taille des conteneurs TabNavigator est déterminée une seule fois, en fonction de la taille du premier conteneur enfant. Ils ne sont pas redimensionnés lorsque vous accédez à d’autres conteneurs enfant. Pour forcer un redimensionnement des conteneurs TabNavigator lorsque vous accédez à un autre conteneur enfant, définissez la propriété resizeToContent sur true.</entry>
        </row><row>
           <entry>Règles de mise en forme des enfants</entry>
           <entry>Si l’enfant est plus grand que le conteneur TabNavigator, il est écrêté. Si l’enfant est plus petit que le conteneur TabNavigator, il est placé dans l’angle supérieur gauche de ce conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabNavigatorExample.mxml"><swfblock conref="examples/TabNavigatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link></related-links><apiConstructor id="mx.containers:TabNavigator:TabNavigator"><apiName>TabNavigator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:TabNavigator:getTabAt"><apiName>getTabAt</apiName><shortdesc>
      Retourne l’onglet qui se trouve à l’index spécifié dans le contrôle TabBar du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Onglet qui se trouve à l’index spécifié.
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index dans le contrôle TabBar du navigateur.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne l’onglet qui se trouve à l’index spécifié dans le contrôle TabBar du navigateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale de ce conteneur TabNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale de ce conteneur TabNavigator. Pour plus d’informations sur la méthode <codeph>measure()</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
     
      <p>Le conteneur TabNavigator utilise la même logique de mesure que le conteneur <codeph>ViewStack</codeph>, à deux exceptions près. Tout d’abord, il augmente la valeur des propriétés <codeph>measuredHeight</codeph> et <codeph>measuredMinHeight</codeph> de manière à les adapter aux onglets. Il augmente ensuite la valeur de la propriété <codeph>measuredWidth</codeph> si cela est nécessaire, pour faire en sorte que la largeur de chaque onglet soit d’au moins 30 pixels.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link><link href="mx.containers.xml#ViewStack/measure()"><linktext>mx.containers.ViewStack.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:TabNavigator:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Réagit aux changements de taille en définissant la taille et la position des onglets et des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réagit aux changements de taille en définissant la taille et la position des onglets et des enfants de ce conteneur. Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.
     
      <p>Un conteneur TabNavigator place son conteneur TabBar en haut. La largeur du conteneur TabBar correspond à celle du conteneur TabNavigator et la hauteur du conteneur TabBar est basée sur la propriété <codeph>tabHeight</codeph>.</p>
     
      <p>Un conteneur TabNavigator définit la taille de ses conteneurs enfant et les place sous le conteneur TabBar en utilisant la même logique que dans un conteneur ViewStack.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:TabNavigator:protected:tabBar"><apiName>tabBar</apiName><shortdesc>
      Référence au conteneur TabBar présent dans ce conteneur TabNavigator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls:TabBar</apiValueClassifier></apiValueDef><apiDesc>
      Référence au conteneur TabBar présent dans ce conteneur TabNavigator.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:TabNavigator:protected:tabBarStyleFilters:get"><apiName>tabBarStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre entre le conteneur TabNavigator et le navigateur tabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre entre le conteneur TabNavigator et le navigateur tabBar.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.containers:HBox"><apiName>HBox</apiName><shortdesc>
  Le conteneur Halo HBox place ses enfants dans une seule ligne horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:HBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:HBox" replacement="spark.components.HGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Halo HBox place ses enfants dans une seule ligne horizontale. Utilisez la balise <codeph>&lt;mx:HBox></codeph> plutôt que la balise <codeph>&lt;mx:Box></codeph> en tant que raccourci, pour éviter de devoir définir la propriété <codeph>direction</codeph> sur <codeph>"horizontal"</codeph>.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser les conteneurs Spark avec la classe HorizontalLayout plutôt que le conteneur Halo HBox.</p>
 
  <p>Le conteneur HBox présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La largeur est suffisamment importante pour contenir tous les enfants à leur largeur par défaut ou explicite, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur. La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur.
           </entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HBoxExample.mxml"><swfblock conref="examples/HBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:HBox:HBox"><apiName>HBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:VBox"><apiName>VBox</apiName><shortdesc>
  Le conteneur Halo VBox place ses enfants dans une seule colonne verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:VBox" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:VBox" replacement="spark.components.VGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p></p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Halo VBox place ses enfants dans une seule colonne verticale. Utilisez la balise <codeph>&lt;mx:VBox></codeph> plutôt que la balise <codeph>&lt;mx:Box></codeph> en tant que raccourci, pour éviter de devoir définir la propriété <codeph>direction</codeph> sur <codeph>"vertical"</codeph>.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser les conteneurs Spark avec la classe VerticalLayout plutôt que le conteneur Halo VBox.</p>
 
  <p>Le conteneur VBox présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur est suffisamment importante pour contenir tous les enfants à leur hauteur par défaut ou explicite, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond à somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite du conteneur.
           </entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VBoxExample.mxml"><swfblock conref="examples/VBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link></related-links><apiConstructor id="mx.containers:VBox:VBox"><apiName>VBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  Un conteneur de mise en forme TitleWindow se compose d’une barre de titre, d’une légende, d’une bordure et d’une zone de contenu permettant d’accueillir son enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:TitleWindow" replacement="spark.components.TitleWindow" since="4.0">
	</Alternative><styles><style inherit="no" name="closeButtonUpSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Habillage du bouton de fermeture à l’état relevé. La valeur par défaut est le symbole « CloseButtonUp » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonOverSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Habillage du bouton de fermeture à l’état survolé. La valeur par défaut est le symbole « CloseButtonOver » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDownSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Habillage du bouton de fermeture à l’état enfoncé. La valeur par défaut est le symbole « CloseButtonDown » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonDisabledSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Habillage du bouton de fermeture à l’état désactivé. La valeur par défaut est le symbole « CloseButtonDisabled » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeButtonSkin" owner="mx.containers:TitleWindow" playerVersion="Flash9" type="Class">
<description>
  Habillage par défaut du bouton de fermeture.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TitleWindow
   <b>Properties</b>
   showCloseButton="false|true"
 
   <b>Styles</b>
   closeButtonDisabledSkin="<i>'CloseButtonDisabled' symbol in Assets.swf</i>"
   closeButtonDownSkin="<i>'CloseButtonDown' symbol in Assets.swf</i>"
   closeButtonOverSkin="<i>'CloseButtonOver' symbol in Assets.swf</i>"
   closeButtonUpSkin="<i>'CloseButtonUp' symbol in Assets.swf</i>"
  
   <strong>Events</strong>
   close="<i>No default</i>"
   &gt;
    ...
      child tags
    ...
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur de mise en forme TitleWindow se compose d’une barre de titre, d’une légende, d’une bordure et d’une zone de contenu permettant d’accueillir son enfant. Les conteneurs TitleWindow sont généralement utilisés pour envelopper des modules d’application autonomes. Vous pouvez par exemple insérer un formulaire dans un conteneur TitleWindow. Lorsque l’utilisateur remplit le formulaire, vous pouvez fermer le conteneur TitleWindow par programmation ou laisser l’utilisateur le fermer à l’aide du bouton Fermer.
  
  <p>Le conteneur TitleWindow présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur est suffisamment importante pour contenir tous les enfants dans la zone de contenu à leur hauteur par défaut ou explicite, la barre de titre et la bordure, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond soit à la somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite des bordures du conteneur, soit à la largeur du texte de titre, la valeur la plus grande étant prise en compte.</entry>
        </row><row>
           <entry>bordures</entry>
           <entry>10 pixels à gauche et à droite. 2 pixels en haut. 0 pixel en bas.
           </entry>
        </row><row>
           <entry>marge</entry>
           <entry>4 pixels en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Application"><linktext>mx.core.Application</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><adobeApiEvent id="mx.containers:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque l’utilisateur sélectionne le bouton de fermeture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3985
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>événement close
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur sélectionne le bouton de fermeture.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:TitleWindow:showCloseButton:get"><apiName>showCloseButton</apiName><shortdesc>
      Détermine si un bouton de fermeture doit ou non être affiché dans le conteneur TitleWindow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3986
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue><apiTipTexts><apiTipText>Si la valeur est true, le bouton de fermeture est affiché.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Détermine si un bouton de fermeture doit ou non être affiché dans le conteneur TitleWindow. La valeur par défaut est <codeph>false</codeph>. Définissez cette propriété sur <codeph>true</codeph> pour afficher le bouton de fermeture. La sélection du bouton de fermeture génère un événement <codeph>close</codeph>, mais le conteneur TitleWindow n’est pas fermé pour autant. Vous devez écrire un gestionnaire pour l’événement <codeph>close</codeph> et fermer le conteneur TitleWindow à partir de ce gestionnaire.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Le conteneur FormHeading permet d’afficher un titre pour un groupe de contrôles présents dans un conteneur Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels au-dessus du texte de titre.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Largeur des libellés de formulaire. La valeur par défaut correspond à la longueur du libellé le plus long du formulaire. Pour le conteneur FormHeading, la propriété <codeph>labelWidth</codeph> correspond à l’espace qui se trouve à gauche du texte de titre.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la zone de libellé et le texte de titre.
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.containers:FormHeading" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>. </p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.containers:FormHeading" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.containers:FormHeading" playerVersion="Flash10" type="String">
<description>
  Direction du texte affiché par le composant. 
 
  <p>Les valeurs autorisées sont <codeph>"ltr"</codeph> pour les textes rédigés de gauche à droite, comme dans les scripts de style latin et <codeph>"rtl"</codeph> pour les textes rédigés de droite à gauche, comme l’arabe ou l’hébreu. </p>
 
  <p>FTE et TLF utilisent cette valeur dans leur algorithme de mise en forme de texte bidirectionnel, lequel mappe l’ordre des caractères Unicode sur ordre des glyphes. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>. </p>
 
  <p>La <codeph>direction</codeph> a également une incidence sur l’alignement du texte dans les limites de TLFTextField. Elle n’a pas, cependant, d’incidence sur le positionnement de TLFTextField au sein du composant. </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.containers:FormHeading" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.containers:FormHeading" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut pour le contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormHeading&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Styles</strong>
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|subpixel|none"
    fontSharpness="0"
    fontSize="12"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    textAlign="<i>Calculated</i>"
    textDecoration="none|underline"
    textIndent="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur FormHeading permet d’afficher un titre pour un groupe de contrôles présents dans un conteneur Form. Le côté gauche du titre est aligné sur le côté gauche des contrôles du formulaire. Vous pouvez insérer plusieurs conteneurs FormHeading dans un même conteneur Form.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:FormHeading:label:get"><apiName>label</apiName><shortdesc>
	  Texte de titre du formulaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Texte de titre du formulaire.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Accordion"><apiName>Accordion</apiName><shortdesc>
  Un conteneur de navigateur MX Accordion a une collection de conteneurs MX enfant ou de conteneurs Spark NavigatorContent, mais uniquement l’un d’entre eux est visible à la fois. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="clipContent"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut est -1. Dans ce cas, les bordures supérieure et inférieure des en-têtes adjacents sont confondues.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte sélectionné. La valeur par défaut du thème Halo est <codeph>0x2B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.containers:Accordion" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte d’en-tête lorsque la souris le survole. La valeur par défaut du thème Halo est <codeph>0x2B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et sa zone de contenu. La valeur par défaut est -1. Dans ce cas, la bordure supérieure du premier en-tête et la bordure supérieure du conteneur Accordion sont confondues.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et sa zone de contenu. La valeur par défaut est -1. Dans ce cas, la bordure inférieure du dernier en-tête et la bordure inférieure du conteneur Accordion sont confondues.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.containers:Accordion" playerVersion="Flash9" type="Function">
<description>
  Fonction d’interpolation utilisée par l’animation pour passer d’un enfant à un autre.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Durée, en millisecondes, de l’animation utilisée pour passer d’un enfant à un autre. La valeur par défaut du thème Halo est 250. La valeur par défaut du thème Spark est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Hauteur de chaque en-tête d’accordéon, en pixels. La valeur par défaut est calculée automatiquement en fonction des styles de police de l’en-tête.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Accordion" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, horizontalement. La valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.containers:Accordion" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles des en-têtes d’accordéon (onglets).
 
  <p>Vous pouvez utiliser ce sélecteur de classe pour définir les valeurs de toutes les propriétés de style de la classe AccordionHeader : <codeph>fillAlphas</codeph>, <codeph>fillColors</codeph>, <codeph>focusAlpha</codeph>, <codeph>focusRounderCorners</codeph>, <codeph>focusSkin</codeph>, <codeph>focusThickness</codeph> et <codeph>selectedFillColors</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Accordion&gt;</code> tag inherits all of the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Accordion
    <strong>Properties</strong>
    headerRenderer="<i>IFactory</i>"
    historyManagementEnabled="true|false"
    resizeToContent="false|true"
    selectedChild"<i>A reference to the first child</i>"
    selectedIndex="undefined"
  
    <strong>Styles</strong>
    headerHeight="depends on header font styles"
    headerStyleName="<i>No default</i>"
    horizontalGap="8"
    openDuration="250"
    openEasingFunction="undefined"
    paddingBottom="-1"
    paddingTop="-1"
    textRollOverColor="0xB333C"
    textSelectedColor="0xB333C"
    verticalGap="-1"
  
    <strong>Events</strong>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Accordion&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Un conteneur Accordion permet d’accéder à différentes vues enfant.
  </apiTipText></apiTipTexts><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur de navigateur MX Accordion a une collection de conteneurs MX enfant ou de conteneurs Spark NavigatorContent, mais uniquement l’un d’entre eux est visible à la fois. Il crée et gère les boutons de navigateur (en-têtes d’accordéon) que vous pouvez utiliser pour accéder aux différents enfants. Un bouton de navigateur est associé à chaque conteneur enfant. Chaque bouton de navigateur appartient au conteneur Accordion et non à l’enfant. Lorsque l’utilisateur clique sur un bouton de navigateur, le conteneur enfant associé s’affiche. La transition vers le nouvel enfant fait appel à une animation pour bien faire comprendre à l’utilisateur qu’un enfant disparaît et qu’un autre apparaît.
 
  <p><b>Remarque :</b> les enfants directs d’un conteneur de navigateur MX doivent être des conteneurs MX (de présentation MX ou navigateur MX) ou le conteneur Spark NavigatorContent. Vous ne pouvez pas imbriquer directement un contrôle ou un conteneur Spark autre que le conteneur NavigatorContent dans un navigateur. Ils doivent être les enfants d’un conteneur MX enfant. </p>
 
  <p>Le conteneur Accordion n’étend pas le conteneur ViewStack, mais il implémente l’ensemble des propriétés, méthodes, styles et événements du conteneur ViewStack, par exemple <codeph>selectedIndex</codeph> et <codeph>selectedChild</codeph>.</p>
 
  <p>Un conteneur Accordion présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur de l’enfant actuellement actif.</entry>
        </row><row>
           <entry>Règles de redimensionnement de conteneur</entry>
           <entry>Par défaut, la taille des conteneurs Accordion est déterminée une seule fois, en fonction de la taille du premier conteneur enfant. Par défaut, ils ne sont pas redimensionnés lorsque vous accédez à d’autres conteneurs enfant. Pour forcer un redimensionnement des conteneurs Accordion lorsque vous accédez à un autre conteneur enfant, définissez la propriété resizeToContent sur true.</entry>
        </row><row>
           <entry>Règles de définition de la taille des enfants</entry>
           <entry>La taille des enfants est définie sur leur taille par défaut. L’enfant est écrêté s’il est plus grand que le conteneur Accordion. Si l’enfant est plus petit que le conteneur Accordion, il est placé dans l’angle supérieur gauche de ce conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>-1 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="AccordionExample.mxml"><swfblock conref="examples/AccordionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links><adobeApiEvent id="mx.containers:Accordion_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le conteneur enfant sélectionné change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3012
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>événement change
  
  </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
  Distribué lorsque le conteneur enfant sélectionné change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:Accordion:Accordion"><apiName>Accordion</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Accordion:getHeaderAt"><apiName>getHeaderAt</apiName><shortdesc>
      Retourne une référence au bouton de navigateur d’un conteneur enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet Button représentant le bouton de navigateur.
      
      </apiDesc><apiOperationClassifier>mx.controls:Button</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne une référence au bouton de navigateur d’un conteneur enfant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Etat de l’objet à charger. La valeur est null lors du chargement de l’état initial de l’application.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Accordion:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Etat de cet objet.
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Accordion:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Hauteur de la zone dans laquelle le contenu est affiché, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur de la zone dans laquelle le contenu est affiché, en pixels. Vous pouvez remplacer cet accesseur de lecture si votre contenu n’occupe pas l’intégralité de la zone du conteneur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Largeur de la zone dans laquelle le contenu est affiché, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur de la zone dans laquelle le contenu est affiché, en pixels. Vous pouvez remplacer cet accesseur de lecture si votre contenu n’occupe pas l’intégralité de la zone du conteneur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      Fabrique utilisée pour créer les boutons de navigation de chaque enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      Fabrique utilisée pour créer les boutons de navigation de chaque enfant. La valeur par défaut est une fabrique qui crée un objet <codeph>mx.containers.accordionClasses.AccordionHeader</codeph>. L’objet créé doit être une sous-classe de Button et implémenter l’interface <codeph>mx.core.IDataRenderer</codeph>. La propriété <codeph>data</codeph> contient le contenu associé à l’en-tête.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.accordionClasses.xml#AccordionHeader"><linktext>mx.containers.accordionClasses.AccordionHeader</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      Si la valeur est true, cette propriété active la gestion d’historique dans ce conteneur Accordion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, cette propriété active la gestion d’historique dans ce conteneur Accordion. Lorsque l’utilisateur accède aux différents enfants, le navigateur mémorise les enfants visités. L’utilisateur peut cliquer ensuite sur les boutons Précédent et Suivant pour parcourir l’historique de navigation.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:Accordion:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      Si la valeur est true, ce conteneur Accordion est redimensionné automatiquement, en fonction de la taille de son enfant actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, ce conteneur Accordion est redimensionné automatiquement, en fonction de la taille de son enfant actuel.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      Référence au conteneur enfant actuellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3401
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier><apiTipTexts><apiTipText>Spécifie la vue enfant actuellement affichée.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Référence au conteneur enfant actuellement visible. La valeur par défaut est une référence au premier enfant. En l’absence d’enfant, la valeur de cette propriété est <codeph>null</codeph>.
     
      <p><b>Remarque :</b> vous pouvez définir cette propriété uniquement dans une instruction ActionScript, pas dans du code MXML.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Accordion:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de base zéro du conteneur de l’enfant actuellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3402
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Spécifie l’index de la vue enfant actuellement affichée.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Index de base zéro du conteneur de l’enfant actuellement visible. Les index des enfants utilisent la plage de valeurs 0, 1, 2, ..., n - 1, où n correspond au nombre d’enfants. La valeur par défaut est 0, ce qui correspond au premier enfant. En l’absence d’enfant, la valeur de cette propriété est <codeph>-1</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ControlBar"><apiName>ControlBar</apiName><shortdesc>
  Le conteneur ControlBar permet de placer des contrôles au bas d’un conteneur Halo Panel ou Halo TitleWindow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="direction"/><Alternative owner="mx.containers:ControlBar" replacement="none" since="4.0">
<description>
  A partir de Flex 4, le composant ControlBar n’est plus nécessaire. Utilisez la propriété <codeph>controlBarContent</codeph> de la classe Spark Panel pour spécifier l’ensemble de composants à inclure dans la zone de la barre de contrôle. Utilisez la propriété <codeph>controlBarLayout</codeph> de la classe Spark Panel pour spécifier la mise en forme de la zone de la barre de contrôle.  
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ControlBar&gt;</code> tag inherits all the tag
  attributes but adds no additional attributes:</p>
 
  <pre>
  &lt;mx:ControlBar&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:ControlBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur ControlBar permet de placer des contrôles au bas d’un conteneur Halo Panel ou Halo TitleWindow. La balise <codeph>&lt;mx:ControlBar></codeph> doit être la dernière balise enfant de la balise englobant le conteneur Halo Panel ou Halo TitleWindow.
 
  <p><b>Remarque :</b> le conteneur Spark Panel ne prend pas en charge le conteneur ControlBar. Modifiez l’habillage du conteneur Spark Panel pour ajouter cette fonctionnalité.</p>
 
  <p>Le conteneur ControlBar est un conteneur Box doté de propriétés d’arrière-plan et de style par défaut.</p>
 
  <p>Le conteneur ControlBar présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur. La largeur est suffisante pour contenir tous les enfants à leur largeur par défaut ou explicite, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>10 pixels en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleControlBarExample.mxml"><swfblock conref="examples/SimpleControlBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.containers:ControlBar:ControlBar"><apiName>ControlBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:GridItem"><apiName>GridItem</apiName><shortdesc>
  Le conteneur GridItem définit une cellule de grille dans un conteneur GridRow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridItem&gt;</code> tag must be a child of the 
  <code>&lt;GridRow&gt;</code> tag, which defines a grid row.
  The <code>&lt;mx:GridItem&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes.</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow&gt;
      &lt;mx:GridItem
        rowSpan="1"
        colSpan="1">
          <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur GridItem définit une cellule de grille dans un conteneur GridRow (le conteneur GridRow définit à son tour une ligne dans un conteneur Grid). Le conteneur GridItem peut contenir un nombre illimité d’enfants, mis en forme comme dans un conteneur HBox. Si vous ne souhaitez pas faire appel à une mise en forme HBox, créez un conteneur en tant qu’enfant du contrôle GridItem (par exemple un conteneur VBox) et placez les autres composants dans ce conteneur enfant.
 
  <p>Les conteneurs GridItem présentent les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Hauteur de chaque ligne et de chaque cellule</entry>
           <entry>Hauteur par défaut ou explicite de l’élément le plus grand de la ligne. Si un conteneur GridItem n’a pas de taille explicite, sa hauteur par défaut correspond à la hauteur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Largeur de chaque colonne et de chaque cellule</entry>
           <entry>Largeur par défaut ou explicite de l’élément le plus large de la colonne. Si un conteneur GridItem n’a pas de largeur explicite, sa largeur par défaut correspond à la largeur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Espace entre les lignes et les colonnes</entry>
           <entry>Déterminé par les propriétés horizontalGap et verticalGap de la classe Grid. La valeur par défaut des deux espaces est de 6 pixels.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite, pour les trois classes de conteneur.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridRow"><linktext>mx.containers.GridRow</linktext></link></related-links><apiConstructor id="mx.containers:GridItem:GridItem"><apiName>GridItem</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.containers:GridItem:colSpan:get"><apiName>colSpan</apiName><shortdesc>
      Nombre de colonnes sur lesquelles s’étend la cellule dans le conteneur Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de colonnes sur lesquelles s’étend la cellule dans le conteneur Grid.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:GridItem:rowSpan:get"><apiName>rowSpan</apiName><shortdesc>
      Nombre de lignes sur lesquelles s’étend la cellule dans le conteneur Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de lignes sur lesquelles s’étend la cellule dans le conteneur Grid. Vous ne pouvez pas étendre une cellule au-delà du nombre de lignes du conteneur Grid.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Panel"><apiName>Panel</apiName><shortdesc>
  Un conteneur Halo Panel se compose d’une barre de titre, d’une légende, d’une bordure et d’une zone de contenu permettant d’accueillir ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Panel" replacement="spark.components.Panel" since="4.0">
	</Alternative><effects><effect event="resizeStart" name="resizeStartEffect" owner="mx.containers:Panel">
<description>
  Spécifie l’effet à lire avant de commencer la lecture d’un effet Resize. Pour désactiver l’effet par défaut Dissolve de sorte que les enfants soient instantanément masqués, définissez la valeur de la propriété <codeph>resizeStartEffect</codeph> sur <codeph>"none"</codeph>.  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resizeEnd" name="resizeEndEffect" owner="mx.containers:Panel">
<description>
  Spécifie l’effet à lire au terme de la lecture d’un effet Resize. Pour désactiver l’effet par défaut Dissolve de sorte que les enfants soient instantanément masqués, définissez la valeur de la propriété <codeph>resizeEndEffect</codeph> sur <codeph>"none"</codeph>.  
 
  </description>
<default>"Dissolve"
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style inherit="no" name="titleStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style du texte affiché dans la barre de titre. La valeur par défaut est <codeph>"windowStyles"</codeph>, ce qui correspond à une police de titre en gras.
 
  </description>
<default>"windowStyles"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="titleBackgroundSkin" owner="mx.containers:Panel" playerVersion="Flash9" type="Class">
<description>
  Habillage de l’arrière-plan du titre. La valeur par défaut du thème Halo est <codeph>mx.skins.halo.TitleBackground</codeph>. La valeur par défaut du thème Spark est <codeph>mx.core.UIComponent</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="statusStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style de l’état affiché dans la barre de titre.
 
  </description>
<default>"windowStatus"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Les valeurs négatives déplacent l’ombre au-dessus du panneau.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="roundedBottomCorners" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Indicateur permettant d’arrondir les deux angles inférieurs du conteneur. Il ne s’applique pas aux deux angles supérieurs, qui sont normalement ronds. Pour faire en sorte que les deux angles supérieurs soient des angles droits, configurez la propriété <codeph>cornerRadius</codeph> sur 0.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Valeurs alpha utilisées pour le remplissage de surbrillance de l’en-tête.
 
  </description>
<default>[0.3,0]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="headerHeight" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Hauteur de l’en-tête. La valeur par défaut dépend du style du texte de titre.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Tableau contenant deux couleurs utilisées pour tracer l’en-tête. La première couleur est la couleur du haut. La deuxième couleur est la couleur du bas. Les valeurs par défaut sont <codeph>null</codeph>. Dans ce cas, l’arrière-plan de l’en-tête est identique à celui du panneau.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="footerColors" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Tableau contenant deux couleurs utilisées pour tracer l’arrière-plan du pied (zone où se trouve le conteneur ControlBar). La première couleur est la couleur du haut. La deuxième couleur est la couleur du bas. Les valeurs par défaut sont <codeph>null</codeph>. Dans ce cas, l’arrière-plan de la barre des commandes est identique à celui du panneau.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne déterminant la visibilité de l’ombre portée du conteneur Panel.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles du cadre de la fenêtre. La valeur par défaut du thème Halo est <codeph>4</codeph>. La valeur par défaut du thème Spark est <codeph>0</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="controlBarStyleName" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS spécifiant les styles à appliquer aux sous-contrôles enfant de la barre des commandes.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessTop" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur de la bordure supérieure du contrôle Panel.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessRight" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur de la bordure droite du contrôle Panel.
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessLeft" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur de la bordure gauche du contrôle Panel.
 
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThicknessBottom" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur de la bordure inférieure du contrôle Panel. Si ce style n’est pas défini et que le contrôle Panel contient un contrôle ControlBar, l’épaisseur de la bordure inférieure est égale à l’épaisseur de la bordure supérieure du panneau. Sinon, l’épaisseur de la bordure inférieure est égale à l’épaisseur de la bordure gauche.
 
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.containers:Panel" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Valeur alpha de la barre de titre, de la barre des commandes et des côtés du contrôle Panel. La valeur par défaut du thème Halo est <codeph>0.4</codeph>. La valeur par défaut du thème Spark est <codeph>0.5</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Durée, en millisecondes, de l’effet de transparence modale lu lorsqu’une fenêtre modale s’ouvre ou se ferme.
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.containers:Panel" playerVersion="Flash9" type="uint">
<description>
  Couleur du calque d’incrustation modal. Ce style est utilisé conjointement avec le style <codeph>modalTransparency</codeph> pour déterminer la coloration appliquée à l’application lorsqu’une fenêtre modale s’ouvre.
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Flou appliqué à l’application lorsqu’une fenêtre modale s’ouvre. L’effet de flou adoucit les détails d’une image. 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  La modalité des composants lancés par la classe PopUpManager est simulée en créant une grande incrustation translucide sous le composant. En raison de la manière dont les objets translucides apparaissent, les objets qui se trouvent sous l’incrustation peuvent apparaître légèrement estompés. La transparence réelle peut être définie en modifiant la valeur <codeph>modalTransparency</codeph> et en lui attribuant une valeur comprise entre 0.0 (transparence totale) et 1.0 (opacité totale). Vous pouvez également définir la couleur de l’incrustation, en modifiant le style <codeph>modalTransparencyColor</codeph>.
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Panel" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Alignement vertical des enfants du conteneur. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. La valeur par défaut est <codeph>"top"</codeph>, mais certains conteneurs, dont ButtonBar, ControlBar, LinkBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Panel" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal des enfants du conteneur. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. La valeur par défaut est <codeph>"left"</codeph>, mais certains conteneurs, dont ButtonBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Panel
   <strong>Properties</strong>
   layout="vertical|horizontal|absolute"
   status=""
   title=""
   titleIcon="null"
  
   <strong>Styles</strong>
   borderAlpha="0.4"
   borderThicknessBottom="NaN"
   borderThicknessLeft="10"
   borderThicknessRight="10"
   borderThicknessTop="2"
   controlBarStyleName="null"
   cornerRadius="4"
   dropShadowEnabled="true|false"
   footerColors="null"
   headerColors="null"
   headerHeight="<i>Based on style of title</i>"
   highlightAlphas="[0.3,0]"
   horizontalAlign="left|center|right"
   horizontalGap="8"
   modalTransparency="0.5"
   modalTransparencyBlur="3"
   modalTransparencyColor="#DDDDDD"
   modalTransparencyDuration="100"
   paddingBottom="0"
   paddingTop="0"
   roundedBottomCorners="false|true"
   shadowDirection="center|left|right"
   shadowDistance="2"
   statusStyleName="windowStatus"
   titleBackgroundSkin="TitleBackground"
   titleStyleName="windowStyles"
   verticalAlign="top|middle|bottom"
   verticalGap="6"
  
   <strong>Effects</strong>
   resizeEndEffect="Dissolve"
   resizeStartEffect="Dissolve"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Panel&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur Halo Panel se compose d’une barre de titre, d’une légende, d’une bordure et d’une zone de contenu permettant d’accueillir ses enfants. Les conteneurs Panel sont généralement utilisés pour envelopper des modules d’application de niveau supérieur. Vous pouvez par exemple insérer un panier d’achats dans un conteneur Panel.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser le conteneur Spark Panel plutôt que le conteneur Halo Panel.</p>
 
  <p>Le conteneur Panel présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur est suffisamment importante pour contenir tous les enfants à leur hauteur par défaut, l’espace vertical entre les enfants, les marges supérieure et inférieure, les bordures supérieure et inférieure ainsi que la barre de titre. La largeur correspond soit à la somme de la largeur par défaut de l’enfant le plus large et des marges gauche et droite du conteneur, soit à la somme de la largeur du texte de titre et de la bordure, la somme la plus grande des deux étant prise en compte.</entry>
        </row><row>
           <entry>Marge</entry>
           <entry>4 pixels en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimplePanelExample.mxml"><swfblock conref="examples/SimplePanelExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.Panel.xml"><linktext>spark.components.Panel</linktext></link><link href="mx.containers.xml#ControlBar"><linktext>mx.containers.ControlBar</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Panel:protected:getHeaderHeight"><apiName>getHeaderHeight</apiName><shortdesc>
      Retourne la hauteur de l’en-tête.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Hauteur de l’en-tête, en pixels.     
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Retourne la hauteur de l’en-tête.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles minimale et maximale par défaut du conteneur Panel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles minimale et maximale par défaut du conteneur Panel. Pour plus d’informations sur la méthode <codeph>measure()</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
     
      <p>La méthode <codeph>measure()</codeph> appelle tout d’abord la méthode <codeph>VBox.measure()</codeph>, puis vérifie que les valeurs <codeph>measuredWidth</codeph> et <codeph>measuredMinWidth</codeph> sont suffisamment importantes pour permettre l’affichage du titre et du conteneur ControlBar.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Panel:protected:startDragging"><apiName>startDragging</apiName><shortdesc>
      Appelée lorsque l’utilisateur commence à faire glisser un conteneur Panel qui a été ouvert sous forme de fenêtre contextuelle par la classe PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Appelée lorsque l’utilisateur commence à faire glisser un conteneur Panel qui a été ouvert sous forme de fenêtre contextuelle par la classe PopUpManager.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Panel:protected:stopDragging"><apiName>stopDragging</apiName><shortdesc>
      Appelée lorsque l’utilisateur arrête de faire glisser un conteneur Panel qui a été ouvert sous forme de fenêtre contextuelle par la classe PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque l’utilisateur arrête de faire glisser un conteneur Panel qui a été ouvert sous forme de fenêtre contextuelle par la classe PopUpManager.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Panel:protected:controlBar"><apiName>controlBar</apiName><shortdesc>
      Référence à la barre des commandes de ce conteneur Panel, si celui-ci en possède une.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Référence à la barre des commandes de ce conteneur Panel, si celui-ci en possède une.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:statusTextField"><apiName>statusTextField</apiName><shortdesc>
      Sous-contrôle UITextField affichant l’état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Sous-contrôle UITextField affichant l’état. Le champ d’état est un enfant du sous-contrôle <codeph>titleBar</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:titleBar"><apiName>titleBar</apiName><shortdesc>
      Sous-contrôle TitleBar affichant la barre de titre du conteneur Panel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:UIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Sous-contrôle TitleBar affichant la barre de titre du conteneur Panel.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:protected:titleTextField"><apiName>titleTextField</apiName><shortdesc>
      Sous-contrôle UITextField affichant le titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Sous-contrôle UITextField affichant le titre. Le champ de titre est un enfant du sous-contrôle <codeph>titleBar</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#Panel/titleBar"><linktext>titleBar</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:protected:closeButtonStyleFilters:get"><apiName>closeButtonStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre entre le conteneur Panel et le bouton de fermeture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre entre le conteneur Panel et le bouton de fermeture.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.containers:Panel:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      Fabrique de modules fournissant le contexte des polices de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      Fabrique de modules fournissant le contexte des polices de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:layout:get"><apiName>layout</apiName><shortdesc>
      Spécifie le mécanisme de mise en forme utilisé par ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="layoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mécanisme de mise en forme utilisé par ce conteneur. Les conteneurs Panel peuvent utiliser un positionnement <codeph>"vertical"</codeph>, <codeph>"horizontal"</codeph> ou <codeph>"absolute"</codeph>. Le positionnement vertical place les composants enfant verticalement, du haut du conteneur vers le bas, dans l’ordre spécifié. Le positionnement horizontal place les composants enfant horizontalement, de la gauche du conteneur vers la droite, dans l’ordre spécifié. Le positionnement absolu ne réalise pas de mise en forme automatique et vous oblige à définir explicitement la position de chaque composant enfant. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:status:get"><apiName>status</apiName><shortdesc>
      Texte de la zone d’état de la barre de titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="statusChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte de la zone d’état de la barre de titre.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:titleIcon:get"><apiName>titleIcon</apiName><shortdesc>
      Icône affichée dans la barre de titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleIconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Icône affichée dans la barre de titre.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Panel:title:get"><apiName>title</apiName><shortdesc>
      Titre ou légende affiché dans la barre de titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3991
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="titleChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue><apiTipTexts><apiTipText>Obtient ou définit le titre ou la légende affiché dans la barre de titre
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Titre ou légende affiché dans la barre de titre.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Tile"><apiName>Tile</apiName><shortdesc>
  Un conteneur Halo Tile place ses enfants dans une grille de cellules de même taille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Tile" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Tile" replacement="spark.components.TileGroup" since="4.0">
<description>
  Les composants conteneur spécifiques à la présentation de Flex 3 ont été remplacés par un composant Group plus générique appliquant une présentation générique. Pour que le nouveau composant Group se comporte de manière similaire, définissez la propriété <codeph>layout</codeph> sur <codeph>TileLayout</codeph> ou utilisez le conteneur TileGroup.
 </description>
	</Alternative><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement.
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  Alignement vertical de chaque enfant à l’intérieur de sa cellule Tile. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. Si la valeur est <codeph>"top"</codeph>, le bord supérieur de chaque enfant est confondu avec le bord supérieur de sa cellule. Si la valeur est <codeph>"middle"</codeph>, chaque enfant est centré verticalement dans la cellule. Si la valeur est <codeph>"bottom"</codeph>, le bord inférieur de chaque enfant est confondu avec le bord inférieur de sa cellule.
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Tile" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, horizontalement.
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Tile" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal de chaque enfant à l’intérieur de sa cellule Tile. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. Si la valeur est <codeph>"left"</codeph>, le bord gauche de chaque enfant est confondu avec le bord gauche de sa cellule. Si la valeur est <codeph>"center"</codeph>, chaque enfant est centré horizontalement dans la cellule. Si la valeur est <codeph>"right"</codeph>, le bord droit de chaque enfant est confondu avec le bord droit de sa cellule.
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Tile&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Tile
    <b>Properties</b>
    direction="horizontal|vertical"
    tileHeight="NaN"
    tileWidth="NaN"
 
    <b>Sttles</b>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
      ...
      <i>child tags</i>
     ...
  &lt;/mx:Tile&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur Halo Tile place ses enfants dans une grille de cellules de même taille. Vous pouvez spécifier la taille des cellules à l’aide des propriétés <codeph>tileWidth</codeph> et <codeph>tileHeight</codeph>, ou laisser le conteneur Tile déterminer la taille des cellules, en fonction de l’enfant le plus grand. La propriété <codeph>direction</codeph> d’un conteneur Tile détermine si ses cellules sont mises en forme horizontalement ou verticalement, en commençant par l’angle supérieur gauche du conteneur Tile.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser les conteneurs Spark avec la classe TileLayout plutôt que le conteneur Halo Tile.</p>
 
  <p>Un conteneur Tile présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Direction</entry>
           <entry>Horizontale.</entry>
        </row><row>
           <entry>Taille par défaut de toutes les cellules</entry>
           <entry>Hauteur par défaut ou explicite de l’élément le plus grand. Largeur par défaut ou explicite de l’élément le plus large. Toutes les cellules ont la même taille par défaut.</entry>
        </row><row>
           <entry>Taille par défaut du conteneur Tile</entry>
           <entry>Flex calcule la racine carrée du nombre d’enfants et arrondit la valeur à l’entier le plus proche. Par exemple, s’il y a 26 enfants, la racine carrée est 5,1 et la valeur est alors arrondie à 6. Flex met ensuite en forme le conteneur Tile en utilisant une grille composée de six lignes et six colonnes. La hauteur par défaut du conteneur Tile est égale au produit (hauteur par défaut des cellules Tile) <b>x</b> (arrondi de la racine carrée du nombre d’enfants), auquel viennent s’ajouter les éventuels espaces entre les enfants et les marges. La largeur par défaut est égale au produit (largeur par défaut des cellules Tile) <b>x</b> (arrondi de la racine carrée du nombre d’enfants), auquel viennent s’ajouter les éventuels espaces entre les enfants et les marges.</entry>
        </row><row>
           <entry>Taille minimale du conteneur Tile</entry>
           <entry>Taille par défaut d’une cellule. Flex attribue suffisamment d’espace pour afficher au moins une cellule.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileLayoutExample.mxml"><swfblock conref="examples/TileLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link></related-links><apiConstructor id="mx.containers:Tile:Tile"><apiName>Tile</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Tile:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles minimale et maximale par défaut du conteneur Tile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles minimale et maximale par défaut du conteneur Tile. Pour plus d’informations sur la méthode <codeph>measure()</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
      
      <p>Cette méthode commence par calculer la taille de chaque cellule Tile. Pour comprendre comment la taille des cellules est déterminée, voir les propriétés <codeph>tileWidth</codeph> et <codeph>tileHeight</codeph>.</p>
      
     <p>La taille mesurée d’un conteneur Tile contenant des enfants est suffisante pour afficher les cellules dans une grille N par N contenant autant de lignes que de colonnes, ainsi que les marges et les bordures du conteneur Tile. Il existe cependant des cas particuliers, comme dans les exemples suivants :</p>
     
      <ul>
      <li>Si une largeur explicite est définie pour un conteneur Tile horizontal, cette valeur détermine le nombre horizontal de cellules. En outre, la hauteur requise pour contenir tous les enfants est calculée, afin d’obtenir une grille M par N.</li>
     
      <li>Si une hauteur explicite est définie pour un conteneur Tile vertical, cette valeur détermine le nombre vertical de cellules. En outre, la hauteur requise pour contenir tous les enfants est calculée, afin d’obtenir une grille N par M.</li>
      </ul>
     
      <p>En l’absence d’enfant, la taille mesurée correspond à la taille la plus petite permettant de contenir les marges et les bordures.</p>
      
      <p>La taille minimale mesurée d’un conteneur Tile contenant des enfants correspond à la taille la plus petite permettant de contenir une cellule Tile, les marges et les bordures. En l’absence d’enfant, la taille mesurée minimale correspond à la taille la plus petite permettant de contenir les marges et les bordures.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:Tile:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Définit la position et la taille des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la position et la taille des enfants de ce conteneur. Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.
      
      <p>Cette méthode place les enfants dans une grille de type damier contenant des cellules de même taille, au sein de la zone de contenu du conteneur Tile (zone située entre les marges). Pour comprendre comment la taille des cellules est déterminée, voir les propriétés <codeph>tileWidth</codeph> et <codeph>tileHeight</codeph>.</p>
      
      <p>La séparation entre les cellules est déterminée par les styles <codeph>horizontalGap</codeph> et <codeph>verticalGap</codeph>. La position de chaque enfant au sein de sa cellule est déterminée par les styles <codeph>horizontalAlign</codeph> et <codeph>verticalAlign</codeph>.</p>
      
      <p>L’enchaînement des enfants est déterminé par la propriété <codeph>direction</codeph>. La première cellule est toujours placée dans le coin supérieur gauche de la zone de contenu. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"horizontal"</codeph>, les cellules sont placées de gauche à droite dans la ligne qui se trouve le plus en haut, puis de gauche à droite dans la deuxième ligne, et ainsi de suite. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"vertical"</codeph>, les cellules sont placées de haut en bas dans la colonne qui se trouve le plus à gauche, puis de haut en bas dans la deuxième colonne, et ainsi de suite.</p>
      
      <p>Si une valeur <codeph>percentWidth</codeph> ou <codeph>percentHeight</codeph> est définie pour un enfant, celui-ci est redimensionné dans cette direction pour occuper le pourcentage spécifié de sa cellule Tile.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:Tile:direction:get"><apiName>direction</apiName><shortdesc>
      Détermine la manière dont les enfants sont placés dans le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine la manière dont les enfants sont placés dans le conteneur. Valeurs MXML possibles : <codeph>"horizontal"</codeph> et <codeph>"vertical"</codeph>. En langage ActionScript, vous pouvez définir la direction à l’aide des valeurs TileDirection.HORIZONTAL ou TileDirection.VERTICAL. La valeur par défaut est <codeph>"horizontal"</codeph> (si le conteneur est un conteneur Legend, qui est une sous-classe de Tile, la valeur par défaut est <codeph>"vertical"</codeph>).
     
      <p>Le premier enfant est toujours placé dans le coin supérieur gauche du conteneur Tile. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"horizontal"</codeph>, les enfants sont placés de gauche à droite dans la ligne qui se trouve le plus en haut, puis de gauche à droite dans la deuxième ligne, et ainsi de suite. Si la valeur de la propriété direction est <codeph>"vertical"</codeph>, les enfants sont placés de haut en bas dans la colonne qui se trouve le plus à gauche, puis de haut en bas dans la deuxième colonne, et ainsi de suite.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#TileDirection"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:Tile:tileHeight:get"><apiName>tileHeight</apiName><shortdesc>
      Hauteur de chaque cellule Tile, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur de chaque cellule Tile, en pixels. Si la valeur de cette propriété est <codeph>NaN</codeph> (valeur par défaut), la hauteur de chaque cellule dépend de la hauteur de l’enfant le plus grand. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:Tile:tileWidth:get"><apiName>tileWidth</apiName><shortdesc>
      Largeur de chaque cellule Tile, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur de chaque cellule Tile, en pixels. Si la valeur de cette propriété est <codeph>NaN</codeph> (valeur par défaut), la largeur de chaque cellule dépend de la largeur de l’enfant le plus large. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
  Le conteneur VDividedBox place ses enfants verticalement, de la même manière qu’un conteneur VBox, mais un séparateur déplaçable est inséré entre les enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="direction"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VDividedBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>direction</code>, and adds 
  no new tag attributes.</p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:DividedBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur VDividedBox place ses enfants verticalement, de la même manière qu’un conteneur VBox, mais un séparateur déplaçable est inséré entre les enfants. Les utilisateurs peuvent faire glisser le séparateur pour redimensionner la zone allouée à chaque enfant. La balise <codeph>&lt;mx:VDividedBox/></codeph> est identique à <codeph>&lt;mx:DividedBox direction="vertical"/></codeph>.
  
  <p>Un conteneur VDividedBox présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur est suffisante pour contenir tous les enfants à leur hauteur par défaut ou explicite, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond à somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite du conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row><row>
           <entry>Espace par défaut</entry>
           <entry>10 pixels pour les espaces horizontal et vertical.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VDividedBoxExample.mxml"><swfblock conref="examples/VDividedBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link><link href="mx.containers.xml#HDividedBox"><linktext>mx.containers.HDividedBox</linktext></link></related-links><apiConstructor id="mx.containers:VDividedBox:VDividedBox"><apiName>VDividedBox</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.containers:BoxDirection"><apiName>BoxDirection</apiName><shortdesc>
  La classe BoxDirection définit les valeurs de constante de la propriété direction du conteneur Box.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe BoxDirection définit les valeurs de constante de la propriété <codeph>direction</codeph> du conteneur Box.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Box"><linktext>mx.containers.Box</linktext></link></related-links><apiValue id="mx.containers:BoxDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Indique que les enfants du conteneur Box doivent être placés horizontalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que les enfants du conteneur Box doivent être placés horizontalement.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:BoxDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Indique que les enfants du conteneur Box doivent être placés verticalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que les enfants du conteneur Box doivent être placés verticalement.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Form"><apiName>Form</apiName><shortdesc>
  Le conteneur Form permet de définir la mise en forme d’un formulaire, de marquer des champs de formulaire comme étant obligatoires ou facultatifs, de traiter les messages d’erreur et de lier vos données de formulaire au modèle de données Flex, afin de vérifier et de valider les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur de sa zone de contenu. La valeur par défaut est 16.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur de sa zone de contenu. La valeur par défaut est 16.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Largeur des libellés de formulaire. La valeur par défaut correspond à la longueur du libellé le plus long du formulaire.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre le libellé et les composants enfant. La valeur par défaut est 14.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Form" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Form
    <strong>Styles</strong>
    horizontalGap="8"
    indicatorGap="14"
    labelWidth="<i>Calculated</i>"
    paddingBottom="16"
    paddingTop="16"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Form permet de définir la mise en forme d’un formulaire, de marquer des champs de formulaire comme étant obligatoires ou facultatifs, de traiter les messages d’erreur et de lier vos données de formulaire au modèle de données Flex, afin de vérifier et de valider les données. Il vous permet également d’utiliser des feuilles de style pour configurer l’apparence de vos formulaires.
 
  <p>Le tableau ci-dessous décrit les composants à utiliser pour créer des formulaires dans Flex :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="3"><thead><row><entry>Composant</entry><entry>Balise</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;mx:Form></codeph></entry>
           <entry>Définit le conteneur du formulaire dans son ensemble, y compris la mise en forme globale du formulaire. Utilisez le contrôle FormHeading et le conteneur FormItem pour définir le contenu. Vous pouvez également insérer d’autres types de composants dans un conteneur Form.</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;mx:FormHeading></codeph></entry>
           <entry>Définit un titre dans votre formulaire. Vous pouvez insérer plusieurs contrôles FormHeading dans un même conteneur Form.</entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;mx:FormItem></codeph></entry>
           <entry>Contient un ou plusieurs enfants de formulaire, disposés horizontalement ou verticalement. Les enfants peuvent être des contrôles ou d’autres conteneurs. Un même conteneur Form peut contenir plusieurs conteneurs FormItem.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.containers:Form:Form"><apiName>Form</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Form:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur Form. Pour plus d’informations sur la méthode <codeph>measure</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
      <p>La méthode <codeph>Form.measure()</codeph> définit la propriété <codeph>measuredWidth</codeph> de sorte qu’elle corresponde à la somme de la largeur de l’enfant le plus large, des valeurs des propriétés de style <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> et de la largeur de la bordure.</p>
     
      <p>La valeur de la propriété <codeph>measuredHeight</codeph> correspond à la somme des valeurs <codeph>measuredHeight</codeph> de tous les enfants et des espaces <codeph>verticalGap</codeph> entre chaque enfant. Les valeurs des propriétés de style <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> et la hauteur de la bordure sont également ajoutées.</p>
     
      <p>La valeur de la propriété <codeph>measuredMinWidth</codeph> correspond à la largeur minimale la plus grande des enfants. Si une valeur en pourcentage est définie pour la propriété <codeph>width</codeph> de l’enfant, la propriété <codeph>minWidth</codeph> est utilisée. Dans le cas contraire, la propriété <codeph>measuredWidth</codeph> est utilisée. Les valeurs des propriétés de style <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> et la largeur de la bordure sont également ajoutées.</p>
     
      <p>La valeur de la propriété <codeph>measuredMinHeight</codeph> correspond à la valeur de la propriété <codeph>measuredHeight</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Form:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur. Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>. 
     
      <p>La méthode <codeph>Form.updateDisplayList()</codeph> place les enfants dans une colonne verticale, en les séparant par un espace correspondant à la valeur de la propriété de style <codeph>verticalGap</codeph>. Les propriétés de style <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> sont appliquées.</p>
     
      <p>Si la largeur d’un enfant est définie en pourcentage, il est élargi horizontalement de sorte qu’il corresponde au pourcentage spécifié pour le conteneur Form. Dans le cas contraire, sa largeur correspond à la valeur de la propriété <codeph>measuredWidth</codeph>. La hauteur de chaque enfant correspond à la valeur de sa propriété <codeph>measuredHeight</codeph>.</p>
     
      <p>Cette méthode appelle la méthode <codeph>super.updateDisplayList()</codeph> avant toute autre opération.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Form:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
      Largeur maximale des libellés des conteneurs FormItem de ce conteneur Form, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="updateComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur maximale des libellés des conteneurs FormItem de ce conteneur Form, en pixels.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:ViewStack"><apiName>ViewStack</apiName><shortdesc>
  Un conteneur de navigateur MX ViewStack se compose d’une collection de conteneurs enfant empilés les uns sur les autres, mais un seul d’entre eux est visible à la fois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="autoLayout"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:ViewStack" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ViewStack&gt;</code> tag inherits the
  tag attributes of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ViewStack
    <b>Properties</b>
    historyManagementEnabled="false|true"
    resizeToContent="false|true"
    selectedIndex="0"
    
    <b>Styles</b>
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalGap="6"
    
    <b>Events</b>
    change="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:ViewStack&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IHistoryManagerClient</apiBaseInterface><apiBaseInterface>mx.core:ISelectableList</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur de navigateur MX ViewStack se compose d’une collection de conteneurs enfant empilés les uns sur les autres, mais un seul d’entre eux est visible à la fois. Lorsqu’un autre conteneur enfant est sélectionné, il semble remplacer l’ancien conteneur, car il s’affiche au même endroit. Cependant, l’ancien conteneur existe toujours : il est simplement devenu invisible.
 
  <p><b>Remarque :</b> les enfants directs d’un conteneur de navigateur MX doivent être des conteneurs MX (de présentation MX ou navigateur MX) ou le conteneur Spark NavigatorContent. Vous ne pouvez pas imbriquer directement un contrôle ou un conteneur Spark autre que le conteneur NavigatorContent dans un navigateur. Ils doivent être les enfants d’un conteneur MX enfant. </p>
 
  <p>Un conteneur ViewStack ne fournit pas d’interface utilisateur permettant de sélectionner le conteneur enfant actuellement visible. En général, vous définissez la propriété <codeph>selectedIndex</codeph> ou <codeph>selectedChild</codeph> en langage ActionScript en réponse à une action de l’utilisateur. Vous pouvez également associer un contrôle MX LinkBar, TabBar, ButtonBar, ToggleButtonBar ou Spark ButtonBar à un conteneur ViewStack pour fournir une interface de navigation. Pour ce faire, spécifiez le conteneur ViewStack comme valeur de la propriété <codeph>dataProvider</codeph> du conteneur LinkBar, TabBar ou ToggleButtonBar.</p>
 
  <p>Vous pouvez décider d’utiliser un conteneur de navigateur plus complexe que le conteneur ViewStack, par exemple un conteneur TabNavigator ou Accordion. Outre le fait qu’ils contiennent une collection de conteneurs enfant, ces conteneurs fournissent leurs propres contrôles d’interface utilisateur permettant d’accéder à leurs différents enfants.</p>
 
  <p>Lorsque le conteneur enfant actuellement visible change, vous pouvez utiliser la propriété <codeph>hideEffect</codeph> du conteneur masqué et la propriété <codeph>showEffect</codeph> du conteneur enfant devenu visible pour appliquer un effet aux conteneurs enfant. Le conteneur ViewStack attend que l’effet <codeph>hideEffect</codeph> du conteneur enfant masqué soit terminé avant de faire apparaître le nouveau conteneur enfant. Vous pouvez interrompre un effet en cours en modifiant la propriété <codeph>selectedIndex</codeph> du conteneur ViewStack pendant la lecture d’un effet.</p>
 
  <p>Le conteneur ViewStack présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur de l’enfant initialement actif.</entry>
        </row><row>
           <entry>Règles de redimensionnement de conteneur</entry>
           <entry>Par défaut, la taille des conteneurs ViewStack est déterminée une seule fois, en fonction de la taille du premier conteneur enfant. Ils ne sont pas redimensionnés lorsque vous accédez à d’autres conteneurs enfant. Pour forcer un redimensionnement des conteneurs ViewStack lorsque vous accédez à un autre conteneur enfant, définissez la propriété resizeToContent sur true.</entry>
        </row><row>
           <entry>Règles de définition de la taille des enfants</entry>
           <entry>La taille des enfants est définie sur leur taille par défaut. Si l’enfant est plus grand que le conteneur ViewStack, il est écrêté. Si l’enfant est plus petit que le conteneur ViewStack, il est placé dans l’angle supérieur gauche de ce conteneur.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ViewStackExample.mxml"><swfblock conref="examples/ViewStackExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="" invalidHref="spark.components.ButtonBar.xml"><linktext>spark.components.ButtonBar</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><adobeApiEvent id="mx.containers:ViewStack_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le conteneur enfant sélectionné change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le conteneur enfant sélectionné change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.containers:ViewStack:ViewStack"><apiName>ViewStack</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:ViewStack:protected:commitSelectedIndex"><apiName>commitSelectedIndex</apiName><shortdesc>
      Valide l’index sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Valide l’index sélectionné. Cette fonction est appelée au cours de la phase de validation des propriétés lorsque la propriété selectedIndex (ou selectedItem) a changé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:loadState"><apiName>loadState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Etat de l’objet à charger. La valeur est null lors du chargement de l’état initial de l’application.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#loadState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale du conteneur ViewStack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale du conteneur ViewStack. Pour plus d’informations sur la méthode <codeph>measure()</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
     
      <p>La taille par défaut d’un conteneur ViewStack correspond à la taille par défaut de son enfant actuellement sélectionné, à laquelle viennent s’ajouter les marges et les bordures. Si le conteneur ViewStack ne contient pas d’enfant, sa taille par défaut correspond à la taille la plus petite permettant de contenir les marges et les bordures.</p>
     
      <p>La taille minimale d’un conteneur ViewStack correspond à la taille minimale de son enfant actuellement sélectionné, à laquelle viennent s’ajouter les marges et les bordures. Si le conteneur ViewStack ne contient pas d’enfant, sa taille minimale correspond à la taille la plus petite permettant de contenir les marges et les bordures.</p>
     
      <p>Cette méthode ne modifie pas la taille maximale d’un conteneur ViewStack : celle-ci reste illimitée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.containers:ViewStack:saveState"><apiName>saveState</apiName><shortdesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Etat de cet objet.
	  
	  </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.managers.IHistoryManagerClient#saveState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:ViewStack:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur. Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.
     
      <p>Un seul des enfants est visible à la fois. Par conséquent, un conteneur ViewStack définit uniquement la taille et la position de cet enfant.</p>
     
      <p>L’enfant sélectionné est placé dans l’angle supérieur gauche du conteneur ViewStack, de façon à ce que les marges et les bordures du conteneur puissent être affichées. </p>
     
      <p>Si une valeur <codeph>width</codeph> ou <codeph>height</codeph> est définie en pourcentage pour un enfant, celui-ci est redimensionné dans cette direction pour occuper le pourcentage spécifié de la zone de contenu du conteneur ViewStack (c’est-à-dire la zone qui se trouve entre les marges).</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.containers:ViewStack:protected:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Hauteur de la zone dans laquelle le contenu est affiché, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur de la zone dans laquelle le contenu est affiché, en pixels. Vous pouvez remplacer cet accesseur de lecture si votre contenu n’occupe pas l’intégralité de la zone du conteneur ViewStack.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Largeur de la zone dans laquelle le contenu est affiché, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur de la zone dans laquelle le contenu est affiché, en pixels. Vous pouvez remplacer cet accesseur de lecture si votre contenu n’occupe pas l’intégralité de la zone du conteneur ViewStack.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentX:get"><apiName>contentX</apiName><shortdesc>
      Coordonnée x de la zone du conteneur ViewStack dans laquelle s’affiche le contenu, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée x de la zone du conteneur ViewStack dans laquelle s’affiche le contenu, en pixels. La valeur par défaut est égale à la valeur de la propriété de style <codeph>paddingLeft</codeph>, dont la valeur par défaut est 0. Remplacez la méthode <codeph>get()</codeph> si vous ne souhaitez pas que la mise en forme du contenu commence à la coordonnée x = 0.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:protected:contentY:get"><apiName>contentY</apiName><shortdesc>
      Coordonnée y de la zone du conteneur ViewStack dans laquelle s’affiche le contenu, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la zone du conteneur ViewStack dans laquelle s’affiche le contenu, en pixels. La valeur par défaut est égale à la valeur de la propriété de style <codeph>paddingTop</codeph>, dont la valeur par défaut est 0. Remplacez la méthode <codeph>get()</codeph> si vous ne souhaitez pas que la mise en forme du contenu commence à la coordonnée y = 0.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:historyManagementEnabled:get"><apiName>historyManagementEnabled</apiName><shortdesc>
      Si la valeur est true, la gestion d’historique est activée dans ce conteneur ViewStack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la gestion d’historique est activée dans ce conteneur ViewStack. Lorsque l’utilisateur accède aux différents enfants, le navigateur mémorise les enfants visités. L’utilisateur peut cliquer ensuite sur les boutons Précédent et Suivant pour parcourir l’historique de navigation.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links></apiValue><apiValue id="mx.containers:ViewStack:resizeToContent:get"><apiName>resizeToContent</apiName><shortdesc>
      Si la valeur est true, le conteneur ViewStack est redimensionné automatiquement, en fonction de la taille de son enfant actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, le conteneur ViewStack est redimensionné automatiquement, en fonction de la taille de son enfant actuel.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedChild:get"><apiName>selectedChild</apiName><shortdesc>
      Référence au conteneur enfant actuellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:INavigatorContent</apiValueClassifier></apiValueDef><apiDesc>
      Référence au conteneur enfant actuellement visible. La valeur par défaut est une référence au premier enfant. En l’absence d’enfant, la valeur de cette propriété est <codeph>null</codeph>.
     
      <p><b>Remarque :</b> vous pouvez définir cette propriété uniquement dans une instruction ActionScript, pas dans du code MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:ViewStack:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de base zéro du conteneur de l’enfant actuellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="creationComplete"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de base zéro du conteneur de l’enfant actuellement visible. Les index des enfants utilisent la plage de valeurs 0, 1, 2, ..., n - 1, où <i>n</i> correspond au nombre d’enfants. La valeur par défaut est 0, ce qui correspond au premier enfant. En l’absence d’enfant, la valeur de cette propriété est <codeph>-1</codeph>.
     
      <p><b>Remarque :</b> lorsque vous ajoutez un nouvel enfant à un conteneur ViewStack, la propriété <codeph>selectedIndex</codeph> est ajustée automatiquement si cela est nécessaire, de sorte que l’enfant sélectionné reste sélectionné.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:GridRow"><apiName>GridRow</apiName><shortdesc>
  Le conteneur GridRow définit une ligne dans un conteneur Grid et contient des conteneurs GridCell.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="moveEffect"/><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="verticalGap"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="horizontalGap"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="scroll"/><Exclude kind="event" name="move"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="method" name="setFocus"/><Exclude kind="method" name="isOurFocus"/><Exclude kind="method" name="getFocus"/><Exclude kind="method" name="adjustFocusRect"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusManager"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="property" name="direction"/><Exclude kind="property" name="clipContent"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  Alignement vertical des enfants du conteneur. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. La valeur par défaut est <codeph>"top"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:GridRow" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal des enfants du conteneur. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. La valeur par défaut est <codeph>"left"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:GridRow&gt;</code> must be a child of the 
  <code>&lt;mx:Grid&gt;</code> tag, and has one or more child 
  <code>&lt;mx:GridItem&gt;</code> tags that define the grid cells.</p>
 
  <p>The <code>&lt;mx:GridRow&gt;</code> container inherits the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Grid&gt;
    &lt;mx:GridRow
    <strong>Styles</strong>
      horizontalAlign="left|center|right"
      verticalAlign="top|middle|bottom"
    &gt;
      &lt;mx:GridItem
        <i>child components</i>
      &lt;/mx:GridItem&gt;
      ...
    &lt;/mx:GridRow&gt;
    ...
  &lt;/mx:Grid&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:HBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur GridRow définit une ligne dans un conteneur Grid et contient des conteneurs GridCell.
 
  <p>Les conteneurs GridRow présentent les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Hauteur de chaque ligne et de chaque cellule</entry>
           <entry>Hauteur par défaut ou explicite de l’élément le plus grand de la ligne. Si un conteneur GridItem n’a pas de taille explicite, sa hauteur par défaut correspond à la hauteur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Largeur de chaque colonne et de chaque cellule</entry>
           <entry>Largeur par défaut ou explicite de l’élément le plus large de la colonne. Si un conteneur GridItem n’a pas de largeur explicite, sa largeur par défaut correspond à la largeur par défaut ou explicite de l’enfant présent dans la cellule.</entry>
        </row><row>
           <entry>Espace entre les lignes et les colonnes</entry>
           <entry>Déterminé par les propriétés horizontalGap et verticalGap de la classe Grid. La valeur par défaut des deux espaces est de 6 pixels.</entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite, pour les trois classes de conteneur.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="GridLayoutExample.mxml"><swfblock conref="examples/GridLayoutExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Grid"><linktext>mx.containers.Grid</linktext></link><link href="mx.containers.xml#GridItem"><linktext>mx.containers.GridItem</linktext></link></related-links><apiConstructor id="mx.containers:GridRow:GridRow"><apiName>GridRow</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:GridRow:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Définit la taille et la position de chaque enfant du conteneur GridRow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la taille et la position de chaque enfant du conteneur GridRow. Pour plus d’informations sur l’algorithme de mise en forme Grid, voir la méthode <xref href="Grid.html#updateDisplayList()">Grid.updateDisplayList()</xref>.
     
      <p>Vous ne devez pas appeler cette méthode directement. La classe LayoutManager de Flex l’appelle lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex appelle la méthode <codeph>updateDisplayList()</codeph> sur chaque composant, en commençant par la racine et en progressant vers le bas.</p>
     
      <p>Il s’agit d’une méthode avancée à utiliser avec des sous-classes. Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.updateDisplayList()</codeph> et appeler les méthodes <codeph>move()</codeph> et <codeph>setActualSize()</codeph> sur chaque enfant. Pour les besoins de la mise en forme, vous devez obtenir la taille de ce conteneur à partir des propriétés <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph>, et non à partir des propriétés <codeph>width</codeph> et <codeph>height</codeph>. Les propriétés <codeph>width</codeph> et <codeph>height</codeph> ne prennent pas en compte la valeur des propriétés <codeph>scaleX</codeph> et <codeph>scaleY</codeph> de ce conteneur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.containers:FormItem"><apiName>FormItem</apiName><shortdesc>
  Le conteneur FormItem définit un libellé et un ou plusieurs enfants, disposés horizontalement ou verticalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur de sa zone de contenu.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du conteneur et le bord droit de sa zone de contenu.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur de sa zone de contenu.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="labelWidth" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Largeur des libellés de formulaire. La valeur par défaut correspond à la longueur du libellé le plus long du formulaire.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelStyleName" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS à utiliser pour les styles du libellé du conteneur FormItem. Par défaut, le libellé utilise les styles dont le conteneur FormItem peut hériter ou les styles déclarés par la classe FormItemLabel. Ce style doit être utilisé à la place de la classe FormItemLabel.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indicatorSkin" owner="mx.containers:FormItem" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’habillage à utiliser pour l’indicateur de champ obligatoire. La valeur par défaut est le symbole « mx.containers.FormItem.Required » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="indicatorGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre le libellé et les composants enfant de l’élément de formulaire.
 
  </description>
<default>14
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:FormItem" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal des enfants du conteneur. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:FormItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FormItem&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except <code>paddingLeft</code>,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FormItem
    <strong>Properties</strong>
    direction="vertical|horizontal"
    label=""
    required="false|true"
  
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    indicatorGap="14"
    indicatorSkin="<i>'mx.containers.FormItem.Required' symbol in Assets.swf</i>"
    labelStyleName=""
    labelWidth="<i>Calculated</i>"
    paddingBottom="0"
    paddingRight="0"
    paddingTop="0"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:FormItem&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur FormItem définit un libellé et un ou plusieurs enfants, disposés horizontalement ou verticalement. Les enfants peuvent être des contrôles ou d’autres conteneurs. Un même conteneur Form peut contenir plusieurs conteneurs FormItem.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#Form"><linktext>mx.containers.Form</linktext></link><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link><link href="mx.containers.xml#FormHeading"><linktext>mx.containers.FormHeading</linktext></link><link href="mx.controls.xml#FormItemLabel"><linktext>mx.controls.FormItemLabel</linktext></link></related-links><apiConstructor id="mx.containers:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:FormItem:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles recommandée, minimale et maximale du conteneur FormItem. Pour plus d’informations sur la méthode <codeph>measure()</codeph>, voir la méthode <codeph>UIComponent.measure()</codeph>.
     
      <p>La méthode <codeph>FormItem.measure()</codeph> commence par déterminer le nombre de colonnes à utiliser. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>FormItemDirection.HORIZONTAL</codeph>, tous les contrôles sont placés dans une même ligne, si cela est possible. S’il est impossible de placer les contrôles dans une seule ligne, ils sont répartis sur deux colonnes. Si cela ne fonctionne pas, utilisez une seule colonne. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>FormItemDirection.VERTICAL</codeph>, les contrôles sont placés dans une même colonne (comme avec le conteneur <codeph>VBox</codeph>).</p>
     
      <p>Un conteneur FormItem contient deux zones : la zone de libellé et la zone des contrôles. La taille du libellé est toujours la même, quelle que soit la direction des contrôles. La taille de la zone des contrôles dépend du nombre de lignes et de colonnes utilisées.</p>
     
      <p>La largeur du libellé dépend de la propriété de style <codeph>labelWidth</codeph>. Si la valeur de cette propriété est <codeph>undefined</codeph> (valeur par défaut), la largeur du libellé le plus grand du conteneur Form parent est utilisée.</p>
     
      <p>Si tous les éléments se trouvent sur une même ligne, la largeur de la zone des contrôles correspond à la somme des largeurs de tous les enfants et des espaces <codeph>horizontalGap</codeph> qui les séparent.</p>
     
      <p>Si tous les éléments se trouvent sur une même colonne, la largeur de la zone des contrôles correspond à la largeur de l’enfant le plus large.</p>
     
      <p>Si les enfants sont placés dans plusieurs lignes et plusieurs colonnes, la largeur de colonne correspond à la largeur de l’élément le plus large et la largeur de la zone des contrôles correspond au produit de la largeur de colonne et du nombre de colonnes, auquel s’ajoute l’espace <codeph>horizontalGap</codeph> séparant chaque colonne.</p>
     
      <p>La propriété <codeph>measuredWidth</codeph> correspond à la somme de la largeur de la zone de libellé, de la largeur de la zone des contrôles et de la valeur de la propriété de style <codeph>indicatorGap</codeph>. Les valeurs des propriétés de style <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> et la largeur de la bordure sont également ajoutées.</p>
     
      <p>La valeur de la propriété <codeph>measuredHeight</codeph> correspond à la somme des hauteurs recommandées de toutes les lignes des enfants et de l’espace <codeph>verticalGap</codeph> séparant chaque enfant. Les valeurs des propriétés de style <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> et la hauteur de la bordure sont également ajoutées.</p>
     
      <p>La propriété <codeph>measuredMinWidth</codeph> correspond à la somme de la largeur de la zone de libellé, de la largeur minimale de la zone des contrôles et de la valeur de la propriété de style <codeph>indicatorGap</codeph>. Les valeurs des propriétés de style <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> et la largeur de la bordure sont également ajoutées.</p>
     
      <p>La valeur de la propriété <codeph>measuredMinHeight</codeph> correspond à la somme des hauteurs minimales de toutes les lignes des enfants et de l’espace <codeph>verticalGap</codeph> séparant chaque enfant. Les valeurs des propriétés de style <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> et la hauteur de la bordure sont également ajoutées.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:FormItem:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réagit aux changements de taille en définissant la taille et la position des enfants de ce conteneur. Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.
     
      <p>Pour plus d’informations sur la manière dont sont placés les contrôles FormItem, voir la méthode <codeph>FormItem.measure()</codeph>.</p>
     
      <p>Le libellé est aligné dans la zone de libellé en fonction de la propriété de style <codeph>textAlign</codeph>. Tous les libellés d’un formulaire sont alignés les uns avec les autres.</p>
     
      <p>Si la valeur de la propriété <codeph>required</codeph> est <codeph>true</codeph>, un symbole indiquant que le champ est obligatoire est placé entre le libellé et les contrôles.</p>
     
      <p>Les contrôles sont placés dans des colonnes, comme expliqué dans la documentation de la méthode <codeph>measure()</codeph>. La propriété de style <codeph>horizontalAlign</codeph> définit où sont placés les contrôles dans le sens horizontal.</p>
     
      <p>Lorsque la valeur de la propriété <codeph>direction</codeph> est <codeph>"vertical"</codeph>, tous les enfants pour lesquels aucune valeur <codeph>width</codeph> n’est spécifiée utilisent la valeur <codeph>measuredWidth</codeph>, arrondie au quart le plus proche de la largeur de la zone des contrôles. Cela évite d’obtenir des bords de contrôles irréguliers.</p>
     
      <p>Cette méthode appelle la méthode <codeph>super.updateDisplayList()</codeph> avant toute autre opération.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:FormItem:direction:get"><apiName>direction</apiName><shortdesc>
      Direction des sous-composants du conteneur FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FormItemDirection.VERTICAL
      </apiDefaultValue></apiValueDef><apiDesc>
      Direction des sous-composants du conteneur FormItem. Valeurs MXML possibles : <codeph>"vertical"</codeph> ou <codeph>"horizontal"</codeph>. La valeur par défaut est <codeph>"vertical"</codeph>. Valeurs ActionScript possibles : <codeph>FormItemDirection.VERTICAL</codeph> ou <codeph>FormItemDirection.HORIZONTAL</codeph>.
     
      <p>Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"vertical"</codeph>, les enfants du conteneur FormItem sont empilés verticalement à droite du libellé FormItem. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"horizontal"</codeph>, les enfants sont placés dans une même ligne (si possible) ou dans deux colonnes de même taille.</p>
     
      <p>Si vous souhaitez contrôler de manière plus précise la mise en forme des enfants FormItem, vous pouvez utiliser un conteneur tel que Grid ou Tile comme enfant direct du conteneur FormItem, afin d’y placer les contrôles souhaités.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#FormItemDirection"><linktext>mx.containers.FormItemDirection</linktext></link></related-links></apiValue><apiValue id="mx.containers:FormItem:itemLabel:get"><apiName>itemLabel</apiName><shortdesc>
      Référence en lecture seule au sous-composant FormItemLabel affichant le libellé du conteneur FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls:Label</apiValueClassifier></apiValueDef><apiDesc>
      Référence en lecture seule au sous-composant FormItemLabel affichant le libellé du conteneur FormItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:label:get"><apiName>label</apiName><shortdesc>
      Libellé de texte du conteneur FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Libellé de texte du conteneur FormItem. Ce libellé s’affiche à gauche des composants enfant de l’élément de formulaire. La position du libellé dépend de la propriété de style <codeph>textAlign</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.containers:FormItem:required:get"><apiName>required</apiName><shortdesc>
      Si la valeur est true, un indicateur est affiché pour indiquer que l’utilisateur doit saisir une information dans l’enfant FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, un indicateur est affiché pour indiquer que l’utilisateur doit saisir une information dans l’enfant FormItem. Si la valeur est <codeph>false</codeph>, aucun indicateur ne s’affiche.
     
      <p>Cette propriété contrôle uniquement l’affichage de l’indicateur. Vous devez joindre un validateur aux enfants si vous souhaitez que la saisie soit validée.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.containers:Box"><apiName>Box</apiName><shortdesc>
  Un conteneur Halo Box place ses enfants dans une seule colonne verticale ou dans une seule ligne horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Alternative owner="mx.containers:Box" replacement="spark.components.BorderContainer" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.VGroup" since="4.0">
	</Alternative><Alternative owner="mx.containers:Box" replacement="spark.components.HGroup" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du conteneur et le haut de sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du conteneur et le bas de sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.containers:Box" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  Alignement vertical des enfants du conteneur. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. La valeur par défaut est <codeph>"top"</codeph>, mais certains conteneurs, dont ButtonBar, ControlBar, LinkBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.containers:Box" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal des enfants du conteneur. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. La valeur par défaut est <codeph>"left"</codeph>, mais certains conteneurs, dont ButtonBar et ToggleButtonBar, ont des valeurs par défaut différentes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Box&gt;</code> tag inherits all of the tag 
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <p>
  <pre>
  &lt;mx:Box
    <strong>Properties</strong>
    direction="vertical|horizontal"
    <strong>Styles</strong>
    horizontalAlign="left|center|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|middle|bottom"
    verticalGap="6"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:Box&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un conteneur Halo Box place ses enfants dans une seule colonne verticale ou dans une seule ligne horizontale. La propriété <codeph>direction</codeph> définit si la mise en forme doit être verticale (par défaut) ou horizontale.
 
  <p><b>Remarque :</b> lorsque cela est possible, Adobe vous recommande d’utiliser les conteneurs Spark avec la classe HorizontalLayout ou VerticalLayout plutôt que le conteneur Halo Box.</p>
 
  <p>La classe Box est la classe de base des classes VBox et HBox. Utilisez les balises <codeph>&lt;mx:Box></codeph>, <codeph>&lt;mx:VBox></codeph> et <codeph>&lt;mx:HBox></codeph> pour définir des conteneurs Box.</p>
 
  <p>Un conteneur Box présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry><b>Vertical Box</b> La hauteur est suffisamment importante pour contenir tous les enfants à leur hauteur par défaut ou explicite, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond à somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite du conteneur. <b>Horizontal Box</b> La largeur est suffisamment importante pour contenir tous les enfants à leur largeur par défaut, l’espace horizontal entre les enfants, ainsi que les marges gauche et droite du conteneur. La hauteur correspond à somme de la hauteur par défaut ou explicite de l’enfant le plus grand et des marges supérieure et inférieure du conteneur.
           </entry>
        </row><row>
           <entry>Marge par défaut</entry>
           <entry>0 pixel en haut, en bas, à gauche et à droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleBoxExample.mxml"><swfblock conref="examples/SimpleBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.Container.xml"><linktext>mx.components.Container</linktext></link><link href="mx.containers.xml#HBox"><linktext>mx.containers.HBox</linktext></link><link href="mx.containers.xml#VBox"><linktext>mx.containers.VBox</linktext></link></related-links><apiConstructor id="mx.containers:Box:Box"><apiName>Box</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.containers:Box:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale du conteneur Box.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule les tailles par défaut ainsi que les valeurs minimale et maximale du conteneur Box.
     
      <p>Si la propriété <codeph>direction</codeph> du conteneur Box est définie sur <codeph>BoxDirection.HORIZONTAL</codeph>, la valeur de sa propriété <codeph>measuredWidth</codeph> est égale à la somme des largeurs par défaut de tous ses enfants, des épaisseurs des bordures, des marges gauche et droite et de l’espace horizontal entre les enfants. La valeur de la propriété <codeph>measuredHeight</codeph> correspond à la valeur la plus élevée parmi les hauteurs par défaut des enfants, à laquelle viennent s’ajouter les bordures et les marges. Si la propriété <codeph>direction</codeph> du conteneur Box est définie sur <codeph>BoxDirection.VERTICAL</codeph>, ces deux valeurs sont inversées.</p>
     
      <p>Les propriétés <codeph>minWidth</codeph> et <codeph>minHeight</codeph> du conteneur Box sont calculées de la même manière, mais en combinant les largeurs minimales et les hauteurs minimales des enfants. Si la propriété <codeph>width</codeph> de l’enfant est une valeur exprimée en pourcentage, la largeur minimale du conteneur Box est égale à la valeur de la propriété <codeph>minWidth</codeph> de l’enfant. Si la propriété <codeph>width</codeph> de l’enfant n’est pas définie ou que sa valeur est fixe, l’enfant n’est ni agrandi, ni réduit, et la largeur minimale du conteneur Box est donc égale à la valeur de la propriété <codeph>explicitWidth</codeph> de l’enfant. La hauteur minimale de l’enfant est calculée de la même manière.</p>
     
      <p>Les propriétés <codeph>maxWidth</codeph> et <codeph>maxHeight</codeph> du conteneur Box ne sont pas calculées. La largeur et la hauteur du conteneur Box sont supposées être illimitées.</p>
     
      <p>Toutes les valeurs décrites précédemment correspondent aux largeurs et hauteurs <i>mesurées</i> du conteneur Box. L’utilisateur peut remplacer les valeurs mesurées en spécifiant explicitement une valeur pour les propriétés suivantes :</p>
     
      <ul>
        <li><codeph>width</codeph></li>
        <li><codeph>height</codeph></li>
        <li><codeph>minWidth</codeph></li>
        <li><codeph>minHeight</codeph></li>
        <li><codeph>maxWidth</codeph></li>
        <li><codeph>maxHeight</codeph></li>
      </ul>
     
      <p>Vous ne devez pas appeler la méthode <codeph>measure()</codeph> directement. La classe LayoutManager de Flex l’appelle lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex essaie de mesurer tous les composants, enfant comme parent, avant de définir leur taille finale.</p>
     
      <p>Il s’agit d’une méthode avancée à utiliser avec des sous-classes. Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.measure()</codeph> ou définir les propriétés <codeph>measuredHeight</codeph> et <codeph>measuredWidth</codeph>. Si vous le souhaitez, vous pouvez définir les propriétés facultatives suivantes :</p>
     
      <ul>
        <li><codeph>measuredMinWidth</codeph></li>
        <li><codeph>measuredMinHeight</codeph></li>
      </ul>
     
      <p>Ces propriétés correspondent aux propriétés de mise en forme mentionnées précédemment. Elles ne font donc pas l’objet d’une documentation séparée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:pixelsToPercent"><apiName>pixelsToPercent</apiName><shortdesc>
      Méthode utilisée pour convertir un nombre de pixels en pourcentage, par rapport au contenu de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pourcentage équivalent à la valeur <codeph>pxl</codeph> dans les conditions de mise en forme actuelles de ce conteneur. Une valeur négative indique que le conteneur doit être agrandi pour correspondre à la taille demandée.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>pxl</apiItemName><apiType value="Number"/><apiDesc>Nombre de pixels à convertir en pourcentage.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode utilisée pour convertir un nombre de pixels en pourcentage, par rapport au contenu de ce conteneur.
     
      <p>La valeur de pourcentage est exacte uniquement tant que la taille ou la mise en forme du conteneur ne change pas. Dès que le conteneur est redimensionné ou que sa mise en forme change, la valeur retournée par cette méthode risque d’être obsolète.</p>
     
      <p>Cette méthode peut par exemple être utilisée pour restaurer la taille d’un composant sur un nombre précis de pixels après l’avoir masqué.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.containers:Box:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Définit la taille et la position de chaque enfant du conteneur Box.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Spécifie la largeur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> de ce composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Spécifie la hauteur du composant (en pixels) dans les coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> de ce composant.   
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la taille et la position de chaque enfant du conteneur Box.
     
      <p>Pour comprendre l’algorithme de mise en forme du conteneur Box, supposons que la direction du conteneur Box soit horizontale.</p>
     
      <p>Tous les enfants du conteneur Box sont placés côte à côte sur une même ligne horizontale, séparés par un espace défini par le nombre de pixels de la propriété <codeph>horizontalGap</codeph>. Au départ, les largeurs des enfants pour lesquels aucune valeur de largeur explicite n’est définie correspondent aux valeurs de leurs propriétés <codeph>measuredWidth</codeph>.</p>
     
      <p>Si la somme des valeurs des propriétés <codeph>measuredWidth</codeph> des enfants est supérieure ou inférieure à la largeur du conteneur Box et que la propriété <codeph>width</codeph> de certains enfants est définie en pourcentage, ces enfants sont agrandis ou réduits jusqu’à ce que tous les enfants puissent être affichés dans le conteneur Box. Cependant, aucun enfant n’est réduit au point que sa largeur devienne inférieure à la valeur de sa propriété <codeph>minWidth</codeph>, ni agrandi au point que sa largeur devienne supérieure à la valeur de sa propriété <codeph>maxWidth</codeph>. Un espace supplémentaire est ajouté (ou retiré) proportionnellement à la valeur <codeph>percentWidth</codeph> de l’enfant et réparti entre tous les enfants agrandis (ou réduits). Par exemple, si la valeur <codeph>percentWidth</codeph> d’un enfant est de 40 %, sa taille est agrandie deux fois plus qu’un enfant dont la valeur de la propriété <codeph>percentWidth</codeph> est 20 %, et ce, jusqu’à ce que l’ensemble de l’espace disponible soit occupé ou que les tailles recommandées soient atteintes.</p>
     
      <p>Une fois que tous les enfants dont la taille est flexible ont été agrandis ou réduits, Flex vérifie que la somme des largeurs des enfants correspond à la largeur du conteneur Box. Si cela n’est pas le cas, les enfants sont tous décalés en fonction de la valeur de la propriété <codeph>horizontalAlign</codeph> du conteneur Box, de sorte que les enfants soient alignés sur le bord gauche ou droit du conteneur Box, ou centrés au milieu de ce conteneur.</p>
     
      <p>Pour déterminer la hauteur de chaque enfant, Flex examine la valeur de la propriété <codeph>height</codeph> de l’enfant. Si la propriété <codeph>height</codeph> n’est pas définie, la hauteur de l’enfant correspond à la valeur de sa propriété <codeph>measuredHeight</codeph>. Si la valeur <codeph>height</codeph> est définie en pixels, cette valeur est utilisée. Si la propriété <codeph>height</codeph> est définie en pourcentage, la hauteur de l’enfant est agrandie ou réduite de sorte qu’elle corresponde au pourcentage spécifié pour la hauteur du conteneur, sans pour autant réduire la hauteur de l’enfant au point qu’elle devienne inférieure à la valeur de sa propriété <codeph>minHeight</codeph>, ni l’agrandir au point de dépasser la valeur de sa propriété <codeph>maxHeight</codeph>.</p>
     
      <p>La position verticale de chaque enfant est déterminée par la propriété <codeph>verticalAlign</codeph> du conteneur Box. Chaque enfant est décalé de manière à être aligné sur le bord supérieur ou inférieur du conteneur Box, ou à être centré dans le conteneur Box.</p>
     
      <p>Si la valeur de la propriété <codeph>direction</codeph> du conteneur Box est <codeph>vertical</codeph>, les mêmes règles s’appliquent, à ceci près que les largeurs et les hauteurs sont inversées. Les enfants sont placés dans une même colonne verticale.</p>
     
      <p>Vous ne devez pas appeler cette méthode directement. La classe LayoutManager de Flex l’appelle lorsque cela est nécessaire. Au démarrage de l’application, la classe LayoutManager de Flex appelle la méthode <codeph>updateDisplayList()</codeph> sur chaque composant, en commençant par l’objet Application et en progressant vers le bas.</p>
     
      <p>Il s’agit d’une méthode avancée à utiliser avec des sous-classes. Si vous remplacez cette méthode, l’implémentation doit appeler la méthode <codeph>super.updateDisplayList()</codeph> et appeler les méthodes <codeph>move()</codeph> et <codeph>setActualSize()</codeph> sur chaque enfant. Pour les besoins de la mise en forme, vous devez obtenir la taille de ce conteneur à partir des propriétés <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph>, et non à partir des propriétés <codeph>width</codeph> et <codeph>height</codeph>. Les propriétés <codeph>width</codeph> et <codeph>height</codeph> ne prennent pas en compte les valeurs des propriétés <codeph>scaleX</codeph> et <codeph>scaleY</codeph> de ce conteneur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.containers:Box:direction:get"><apiName>direction</apiName><shortdesc>
      Direction dans laquelle ce conteneur Box place ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>BoxDirection.VERTICAL
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Direction dans laquelle ce conteneur Box place ses enfants. Valeurs MXML possibles : <codeph>"horizontal"</codeph> et <codeph>"vertical"</codeph>. Valeurs possibles en langage ActionScript : <codeph>BoxDirection.HORIZONTAL</codeph> et <codeph>BoxDirection.VERTICAL</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>