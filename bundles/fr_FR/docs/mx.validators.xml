<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.validators"><apiName>mx.validators</apiName><apiDetail/><apiClassifier id="mx.validators:CurrencyValidatorAlignSymbol"><apiName>CurrencyValidatorAlignSymbol</apiName><shortdesc>
  La classe CurrencyValidatorAlignSymbol définit des constantes de valeurs pour spécifier l’alignement de symbole de monnaie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CurrencyValidatorAlignSymbol définit des constantes de valeurs pour spécifier l’alignement de symbole de monnaie. Ces valeurs sont utilisées dans la propriété <codeph>CurrencyValidator.alignSymbol</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidator"><linktext>mx.validators.CurrencyValidator</linktext></link></related-links><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:ANY"><apiName>ANY</apiName><shortdesc>
	  Spécifie « any » comme alignement du symbole de monnaie pour la classe CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie <codeph>"any"</codeph> comme alignement du symbole de monnaie pour la classe CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Spécifie « left » comme alignement du symbole de monnaie pour la classe CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie <codeph>"left"</codeph> comme alignement du symbole de monnaie pour la classe CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidatorAlignSymbol:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Spécifie « right » comme alignement du symbole de monnaie pour la classe CurrencyValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie <codeph>"right"</codeph> comme alignement du symbole de monnaie pour la classe CurrencyValidator.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:DateValidator"><apiName>DateValidator</apiName><shortdesc>
  La classe DateValidator valide le fait qu’une chaîne, qu’une date ou qu’un objet contient une date correcte correspondant à un format spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>  
  
  <pre>
  &lt;mx:DateValidator 
    allowedFormatChars="/\-. " 
    dayListener="<i>Object specified by daySource</i>"
    dayProperty="<i>No default</i>"
    daySource="<i>No default</i>"
    formatError= "Configuration error: Incorrect formatting string." 
    inputFormat="MM/DD/YYYY" 
    invalidCharError="The date contains invalid characters."
    monthListener="<i>Object specified by monthSource</i>"
    monthProperty="<i>No default</i>"
    monthSource="<i>No default</i>"
    validateAsString="true|false"
    wrongDayError="Enter a valid day for the month."
    wrongLengthError="Type the date in the format <i>inputFormat</i>." 
    wrongMonthError="Enter a month between 1 and 12."
    wrongYearError="Enter a year between 0 and 9999."
    yearListener="<i>Object specified by yearSource</i>"
    yearProperty="<i>No default</i>"
    yearSource="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DateValidator valide le fait qu’une classe String, Date ou Object contient une date correcte correspondant à un format spécifié. Les utilisateurs peuvent entrer un seul chiffre ou deux chiffres pour le mois, le jour et l’année. Par défaut, le programme de validation assure les formats suivants :
 
  <ul>
    <li>Le mois est compris entre 1 et 12 (ou 0-11 pour les objets <codeph>Date</codeph>).</li>
    <li>Le jour est compris entre 1 et 31.</li>
    <li>L’année est un nombre.</li>
  </ul>
 
  <p>Vous pouvez spécifier la date dans la classe DateValidator de deux manières :</p>
  <ul>
    <li>Une seule classe String contenant la date - Utilisez les propriétés <codeph>source</codeph> et <codeph>property</codeph> pour spécifier la classe String. La classe Chaîne peut contenir des chiffres et les caractères de formatage spécifiés par la propriété <codeph>allowedFormatChars</codeph>, qui incluent les caractères "/\-.". Par défaut, le format d’entrée de la date dans un champ String est « MM/DD/YYYY », « MM » correspondant au mois, « DD » au jour et « YYYY » à l’année. Vous pouvez utiliser la propriété <codeph>inputFormat</codeph> pour spécifier un format différent.</li>
 	  <li>Objet <codeph>Date</codeph>.</li>
    <li>Champs Object ou champs multiples contenant le jour, le mois et l’année. Utilisez l’ensemble des propriétés suivantes pour spécifier le jour, le mois et l’année : <codeph>daySource</codeph>, <codeph>dayProperty</codeph>, <codeph>monthSource</codeph>, <codeph>monthProperty</codeph>, <codeph>yearSource</codeph> et <codeph>yearProperty</codeph>.</li>
  </ul>
  
  </apiDesc><example conref="DateValidatorExample.mxml"><swfblock conref="examples/DateValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:DateValidator:DateValidator"><apiName>DateValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:DateValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider une date.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Classe String ou classe Object à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider une date.
	 
	  <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:DateValidator:validateDate"><apiName>validateDate</apiName><shortdesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:DateValidator</apiOperationClassifier><apiDesc>Occurrence DateValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre value. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.date, la valeur <codeph>baseField</codeph> est « date ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:DateValidator:dayProperty"><apiName>dayProperty</apiName><shortdesc>
	  Nom de la propriété day à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété day à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>daySource</codeph>, définissez également cette propriété.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthProperty"><apiName>monthProperty</apiName><shortdesc>
	  Nom de la propriété month à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété month à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>monthSource</codeph>, définissez également cette propriété.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearProperty"><apiName>yearProperty</apiName><shortdesc>
	  Nom de la propriété year à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété year à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>yearSource</codeph>, définissez également cette propriété.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Jeu de caractères de formatage autorisés pour séparer les valeurs month, day et year.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"/\-. "
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Jeu de caractères de formatage autorisés pour séparer les valeurs month, day et year.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:dayListener:get"><apiName>dayListener</apiName><shortdesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ day.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ day. Si aucune valeur n’est spécifiée, utilisez la valeur spécifiée pour la propriété <codeph>daySource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:daySource:get"><apiName>daySource</apiName><shortdesc> 
	  Objet contenant la valeur du champ day.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objet contenant la valeur du champ day. Si vous spécifiez une valeur pour cette propriété, vous devez aussi en spécifier une pour la propriété <codeph>dayProperty</codeph>. N’utilisez pas cette propriété si vous définissez les propriétés <codeph>source</codeph> et <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:formatError:get"><apiName>formatError</apiName><shortdesc> 
	  Message d’erreur si le format de la propriété inputFormat n’est pas correct.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Configuration error: Incorrect formatting string." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur si le format de la propriété <codeph>inputFormat</codeph> n’est pas correct.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:inputFormat:get"><apiName>inputFormat</apiName><shortdesc> 
	  Format de date par rapport auquel valider la valeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"MM/DD/YYYY"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Format de date par rapport auquel valider la valeur. « MM » correspond au mois, « DD » au jour et « YYYY » à l’année. Cette chaîne est sensible à la casse.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Message d’erreur lorsque la date contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your date."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque la date contient des caractères non valides.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthListener:get"><apiName>monthListener</apiName><shortdesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ month.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ month. Si aucune valeur n’est spécifiée, utilisez la valeur spécifiée pour la propriété <codeph>monthSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:monthSource:get"><apiName>monthSource</apiName><shortdesc> 
	  Objet contenant la valeur du champ month.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objet contenant la valeur du champ month. Si vous spécifiez une valeur pour cette propriété, vous devez aussi en spécifier une pour la propriété <codeph>monthProperty</codeph>. N’utilisez pas cette propriété si vous définissez les propriétés <codeph>source</codeph> et <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:validateAsString:get"><apiName>validateAsString</apiName><shortdesc> 
	  Détermine comment valider la valeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true	 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Détermine comment valider la valeur. Si défini sur <codeph>true</codeph>, le programme de validation évalue la valeur en tant qu’objet String, sauf si elle comporte une propriété <codeph>month</codeph>, <codeph>day</codeph> ou <codeph>year</codeph>. Si <codeph>false</codeph>, le programme de validation évalue la valeur en tant qu’objet Date. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongDayError:get"><apiName>wrongDayError</apiName><shortdesc> 
	  Message d’erreur lorsque le jour n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a valid day for the month." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le jour n’est pas valide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Message d’erreur lorsque la longueur de la date ne correspond pas à celle spécifiée par la propriété inputFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Type the date in the format &lt;i>inputFormat&lt;/i>." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque la longueur de la date ne correspond pas à celle spécifiée par la propriété <codeph>inputFormat</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongMonthError:get"><apiName>wrongMonthError</apiName><shortdesc> 
	  Message d’erreur lorsque le mois n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a month between 1 and 12."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le mois n’est pas valide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:wrongYearError:get"><apiName>wrongYearError</apiName><shortdesc> 
	  Message d’erreur lorsque l’année n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Enter a year between 0 and 9999."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque l’année n’est pas valide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearListener:get"><apiName>yearListener</apiName><shortdesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ année.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ année. Si aucune valeur n’est spécifiée, utilisez la valeur spécifiée pour la propriété <codeph>yearSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:DateValidator:yearSource:get"><apiName>yearSource</apiName><shortdesc> 
	  Objet contenant la valeur du champ year.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objet contenant la valeur du champ year. Si vous spécifiez une valeur pour cette propriété, vous devez aussi en spécifier une pour la propriété <codeph>yearProperty</codeph>. N’utilisez pas cette propriété si vous définissez les propriétés <codeph>source</codeph> et <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
  La classe ZipCodeValidator valide le fait qu’une chaîne comporte la longueur et le format corrects pour un code postal à cinq chiffres, un code postal américain cinq chiffres + quatre chiffres ou un code postal canadien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ZipCodeValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:ZipCodeValidator
    allowedFormatChars=" -" 
    domain="US Only | US or Canada | Canada Only"
    invalidCharError="The ZIP code contains invalid characters." 
    invalidDomainError="The domain parameter is invalid. It must be either 'US Only', 'Canada Only', or 'US or Canada'." 
    wrongCAFormatError="The Canadian postal code must be formatted 'A1B 2C3'." 
    wrongLengthError="The ZIP code must be 5 digits or 5+4 digits." 
    wrongUSFormatError="The ZIP+4 code must be formatted '12345-6789'." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ZipCodeValidator valide le fait qu’une chaîne comporte la longueur et le format corrects pour un code postal à cinq chiffres, un code postal américain cinq chiffres + quatre chiffres ou un code postal canadien.
  
  </apiDesc><example conref="ZipCodeValidatorExample.mxml"><swfblock conref="examples/ZipCodeValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidatorDomainType"><linktext>mx.validators.ZipCodeValidatorDomainType</linktext></link></related-links><apiConstructor id="mx.validators:ZipCodeValidator:ZipCodeValidator"><apiName>ZipCodeValidator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:ZipCodeValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider un code postal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider un code postal.
     
      <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:ZipCodeValidator:validateZipCode"><apiName>validateZipCode</apiName><shortdesc>
      Méthode pratique pour appeler une classe Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:ZipCodeValidator</apiOperationClassifier><apiDesc>Occurrence ZipCodeValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.zipCode, la valeur <codeph>baseField</codeph> est <codeph>"zipCode"</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode pratique pour appeler une classe Validator. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:ZipCodeValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
      Jeu de caractères de formatage autorisés dans le code postal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -". 
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Jeu de caractères de formatage autorisés dans le code postal. Ne peut pas contenir des chiffres ou des lettres [a-z A-Z].
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:domain:get"><apiName>domain</apiName><shortdesc> 
      Type de code postal à vérifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ZipCodeValidatorDomainType.US_ONLY
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Type de code postal à vérifier. Dans MXML, les valeurs possibles sont <codeph>"US or Canada"</codeph>, <codeph>"US Only"</codeph> et <codeph>"Canada Only"</codeph>.
     
      <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ZipCodeValidatorDomainType.US_ONLY</codeph>, <codeph>ZipCodeValidatorDomainType.US_OR_CANADA</codeph> ou <codeph>ZipCodeValidatorDomainType.CANADA_ONLY</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
      Message d’erreur lorsque le code postal contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur lorsque le code postal contient des caractères non valides.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc> 
      Message d’erreur lorsque la propriété domain contient une valeur non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain parameter is invalid. It must be either 'US Only' or 'US or Canada'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur lorsque la propriété <codeph>domain</codeph> contient une valeur non valide.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongCAFormatError:get"><apiName>wrongCAFormatError</apiName><shortdesc> 
      Message d’erreur pour un code postal canadien non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Canadian postal code must be formatted 'A1B 2C3'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur pour un code postal canadien non valide.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
      Message d’erreur pour un code postal américain non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP code must be 5 digits or 5+4 digits."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur pour un code postal américain non valide.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidator:wrongUSFormatError:get"><apiName>wrongUSFormatError</apiName><shortdesc> 
      Message d’erreur pour un code postal mal formaté.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The ZIP+4 code must be formatted '12345-6789'."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur pour un code postal mal formaté.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidator"><apiName>IValidator</apiName><shortdesc>
  Cette interface spécifie les méthodes et les propriétés qu’un objet de programme de validation doit implémenter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Cette interface spécifie les méthodes et les propriétés qu’un objet de programme de validation doit implémenter. 
  <p>Cette interface permet de valider plusieurs types de données, tels que des nombres, des devises, des numéros de téléphone, des codes postaux, etc., qui sont définis dans les espaces de noms mx et spark. Les classes mx:Validator et spark:GlobaliationValidatorBase implémentent cette interface. La méthode validateAll() dans ces classes utilise ce type d’interface pour appeler la méthode validate() sur plusieurs objets de programme de validation.</p>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link><link href="" invalidHref="spark.validators.GlobalizationValidatorBase.xml"><linktext>spark.validators.GlobalizationValidatorBase</linktext></link></related-links><apiOperation id="mx.validators:IValidator:mx.validators:IValidator:validate"><apiName>validate</apiName><shortdesc>
      Procède à la validation et, le cas échéant, informe les écouteurs du résultat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ValidationResultEvent contenant les résultats de la validation. Pour une validation réussie, la propriété de tableau <codeph>ValidationResultEvent.results</codeph> est vide. Pour un échec de validation, la propriété de tableau <codeph>ValidationResultEvent.results</codeph> contient un objet ValidationResult pour chaque champ vérifié par le programme de validation, à la fois pour les champs ayant réussi à la validation et pour ceux ayant échoué. Examine la propriété <codeph>ValidationResult.isError</codeph> pour déterminer si le champ a réussi ou échoué à la validation. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Valeur facultative à valider. Si nul, le programme de validation utilise les propriétés <codeph>source</codeph> et <codeph>property</codeph> pour déterminer la valeur. Si vous spécifiez cet argument, vous devez aussi définir la propriété <codeph>listener</codeph> afin de spécifier le composant cible pour les messages d’erreur de validation.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si <codeph>false</codeph>, après la validation, le programme de validation informe l’écouteur du résultat.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Procède à la validation et, le cas échéant, informe les écouteurs du résultat. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidator:mx.validators:IValidator:enabled:get"><apiName>enabled</apiName><shortdesc>
      Propriété permettant d’activer/désactiver le processus de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété permettant d’activer/désactiver le processus de validation.
      <p>Si cette valeur est définie sur <codeph>false</codeph>, le programme de validation arrête la validation. Lorsqu’un programme de validation est désactivé, il ne distribue aucun événement et la méthode <codeph>validate()</codeph> renvoie null.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
  La classe CurrencyValidator assure qu’une chaîne représente une expression de monnaie valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:CurrencyValidator" replacement="spark.validators.CurrencyValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CurrencyValidator&gt;</code> tag
  inherits all of the tag properties of its superclass,
  and adds the following tag properties:</p>
 
  <pre>
  &lt;mx:CurrencyValidator
    alignSymbol="left|right|any"
    allowNegative="true|false"
    currencySymbol="$"
    currencySymbolError="The currency symbol occurs in an invalid location."
    decimalPointCountError="The decimal separator can occur only once."
    decimalSeparator="."
    exceedsMaxError="The amount entered is too large."
    invalidCharError="The input contains invalid characters."
    invalidFormatCharsError="One of the formatting parameters is invalid."
    lowerThanMinError="The amount entered is too small."
    maxValue="NaN"
    minValue="NaN"
    negativeError="The amount may not be negative."
    precision="2"
    precisionError="The amount entered has too many digits beyond the decimal point."
    separationError="The thousands separator must be followed by three digits."
    thousandsSeparator=","
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CurrencyValidator assure qu’une chaîne représente une expression de monnaie valide. Elle peut s’assurer que l’entrée appartient à une plage donnée (spécifié par <codeph>minValue</codeph> et <codeph>maxValue</codeph>), n’est pas négative (spécifié par <codeph>allowNegative</codeph>) et ne dépasse pas la valeur <codeph>precision</codeph> spécifiée. La classe CurrencyValidator valide correctement les expressions de monnaie formatées et non formatées (par exemple, « $12,345.00 » et « 12345 »). Vous pouvez personnaliser les propriétés <codeph>currencySymbol</codeph>, <codeph>alignSymbol</codeph>, <codeph>thousandsSeparator</codeph> et <codeph>decimalSeparator</codeph> à des fins d’internationalisation.
 
  </apiDesc><example conref="CurrencyValidatorExample.mxml"><swfblock conref="examples/CurrencyValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links><apiConstructor id="mx.validators:CurrencyValidator:CurrencyValidator"><apiName>CurrencyValidator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CurrencyValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider une expression de monnaie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider une expression de monnaie.
     
      <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CurrencyValidator:validateCurrency"><apiName>validateCurrency</apiName><shortdesc>
      Méthode pratique pour appeler une classe Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CurrencyValidator</apiOperationClassifier><apiDesc>Occurrence CurrencyValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.currency, la valeur baseField est « currency ».
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode pratique pour appeler une classe Validator. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CurrencyValidator:alignSymbol:get"><apiName>alignSymbol</apiName><shortdesc>
      Spécifie l’alignement de l’objet currencySymbol par rapport au reste de l’expression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>CurrencyValidatorAlignSymbol.LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’alignement de l’objet <codeph>currencySymbol</codeph> par rapport au reste de l’expression. Les valeurs acceptables dans ActionScript sont <codeph>CurrencyValidatorAlignSymbol.LEFT</codeph>, <codeph>CurrencyValidatorAlignSymbol.RIGHT</codeph> et <codeph>CurrencyValidatorAlignSymbol.ANY</codeph>. Les valeurs acceptables dans MXML sont <codeph>"left"</codeph>, <codeph>"right"</codeph> et <codeph>"any"</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CurrencyValidatorAlignSymbol"><linktext>mx.validators.CurrencyValidatorAlignSymbol</linktext></link></related-links></apiValue><apiValue id="mx.validators:CurrencyValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Indique si les nombres négatifs sont autorisés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les nombres négatifs sont autorisés. Peut être <codeph>true</codeph> ou <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbolError:get"><apiName>currencySymbolError</apiName><shortdesc>
      Message d’erreur lorsque le symbole de monnaie, défini par la propriété currencySymbol, se situe au mauvais emplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The currency symbol occurs in an invalid location."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le symbole de monnaie, défini par la propriété <codeph>currencySymbol</codeph>, se situe au mauvais emplacement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:currencySymbol:get"><apiName>currencySymbol</apiName><shortdesc>
      Chaîne de caractères utilisée pour spécifier le symbole de monnaie (par exemple, « $ », « R$ » ou « &amp;#163; »).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"$"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Chaîne de caractères utilisée pour spécifier le symbole de monnaie (par exemple, « $ », « R$ » ou « £ »). Ne peut pas être un chiffre et doit être distinct des objets <codeph>thousandsSeparator</codeph> et <codeph>decimalSeparator</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Message d’erreur lorsque le séparateur décimal apparaît plus d’une fois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can only occur once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le séparateur décimal apparaît plus d’une fois.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Caractère utilisé pour séparer le tout de la partie fractionnelle du nombre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Caractère utilisé pour séparer le tout de la partie fractionnelle du nombre. Ne peut pas être un chiffre et doit être distinct des objets <codeph>currencySymbol</codeph> et <codeph>thousandsSeparator</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est supérieure à la valeur maxValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est supérieure à la valeur <codeph>maxValue</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Message d’erreur lorsque la monnaie contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la monnaie contient des caractères non valides.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Message d’erreur lorsque la valeur contient un caractère de formatage non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur contient un caractère de formatage non valide.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est inférieure à la valeur minValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est inférieure à la valeur <codeph>minValue</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Valeur maximale d’un nombre valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur maximale d’un nombre valide. Une valeur NaN signifie que cette propriété est ignorée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Valeur minimale d’un nombre valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur minimale d’un nombre valide. Une valeur NaN signifie que cette propriété est ignorée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est négative et que la propriété allowNegative est false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est négative et que la propriété <codeph>allowNegative </codeph> est <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Message d’erreur lorsque la valeur comporte une valeur precision qui dépasse la valeur définie par la propriété precision.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond 
      the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur comporte une valeur precision qui dépasse la valeur définie par la propriété <codeph>precision</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Nombre maximal de chiffres pouvant suivre le point décimal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximal de chiffres pouvant suivre le point décimal. Peut être n’importe quel nombre entier non négatif. Remarque : définir cette valeur sur <codeph>0</codeph> a le même effet que définir <codeph>NumberValidator.domain</codeph> sur <codeph>int</codeph>. Définir cette valeur sur -1 signifie que cette propriété est ignorée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Message d’erreur lorsque le séparateur des milliers est mal placé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le séparateur des milliers est mal placé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CurrencyValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Caractère utilisé pour séparer les milliers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Caractère utilisé pour séparer les milliers. Ne peut pas être un chiffre et doit être distinct des objets <codeph>currencySymbol</codeph> et <codeph>decimalSeparator</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidatorDomainType"><apiName>NumberValidatorDomainType</apiName><shortdesc>
  La classe NumberValidatorDomainType définit les valeurs de la propriété domain de la classe NumberValidator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe NumberValidatorDomainType définit les valeurs de la propriété <codeph>domain</codeph> de la classe NumberValidator.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#NumberValidator"><linktext>mx.validators.NumberValidator</linktext></link></related-links><apiValue id="mx.validators:NumberValidatorDomainType:INT"><apiName>INT</apiName><shortdesc>
	  Indique de valider un nombre entier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>int</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique de valider un nombre entier. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidatorDomainType:REAL"><apiName>REAL</apiName><shortdesc>
	  Indique de valider un nombre réel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>real</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique de valider un nombre réel. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:StringValidator"><apiName>StringValidator</apiName><shortdesc>
  La classe StringValidator valide le fait que la longueur d’une chaîne se situe dans une plage spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:StringValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and add the following tag attributes:</p>
  
  <pre>
  &lt;mx:StringValidator
    maxLength="NaN" 
    minLength="NaN" 
    tooLongError="This string is longer than the maximum allowed length. This must be less than {0} characters long." 
    tooShortError="This string is shorter than the minimum allowed length. This must be at least {0} characters long." 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe StringValidator valide le fait que la longueur d’une chaîne se situe dans une plage spécifiée. 
  
  </apiDesc><example conref="StringValidatorExample.mxml"><swfblock conref="examples/StringValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:StringValidator:StringValidator"><apiName>StringValidator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:StringValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider une chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation() </codeph> de la classe de base pour valider une chaîne.
     
      <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:StringValidator:validateString"><apiName>validateString</apiName><shortdesc>
      Méthode pratique pour appeler une classe Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:StringValidator</apiOperationClassifier><apiDesc>Occurrence StringValidator.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
     
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.mystring, la valeur <codeph>baseField</codeph> est <codeph>"mystring"</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode pratique pour appeler une classe Validator. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:StringValidator:maxLength:get"><apiName>maxLength</apiName><shortdesc> 
      Longueur maximale d’une chaîne valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Longueur maximale d’une chaîne valide. Une valeur NaN signifie que cette propriété est ignorée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:minLength:get"><apiName>minLength</apiName><shortdesc> 
      Longueur minimale d’une chaîne valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Longueur minimale d’une chaîne valide. Une valeur NaN signifie que cette propriété est ignorée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooLongError:get"><apiName>tooLongError</apiName><shortdesc> 
      Message d’erreur lorsque la chaîne est plus longue que la valeur spécifiée par la propriété maxLength.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is longer than the maximum allowed length. This must be less than {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur lorsque la chaîne est plus longue que la valeur spécifiée par la propriété <codeph>maxLength</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:StringValidator:tooShortError:get"><apiName>tooShortError</apiName><shortdesc> 
      Message d’erreur lorsque la chaîne est plus courte que la valeur spécifiée par la propriété minLength.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This string is shorter than the minimum allowed length. This must be at least {0} characters long."
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Message d’erreur lorsque la chaîne est plus courte que la valeur spécifiée par la propriété <codeph>minLength</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ZipCodeValidatorDomainType"><apiName>ZipCodeValidatorDomainType</apiName><shortdesc>
  La classe ZipCodeValidatorDomainType définit les valeurs de la propriété domain de la classe ZipCodeValidator, que vous utilisez pour spécifier le type de code postal à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ZipCodeValidatorDomainType définit les valeurs de la propriété <codeph>domain</codeph> de la classe ZipCodeValidator, que vous utilisez pour spécifier le type de code postal à valider.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#ZipCodeValidator"><linktext>mx.validators.ZipCodeValidator</linktext></link></related-links><apiValue id="mx.validators:ZipCodeValidatorDomainType:CANADA_ONLY"><apiName>CANADA_ONLY</apiName><shortdesc>
	  Indique de valider un code postal canadien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Canada Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique de valider un code postal canadien.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_ONLY"><apiName>US_ONLY</apiName><shortdesc>
	  Indique de valider un code postal américain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US Only</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique de valider un code postal américain.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ZipCodeValidatorDomainType:US_OR_CANADA"><apiName>US_OR_CANADA</apiName><shortdesc>
	  Indique de valider un code postal américain ou canadien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>US or Canada</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique de valider un code postal américain ou canadien.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
  La classe RegExpValidator vous permet d’utiliser une expression régulière pour valider un champ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RegExpValidator&gt;</code> tag 
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:RegExpValidator
    expression="<i>No default</i>" 
    flags="<i>No default</i>" 
    noExpressionError="The expression is missing." 
    noMatchError="The field is invalid." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc> 
  La classe RegExpValidator vous permet d’utiliser une expression régulière pour valider un champ. Vous pouvez transmettre une expression régulière au programme de validation à l’aide de la propriété <codeph>expression</codeph> et des indicateurs supplémentaires pour contrôler la correspondance du modèle de l’expression régulière à l’aide de la propriété <codeph>flags</codeph>. 
 
  <p>La validation réussit si le programme de validation trouve une correspondance de l’expression régulière dans le champ à valider. Une erreur de validation se produit si le programme de validation ne trouve aucune correspondance.</p>
 
  <p>La classe RegExpValidator distribue les événements <codeph>valid</codeph> et <codeph>invalid</codeph>. Pour un événement <codeph>invalid</codeph>, l’objet d’événement est une occurrence de la classe ValidationResultEvent et contient un tableau d’objets ValidationResult.</p>
 
  <p>Cependant, pour un événement <codeph>valid</codeph>, l’objet ValidationResultEvent contient un tableau d’objets RegExpValidationResult. La classe RegExpValidationResult est une classe enfant de la classe ValidationResult et contient des propriétés supplémentaires utilisées avec les expressions régulières, y compris les propriétés suivantes :</p>
  <ul>
    <li><codeph>matchedIndex</codeph> Nombre entier qui contient l’index de début dans la chaîne d’entrée de la correspondance.</li>
    <li><codeph>matchedString</codeph> Chaîne qui contient la sous-chaîne de la chaîne d’entrée correspondant à l’expression régulière.</li>
    <li><codeph>matchedSubStrings</codeph> Tableau de chaînes qui contient des correspondances de sous-chaînes entre parenthèses, le cas échéant. Si aucune correspondance de sous-chaîne n’est trouvée, ce tableau comporte une longueur égale à 0. Utilisez matchedSubStrings[0] pour accéder à la première correspondance de sous-chaîne.</li>
  </ul>
  
  </apiDesc><example conref="RegExValidatorExample.mxml"><swfblock conref="examples/RegExValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="" invalidHref="mx.validators.RegExp.xml"><linktext>RegExp</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidator:RegExpValidator"><apiName>RegExpValidator</apiName><shortdesc> 
      Constructeur
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      Constructeur
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:RegExpValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider une expression régulière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Pour un résultat non valide, tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider une expression régulière.
     
      <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.validators:RegExpValidator:expression:get"><apiName>expression</apiName><shortdesc>
      Expression régulière à utiliser pour la validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Expression régulière à utiliser pour la validation. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:flags:get"><apiName>flags</apiName><shortdesc>
      Indicateurs d’expressions régulières à utiliser lors de la mise en correspondance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Indicateurs d’expressions régulières à utiliser lors de la mise en correspondance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noExpressionError:get"><apiName>noExpressionError</apiName><shortdesc> 
      Message d’erreur si aucune expression régulière n’est spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Message d’erreur si aucune expression régulière n’est spécifiée. La valeur par défaut est « The expression is missing ».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidator:noMatchError:get"><apiName>noMatchError</apiName><shortdesc> 
      Message d’erreur s’il n’existe aucune correspondance de l’expression régulière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Message d’erreur s’il n’existe aucune correspondance de l’expression régulière. La valeur par défaut est « The field is missing ».
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
  La classe NumberValidator assure qu’une chaîne représente un nombre valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.validators:NumberValidator" replacement="spark.validators.NumberValidator" since="4.5">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:NumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:NumberValidator 
    allowNegative="true|false" 
    decimalPointCountError="The decimal separator can only occur once." 
    decimalSeparator="." 
    domain="real|int" 
    exceedsMaxError="The number entered is too large." 
    integerError="The number must be an integer." 
    invalidCharError="The input contains invalid characters." 
    invalidFormatCharsError="One of the formatting parameters is invalid." 
    lowerThanMinError="The amount entered is too small." 
    maxValue="NaN" 
    minValue="NaN" 
    negativeError="The amount may not be negative." 
    precision="-1" 
    precisionError="The amount entered has too many digits beyond the decimal point." 
    separationError="The thousands separator must be followed by three digits." 
    thousandsSeparator="," 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe NumberValidator assure qu’une chaîne représente un nombre valide. Elle peut s’assurer que l’entrée appartient à une plage donnée (spécifié par <codeph>minValue</codeph> et <codeph>maxValue</codeph>), est un nombre entier (spécifié par <codeph>domain</codeph>), n’est pas négative (spécifié par <codeph>allowNegative</codeph>) et ne dépasse pas la valeur <codeph>precision</codeph> spécifiée. Le programme de validation valide correctement les nombres formatés (par exemple, « 12,345.67 ») et vous pouvez personnaliser les propriétés <codeph>thousandsSeparator</codeph> et <codeph>decimalSeparator</codeph> à des fin d’internationalisation.
  
  </apiDesc><example conref="NumberValidatorExample.mxml"><swfblock conref="examples/NumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:NumberValidator:NumberValidator"><apiName>NumberValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:NumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider un nombre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider un nombre.
     
	  <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:NumberValidator:validateNumber"><apiName>validateNumber</apiName><shortdesc>
      Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:NumberValidator</apiOperationClassifier><apiDesc>Occurrence NumberValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
	 
      </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.number, la valeur <codeph>baseField</codeph> est « number ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:NumberValidator:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      Indique si les nombres négatifs sont autorisés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les nombres négatifs sont autorisés. Les valeurs possibles sont <codeph>true</codeph> ou <codeph>false</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      Message d’erreur lorsque le séparateur décimal apparaît plus d’une fois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can occur only once."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le séparateur décimal apparaît plus d’une fois.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      Caractère utilisé pour séparer le tout de la partie fractionnelle du nombre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Caractère utilisé pour séparer le tout de la partie fractionnelle du nombre. Ne peut pas être un chiffre et doit être distinct de l’objet <codeph>thousandsSeparator</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:domain:get"><apiName>domain</apiName><shortdesc>
      Type de nombre à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"real"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Type de nombre à valider. Les valeurs autorisées sont <codeph>"real"</codeph> et <codeph>"int"</codeph>.
	 
	  <p>Dans le langage ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>NumberValidatorDomainType.REAL</codeph> ou <codeph>NumberValidatorDomainType.INT</codeph>.</p>
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:exceedsMaxError:get"><apiName>exceedsMaxError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est supérieure à la propriété maxValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number entered is too large."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est supérieure à la propriété <codeph>maxValue</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:integerError:get"><apiName>integerError</apiName><shortdesc>
      Message d’erreur lorsque le nombre doit être un nombre entier, tel que défini par la propriété domain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number must be an integer."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le nombre doit être un nombre entier, tel que défini par la propriété <codeph>domain</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      Message d’erreur lorsque la valeur contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>The input contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur contient des caractères non valides.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      Message d’erreur lorsque la valeur contient des caractères de formatage non valides, ce qui signifie qu’elle contient un chiffre ou un signe moins (-) en tant que caractère de séparateur ou qu’elle contient deux caractères de séparateur consécutifs ou plus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur contient des caractères de formatage non valides, ce qui signifie qu’elle contient un chiffre ou un signe moins (-) en tant que caractère de séparateur ou qu’elle contient deux caractères de séparateur consécutifs ou plus.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:lowerThanMinError:get"><apiName>lowerThanMinError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est inférieure à la valeur minValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est inférieure à la valeur <codeph>minValue</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      Valeur maximale d’un nombre valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur maximale d’un nombre valide. Une valeur NaN signifie qu’il n’existe pas de maximum.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:minValue:get"><apiName>minValue</apiName><shortdesc>
      Valeur minimale d’un nombre valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur minimale d’un nombre valide. Une valeur NaN signifie qu’il n’existe pas de minimum.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      Message d’erreur lorsque la valeur est négative et que la propriété allowNegative est false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur est négative et que la propriété <codeph>allowNegative </codeph> est <codeph>false</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precisionError:get"><apiName>precisionError</apiName><shortdesc>
      Message d’erreur lorsque la valeur comporte une valeur precision qui dépasse la valeur définie par la propriété precision.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond the decimal point."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque la valeur comporte une valeur precision qui dépasse la valeur définie par la propriété precision.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:precision:get"><apiName>precision</apiName><shortdesc>
      Nombre maximal de chiffres pouvant suivre le point décimal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximal de chiffres pouvant suivre le point décimal. Peut être n’importe quel nombre entier non négatif. Remarque : définir cette valeur sur <codeph>0</codeph> a le même effet que définir <codeph>domain</codeph> sur <codeph>"int"</codeph>. Une valeur de -1 signifie que cette propriété est ignorée.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:separationError:get"><apiName>separationError</apiName><shortdesc>
      Message d’erreur lorsque le séparateur des milliers se situe au mauvais emplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The thousands separator must be followed by three digits."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsque le séparateur des milliers se situe au mauvais emplacement.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:NumberValidator:thousandsSeparator:get"><apiName>thousandsSeparator</apiName><shortdesc>
      Caractère utilisé pour séparer les milliers dans l’intégralité du nombre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>","
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Caractère utilisé pour séparer les milliers dans l’intégralité du nombre. Ne peut pas être un chiffre et doit être distinct de l’objet <codeph>decimalSeparator</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
  La classe PhoneNumberValidator valide le fait qu’une chaîne constitue un numéro de téléphone valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:PhoneNumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PhoneNumberValidator 
    allowedFormatChars="()- .+" 
    invalidCharError="Your telephone number contains invalid characters."
 	  minDigits="10"
    wrongLengthError="Your telephone number must contain at least 10 digits."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe PhoneNumberValidator valide le fait qu’une chaîne constitue un numéro de téléphone valide. Un numéro de téléphone valide contient au moins 10 chiffres, plus des caractères de formatage supplémentaires. Le programme de validation ne vérifie pas si le numéro de téléphone est un numéro de téléphone actif réel.
  
  </apiDesc><example conref="PhoneNumberValidatorExample.mxml"><swfblock conref="examples/PhoneNumberValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:PhoneNumberValidator:PhoneNumberValidator"><apiName>PhoneNumberValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:PhoneNumberValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider un numéro de téléphone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation() </codeph> de la classe de base pour valider un numéro de téléphone.
     
	  <p>En général, vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:PhoneNumberValidator:validatePhoneNumber"><apiName>validatePhoneNumber</apiName><shortdesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:PhoneNumberValidator</apiOperationClassifier><apiDesc>Occurrence PhoneNumberValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.phone, la valeur <codeph>baseField</codeph> est « phone ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:PhoneNumberValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Jeu contenant les caractères de formatage autorisés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Jeu contenant les caractères de formatage autorisés.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Message d’erreur lorsque la valeur contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number contains invalid characters."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque la valeur contient des caractères non valides.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:minDigits:get"><apiName>minDigits</apiName><shortdesc> 
      Nombre minimal de chiffres pour constituer un numéro de téléphone valide. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Nombre minimal de chiffres pour constituer un numéro de téléphone valide. Une valeur NaN signifie que cette propriété est ignorée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:PhoneNumberValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc> 
	  Message d’erreur lorsque la valeur contient moins de 10 chiffres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your telephone number must contain at least 10 digits."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque la valeur contient moins de 10 chiffres.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
  La classe EmailValidator valide le fait qu’une chaîne comporte un signe &amp;#64; unique et un point dans le nom de domaine et que le suffixe de domaine de niveau supérieur comporte deux, trois, quatre ou six caractères.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:EmailValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:EmailValidator 
    invalidCharError="Your e-mail address contains invalid characters."
    invalidDomainError= "The domain in your e-mail address is incorrectly formatted." 
    invalidIPDomainError="The IP domain in your e-mail address is incorrectly formatted." 
    invalidPeriodsInDomainError="The domain in your e-mail address has consecutive periods." 
    missingAtSignError="An at sign (&64;) is missing in your e-mail address."
    missingPeriodInDomainError="The domain in your e-mail address is missing a period." 
    missingUsernameError="The username in your e-mail address is missing." 
    tooManyAtSignsError="Your e-mail address contains too many &64; characters."
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EmailValidator valide le fait qu’une chaîne comporte un signe @ unique et un point dans le nom de domaine et que le suffixe de domaine de niveau supérieur comporte deux, trois, quatre ou six caractères. Les noms de domaines IP sont valides s’ils sont entourés de crochets. Le programme de validation ne vérifie pas si le domaine et le nom d’utilisateur existent réellement.
 
  <p>Vous pouvez utiliser des noms de domaines IP s’ils sont entourés de crochets ; par exemple, monnom@[206.132.22.1]. Vous pouvez utiliser des nombres IP compris entre 0 et 255.</p>
  
  </apiDesc><example conref="EmailValidatorExample.mxml"><swfblock conref="examples/EmailValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:EmailValidator:EmailValidator"><apiName>EmailValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:EmailValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider une adresse électronique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Classe String ou classe Object à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider une adresse électronique.
	 
	  <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:EmailValidator:validateEmail"><apiName>validateEmail</apiName><shortdesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:EmailValidator</apiOperationClassifier><apiDesc>Occurrence EmailValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre value. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.email, la valeur <codeph>baseField</codeph> est « email ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Méthode pratique pour appeler une classe Validator dans une fonction de validation personnalisée. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:EmailValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Message d’erreur lorsque l’adresse électronique contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains invalid characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque l’adresse électronique contient des caractères non valides.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidDomainError:get"><apiName>invalidDomainError</apiName><shortdesc>
	  Message d’erreur lorsque le suffixe (domaine de niveau supérieur) ne fait pas 2, 3, 4 ou 6 caractères de long.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque le suffixe (domaine de niveau supérieur) ne fait pas 2, 3, 4 ou 6 caractères de long.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidIPDomainError:get"><apiName>invalidIPDomainError</apiName><shortdesc>
	  Message d’erreur lorsque le domaine IP n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The IP domain in your e-mail address is incorrectly formatted."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque le domaine IP n’est pas valide. Le domaine IP doit être entouré de crochets.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:invalidPeriodsInDomainError:get"><apiName>invalidPeriodsInDomainError</apiName><shortdesc>
	  Message d’erreur lorsque le domaine contient des points continus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address has continous periods."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque le domaine contient des points continus.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingAtSignError:get"><apiName>missingAtSignError</apiName><shortdesc>
	  Message d’erreur lorsque l’adresse électronique ne contient aucun signe @.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"An at sign (&amp;64;) is missing in your e-mail address."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque l’adresse électronique ne contient aucun signe @.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingPeriodInDomainError:get"><apiName>missingPeriodInDomainError</apiName><shortdesc>
	  Message d’erreur lorsque le domaine ne contient aucun point.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The domain in your e-mail address is missing a period."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque le domaine ne contient aucun point.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:missingUsernameError:get"><apiName>missingUsernameError</apiName><shortdesc>
	  Message d’erreur lorsqu’il n’y a aucun nom d’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The username in your e-mail address is missing."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsqu’il n’y a aucun nom d’utilisateur.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:EmailValidator:tooManyAtSignsError:get"><apiName>tooManyAtSignsError</apiName><shortdesc>
	  Message d’erreur lorsque l’adresse électronique contient plus d’un signe @.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your e-mail address contains too many &amp;64; characters."
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque l’adresse électronique contient plus d’un signe @. Cette propriété est facultative. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc>
  La classe RegExpValidator distribue les événements valid et invalid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:ValidationResult</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe RegExpValidator distribue les événements <codeph>valid</codeph> et <codeph>invalid</codeph>. Pour un événement <codeph>invalid</codeph>, l’objet d’événement est une occurrence de la classe ValidationResultEvent et la propriété <codeph>ValidationResultEvent.results</codeph> contient un tableau d’objets ValidationResult.
 
  <p>Cependant, pour un événement <codeph>valid</codeph>, la propriété <codeph>ValidationResultEvent.results</codeph> contient un tableau d’objets RegExpValidationResult. La classe RegExpValidationResult est une classe enfant de la classe ValidationResult et contient des propriétés supplémentaires utilisées avec des expressions régulières.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:RegExpValidationResult:RegExpValidationResult"><apiName>RegExpValidationResult</apiName><shortdesc> 
	  Constructeur
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc>Transmet <codeph>true</codeph> si une erreur de validation s’est produite.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Nom du sous-champ de l’objet validé.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Code d’erreur de validation.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Message d’erreur de validation.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedString</apiItemName><apiType value="String"/><apiData/><apiDesc>Sous-chaîne correspondante.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Index de la chaîne correspondante.
     
      </apiDesc></apiParam><apiParam><apiItemName>matchedSubstrings</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau de correspondances de sous-chaînes.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc> 
	  Constructeur
	  
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:RegExpValidationResult:matchedIndex"><apiName>matchedIndex</apiName><shortdesc> 
	  Nombre entier qui contient l’index de début dans la chaîne d’entrée de la correspondance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> 
	  Nombre entier qui contient l’index de début dans la chaîne d’entrée de la correspondance.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedString"><apiName>matchedString</apiName><shortdesc>
	  Chaîne qui contient la sous-chaîne de la chaîne d’entrée correspondant à l’expression régulière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Chaîne qui contient la sous-chaîne de la chaîne d’entrée correspondant à l’expression régulière.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:RegExpValidationResult:matchedSubstrings"><apiName>matchedSubstrings</apiName><shortdesc>
	  Tableau de chaînes qui contient des correspondances de sous-chaînes entre parenthèses, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
	  Tableau de chaînes qui contient des correspondances de sous-chaînes entre parenthèses, le cas échéant. Si aucune correspondance de sous-chaîne n’est trouvée, ce tableau comporte une longueur égale à 0. Utilisez <codeph>matchedSubStrings[0]</codeph> pour accéder à la première correspondance de sous-chaîne.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
  La classe ValidationResult contient les résultats de la validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ValidationResult contient les résultats de la validation. 
 
  <p>La classe ValidationResultEvent définit l’objet d’événement qui est transmis aux écouteurs d’événements pour les événements de classe Validator <codeph>valid</codeph> et <codeph>invalid</codeph>. La classe définit également la propriété <codeph>results</codeph>, qui contient un tableau d’objets ValidationResult, un pour chaque champ examiné par le programme de validation. Cela vous permet d’accéder aux objets ValidationResult dans un écouteur d’événement.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links><apiConstructor id="mx.validators:ValidationResult:ValidationResult"><apiName>ValidationResult</apiName><shortdesc>
	  Constructeur
	 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>isError</apiItemName><apiType value="Boolean"/><apiDesc>Transmet <codeph>true</codeph> si une erreur de validation s’est produite.
     
      </apiDesc></apiParam><apiParam><apiItemName>subField</apiItemName><apiType value="String"/><apiData/><apiDesc>Nom du sous-champ de l’objet validé.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorCode</apiItemName><apiType value="String"/><apiData/><apiDesc> Code d’erreur de validation.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorMessage</apiItemName><apiType value="String"/><apiData/><apiDesc>Message d’erreur de validation.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur
	 
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.validators:ValidationResult:errorCode"><apiName>errorCode</apiName><shortdesc>
	  Code d’erreur de validation si la valeur de la propriété isError est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Code d’erreur de validation si la valeur de la propriété <codeph>isError</codeph> est <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:errorMessage"><apiName>errorMessage</apiName><shortdesc>
	  Message d’erreur de validation si la valeur de la propriété isError est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Message d’erreur de validation si la valeur de la propriété <codeph>isError</codeph> est <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:isError"><apiName>isError</apiName><shortdesc>
	  Contient true si le champ a généré un échec de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Contient <codeph>true</codeph> si le champ a généré un échec de validation.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:ValidationResult:subField"><apiName>subField</apiName><shortdesc>
	  Nom du sous-champ auquel le résultat est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom du sous-champ auquel le résultat est associé. Certains programmes de validation, tels que CreditCardValidator et DateValidator, valident plusieurs sous-champs en même temps.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidatorCardType"><apiName>CreditCardValidatorCardType</apiName><shortdesc>
  La classe CreditCardValidatorCardType définit des constantes de valeurs pour spécifier le type de carte de crédit à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CreditCardValidatorCardType définit des constantes de valeurs pour spécifier le type de carte de crédit à valider. Ces valeurs sont utilisées dans la propriété <codeph>CreditCardValidator.cardType</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidator"><linktext>mx.validators.CreditCardValidator</linktext></link></related-links><apiValue id="mx.validators:CreditCardValidatorCardType:AMERICAN_EXPRESS"><apiName>AMERICAN_EXPRESS</apiName><shortdesc>
	  Spécifie le type de carte American Express.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>American Express</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le type de carte American Express.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DINERS_CLUB"><apiName>DINERS_CLUB</apiName><shortdesc>
	  Spécifie le type de carte Diners Club.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Diners Club</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le type de carte Diners Club.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:DISCOVER"><apiName>DISCOVER</apiName><shortdesc>
	  Spécifie le type de carte Discover.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Discover</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le type de carte Discover.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:MASTER_CARD"><apiName>MASTER_CARD</apiName><shortdesc>
	  Spécifie le type de carte MasterCard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>MasterCard</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le type de carte MasterCard.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidatorCardType:VISA"><apiName>VISA</apiName><shortdesc>
	  Spécifie le type de carte Visa.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Visa</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le type de carte Visa.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:Validator"><apiName>Validator</apiName><shortdesc>
  La classe Validator est la classe de base de tous les programmes de validation Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Validator class defines the following tag attributes, 
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:Validator 
    enabled="true|false" 
    listener="<i>Value of the source property</i>" 
    property="<i>No default</i>" 
    required="true|false" 
    requiredFieldError="This field is required." 
    source="<i>No default</i>" 
    trigger="<i>Value of the source property</i>" 
    triggerEvent="valueCommit" 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseInterface>mx.validators:IValidator</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Validator est la classe de base de tous les programmes de validation Flex. Cette classe implémente la capacité d’un programme de validation à rendre un champ obligatoire, ce qui signifie que la validation échoue si l’utilisateur n’entre pas de valeur dans le champ.
 
  </apiDesc><example conref="SimpleValidatorExample.mxml"><swfblock conref="examples/SimpleValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link></related-links><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc> 
  Distribué si la validation échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  Distribué si la validation échoue.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.validators:Validator_mx.events.ValidationResultEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Distribué si la validation réussit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si la validation réussit.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.validators:Validator:Validator"><apiName>Validator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:Validator:protected:addListenerHandler"><apiName>addListenerHandler</apiName><shortdesc>
      Définit tous les écouteurs pour les événements valid et invalid distribués à partir du programme de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit tous les écouteurs pour les événements <codeph>valid</codeph> et <codeph>invalid</codeph> distribués à partir du programme de validation. Les sous-classes de la classe Validator doivent d’abord appeler la méthode <codeph>removeListenerHandler()</codeph>, puis la méthode <codeph>addListenerHandler()</codeph> si la valeur de l’un de leurs écouteurs ou de l’une de leurs sources change. Les classes CreditCardValidator et DateValidator utilisent cette fonction de manière interne. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Exécute la logique de validation de ce programme de validation, y compris la validation du fait qu’une classe manquante ou vide provoque une erreur de validation tel que défini par la valeur de la propriété requise.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Pour un résultat non valide, tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation ayant échoué à la validation.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur à valider.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Exécute la logique de validation de ce programme de validation, y compris la validation du fait qu’une classe manquante ou vide provoque une erreur de validation tel que défini par la valeur de la propriété <codeph>requise</codeph>.
     
      <p>Si vous créez une sous-classe d’une classe Validator, vous devez remplacer cette méthode. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiOperation id="mx.validators:Validator:protected:getValueFromSource"><apiName>getValueFromSource</apiName><shortdesc>
      Renvoie l’objet à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Objet à valider.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie l’objet à valider. Les sous-classes (par exemple, CreditCardValidator et DateValidator) remplacent cette méthode car elles doivent accéder aux valeurs de plusieurs sous-champs. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:handleResults"><apiName>handleResults</apiName><shortdesc>
      Renvoie une classe ValidationResultEvent depuis le tableau des résultats d’erreurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Classe ValidationResultEvent renvoyée par la méthode <codeph>validate()</codeph>. 
      
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>errorResults</apiItemName><apiType value="Array"/><apiDesc>Tableau des objets ValidationResult.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une classe ValidationResultEvent depuis le tableau des résultats d’erreurs. En interne, cette fonction extrait les résultats de la méthode <codeph>doValidation()</codeph> pour les insérer dans un objet ValidationResultEvent. Les sous-classes (par exemple, la classe RegExpValidator) doivent remplacer cette fonction si elles produisent une sous-classe d’objets ValidationResultEvent (par exemple, les objets RegExpValidationResult) et doivent remplir l’objet avec des informations supplémentaires. Vous n’appelez jamais cette fonction directement et ne devez la remplacez que rarement. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:initialized"><apiName>initialized</apiName><shortdesc>
       Appelé automatiquement par le compilateur MXML lorsque la classe Validator est créée à l’aide d’une balise MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML contenant cette classe Validator.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Ignoré.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Appelé automatiquement par le compilateur MXML lorsque la classe Validator est créée à l’aide d’une balise MXML.  
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:isRealValue"><apiName>isRealValue</apiName><shortdesc>
      Renvoie true si la valeur n’est pas nulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si la valeur <codeph>value</codeph> n’est pas nulle.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie <codeph>true</codeph> si la valeur <codeph>value</codeph> n’est pas nulle. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:removeListenerHandler"><apiName>removeListenerHandler</apiName><shortdesc>
      Déconnecte tous les écouteurs pour les événements valid et invalid distribués à partir du programme de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Déconnecte tous les écouteurs pour les événements <codeph>valid</codeph> et <codeph>invalid</codeph> distribués à partir du programme de validation. Les sous-classes doivent d’abord appeler la méthode <codeph>removeListenerHandler()</codeph>, puis la méthode <codeph>addListenerHandler</codeph> si la valeur de l’un de leurs écouteurs ou de l’une de leurs sources change. Les classes CreditCardValidator et DateValidator utilisent cette fonction de manière interne. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Cette méthode est appelée lorsqu’une classe Validator est construite et chaque fois que la classe ResourceManager distribue un événement « change » pour indiquer que les ressources localisées ont changé d’une manière ou d’une autre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Cette méthode est appelée lorsqu’une classe Validator est construite et chaque fois que la classe ResourceManager distribue un événement <codeph>"change"</codeph> pour indiquer que les ressources localisées ont changé d’une manière ou d’une autre.
     
      <p>Cet événement est distribué lorsque vous définissez la propriété <codeph>localeChain</codeph> de la classe ResourceManager, lorsqu’un module de ressource termine de se charger et lorsque vous appelez la méthode <codeph>update()</codeph> de la classe ResourceManager.</p>
     
      <p>Les sous-classes doivent remplacer cette méthode et, après avoir appelé la méthode <codeph>super.resourcesChanged()</codeph>, effectuer les tâches appropriées en réponse aux nouvelles valeurs de ressources.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validateAll"><apiName>validateAll</apiName><shortdesc>
      Invoque tous les objets Validator dans le tableau d’objets Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResultEvent, qui contient un objet ValidationResultEvent pour chaque objet Validator ayant échoué. Le tableau est vide si tous les objets Validator ont réussi.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validators</apiItemName><apiType value="Array"/><apiDesc>Tableau contenant les objets Validator à exécuter. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Invoque tous les objets Validator dans le tableau d’objets <codeph>Validator</codeph>. Retourne un tableau contenant un objet ValidationResultEvent pour chaque objet Validator ayant échoué. Renvoie un tableau vide si tous les objets Validator ont réussi. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:Validator:validate"><apiName>validate</apiName><shortdesc>
      Procède à la validation et, le cas échéant, informe les écouteurs du résultat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ValidationResultEvent contenant les résultats de la validation. Pour une validation réussie, la propriété de tableau <codeph>ValidationResultEvent.results</codeph> est vide. Pour un échec de validation, la propriété de tableau <codeph>ValidationResultEvent.results</codeph> contient un objet ValidationResult pour chaque champ vérifié par le programme de validation, à la fois pour les champs ayant réussi à la validation et pour ceux ayant échoué. Examine la propriété <codeph>ValidationResult.isError</codeph> pour déterminer si le champ a réussi ou échoué à la validation. 
     
      </apiDesc><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Valeur facultative à valider. Si nul, le programme de validation utilise les propriétés <codeph>source</codeph> et <codeph>property</codeph> pour déterminer la valeur. Si vous spécifiez cet argument, vous devez aussi définir la propriété <codeph>listener</codeph> afin de spécifier le composant cible pour les messages d’erreur de validation.
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si <codeph>false</codeph>, après la validation, le programme de validation informe l’écouteur du résultat.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Procède à la validation et, le cas échéant, informe les écouteurs du résultat. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:Validator:protected:DECIMAL_DIGITS"><apiName>DECIMAL_DIGITS</apiName><shortdesc>
      Chaîne contenant les chiffres décimaux de 0 à 9.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>0123456789</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne contenant les chiffres décimaux de 0 à 9.    
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:ROMAN_LETTERS"><apiName>ROMAN_LETTERS</apiName><shortdesc>
      Chaîne contenant les lettres majuscules et minuscules de l’alphabet romain (« A » à « Z » et « a » à « z »).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne contenant les lettres majuscules et minuscules de l’alphabet romain (« A » à « Z » et « a » à « z »).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:required"><apiName>required</apiName><shortdesc>
      Si true, indique qu’une valeur manquante ou vide provoque une erreur de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>true</codeph>, indique qu’une valeur manquante ou vide provoque une erreur de validation. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:subFields"><apiName>subFields</apiName><shortdesc>
      Tableau de chaînes contenant les noms des propriétés contenues dans l’objet value transmis à la méthode validate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de chaînes contenant les noms des propriétés contenues dans l’objet <codeph>value</codeph> transmis à la méthode <codeph>validate()</codeph>. Par exemple, CreditCardValidator définit cette propriété sur <codeph>[ "cardNumber", "cardType" ]</codeph>. Cette valeur signifie que l’objet <codeph>value</codeph> transmis à la méthode <codeph>validate()</codeph> doit contenir une propriété <codeph>cardNumber</codeph> et <codeph>cardType</codeph>. 
     
      <p>Les sous-classes de la classe Validator qui valident plusieurs champs de données (par exemple, CreditCardValidator et DateValidator) doivent assigner cette propriété dans leur constructeur. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualListeners:get"><apiName>actualListeners</apiName><shortdesc>
      Contient un tableau d’objets d’écouteurs, le cas échéant, ou l’objet source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Contient un tableau d’objets d’écouteurs, le cas échéant, ou l’objet source. Permet de déterminer quel objet informer du résultat de validation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:actualTrigger:get"><apiName>actualTrigger</apiName><shortdesc>
      Contient l’objet déclencheur, le cas échéant, ou l’objet source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Contient l’objet déclencheur, le cas échéant, ou l’objet source. Permet de déterminer l’objet d’écouteur de l’événement <codeph>triggerEvent</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:enabled:get"><apiName>enabled</apiName><shortdesc> 
      Si cette valeur est définie sur false, le programme de validation arrête la validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Si cette valeur est définie sur <codeph>false</codeph>, le programme de validation arrête la validation. Lorsqu’un programme de validation est désactivé, il ne distribue aucun événement et la méthode <codeph>validate()</codeph> renvoie null.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:listener:get"><apiName>listener</apiName><shortdesc>
      Spécifie l’écouteur de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Spécifie l’écouteur de validation.
     
      <p>Si vous ne spécifiez aucun écouteur, Flex utilise la valeur de la propriété <codeph>source</codeph>. Une fois que Flex a déterminé le composant source, il en change la couleur de bordure, affiche un message d’erreur pour un échec ou masque tout message d’erreur existant pour une validation réussie.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:property:get"><apiName>property</apiName><shortdesc>
      Chaîne spécifiant le nom de la propriété de l’objet source qui contient la valeur à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Chaîne spécifiant le nom de la propriété de l’objet <codeph>source</codeph> qui contient la valeur à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>source</codeph>, définissez également une valeur pour cette propriété.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:requiredFieldError:get"><apiName>requiredFieldError</apiName><shortdesc>
      Message d’erreur lorsqu’une valeur est manquante et que la propriété requise est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This field is required."
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Message d’erreur lorsqu’une valeur est manquante et que la propriété <codeph>requise</codeph> est <codeph>true</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc conref="mx.core.UIComponent#resourceManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#resourceManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:source:get"><apiName>source</apiName><shortdesc>
      Spécifie l’objet contenant la propriété à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’objet contenant la propriété à valider. Définissez ceci sur une occurrence d’un composant ou d’un modèle de données. Utilisez la syntaxe de liaison de données dans MXML pour spécifier la valeur. Cette propriété prend en charge les chaînes séparées par des points pour spécifier des propriétés imbriquées. Si vous spécifiez une valeur pour la propriété <codeph>source</codeph>, vous devez aussi en spécifier une pour la propriété <codeph>property</codeph>. La propriété <codeph>source</codeph> est facultative.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Spécifie l’événement qui déclenche la validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie l’événement qui déclenche la validation. Si omis, Flex utilise l’événement <codeph>valueCommit</codeph>. Flex distribue l’événement <codeph>valueCommit</codeph> lorsqu’un utilisateur entre des données dans un contrôle. Cela se produit généralement lorsque l’utilisateur supprime le focus du composant ou lorsqu’une valeur de propriété est changée par programmation. Si vous voulez qu’un programme de validation ignore tous les événements, définissez <codeph>triggerEvent</codeph> sur la chaîne vide ("").
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:Validator:trigger:get"><apiName>trigger</apiName><shortdesc>
      Spécifie le composant qui génère l’événement déclenchant le programme de validation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Spécifie le composant qui génère l’événement déclenchant le programme de validation. Si omis, Flex utilise par défaut la valeur de la propriété <codeph>source</codeph>. Lorsque le <codeph>déclencheur</codeph> distribue un événement <codeph>triggerEvent</codeph>, la validation s’exécute. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
  La classe CreditCardValidator valide le fait qu’un numéro de carte de crédit a la longueur correcte, comporte le préfixe correct et transmet l’algorithme Luhn mod10 du type de carte spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CreditCardValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:CreditCardValidator
    allowedFormatChars=" -" 
    cardNumberListener="<i>Object specified by cardNumberSource</i>"
    cardNumberProperty="<i>No default</i>"
    cardNumberSource="<i>No default</i>"
    cardTypeListener="<i>Object specified by cardTypeSource</i>"
    cardTypeProperty="<i>No default</i>"
    cardTypeSource="<i>No default</i>"
    invalidCharError= "Invalid characters in your credit card number. (Enter numbers only.)"
    invalidNumberError="The credit card number is invalid." 
    noNumError="No credit card number is specified."
    noTypeError="No credit card type is specified or the type is not valid." 
    wrongLengthError="Your credit card number contains the wrong number of digits." 
    wrongTypeError="Incorrect card type is specified." 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CreditCardValidator valide le fait qu’un numéro de carte de crédit a la longueur correcte, comporte le préfixe correct et transmet l’algorithme Luhn mod10 du type de carte spécifié. Ce programme de validation ne vérifie pas si la carte de crédit est un compte de carte de crédit actif réel.
 
  <p>Vous pouvez spécifier l’entrée dans la classe CreditCardValidator de deux manières :</p>
  <ul>
    <li>Utilisez les propriétés <codeph>cardNumberSource</codeph> et <codeph>cardNumberProperty</codeph> pour spécifier l’emplacement du numéro de carte de crédit et les propriétés <codeph>cardTypeSource</codeph> et <codeph>cardTypeProperty</codeph> pour spécifier l’emplacement du type de carte de crédit à valider.</li>
    <li>Utilisez les propriétés <codeph>source</codeph> et <codeph>property</codeph> pour spécifier un seul objet. L’objet doit contenir les champs suivants :
    <ul>
        <li><codeph>cardType</codeph> - Spécifie le type de la carte de crédit en cours de validation. 
         <p>Dans MXML, utilisez les valeurs : <codeph>"American Express"</codeph>, <codeph>"Diners Club"</codeph>, <codeph>"Discover"</codeph>, <codeph>"MasterCard"</codeph> ou <codeph>"Visa"</codeph>.</p>
         <p>Dans ActionScript, utilisez les constantes statiques <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph> <codeph>CreditCardValidatorCardType.DISCOVER</codeph> ou <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</p>
          </li>
       <li><codeph>cardNumber</codeph> - Spécifie le numéro de la carte de crédit en cours de validation.</li>
     </ul>
    </li>
  </ul>
  
  <p>Pour procéder à la validation, les instructions suivantes sont observées :</p>
  <p>Durée:</p>
  <ol>
    <li>Visa : 13 ou 16 chiffres</li> 
    <li>MasterCard : 16 chiffres</li> 
    <li>Discover : 16 chiffres</li> 
    <li>American Express : 15 chiffres</li> 
    <li>Diners Club : 14 ou 16 chiffres si elle fonctionne aussi comme une carte MasterCard</li>
  </ol>
  Préfixe :
  <ol>
    <li>Visa : 4</li> 
    <li>MasterCard : 51 à 55</li>
    <li>Discover : 6011</li>
    <li>American Express : 34 ou 37</li>
    <li>Diners Club : 300 à 305, 36 ou 38, 51 à 55</li>
  </ol>
  
  </apiDesc><example conref="CreditCardValidatorExample.mxml"><swfblock conref="examples/CreditCardValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links><apiConstructor id="mx.validators:CreditCardValidator:CreditCardValidator"><apiName>CreditCardValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:CreditCardValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider un numéro de carte de crédit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider un numéro de carte de crédit.
	 
	  <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode. </p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:CreditCardValidator:validateCreditCard"><apiName>validateCreditCard</apiName><shortdesc>
	  Méthode pratique pour appeler une classe Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation. 
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:CreditCardValidator</apiOperationClassifier><apiDesc>Occurrence CreditCardValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider, qui doit contenir les champs suivants :
	  <ul>
	    <li><codeph>cardType</codeph> - Spécifie le type de la carte de crédit en cours de validation. Utilisez les constantes statiques <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> ou <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.</li>
	    <li><codeph>cardNumber</codeph> - Spécifie le numéro de la carte de crédit en cours de validation.</li></ul>
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre value. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.date, la valeur <codeph>baseField</codeph> est « date ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Méthode pratique pour appeler une classe Validator. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:CreditCardValidator:cardNumberProperty"><apiName>cardNumberProperty</apiName><shortdesc>
	  Nom de la propriété card number à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété card number à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>cardNumberSource</codeph>, définissez également cette propriété.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeProperty"><apiName>cardTypeProperty</apiName><shortdesc>
	  Nom de la propriété card type à valider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété card type à valider. Cette propriété est facultative, mais si vous spécifiez la propriété <codeph>cardTypeSource</codeph>, définissez également cette propriété.
	 
      <p>Dans MXML, les valeurs possibles sont les suivantes :</p>
      <ul>
        <li><codeph>"American Express"</codeph></li>
        <li><codeph>"Diners Club"</codeph></li>
        <li><codeph>"Discover"</codeph></li>
        <li><codeph>"MasterCard"</codeph></li>
        <li><codeph>"Visa"</codeph></li>
      </ul>
	 
	  <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété :</p>
	  <p><codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph>, <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph> et <codeph>CreditCardValidatorCardType.VISA</codeph>.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#CreditCardValidatorCardType"><linktext>mx.validators.CreditCardValidatorCardType</linktext></link></related-links></apiValue><apiValue id="mx.validators:CreditCardValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc> 
	  Jeu de caractères de formatage autorisés dans le champ cardNumber.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>" -" (space and dash)
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Jeu de caractères de formatage autorisés dans le champ <codeph>cardNumber</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberListener:get"><apiName>cardNumberListener</apiName><shortdesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ de numéro de carte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ de numéro de carte. Si aucune valeur n’est spécifiée, utilisez la valeur spécifiée pour la propriété <codeph>cardNumberSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardNumberSource:get"><apiName>cardNumberSource</apiName><shortdesc> 
	  Objet contenant la valeur du champ de numéro de carte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objet contenant la valeur du champ de numéro de carte. Si vous spécifiez une valeur pour cette propriété, vous devez aussi en spécifier une pour la propriété <codeph>cardNumberProperty</codeph>. N’utilisez pas cette propriété si vous définissez les propriétés <codeph>source</codeph> et <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeListener:get"><apiName>cardTypeListener</apiName><shortdesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ de type de carte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.validators:IValidatorListener</apiValueClassifier></apiValueDef><apiDesc> 
	  Composant qui écoute le résultat de validation pour le sous-champ de type de carte. Si aucune valeur n’est spécifiée, utilisez la valeur spécifiée pour la propriété <codeph>cardTypeSource</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:cardTypeSource:get"><apiName>cardTypeSource</apiName><shortdesc> 
	  Objet contenant la valeur du champ de type de carte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
	  Objet contenant la valeur du champ de type de carte. Si vous spécifiez une valeur pour cette propriété, vous devez aussi en spécifier une pour la propriété <codeph>cardTypeProperty</codeph>. N’utilisez pas cette propriété si vous définissez les propriétés <codeph>source</codeph> et <codeph>property</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc> 
	  Message d’erreur lorsque le champ cardNumber contient des caractères non valides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid characters in your credit card number. (Enter numbers only.)"
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le champ <codeph>cardNumber</codeph> contient des caractères non valides.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:invalidNumberError:get"><apiName>invalidNumberError</apiName><shortdesc> 
	  Message d’erreur lorsque le champ de numéro de carte de crédit n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The credit card number is invalid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le champ de numéro de carte de crédit n’est pas valide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noNumError:get"><apiName>noNumError</apiName><shortdesc> 
	  Message d’erreur lorsque le champ cardNumber est vide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card number is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le champ <codeph>cardNumber</codeph> est vide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:noTypeError:get"><apiName>noTypeError</apiName><shortdesc> 
	  Message d’erreur lorsque le champ cardType est vide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"No credit card type is specified or the type is not valid."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le champ <codeph>cardType</codeph> est vide.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongLengthError:get"><apiName>wrongLengthError</apiName><shortdesc>
	  Message d’erreur lorsque le champ cardNumber ne contient pas le nombre correct de chiffres pour le type de carte de crédit spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Your credit card number contains the wrong number of digits." 
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque le champ <codeph>cardNumber</codeph> ne contient pas le nombre correct de chiffres pour le type de carte de crédit spécifié.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:CreditCardValidator:wrongTypeError:get"><apiName>wrongTypeError</apiName><shortdesc> 
	  Message d’erreur lorsque le champ cardType contient un type de carte de crédit non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Incorrect card type is specified."
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Message d’erreur lorsque le champ <codeph>cardType</codeph> contient un type de carte de crédit non valide. Utilisez les constantes prédéfinies pour le champ <codeph>cardType</codeph> : <codeph>CreditCardValidatorCardType.MASTER_CARD</codeph>, <codeph>CreditCardValidatorCardType.VISA</codeph>, <codeph>CreditCardValidatorCardType.AMERICAN_EXPRESS</codeph>, <codeph>CreditCardValidatorCardType.DISCOVER</codeph> ou <codeph>CreditCardValidatorCardType.DINERS_CLUB</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
  La classe SocialSecurityValidator valide le fait qu’une chaîne constitue un numéro de sécurité sociale américain valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SocialSecurityValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:SocialSecurityValidator
    allowedFormatChars=" -"
    invalidCharError="You entered invalid characters in your Social Security number."
    wrongFormatError="The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
    zeroStartError="Invalid Social Security number; the number cannot start with 000."
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.validators:Validator</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SocialSecurityValidator valide le fait qu’une chaîne constitue un numéro de sécurité sociale américain valide. Elle ne vérifie pas si elle constitue un numéro de sécurité sociale existant.
 
  </apiDesc><example conref="SocialSecurityValidatorExample.mxml"><swfblock conref="examples/SocialSecurityValidatorExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.validators:SocialSecurityValidator:SocialSecurityValidator"><apiName>SocialSecurityValidator</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.validators:SocialSecurityValidator:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      Remplace la méthode doValidation() de la classe de base pour valider un numéro de sécurité sociale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation.
	  
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Objet à valider.
     
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace la méthode <codeph>doValidation()</codeph> de la classe de base pour valider un numéro de sécurité sociale.
     
	  <p>Vous n’appelez pas cette méthode directement ; Flex l’appelle dans le cadre d’une validation. Si vous créez une classe Validator personnalisée, vous devez implémenter cette méthode.</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.validators:SocialSecurityValidator:validateSocialSecurity"><apiName>validateSocialSecurity</apiName><shortdesc>
	  Méthode pratique pour appeler une classe Validator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Tableau d’objets ValidationResult, avec un objet ValidationResult pour chaque champ examiné par le programme de validation.
	 
	  </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validator</apiItemName><apiOperationClassifier>mx.validators:SocialSecurityValidator</apiOperationClassifier><apiDesc>Occurrence SocialSecurityValidator.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Champ à valider.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>baseField</apiItemName><apiType value="String"/><apiDesc>Représentation textuelle du sous-champ spécifié dans le paramètre <codeph>value</codeph>. Par exemple, si le paramètre <codeph>value</codeph> spécifie value.social, la valeur <codeph>baseField</codeph> est <codeph>social</codeph>.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Méthode pratique pour appeler une classe Validator. Chacune des classes Validator Flex standard comporte une méthode pratique similaire.
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="mx.validators:SocialSecurityValidator:allowedFormatChars:get"><apiName>allowedFormatChars</apiName><shortdesc>
	  Spécifie le jeu de caractères de formatage autorisés dans l’entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"()- .+" // ?????
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie le jeu de caractères de formatage autorisés dans l’entrée.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
	  Message d’erreur lorsque la valeur contient des caractères autres que des chiffres et des caractères de formatage définis par la propriété allowedFormatChars.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"You entered invalid characters in your Social Security number."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque la valeur contient des caractères autres que des chiffres et des caractères de formatage définis par la propriété <codeph>allowedFormatChars</codeph>.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:wrongFormatError:get"><apiName>wrongFormatError</apiName><shortdesc>
	  Message d’erreur lorsque la valeur n’est pas correctement formatée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The Social Security number must be 9 digits or in the form NNN-NN-NNNN."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque la valeur n’est pas correctement formatée.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:SocialSecurityValidator:zeroStartError:get"><apiName>zeroStartError</apiName><shortdesc>
	  Message d’erreur lorsque la valeur contient un numéro de sécurité sociale non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Invalid Social Security number; the number cannot start with 000."
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Message d’erreur lorsque la valeur contient un numéro de sécurité sociale non valide.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.validators:IValidatorListener"><apiName>IValidatorListener</apiName><shortdesc>
  Interface que les composants implémentent pour prendre en charge le mécanisme de validation de données Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Interface que les composants implémentent pour prendre en charge le mécanisme de validation de données Flex. La classe UIComponent implémente cette interface. Par conséquent, toute sous-classe de UIComponent l’implémente également.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
	  Traite à la fois les événements valid et invalid d’une classe Validator assignée à ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Objet d’événement pour la validation.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Traite à la fois les événements <codeph>valid</codeph> et <codeph>invalid</codeph> d’une classe Validator assignée à ce composant.  
	 
	  <p>Vous gérez en général les événements <codeph>valid</codeph> et <codeph>invalid</codeph> distribués par une classe Validator en assignant des écouteurs d’événements aux classes Validator. Si vous voulez gérer directement les événements de validation dans le composant en cours de validation, vous pouvez remplacer cette méthode pour gérer les événements <codeph>valid</codeph> et <codeph>invalid</codeph>. Dans votre implémentation, vous pouvez utiliser la méthode <codeph>dispatchEvent()</codeph> pour distribuer les événements <codeph>valid</codeph> et <codeph>invalid</codeph> au cas où un programme de validation les écoute également.</p>
	 
	  </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:errorString:get"><apiName>errorString</apiName><shortdesc>
      Texte affiché par le conseil d’erreur d’un composant lorsqu’un composant est surveillé par un programme de validation et que la validation échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Texte affiché par le conseil d’erreur d’un composant lorsqu’un composant est surveillé par un programme de validation et que la validation échoue.
     
      <p>Vous pouvez utiliser la propriété <codeph>errorString</codeph> afin d’afficher une erreur de validation pour un composant, sans utiliser réellement une classe Validator. Lorsque vous écrivez une valeur de chaîne dans la propriété <codeph>errorString</codeph>, Flex trace une bordure rouge autour du composant pour indiquer l’erreur de validation et la chaîne apparaît dans une info-bulle en tant que message d’erreur de validation lorsque vous placez le curseur sur le composant, tout comme si un programme de validation détectait une erreur de validation.</p>
     
      <p>Pour effacer l’erreur de validation, écrivez une chaîne vide, "", dans la propriété <codeph>errorString</codeph>.</p>
     
      <p>Ecrire une valeur dans la propriété <codeph>errorString</codeph> ne déclenche pas les événements valid ou invalid ; cela change uniquement la couleur de bordure et affiche le message d’erreur de validation.</p>
 	  
 	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.validators:IValidatorListener:mx.validators:IValidatorListener:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
	  Utilisé par un programme de validation pour assigner un sous-champ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Utilisé par un programme de validation pour assigner un sous-champ.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>