<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.effects"><apiName>mx.effects</apiName><apiDetail/><apiClassifier id="mx.effects:EffectManager"><apiName>EffectManager</apiName><shortdesc>
  La classe EffectManager écoute les événements, tels que les événements show et move envoyés par des objets dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EffectManager écoute les événements, tels que les événements <codeph>show</codeph> et <codeph>move</codeph> envoyés par des objets dans une application Flex. Pour chacun événement correspondant à un déclencheur d’événement, elle détermine si un effet est attribué à l’objet. Si un effet est défini, elle exécute l’effet. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.effects:EffectManager:endEffectsForTarget"><apiName>endEffectsForTarget</apiName><shortdesc>
      Arrête immédiatement tout effet en cours de lecture sur une cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Composant cible sur lequel arrêter tous les effets.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Arrête immédiatement tout effet en cours de lecture sur une cible.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:resumeEventHandling"><apiName>resumeEventHandling</apiName><shortdesc>
      Permet à la classe EffectManager de relancer le traitement d’événements après un appel de la méthode suspendEventHandling().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Permet à la classe EffectManager de relancer le traitement d’événements après un appel de la méthode <codeph>suspendEventHandling()</codeph>. Utilisé en interne en combinaison avec la méthode <codeph>suspendEventHandling()</codeph> afin qu’un effet mettant à jour l’écran n’entraîne pas le déclenchement d’un autre effet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:suspendEventHandling"><apiName>suspendEventHandling</apiName><shortdesc>
      Après l’appel à cette méthode, la classe EffectManager ignore tous les événements et aucun effet n’est déclenché, jusqu’à un appel de la méthode resumeEventHandling().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Après l’appel à cette méthode, la classe EffectManager ignore tous les événements et aucun effet n’est déclenché, jusqu’à un appel de la méthode <codeph>resumeEventHandling()</codeph>. Utilisé en interne pour qu’un effet mettant à jour l’écran n’entraîne pas le déclenchement d’un autre effet.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:Effect"><apiName>Effect</apiName><shortdesc>
  La classe d’effets est une classe de base abstraite qui définit la fonctionnalité de base de tous les effets Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Effect class defines the following properties,
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    <b>Properties</b>
    customFilter=""
    duration="500"
    filter=""
    hideFocusRing="false"
    perElementOffset="0"
    repeatCount="1"
    repeatDelay="0"
    startDelay="0"
    suspendBackgroundProcessing="false|true"
    target="<i>effect target</i>"
    targets="<i>array of effect targets</i>"
     
    <b>Events</b>
    effectEnd="<i>No default</i>"
    efectStart="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffect</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe d’effets est une classe de base abstraite qui définit la fonctionnalité de base de tous les effets Flex. La classe Effect définit la classe d’usine de base de tous les effets. La classe Effect définit la classe d’usine de base de tous les effets.
 
  <p>Vous ne devez pas créer une occurrence de la classe Effect elle même dans une application. En revanche, vous créez une occurrence de l’une des sous-classes, par exemple, Fade ou WipeLeft.</p>
  
  </apiDesc><example conref="SimpleEffectExample.mxml"><swfblock conref="examples/SimpleEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#EffectInstance"><linktext>mx.effects.EffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Diffusé lorsque l’exécution de l’effet commence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Diffusé lorsque l’exécution de l’effet commence.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Distribué lorsque l’effet a été interrompu, ce qui se produit uniquement lorsque l’effet est interrompu par un appel de la méthode stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’effet a été interrompu, ce qui se produit uniquement lorsque l’effet est interrompu par un appel de la méthode <codeph>stop()</codeph>. L’événement EFFECT_END est également distribué pour indiquer la fin de l’effet. Cet événement supplémentaire est envoyé en premier, comme pour signaler aux écouteurs que l’effet n’a pas atteint son état d’arrivée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Distribué lorsque la lecture de l’une des occurrences de l’effet s’arrête, soit lorsque la lecture de l’occurrence s’arrête, soit lorsque l’effet est interrompu par un appel de la méthode end().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la lecture de l’une des occurrences de l’effet s’arrête, soit lorsque la lecture de l’occurrence s’arrête, soit lorsque l’effet est interrompu par un appel de la méthode <codeph>end()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:Effect:Effect"><apiName>Effect</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Le démarrage d’un effet est généralement un processus à trois étapes :</p>
     
      <ul>
        <li>Créez une occurrence de l’objet d’effet à l’aide de l’opérateur <codeph>new</codeph>.</li>
        <li>Définissez les propriétés sur l’objet d’effet, telles que <codeph>duration</codeph>.</li>
        <li>Appelez la méthode <codeph>play()</codeph> ou attribuez l’effet à un déclencheur.</li>
      </ul>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Effect:protected:applyValueToTarget"><apiName>applyValueToTarget</apiName><shortdesc>
      Utilisée en interne par l’infrastructure Effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Cible de l’effet.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Propriété cible.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Valeur de la propriété. 
     
      </apiDesc></apiParam><apiParam><apiItemName>props</apiItemName><apiType value="Object"/><apiDesc>Tableau d’objets, dans lequel chaque élément du tableau contient un objet <codeph>start</codeph> et <codeph>end</codeph> pour les propriétés que l’effet supervise. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Utilisée en interne par l’infrastructure Effet. Si la méthode <codeph>captureStartValues()</codeph> a été appelée, lorsque Flex appelle la méthode <codeph>play()</codeph>, il utilise cette fonction pour renvoyer les cibles à leur état de départ. Le comportement par défaut est de prendre la valeur capturée à l’aide de la méthode <codeph>getValueFromTarget()</codeph> et de la définir directement sur la propriété de la cible. Par exemple : <pre>
      
      target[property] = value;</pre>
     
      <p>Remplacez uniquement cette méthode si vous devez appliquer les valeurs capturées d’une autre façon. Notez que les propriétés de style de la cible sont définies à l’aide d’une autre mécanisme. Utilisez la propriété <codeph>relevantStyles</codeph> pour spécifier les propriétés de style à capturer et à appliquer. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc conref="mx.effects.IEffect#captureEndValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureEndValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Tableau de cibles pour lesquelles les valeurs sont capturées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstance"><apiName>createInstance</apiName><shortdesc conref="mx.effects.IEffect#createInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Objet occurrence d’effet de l’effet.
      
      </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer avec cet effet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstances"><apiName>createInstances</apiName><shortdesc conref="mx.effects.IEffect#createInstances()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Tableau d’objets d’occurrence d’effet (un par cible) de l’effet.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets à animer avec cet effet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstances()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc conref="mx.effects.IEffect#deleteInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Instance de l’effet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#deleteInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectEndHandler"><apiName>effectEndHandler</apiName><shortdesc>
      Appelée à la fin de la lecture d’une occurrence d’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Objet d’événement de type EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée à la fin de la lecture d’une occurrence d’effet. Si vous remplacez cette méthode, prenez soin d’appeler la méthode super.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStartHandler"><apiName>effectStartHandler</apiName><shortdesc>
      Cette méthode est appelée lorsque l’occurrence d’effet commence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Objet d’événement de type EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette méthode est appelée lorsque l’occurrence d’effet commence. Si vous remplacez cette méthode, prenez soin d’appeler la méthode super. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStopHandler"><apiName>effectStopHandler</apiName><shortdesc>
      Appelée lorsqu’une occurrence d’effet a été interrompue par un appel de la méthode stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>Objet d’événement de type EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’une occurrence d’effet a été interrompue par un appel de la méthode <codeph>stop()</codeph>. Si vous remplacez cette méthode, prenez soin d’appeler la méthode super.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffect#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Classe EffectInstance à terminer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:filterInstance"><apiName>filterInstance</apiName><shortdesc>
      Détermine la logique de filtrage d’une occurrence d’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si l’occurrence d’effet doit être exécutée.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Propriétés modifiées par l’effet.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Cible de l’effet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine la logique de filtrage d’une occurrence d’effet. La classe CompositeEffect remplace cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc conref="mx.effects.IEffect#getAffectedProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Tableau de chaînes spécifiant les noms des propriétés modifiées par cet effet.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#getAffectedProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:getValueFromTarget"><apiName>getValueFromTarget</apiName><shortdesc>
      Appelée par la méthode captureStartValues() pour obtenir la valeur d’une propriété à partir de la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Valeur de la propriété cible. 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Cible de l’effet.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Propriété cible.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par une méthode <codeph>captureStartValues()</codeph> pour obtenir la valeur d’une propriété à partir de la cible. Cette fonction doit être appelée uniquement en interne par la structure des effets. Le comportement par défaut est de renvoyer simplement la propriété <codeph>target[property]</codeph>. Les développeurs d’effets peuvent remplacer cette fonction si vous avez besoin d’un autre comportement. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:initInstance"><apiName>initInstance</apiName><shortdesc>
      Copie les propriétés de l’effet vers l’occurrence d’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Occurrence d’effet à initialiser.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Copie les propriétés de l’effet vers l’occurrence d’effet. 
     
      <p>Flex appelle cette méthode à partir de la méthode <codeph>Effect.createInstance()</codeph>. Il n’est pas nécessaire de l’appeler manuellement. </p>
     
      <p>Lorsque vous créez un effet personnalisé, remplacez cette méthode de manière à copier les propriétés de la classe Effect vers la classe d’occurrence d’effet. Lors du emplacement, appelez la méthode <codeph>super.initInstance()</codeph>.  </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffect#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffect#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Tableau d’objets EffectInstance (un par cible), pour l’effet.
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets de destination sur lesquels exécuter cet effet. Si ce paramètre est spécifié, la propriété <codeph>targets</codeph> de l’effet n’est pas utilisée.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, lisez l’effet en sens inverse.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffect#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffect#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffect#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Effect:protected:applyTransitionEndProperties"><apiName>applyTransitionEndProperties</apiName><shortdesc>
     Cet indicateur contrôle si l’effet, lorsqu’il est exécuté dans une transition, applique automatiquement les valeurs de propriété conformément à l’état d’arrivée, au lieu de conserver ces valeurs comme l’a défini l’effet lui-même.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Cet indicateur contrôle si l’effet, lorsqu’il est exécuté dans une transition, applique automatiquement les valeurs de propriété conformément à l’état d’arrivée, au lieu de conserver ces valeurs comme l’a défini l’effet lui-même.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:protected:endValuesCaptured"><apiName>endValuesCaptured</apiName><shortdesc>
      Drapeau contenant la valeur true si les valeurs d’arrivée d’un effet ont déjà été déterminées, ou false si elles doivent être acquises à partir des propriétés actuelles des cibles de l’effet lorsque l’effet s’exécute.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Drapeau contenant la valeur <codeph>true</codeph> si les valeurs d’arrivée ont déjà été déterminées, ou <codeph>false</codeph> si elles doivent être acquises à partir des propriétés actuelles des cibles de l’effet lorsque les effets s’exécutent. Cette propriété est requise par les effets de données effets car la séquence de configuration des effets de données, tels que les effets DefaultListEffect et DefaultTileListEffect sont plus complexes que pour les effets ordinaires.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:instanceClass"><apiName>instanceClass</apiName><shortdesc>
      Objet de type Class qui spécifie la classe de l’occurrence d’effet de cette classe d’effets.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Objet de type Class qui spécifie la classe de l’occurrence d’effet de cette classe d’effets. 
      
      <p>Toutes les sous-classes de la classe Effect doivent définir cette propriété dans le constructeur.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatCount"><apiName>repeatCount</apiName><shortdesc>
      Nombre de fois que l’effet doit être répété.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1</apiData><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de fois que l’effet doit être repété. Les valeurs possibles sont tout entier supérieur ou égal à 0. La valeur 1 signifie que l’effet doit être lu une fois. La valeur 0 indique que l’effet est exécuté en continu jusqu’à ce qu’il soit explicitement arrêté par un appel à, la méthode <codeph>end()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatDelay"><apiName>repeatDelay</apiName><shortdesc>
      Intervalle (en millisecondes), qui s’écoule avant de répéter l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Intervalle (en millisecondes), qui s’écoule avant de répéter l’effet. Les valeurs possibles sont tout entier supérieur ou égal à 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:startDelay"><apiName>startDelay</apiName><shortdesc>
      Intervalle (en millisecondes), qui s’écoule avant de commencer l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Intervalle (en millisecondes), qui s’écoule avant de commencer l’effet. Les valeurs possibles sont tout entier supérieur ou égal à  0. Si l’effet est répété à l’aide de la propriété <codeph>repeatCount</codeph>, <codeph>startDelay</codeph> est appliquée uniquement la première fois que l’effet est exécuté.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Si la valeur est true, elle bloque tout le traitement en arrière-plan pendant l’exécution de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, elle bloque l’ensemble du traitement en arrière-plan pendant que l’effet est exécuté. Le traitement en arrière-plan comprend la mesure, la mise en forme et le traitement des réponses arrivées en provenance du serveur. La valeur par défaut est <codeph>false</codeph>.
     
      <p>Il est recommandé de définir cette propriété sur <codeph>true</codeph> dans la plupart des cas, car elle améliore les performances de l’application. Toutefois, la propriété doit être définie sur <codeph>false</codeph> si l’une des opérations suivantes est effective :</p>
      <ul>
        <li>L’entrée utilisateur peut arriver lorsque l’effet est en cours de lecture et l’application doit répondre à l’entrée utilisateur avant que l’effet s’arrête.</li>
        <li>Une réponse peut arriver en provenance du serveur pendant que l’effet est exécuté et l’application doit traiter la réponse lorsque l’effet est toujours exécuté.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffect#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:customFilter:get"><apiName>customFilter</apiName><shortdesc conref="mx.effects.IEffect#customFilter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#customFilter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffect#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffect#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:filter:get"><apiName>filter</apiName><shortdesc conref="mx.effects.IEffect#filter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#filter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffect#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc conref="mx.effects.IEffect#isPlaying">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#isPlaying">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc conref="mx.effects.IEffect#perElementOffset">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#perElementOffset">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Temps de position actuelle de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position temporelle actuelle de l’effet. Cette propriété a une valeur comprise entre 0 et la durée totale, qui inclut les propriétés <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> et <codeph>repeatDelay</codeph> de l’effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc conref="mx.effects.IEffect#relevantProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc conref="mx.effects.IEffect#relevantStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffect#target"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffect#target"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:targets:get"><apiName>targets</apiName><shortdesc conref="mx.effects.IEffect#targets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#targets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffect#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffect#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
  La classe MaskEffect est une classe de base abstraite de tous les effets qui animent un masque, telles que les effets wipe et l’effet Iris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The MaskEffect class defines the following properties, 
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    createMaskFunction=""
    moveEasingFunction=""
    scaleEasingFunction=""
    scaleXFrom=""
    scaleXTo=""
    scaleYFrom=""
    scaleYTo=""
    show="true|false"
    xFrom=""
    xTo=""
    yFrom=""
    yTo=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe MaskEffect est une classe de base abstraite de tous les effets qui animent un masque, telles que les effets wipe et l’effet Iris. Cette classe encapsule les méthodes et les propriétés communes à tous les effets basés sur un masque.
 
  <p>Un effet masque utilise une incrustation, appelée masque, pour effectuer l’effet. Par défaut, le masque est un rectangle de taille égale au composant cible. </p>
 
  <p>L’état de départ ou d’arrivée du composant cible d’un effet mask doit être invisible. Cela signifie qu’un effet mask fait toujours s’afficher un composant cible sur l’écran, ou le fait disparaître de l’écran.</p>
 
  <p>Vous pouvez utiliser les propriétés <codeph>scaleXFrom</codeph>, <codeph>, scaleYFrom</codeph>, <codeph>scaleXTo</codeph> et <codeph>scaleX</codeph> pour spécifier la dimension initiale et définitive du masque, où une valeur 1.0 correspond à dimensionner le masque à la taille du composant cible, 2.0 dimensionne le masque sur le double de taille du composant, 0.5 dimensionne le masque à la moitié de la taille du composant, etc. Pour utiliser l’une de ces propriétés, vous devez spécifier toutes les quatre.</p>
 
  <p>Vous pouvez utiliser les propriétés <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> et <codeph>yTo</codeph> pour spécifier les coordonnées de la position de départ et de la position d’arrivée du masque relativement au composant cible, sachant que (0, 0) correspond à l’angle supérieur gauche de la cible. Pour utiliser l’une de ces propriétés, vous devez spécifier toutes les quatre.</p>
 
  <p>Les coordonnées de la position de départ et de la position d’arrivée du masque varient selon le type d’effet et si la propriété <codeph>show</codeph> est définie sur <codeph>true</codeph> ou <codeph>false</codeph>. Par exemple, pour l’effet WipeLeft avec une valeur <codeph>show</codeph> définie sur <codeph>false</codeph>, les coordonnées de la position de départ du masque sont (0,0), ce qui correspond à l’angle supérieur gauche de la cible et les coordonnées de la position d’arrivée correspondent à l’angle supérieur droit de la cible largeur, 0) où largeur renvoie à la largeur de la cible.</p>
 
  <p>Pour une valeur <codeph>show</codeph> définie sur <codeph>true</codeph> pour l’effet WipeLeft, les coordonnées de la position de départ du masque sont (largeur, 0) et les coordonnées de la position d’arrivée sont (0,0).</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MaskEffectInstance"><linktext>mx.effects.effectClasses.MaskEffectInstance</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Distribué à la fin de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la fin de l’effet.
 
  <p>Lorsqu’un effet s’exécute une seule fois, cet événement se produit au même moment qu’un événement <codeph>effectEnd</codeph>. Si vous configurez l’effet sur Répéter, il se produit à la fin de chaque répétition de l’effet et l’événement <codeph>endEffect</codeph> se produit dès que l’effet est exécuté pour la dernière fois.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Distribué chaque fois que l’effet met à jour la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué chaque fois que l’effet met à jour la cible. La distribution de cet événement correspond aux appels des méthodes <codeph>onMoveTweenUpdate()</codeph> et <codeph>onScaleTweenUpdate()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Distribué au début de l’effet, ce qui correspond au premier appel des méthodes onMoveTweenUpdate() et onScaleTweenUpdate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué au début de l’effet, ce qui correspond au premier appel des méthodes <codeph>onMoveTweenUpdate()</codeph> et <codeph>onScaleTweenUpdate()</codeph>. Flex envoie également le premier événement <codeph>tweenUpdate</codeph> de l’effet au même moment.
 
  <p>L’événement <codeph>Effect.effectStart</codeph> est envoyé avant l’événement <codeph>tweenStart</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:MaskEffect:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:MaskEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Renvoie les propriétés du composant modifiées par cet effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau de chaînes spécifiant les noms des propriétés modifiées par cet effet.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie les propriétés du composant modifiées par cet effet. Cette méthode retourne un tableau contenant les propriétés <codeph>[ « visible », « width », « height » ]</codeph>. Etant donné que toutes les sous-classes de l’effet WipeDown, WipeLeft, WipeRight et WipeDown modifient ces mêmes propriétés, ces classes n’implémentent pas cette méthode. 
     
      <p>Si vous définissez la classe MaskEffect en sous-classe pour créer un effet personnalisé et qu’elle modifie un autre jeu de propriétés sur la cible, vous devez remplacer cette méthode et renvoyer un tableau contenant une liste des propriétés que votre sous-classe a modifié.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:MaskEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Appelée lorsque l’objet TweenEffect distribue l’objet TweenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Objet d’événement de type TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsque l’objet TweenEffect distribue l’objet TweenEvent. Si vous remplacez cette méthode, prenez soin d’appeler la méthode super.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:MaskEffect:createMaskFunction"><apiName>createMaskFunction</apiName><shortdesc>
      Fonction appelée lorsque l’effet crée le masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction appelée lorsque l’effet crée le masque. La valeur par défaut est une fonction qui retourne un rectangle ayant les mêmes dimensions que la cible. 
     
      <p>La fonction de masque personnalisé présente la signature suivante :</p>
     
      <pre>
      public function createLargeMask(targ:Object, boundp:Rectangle):Shape
      {
          var myMask:Shape = new FlexShape();
     
          // Create mask.
     
          return myMask;
      }
      </pre>
     
      <p>Votre fonction de masque personnalisé prend un argument correspondant au composant cible de l’effet et un deuxième argument qui définit les dimensions de la cible de sorte que vous puissiez correctement dimensionner le masque. Vous pouvez utiliser cet argument pour accéder aux propriétés du composant cible, telles que <codeph>width</codeph> et <codeph>height</codeph>, de sorte que vous puissiez créer un masque avec la taille appropriée.</p>
     
      <p>La fonction retourne un seul objet Shape qui définit le masque.</p>   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:moveEasingFunction"><apiName>moveEasingFunction</apiName><shortdesc>
      Fonction d’accélération à utiliser pour déplacer le masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction d’accélération à utiliser pour déplacer le masque.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleEasingFunction"><apiName>scaleEasingFunction</apiName><shortdesc>
      Fonction d’accélération à utiliser pour la mise à l’échelle du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction d’accélération à utiliser pour la mise à l’échelle du masque.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXFrom"><apiName>scaleXFrom</apiName><shortdesc>
      Propriété scaleX initiale du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété scaleX initiale du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> et <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXTo"><apiName>scaleXTo</apiName><shortdesc> 
      Propriété scaleX d’arrivée du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Propriété scaleX d’arrivée du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> et <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYFrom"><apiName>scaleYFrom</apiName><shortdesc> 
      Propriété scaleY de départ du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Propriété scaleY de départ du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> et <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYTo"><apiName>scaleYTo</apiName><shortdesc>
      Propriété scaleY d’arrivée du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété scaleY d’arrivée du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>scaleXFrom</codeph>, <codeph>scaleYFrom</codeph>, <codeph>scaleXTo</codeph> et <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xFrom"><apiName>xFrom</apiName><shortdesc> 
      Coordonnée x de la position de départ du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée x de la position de départ du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> et <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xTo"><apiName>xTo</apiName><shortdesc> 
      Coordonnée x de la position d’arrivée du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée x de la position d’arrivée du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> et <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yFrom"><apiName>yFrom</apiName><shortdesc>
      Coordonnée y de la position de départ du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la position de départ du masque. 
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> et <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yTo"><apiName>yTo</apiName><shortdesc> 
      Coordonnée y de la position d’arrivée du masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée y de la position d’arrivée du masque.
     
      <p>Pour spécifier cette propriété, vous devez spécifier les quatre propriétés suivantes : <codeph>xFrom</codeph>, <codeph>yFrom</codeph>, <codeph>xTo</codeph> et <codeph>yTo</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:showTarget:get"><apiName>showTarget</apiName><shortdesc>
      Spécifie que le composant cible devient visible, true, invisible ou false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie que le composant cible devient visible, <codeph>true</codeph>, invisible ou <codeph>false</codeph>. Si vous spécifiez cet effet pour un ou déclencheur <codeph>showEffect</codeph> ou <codeph>hideEffect</codeph>, Flex définit la propriété <codeph>showTarget</codeph> pour vous, sur <codeph>true</codeph> si le composant devient visible, ou sur <codeph>false</codeph> s’il devient invisible. Si vous utilisez cet effet avec un autre déclencheur d’effets, vous devez le définir vous-même, le plus souvent au sein de l’écouteur d’événement de l’événement <codeph>startEffect</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
  La classe SoundEffect lit un fichier audio MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SoundEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SoundEffect
    <b>Properties</b>
    id="ID"
    autoLoad="true|false"
    bufferTime="1000"
    loops="0"
    panEasingFunction=""
    panFrom="0"
    source=""
    startTime="0"
    useDuration="true|false"
    volumeEasingFunction="true|false"
    volumeTo="1"
     
    <b>Events</b>
    complete="<i>No default</i>"
    id3="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SoundEffect lit un fichier audio MP3. Par exemple, vous pouvez lire un son lorsque l’utilisateur clique sur un contrôle Button. Cet effet permet de répéter le son, sélectionner le fichier source et contrôler le volume et le panoramique. 
 
  <p>Vous pouvez spécifier le fichier MP3 à l’aide de la propriété <codeph>source</codeph>. Si vous avez déjà incorporé le fichier MP3, vous pouvez, à l’aide du mot de passe <codeph>Embed</codeph>, transmettre l’objet Class du fichier MP3 à la propriété <codeph>source</codeph>. Sinon, spécifiez l’URL intégral du fichier MP3.</p>
  
  </apiDesc><example conref="SoundEffectExample.mxml"><swfblock conref="examples/SoundEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SoundEffectInstance"><linktext>mx.effects.effectClasses.SoundEffectInstance</linktext></link><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="mx.effects:SoundEffect_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Distribué périodiquement au fur et à mesure que le fichier son charge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué périodiquement au fur et à mesure que le fichier son charge.
 
  <p>Dans l’objet d'événement, vous pouvez accéder au nombre d’octets actuellement chargés et au nombre total d’octets à charger. L’événement n’est pas assuré d’être distribué, ce qui signifie que l’événement <codeph>complete</codeph> peut être distribué sans que les événements <codeph>progress</codeph> soient distribués.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Distribué lorsqu’une erreur se produit pendant le chargement du fichier audio.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une erreur se produit pendant le chargement du fichier audio.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.ID3_id3"><apiName>id3</apiName><shortdesc>
  Envoyé lorsque les données ID3 sont disponibles pour un fichier audio MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ID3</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Envoyé lorsque les données ID3 sont disponibles pour un fichier audio MP3.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Envoyé lorsque le fichier audio termine son chargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Envoyé lorsque le fichier audio termine son chargement.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:SoundEffect:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:SoundEffect:load"><apiName>load</apiName><shortdesc>
      Charge le fichier MP3 si la propriété source indique une URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Charge le fichier MP3 si la propriété <codeph>source</codeph> indique une URL.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:SoundEffect:bufferTime"><apiName>bufferTime</apiName><shortdesc> 
      La classe SoundEffect utilise un objet Sound interne pour contrôler le fichier MP3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1000</apiData><apiType value="Number"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      La classe SoundEffect utilise un objet interne Sound pour contrôler le fichier MP3. Cette propriété spécifie le nombre minimum de millisecondes nécessaires pour que les données audio soient conservées dans la mémoire tampon de l’objet Sound. Celui-ci attend de disposer au moins de cette quantité de données avant de commencer la lecture ou avant de reprendre la lecture après une interruption réseau.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:loops"><apiName>loops</apiName><shortdesc>
      Fréquence de lecture du son dans une boucle, où la valeur 0 signifie exécuter l’effet une fois, la valeur 1 signifie exécuter l’effet deux fois, etc.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fréquence de lecture du son dans une boucle, où la valeur 0 signifie exécuter l’effet une fois, la valeur 1 signifie exécuter l’effet deux fois, etc. Si vous répétez le fichier MP3, il continue d’utiliser le paramètre de la propriété <codeph>useDuration</codeph> pour déterminer le temps de lecture.
     
      <p>La propriété <codeph>duration</codeph> est prioritaire sur cette propriété. Si la durée de l’effet n’est pas assez longue pour lire le son au moins une fois, aucun son n’est mis en boucle.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panEasingFunction"><apiName>panEasingFunction</apiName><shortdesc>
      Fonction d’accélération de l’effet panoramique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction d’accélération pour l’effet panoramique. Cette fonction permet d’interpoler entre les valeurs des propriétés <codeph>panFrom</codeph> et <codeph>panTo</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panFrom"><apiName>panFrom</apiName><shortdesc>
      Panoramique de départ de l’objet Sound.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Panoramique initial de l’objet Sound. Cette valeur peut être comprise entre -1.0 et 1.0, où -1.0 utilise uniquement le canal gauche, 1.0 utilise uniquement le canal droit et 0.0 équilibre le son entre les deux canaux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panTo"><apiName>panTo</apiName><shortdesc>
      Panoramique final de l’objet Sound.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Panoramique final de l’objet Sound. Cette valeur peut être comprise entre -1.0 et 1.0, où -1.0 utilise uniquement le canal gauche, 1.0 utilise uniquement le canal droit et 0.0 équilibre le son entre les deux canaux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:startTime"><apiName>startTime</apiName><shortdesc> 
      Position de départ dans le fichier MP3, en millisecondes, à laquelle la lecture doit démarrer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Position de départ dans le fichier MP3, en millisecondes, à laquelle la lecture doit démarrer.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:useDuration"><apiName>useDuration</apiName><shortdesc>
      Si la valeur est true, arrêtez l’effet à la fin du délai spécifié par la propriété duration a écoulé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, arrêtez l’effet à la fin du délai spécifié par la propriété <codeph>duration</codeph> Si la valeur est<codeph>false</codeph>, arrêtez l’effet dès que le MP3 termine sa lecture ou sa mise en boucle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeEasingFunction"><apiName>volumeEasingFunction</apiName><shortdesc>
      Fonction d’accélération de l’effet du volume.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction d’accélération de l’effet volume. Cette fonction permet d’interpoler entre les valeurs des propriétés <codeph>volumeFrom</codeph> et <codeph>volumeTo</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeFrom"><apiName>volumeFrom</apiName><shortdesc>
      Volume de départ de l’objet Sound.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Volume initial de l’objet Sound. La valeur peut être comprise entre 0.0 et 1.0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeTo"><apiName>volumeTo</apiName><shortdesc>
      Volume définitif de l’objet Sound.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Volume définitif de l’objet Sound. La valeur peut être comprise entre 0.0 et 1.0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:autoLoad:get"><apiName>autoLoad</apiName><shortdesc> 
      Si la valeur est true, chargez le fichier MP3 lorsque la source a été spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Si la valeur est <codeph>true</codeph>, chargez le fichier MP3 lorsque la <codeph>source</codeph> a été spécifiée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:isLoading:get"><apiName>isLoading</apiName><shortdesc>
      Cette propriété est définie sur true si le fichier MP3 a été chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Cette propriété est définie sur <codeph>true</codeph> si le fichier MP3 a été chargé. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:sound:get"><apiName>sound</apiName><shortdesc>
      Objet Sound dans lequel le fichier MP3 a été chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Sound"/></apiValueDef><apiDesc>
      Objet Sound dans lequel le fichier MP3 a été chargé. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:source:get"><apiName>source</apiName><shortdesc>
      URL ou classe du fichier MP3 à lire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      URL ou classe du fichier MP3 à lire. Si vous avez déjà incorporé le fichier MP3, vous pouvez, à l’aide du mot de passe <codeph>Embed</codeph>, transmettre l’objet Class du fichier MP3 à la propriété <codeph>source</codeph>. Sinon, spécifiez l’URL intégral du fichier MP3.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
  La classe TweenEffect est la super-classe de tous les effets basées sur l’objet Tween.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:TweenEffect" replacement="spark.effects.Animate" since="4.0">
<description>
  TweenEffect est la super-classe de tous les effets animés dans Flex 3. A partir de Flex 4, les effets Spark étendent la classe spark.effects.Animate au lieu de TweenEffect. 
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TweenEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TagName
    <b>Properties</b>
    easingFunction="<i>easing function name; no default</i>"
     
    <b>Events</b>
    tweenEnd="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TweenEffect est la super-classe de tous les effets basés sur l’objet Tween. Cette classe encapsule les méthodes et les propriétés communes entre tous les effets Tween, pour éviter la duplication du code ailleurs.
 
  <p>Vous créez une sous-classe de la classe TweenEffect pour définir un effet exécutant une animation pendant une période de temps. Par exemple, l’effet Resize modifie la taille de sa cible sur une durée spécifiée.</p>
 
  </apiDesc><example conref="SimpleTweenEffectExample.mxml"><swfblock conref="examples/SimpleTweenEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  Envoyé lorsque l’effet Tween s’arrête.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Envoyé lorsque l’effet Tween s’arrête. Cet événement correspond à un appel de la méthode <codeph>TweenEffectInstance.onTweenEnd()</codeph>.
 
  <p>Lorsqu’un effet tween s’exécute une seule fois, cet événement se produit au même moment qu’un événement <codeph>effectEnd</codeph>. Si vous configurez l’effet tween sur une répétition, il se produit à la fin de chaque répétition de l’effet et l’événement <codeph>endEffect</codeph> se produit dès que l’effet est exécuté pour la dernière fois.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  Envoyé chaque fois que l’effet tween met à jour la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Envoyé chaque fois que l’effet tween met à jour la cible. Cet événement correspond à un appel de la méthode <codeph>TweenEffectInstance.onTweenUpdate()</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  Envoyé lorsque l’effet tween commence, ce qui correspond au premier appel de la méthode onTweenUpdate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Envoyé lorsque l’effet tween commence, ce qui correspond au premier appel de la méthode <codeph>onTweenUpdate()</codeph>. Flex envoie également le premier événement <codeph>tweenUpdate</codeph> de l’effet au même moment.
 
  <p>L’événement <codeph>Effect.effectStart</codeph> est envoyé avant l’événement <codeph>tweenStart</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:TweenEffect:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:TweenEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      Appelée lorsque l’objet TweenEffect distribue l’objet TweenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>Objet d’événement de type TweenEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsque l’objet TweenEffect distribue l’objet TweenEvent. Si vous remplacez cette méthode, prenez soin d’appeler la méthode super.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:TweenEffect:easingFunction"><apiName>easingFunction</apiName><shortdesc>
      Fonction d’accélération pour l’animation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction d’accélération pour l’animation. La fonction d’accélération est utilisée pour interpoler entre la valeur initiale et la valeur finale. Une fonction d’accélération banale effectue une simple interpolation linéaire, mais des fonctions d’accélération plus sophistiquées créent l’illusion d’accélération et de décélération qui rend l’animation plus naturelle. 
     
      <p>Si aucune fonction d’accélération n’est spécifiée, une fonction d’accélération basée sur la méthode <codeph>Math.sin()</codeph> est utilisée.</p>
     
      <p>La fonction d’accélération suit la signature de fonction popularisée par Robert Penner. Cette fonction accepte quatre arguments. Le premier argument est l’« heure actuelle », où l’heure de début de l’animation est 0. Le second argument est la valeur de départ au début de l’animation (nombre). Le troisième argument est la valeur d’arrêt moins la valeur initiale. La quatrième argument est la durée de l’animation. La valeur de retour est la valeur interpolée de l’heure actuelle. Il s’agit généralement d’une valeur comprise entre la valeur de départ et la valeur d’arrivée.</p>
     
      <p>La valeur de cette propriété doit être un objet Function. </p>
     
      <p>Flex inclut un jeu de fonctions d’accélération dans le package mx.effects.easing.</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Tween"><apiName>Tween</apiName><shortdesc>
  Cette classe définit une interpolation, une animation de propriété effectuée sur un objet cible pendant une période de temps.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Tween" replacement="spark.effects.animation.Animation" since="4.0">
<description>
  L’interpolation est la classe d’animation sous-jacente des effets dans Flex 3. Dans Flex 4, les effets Spark utilisent la classe spark.effects.animation.Animation pour fournir des fonctionnalités semblables.
 </description>
	</Alternative></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Cette classe définit une interpolation, une animation de propriété effectuée sur un objet cible pendant une période de temps. Cette animation peut être un changement de position, telle que effectué par l’effet Move ; une modification de la taille, tel qu’effectuée par les effets Resize et Zoom ; une modification de la visibilité, tel qu’effectué par les effets Fade ou Dissolve ; ou dautres types d’animation.
 
  <p>Lorsque vous définissez des objets d’interpolation, vous créez généralement une occurrence de la classe Tween dans le cadre du remplacement de la méthode <codeph>EffectInstance.play()</codeph>. Une occurrence Tween accepte les propriétés <codeph>startValue</codeph>, <codeph>endValue</codeph> et <codeph>duration</codeph>, ainsi qu’une fonction d’accélération facultative pour définir l’animation.</p> 
 
  <p>L’objet interpolé invoque la fonction de rappel <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> dans un intervalle régulier sur l’occurrence d’effet de la durée de l’effet et transmet à la méthode <codeph>onTweenUpdate()</codeph> une valeur interpolée située entre <codeph>startValue</codeph> et <codeph>endValue</codeph>. En règle générale, la fonction de rappel met à jour certaines propriétés de l’objet cible, pour qu’il soit animé pendant la durée de l’effet.</p>
 
  <p>Lorsque l’effet s’arrête, les objets Tween invoquent la fonction de rappel <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph>, si vous en avez définie. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><apiConstructor id="mx.effects:Tween:Tween"><apiName>Tween</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>listener</apiItemName><apiType value="Object"/><apiDesc>Objet notifié à chaque intervalle de l’animation. En règle générale, vous transmettez le mot-clé <codeph>this</codeph> en tant que valeur. L’écouteur <codeph>listener</codeph> doit définir la méthode <codeph>onTweenUpdate()</codeph> et éventuellement la méthode <codeph>onTweenEnd()</codeph>. L’ancienne méthode est invoquée pour chaque intervalle de l’animation et cette dernière est invoquée à la fin de l’animation.
     
      </apiDesc></apiParam><apiParam><apiItemName>startValue</apiItemName><apiType value="Object"/><apiDesc>Valeur de départ de l’animation. Elle est soit un nombre ou un tableau de nombres. Si un nombre est transmis, la méthode Tween interpole entre ce nombre et le nombre transmis dans le paramètre <codeph>endValue</codeph>. Si un tableau de nombres est transmis, chaque nombre du tableau est interpolé.
     
      </apiDesc></apiParam><apiParam><apiItemName>endValue</apiItemName><apiType value="Object"/><apiDesc>Valeur d’arrivée de l’animation. Le type de cet argument doit correspondre au paramètre <codeph>startValue</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>duration</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Durée de l’animation, exprimée en millisecondes.
     
      </apiDesc></apiParam><apiParam><apiItemName>minFps</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Nombre minimal de fois que la méthode <codeph>onTweenUpdate()</codeph> doit être appelée chaque seconde. Le code d’interpolation tente d’appeler la méthode <codeph>onTweenUpdate()</codeph> autant de fois que possible (jusqu’à 100 fois par seconde). Toutefois, si la fréquence est inférieure à <codeph>minFps</codeph>, la durée de l’animation augmente automatiquement. Par conséquent, une animation qui se bloque temporairement (c’est-à-dire si elle n’obtient pas de cycles CPU) recommence à l’endroit où elle a été interrompue, au lieu de sauter à létape suivante. 
     
      </apiDesc></apiParam><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Spécifie une autre fonction de rappel de mise à jour à utiliser au lieu de <codeph>listener.OnTweenUpdate()</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Spécifie une autre fonction de rappel de mise à jour à utiliser au lieu de <codeph>listener.OnTweenEnd()</codeph>
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Lorsque le constructeur est appelé, l’animation commence automatiquement.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Tween:endTween"><apiName>endTween</apiName><shortdesc>
      Interrompez l’interpolation, accédez immédiatement à la fin de l’interpolation et appelez la fonction de rappel onTweenEnd.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompez l’interpolation, accédez immédiatement à la fin de l’interpolation et appelez la fonction de rappel <codeph>onTweenEnd()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:pause"><apiName>pause</apiName><shortdesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:resume"><apiName>resume</apiName><shortdesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:reverse"><apiName>reverse</apiName><shortdesc>
      Exécute l’effet en sens inverse, à partir de sa position actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute l’effet en sens inverse, à partir de sa position actuelle.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:seek"><apiName>seek</apiName><shortdesc>
      Avance l’effet d’interpolation à la position spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiDesc>Position, en millisecondes, comprise entre 0 et la valeur de la propriété <codeph>duration</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Avance l’effet d’interpolation à la position spécifiée. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:setTweenHandlers"><apiName>setTweenHandlers</apiName><shortdesc>
      Par défaut, la classe Tween invoque la fonction de rappel mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate() pendant un intervalle régulier sur l’occurrence d’effet de la durée de l’effet et la fonction de rappel facultative mx.effects.effectClasses.TweenEffectInstance.onTweenEnd() à la fin de la durée de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiDesc>Spécifie la fonction de rappel de mise à jour.
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiDesc>Spécifie la fonction de rappel de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Par défaut, la classe Tween invoque la fonction de rappel <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> pendant un intervalle régulier sur l’occurrence d’effet de la durée de l’effet et la fonction de rappel facultative <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph> à la fin de la durée de l’effet. 
     
      <p>Cette méthode permet de spécifier différentes méthodes en tant que fonctions de rappel de mise à jour et de fin.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:stop"><apiName>stop</apiName><shortdesc>
      Arrête l’interpolation sans déclencher un événement ou en appelant les fonctions endFunction ou onTweenEnd() de l’effet Tween.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Arrête l’interpolation sans déclencher un événement ou en appelant les fonctions endFunction ou <codeph>onTweenEnd()</codeph> de l’effet Tween. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Tween:duration"><apiName>duration</apiName><shortdesc>
      Durée de l’animation, en millisecondes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Durée de l’animation, en millisecondes. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:listener"><apiName>listener</apiName><shortdesc>
      Objet averti à chaque intervalle de l’animation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet averti à chaque intervalle de l’animation. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:easingFunction:set"><apiName>easingFunction</apiName><shortdesc>
      Définit la fonction d’accélération de l’animation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
      Définit la fonction d’accélération de l’animation. La fonction d’accélération permet d’interpoler entre les valeurs <codeph>startValue</codeph> et <codeph>endValue</codeph>. Une fonction d’accélération banale effectue une interpolation linéaire, mais des fonctions d’accélération plus sophistiquées créent l’illusion d’accélération et de décélération qui rend l’animation plus naturelle.
     
      <p>Si aucune fonction d’accélération n’est spécifiée, une fonction d’accélération basée sur la méthode <codeph>Math.sin()</codeph> est utilisée.</p>
     
      <p>La fonction d’accélération suit la signature de fonction popularisée par Robert Penner. Cette fonction accepte quatre arguments. Le premier argument est l’« heure actuelle », où l’heure de début de l’animation est 0. Le second argument est la valeur initiale au début de l’animation (nombre). Le troisième argument est la valeur d’arrêt moins la valeur initiale. La quatrième argument est la durée de l’animation. La valeur renvoyée est le la valeur interpolée de l’heure actuelle (généralement, une valeur comprise entre la valeur de départ et la valeur d’arrivée).</p>
     
      <p>Flex inclut un jeu de fonctions d’accélération dans le package mx.effects.easing.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
  La classe EffectInstance représente l’occurrence d’un effet en cours de lecture sur une cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffectInstance</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EffectInstance représente l’occurrence d’un effet en cours de lecture sur une cible. Chaque cible a une occurrence d’effet séparée qui lui est associée. La durée de vie d’une occurrence d’effet est provisoire. Une occurrence est créée lorsque l’effet est exécuté sur une cible et est détruite lorsque l’effet termine sa lecture. Si existe plusieurs effets sont exécutés sur une cible au même moment (par exemple, un effet Parallel), il existe une autre occurrence d’effet pour chaque effet.
 
  <p>Les développeurs d’effets doivent créer une classe d’occurrences pour leurs effets personnalisés.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiConstructor id="mx.effects:EffectInstance:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Objet UIComponent à animer avec cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectInstance:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffectInstance#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#finishEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#initEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet événement envoyé pour déclencher l’effet. Par exemple, si le déclencheur était une classe mouseDownEffect, l’événement serait un objet MouseEvent de type égal à MouseEvent.MOUSEDOWN.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#initEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffectInstance#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffectInstance#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffectInstance#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffectInstance#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#startEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#startEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffectInstance#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectInstance:protected:playCount"><apiName>playCount</apiName><shortdesc> 
      Nombre de fois que l’occurrence a été exécutée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc> 
      Nombre de fois que l’occurrence a été exécutée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffectInstance#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffectInstance#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effect:get"><apiName>effect</apiName><shortdesc conref="mx.effects.IEffectInstance#effect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Temps de position actuelle de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position temporelle actuelle de l’effet. Cette propriété a une valeur comprise entre 0 et la durée totale, qui inclut les propriétés <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> et <codeph>repeatDelay</codeph> de l’effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc conref="mx.effects.IEffectInstance#propertyChanges">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#propertyChanges">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#startDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#startDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffectInstance#target">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#target">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffectInstance#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Zoom"><apiName>Zoom</apiName><shortdesc>
  L’effet Zoom pour effectuer un zoom avant ou un zoom arrière de l’objet sur un point central.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Zoom" replacement="spark.effects.Scale" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Zoom&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Zoom
    id="ID"
    captureRollEvents="false|true"
    originX="Calculated"
    originY="Calculated"
    zoomWidthFrom="0.01"
    zoomWidthTo="1.0"
    zoomHeightFrom="0.01"
    zoomHeightTo="1.0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Zoom pour effectuer un zoom avant ou un zoom arrière de l’objet sur un point central.
 
  <p>Lorsque vous appliquez un effet Zoom sur le texte rendu à l’aide d’une police système, Flex met le texte entre les tailles intégrales des points. Etant donné qu’il n’est pas nécessaire d’utiliser des polices intégrées lorsque vous appliquez un effet Zoom au texte, le Zoom est plus lisse lorsque vous l’appliquez à des polices intégrées. </p>
 
  <p><b>Remarque :</b> l’effet Zoom ne fonctionne pas lorsque la propriété <codeph>Container.autoLayout</codeph> est définie sur <codeph>false</codeph>.</p>
  
  </apiDesc><example conref="ZoomEffectExample.mxml"><swfblock conref="examples/ZoomEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ZoomInstance"><linktext>mx.effects.effectClasses.ZoomInstance</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><apiConstructor id="mx.effects:Zoom:Zoom"><apiName>Zoom</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Zoom:captureRollEvents"><apiName>captureRollEvents</apiName><shortdesc>
	  La valeur true empêche Flex d’envoyer des événements rollOut et rollOver si la souris n’a pas été déplacée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  La valeur <codeph>true</codeph> empêche Flex d’envoyer des événements <codeph>rollOut</codeph> et <codeph>roolOver</codeph> si la souris n’a pas été déplacée. Définissez cette propriété sur <codeph>true</codeph> lorsque vous utilisez l’effet Zoom pour faire basculer la cible de l’effet entre une grande et une petite taille. 
	  
	  <p>Par exemple, vous utilisez la méthode <codeph>rollOverEffect</codeph> pour déclencher l’effet Zoom afin de diminuer la taille de la cible. Au fur et à mesure que la cible réduit, le pointeur de la souris n’est plus au dessus de la cible, déclenchant un événement <codeph>rollOut</codeph> et l’effet <codeph>rollOutEffect</codeph> correspondant. En définissant la propriété <codeph>captureRollEvent</codeph> sur <codeph>true</codeph>, vous empêcher Flex d’envoyer des événements <codeph>rollOut</codeph>, sauf s’ils se produisent lorsque vous avez déplacé la souris. </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originX"><apiName>originX</apiName><shortdesc>
	  Nombre représentant la position x de l’origine du zoom lorsque la cible de l’effet se trouve dans un conteneur qui prend en charge le positionnement absolu, tel que le conteneur Canvas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre représentant la position x de l’origine du zoom lorsque la cible de l’effet se trouve dans un conteneur qui prend en charge le positionnement absolu, tel que le conteneur Canvas. L’origine du zoom est la position sur la cible autour de laquelle l’effet Zoom est centré.
	 
	  <p>La valeur doit être comprise entre 0 et la largeur du composant cible.</p> 
	 
	  La valeur par défaut est <codeph>target.width</codeph> / 2, qui correspond au centre de la cible.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originY"><apiName>originY</apiName><shortdesc>
	  Nombre représentant la position y de l’origine du zoom lorsque la cible de l’effet se trouve dans un conteneur qui prend en charge le positionnement absolu, tel que le conteneur Canvas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre représentant la position y de l’origine du zoom lorsque la cible de l’effet se trouve dans un conteneur qui prend en charge le positionnement absolu, tel que le conteneur Canvas. L’origine du zoom est la position sur la cible autour de laquelle l’effet Zoom est centré.
	 
	  <p>La valeur doit être comprise entre 0 et la hauteur du composant cible.</p> 
	 
	  La valeur par défaut est <codeph>target.hauteur</codeph> / 2, qui correspond au centre de la cible.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightFrom"><apiName>zoomHeightFrom</apiName><shortdesc>
	  Nombre qui représente l’échelle à utiliser pour démarrer le zoom de la hauteur, exprimé en pourcentage compris entre 0.01 et 1.0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre qui représente l’échelle à utiliser pour démarrer le zoom de la hauteur, exprimé en pourcentage compris entre 0.01 et 1.0. La valeur par défaut, 0.01, est très faible.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightTo"><apiName>zoomHeightTo</apiName><shortdesc>
	  Nombre qui représente l’échelle à utiliser pour terminer le zoom de la hauteur, exprimé en pourcentage compris entre 0.01 et 1.0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre qui représente l’échelle à utiliser pour terminer le zoom de la hauteur, exprimé en pourcentage compris entre 0.01 et 1.0. La valeur par défaut est 1.0, ce qui correspond à la taille normale de l’objet.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthFrom"><apiName>zoomWidthFrom</apiName><shortdesc>
	  Nombre qui représente l’échelle à utiliser pour démarrer le zoom de la largeur, exprimé en pourcentage compris entre 0.01 et 1.0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre qui représente l’échelle à utiliser pour démarrer le zoom de la largeur, exprimé en pourcentage compris entre 0.01 et 1.0. La valeur par défaut, 0.01, est très faible.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthTo"><apiName>zoomWidthTo</apiName><shortdesc>
	  Nombre qui représente l’échelle à utiliser pour terminer le zoom de la largeur, exprimé en pourcentage compris entre 0.01 et 1.0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Nombre représentant l’échelle à laquelle terminer le dimensionnement de la largeur. Exemple, un pour cent entre 0,01 et 1,0. La valeur par défaut est 1,0, ce qui correspond à la taille normale de l’objet.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
  L’effet AnimateProperty anime une propriété ou un style d’un composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AnimateProperty&gt;</code> tag
  inherits all the tag attributes of its superclass
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:AnimateProperty 
    id="ID"
   fromValue="0"
    isStyle="false|true"	 
    property="<i>required</i>"
    roundValue="false|true"
    toValue="0" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet AnimateProperty anime une propriété ou un style d’un composant. Vous spécifiez le nom de la propriété, la valeur de départ et la valeur d’arrivée de la propriété à animer. L’effet définit la propriété sur la valeur de départ, puis met à jour la valeur de la propriété sur la durée de l’effet jusqu’à ce qu’il atteigne la valeur d’arrivée. 
 
  <p>Par exemple, pour modifier la largeur d’un bouton, vous pouvez préciser <codeph>width</codeph> comme propriété à animer, ainsi que les valeurs de largeur de départ et darrivée sur l’effet.</p> 
 
  </apiDesc><example conref="AnimatePropertyEffectExample.mxml"><swfblock conref="examples/AnimatePropertyEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#AnimatePropertyInstance"><linktext>mx.effects.effectClasses.AnimatePropertyInstance</linktext></link></related-links><apiConstructor id="mx.effects:AnimateProperty:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:AnimateProperty:fromValue"><apiName>fromValue</apiName><shortdesc>
	  Valeur de début de la propriété de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur de début de la propriété de l’effet. La valeur par défaut est la valeur de propriété actuelle de la cible
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:isStyle"><apiName>isStyle</apiName><shortdesc>
	  Si la valeur est true, l’attribut de la propriété est un style et vous la définissez à l’aide de la méthode setStyle().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Si la valeur est <codeph>true</codeph>, l’attribut de la propriété est un style et vous la définissez à l’aide de la méthode <codeph>setStyle()</codeph>. 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:property"><apiName>property</apiName><shortdesc>
	  Nom de la propriété sur la cible à animer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Nom de la propriété sur la cible à animer. Cet attribut est requis.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:roundValue"><apiName>roundValue</apiName><shortdesc>
	  Si la valeur est true, arrondissez la valeur tween interpolée au nombre entier le plus proche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Si la valeur est <codeph>true</codeph>, arrondissez la valeur tween interpolée au nombre entier le plus proche. Cette propriété est utile si la propriété à animer est un int ou uint.
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:toValue"><apiName>toValue</apiName><shortdesc>
	  Valeur d’arrivée de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur d’arrivée de l’effet. La valeur par défaut est la valeur de propriété actuelle de la cible
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Move"><apiName>Move</apiName><shortdesc>
  L’effet Move modifie la position d’un composant pendant un intervalle de temps spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Move" replacement="spark.effects.Move" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Move&gt;</code> tag
  inherits all of the tag attributes of its of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Move
    id="ID"
    xFrom="val" 
    yFrom="val"
    xTo="val"
    yTo="val"
    xBy="val"
    yBy="val"
   /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Move modifie la position d’un composant pendant un intervalle de temps spécifiée. Vous pouvez spécifier la position de départ avec les valeurs <codeph>xFrom</codeph> et <codeph>yFrom</codeph>, la position de destination avec <codeph>xTo</codeph> et <codeph>yTo</codeph>, ou le nombre de pixels nécessaires pour déplacer le composant avec <codeph>xBy</codeph> et <codeph>yBy</codeph>. 
 
  <p>Si vous spécifiez l’une de ces deux valeurs (position de départ, d’arrivée ou la quantité à déplacer), Flex calcule la troisième. Si vous spécifiez les trois, Flex ignore les valeurs <codeph>xByl</codeph> et <codeph>yBy</codeph>. Si vous spécifiez uniquement les valeurs <codeph>xTo</codeph> et <codeph>yTo</codeph>, ou les valeurs <codeph>xBy</codeph> et <codeph>yBy</codeph>, Flex utilise les valeurs <codeph>xFrom</codeph> et <codeph>yFrom</codeph> comme position actuelle de l’objet.</p>
  
  <p>Si vous spécifiez un effet Move pour un déclencheur <codeph>moveEffect</codeph> et que vous ne définissez pas les six propriétés From, To et By, Flex les définit pour créer une transition lisse entre l’ancienne position et la nouvelle position de l’objet.</p>
 
  <p>En règle générale, vous appliquez cet effet à une cible dans un conteneur qui utilise le positionnement absolu tel que Canvas, ou un doté de <codeph>"layout=absolue"</codeph> comme l’application ou le panneau. Si vous l’appliquez à une cible dans un conteneur qui exécute la mise en forme automatique, notamment un VBox ou un conteneur Grid, le déplacement se produit, mais la prochaine fois que le conteneur met sa mise en forme à niveau, il renvoie la cible à sa position initiale. Vous pouvez définir la propriété <codeph>autoLayout</codeph> du conteneur sur <codeph>false</codeph> pour désactiver le déplacement inverse, mais ceci désactive la mise en forme de tous les contrôles du conteneur.</p>
  
  </apiDesc><example conref="MoveEffectExample.mxml"><swfblock conref="examples/MoveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MoveInstance"><linktext>mx.effects.effectClasses.MoveInstance</linktext></link></related-links><apiConstructor id="mx.effects:Move:Move"><apiName>Move</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Move:xBy"><apiName>xBy</apiName><shortdesc> 
      Nombre de pixels nécessaires pour déplacer les composants sur l’axe des x.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Nombre de pixels nécessaires pour déplacer les composants sur l’axe des x. Les valeurs peuvent être négatives. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xFrom"><apiName>xFrom</apiName><shortdesc> 
      Coordonnée x de la position de départ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée x de la position de départ.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xTo"><apiName>xTo</apiName><shortdesc> 
      Coordonnée x de la position d’arrivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée x de la position d’arrivée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yBy"><apiName>yBy</apiName><shortdesc> 
      Nombre de pixels nécessaires pour déplacer les composants sur l’axe des y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Nombre de pixels nécessaires pour déplacer les composants sur l’axe des y. Les valeurs peuvent être négatives.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yFrom"><apiName>yFrom</apiName><shortdesc>
      Coordonnée y de la position de départ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la position de départ.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yTo"><apiName>yTo</apiName><shortdesc> 
      Coordonnée x de la position d’arrivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Coordonnée x de la position d’arrivée.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Iris"><apiName>Iris</apiName><shortdesc>
  L’effet Iris anime la cible de l’effet en développant ou en contractant un masque rectangulaire centré sur la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Iris&gt;</code> tag
  inherits all of the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Iris
    id="ID"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:MaskEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Iris anime la cible de l’effet en développant ou en contractant un masque rectangulaire centré sur la cible. Cet effet peut soit élargir le masque à partir du centre de la cible pour présenter la cible, ou le réduire vers le centre pour occulter la cible.
 
  </apiDesc><example conref="IrisEffectExample.mxml"><swfblock conref="examples/IrisEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#IrisInstance"><linktext>mx.effects.effectClasses.IrisInstance</linktext></link></related-links><apiConstructor id="mx.effects:Iris:Iris"><apiName>Iris</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.effects:Sequence"><apiName>Sequence</apiName><shortdesc>
  L’effet Sequence exécute plusieurs effets enfant l’un après l’autre, dans l’ordre auquel ils sont ajoutés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sequence&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Sequence id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Sequence&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Sequence exécute plusieurs effets enfant l’un après l’autre, dans l’ordre auquel ils sont ajoutés.
  
  <p>Vous pouvez créer un effet Sequence dans MXML, comme l’illustre l’exemple suivant :</p>
 
  <pre>
  &lt;mx:Sequence id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Sequence>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Vous pouvez constater que la balise <codeph> &lt;mx:childrens></codeph> est facultative.</p>
  
  <p>Le démarrage d’un effet composite dans le code ActionScript est généralement un processus à cinq étapes :</p>
 
  <ol>
    <li>Créez des occurrences des objets de l’effet pour les regrouper ensemble, par exemple : 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Définissez les propriétés telles que <codeph>duration</codeph> sur les différents objets d’effets.</li>
    <li>Créez une occurrence de l’objet de l’effet Sequence, par exemple : 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Appelez la méthode <codeph>addChild()</codeph> pour chaque objet d’effets, par exemple : 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Invoquez la méthode <codeph>play()</codeph> de l’effet Sequence, par exemple : 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc><example conref="SequenceEffectExample.mxml"><swfblock conref="examples/SequenceEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SequenceInstance"><linktext>mx.effects.effectClasses.SequenceInstance</linktext></link></related-links><apiConstructor id="mx.effects:Sequence:Sequence"><apiName>Sequence</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Cet argument est ignoré s’il s’agit d’effets Sequence. Il est inclus uniquement aux fins de cohérence avec d’autres types d’effets.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Sequence:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant. Ceci prend en compte la méthode startDelay et les informations de répétition de tous les effets enfant, ainsi que leur durée et renvoie le résultat approprié.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Dissolve"><apiName>Dissolve</apiName><shortdesc>
  Vous pouvez animer le composant de transparent à opaque, ou d’opaque à transparent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Dissolve&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Dissolve
    id="ID"
    alphaFrom="val"
    alphaTo="val"
    color="val"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Vous pouvez animer le composant de transparent à opaque, ou d’opaque à transparent. Lorsque l’effet Dissolve est exécuté, il effectue les opérations suivantes : 
  
  <ol>
    <li>Lorsque l’effet démarre, il crée un rectangle opaque. Le rectangle flotte au-dessus du composant cible, sa couleur correspond à la propriété <codeph>Dissolve.color</codeph> et sa propriété <codeph>alpha</codeph> est initialement définie sur (1,0 - <codeph>Dissolve.alphaFrom</codeph>.</li>
    <li>Au fur et à mesure que l’effet est exécuté, la propriété <codeph>alpha</codeph> de l’objet rectangle anime à partir de (1,0 - <codeph>alphaFrom</codeph> à (1,0 - <codeph>alphaTo</codeph>). Au fur et à mesure que le rectangle devient opaque, le contenu qu’il renferme disparaît progressivement.</li>
    <li>Lorsque l’effet est terminée, le rectangle est détruit.</li>
  </ol>
  
  <p>Lorsque l’objet cible est un conteneur, l’effet Dissolve s’applique à la zone de contenu dans le conteneur. La zone de contenu est la zone dans laquelle la couleur d’arrière-plan du conteneur est visible.</p>
 
  <p><b>Remarque </b>: pour utiliser l’effet Dissolve avec le déclencheur <codeph>creationCompleteEffect</codeph> d’un contrôle DataGrid, vous devez définir le fournisseur de données du contrôle incorporé à l’aide d’une balise enfant du contrôle DataGrid, ou à l’aide d’une liaison de données. Ce problème résulte du fait que le fournisseur de données n’apparaît pas jusqu’à ce que l’événement <codeph>creationComplete</codeph> soit envoyé. Par conséquent, lorsque l’effet commence la lecture, Flex na pas terminé le dimensionnement du contrôle DataGrid. </p>
  
  </apiDesc><example conref="DissolveEffectExample.mxml"><swfblock conref="examples/DissolveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#DissolveInstance"><linktext>mx.effects.effectClasses.DissolveInstance</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><apiConstructor id="mx.effects:Dissolve:Dissolve"><apiName>Dissolve</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Dissolve:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
	  Niveau de transparence de départ compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Niveau de transparence de départ compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque. 
	 
	  <p>Si l’effet fait disparaître le composant cible, la valeur par défaut est la valeur actuelle de la propriété <codeph>alpha</codeph>. Si l’effet fait s’afficher le composant cible, la valeur par défaut est 0.0.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
	  Niveau de transparence d’arrivée compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Niveau de transparence d’arrivée compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque. 
	 
	  <p>Si l’effet fait disparaître le composant cible, la valeur par défaut est 0.0. Si l’effet fait s’afficher le composant cible, la valeur par défaut est la valeur actuelle de la propriété <codeph>alpha</codeph> de la cible.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:color"><apiName>color</apiName><shortdesc> 
	  Valeur hexadécimale représentant la couleur du rectangle flottant que l’effet affiche sur l’objet cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFFFFFFF</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
	  Valeur hexadécimale représentant la couleur du rectangle flottant que l’effet affiche sur l’objet cible. La valeur par défaut est la couleur spécifiée par la propriété style <codeph>backgroundColor</codeph> de la propriété style, ou 0xFFFFFF, si <codeph>backgroundColor</codeph> n’est pas définie.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:targetArea"><apiName>targetArea</apiName><shortdesc>
	  Zone de la cible dans laquelle il faut exécuter l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.geom:RoundedRectangle</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Zone de la cible dans laquelle il faut exécuter l’effet. L’incrustation dissolve est tracée à l’aide des dimensions de cette propriété. UIComponents créent une superposition sur le composant entier. Les conteneurs créent une superposition sur la zone contenu, mais pas leur chrome. 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Blur"><apiName>Blur</apiName><shortdesc>
  L’effet Blur permet d’appliquer un effet visuel flou à un composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Blur" replacement="spark.effects.AnimateFilter" since="4.0">
<description>
  Dans Flex 4, utilisez l’effet AnimateFilter avec un filtre bitmap Blur.
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Blur&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Blur
    id="ID"
    blurXFrom="val"
    blurXTo="val"
    blurYFrom="val"
    blurYTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Blur permet d’appliquer un effet visuel flou à un composant. L’effet Blur adoucit les détails d’une image. Vous pouvez produire différents flous, d’un aspect doux et sans contours précis, à un flou gaussien dont l’aspect voilé produit le même effet que celui d’une image regardée à travers un verre semi-opaque. 
 
  <p>L’effet Blur utilise la classe Flash BlurFilter dans le cadre de son implémentation. Pour plus d’informations, voir flash.filters.BlurFilter.</p>
  
  <p>Si vous appliquez un effet Blur à un composant, vous ne pouvez pas appliquer un effet BlurFilter ou un deuxième effet Blur à un composant. </p> 
 
  </apiDesc><example conref="BlurEffectExample.mxml"><swfblock conref="examples/BlurEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link><link href="mx.effects.effectClasses.xml#BlurInstance"><linktext>mx.effects.effectClasses.BlurInstance</linktext></link></related-links><apiConstructor id="mx.effects:Blur:Blur"><apiName>Blur</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Blur:blurXFrom"><apiName>blurXFrom</apiName><shortdesc> 
	  Quantité de flou horizontal de départ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Quantité de flou horizontal de départ. Les valeurs valides sont comprises entre 0,0 et 255. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurXTo"><apiName>blurXTo</apiName><shortdesc> 
	  Quantité de flou horizontal d’arrivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Quantité de flou horizontal d’arrivée. Les valeurs valides sont comprises entre 0,0 et 255.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYFrom"><apiName>blurYFrom</apiName><shortdesc> 
	  Quantité de flou vertical de départ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Quantité de flou vertical de départ. Les valeurs valides sont comprises entre 0,0 et 255. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYTo"><apiName>blurYTo</apiName><shortdesc> 
	  Quantité de flou vertical d’arrivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Quantité de flou vertical d’arrivée. Les valeurs valides sont comprises entre 0,0 et 255.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffect"><apiName>IEffect</apiName><shortdesc>
  L’interface IEffect définit l’interface de base de tous les effets Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IAbstractEffect</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IEffect définit l’interface de base de tous les effets Flex. L’interface IEffectInstance définit l’interface de base de toutes les sous-classes d’occurrences d’effets.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffectInstance"><linktext>mx.effects.IEffectInstance</linktext></link></related-links><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc>
      Capture les valeurs actuelles des propriétés correspondantes sur les cibles de l’effet et les enregistre en tant que valeurs d’arrivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Capture les valeurs actuelles des propriétés correspondantes sur les cibles de l’effet et les enregistre en tant que valeurs d’arrivée.
      
      <p>Flex appelle automatiquement la méthode <codeph>captureEndValues()</codeph> lorsque l’effet fait partir de l’effet de modification de données.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc>
      Capture les valeurs actuelles des propriétés correspondantes d’un autre ensemble de cibles. Flex utilise cette fonction lorsqu’un effet de modifications de données est exécuté.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>Tableau de cibles pour lesquelles les valeurs sont capturées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Capture les valeurs actuelles des propriétés correspondantes d’un autre ensemble de cibles.
     
      <p>Flex utilise cette fonction lorsqu’un effet de modifications de données est exécuté. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc>
      Capture les valeurs actuelles des propriétés correspondantes sur les cibles de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Capture les valeurs actuelles des propriétés correspondantes sur les cibles de l’effet. Flex appelle automatiquement la méthode <codeph>captureStartValues()</codeph> lorsque l’effet fait partir d’une transition.
      
      <p>Utilisez cette fonction lorsque vous souhaitez que l’effet calcule les valeurs de départ et d’arrivée de l’effet. La meilleure façon d’exploiter cette fonction est de l’utiliser selon les étapes suivantes :</p>
      
      <ol>
        <li>Appelez la méthode <codeph>captureStartValues()</codeph>. L’effet enregistre les valeurs de départ de l’effet.</li>
        <li>Modifiez les changements apportés aux cibles d’effets, tels que l’ajout/la suppression des enfants, l’altération des propriétés, le changement de l’emplacement ou le changement des dimensions.</li>
        <li>Appelez la méthode <codeph>play()</codeph>. L’effet capture les valeurs d’arrivée. Cette fonction remplit la propriété <codeph>EffectInstance.propertyChanges</codeph> pour chaque occurrence d’effet créee par cet effet. Les développeurs d’effets peuvent utiliser la propriété <codeph>propertyChanges</codeph> pour récupérer les valeurs de départ et d’arrivée de leur effet.</li>
      </ol>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstance"><apiName>createInstance</apiName><shortdesc>
      Crée une seule occurrence d’effet et l’initialise.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet occurrence d’effet de l’effet.
      
      </apiDesc><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer avec cet effet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une seule occurrence d’effet et l’initialise. Utilisez cette méthode plutôt que la méthode<codeph>play()</codeph> pour manipuler les propriétés occurrence d’effet avant que l’occurrence d’effet soit exécuté. 
      
      <p>L’occurrence d’effet est créé avec le type spécifié dans la propriété <codeph>instanceClass</codeph>. Elle est ensuite initialisée à l’aide de la méthode <codeph>initInstance()</codeph>. Si l’occurrence a été créée par Effectmanager (lorsque l’effet est déclenché par un déclencheur d’effet), l’effet est davantage initialisé par un appel de la méthode <codeph>EffectInstance.initEffect()</codeph>.</p>
     
      <p>Le fait d’appeler la méthode <codeph>createInstance()</codeph> n’exécute pas l’effet. Appelez la méthode <codeph>startEffect()</codeph> de l’occurrence d’effet retournée. </p>
     
      <p>Cette fonction est appelée automatiquement par la méthode <codeph>Effect.play()</codeph>. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstances"><apiName>createInstances</apiName><shortdesc>
      Prend un tableau d’objets cible et invoque la méthode createInstance() sur chaque cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets d’occurrence d’effet (un par cible) de l’effet.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets à animer avec cet effet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Prend un tableau d’objets cible et invoque la méthode <codeph>createInstance()</codeph> sur chaque cible. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc>
      Supprime les écouteurs d’événement d’une occurrence et les retire de la liste d’occurrences.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Instance de l’effet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime les écouteurs d’événement d’une occurrence et les retire de la liste d’occurrences.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:end"><apiName>end</apiName><shortdesc>
      Interrompt un effet en cours de lecture et passe immédiatement à la fin de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>Classe EffectInstance à terminer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Interrompt un effet en cours de lecture et passe immédiatement à la fin de l’effet. L’appel de cette méthode invoque la méthode <codeph>EffectInstance.end()</codeph>.
     
      <p>L’occurrence d’effet distribue un événement <codeph>effectEnd</codeph> lorsque vous appelez cette méthode dans le cadre de l’arrêt de l’effet.</p>
     
      <p>Si vous transmettez une occurrence d’effet en tant qu’argument, seule cette occurrence est interrompue. Si aucun argument est transmis, toutes les occurrences d’effet actuellement générées à partir de l’effet sont interrompues.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#EffectInstance/end()"><linktext>mx.effects.EffectInstance.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      Renvoie un tableau de chaînes, où chaque chaîne correspond au nom d’une propriété modifiée par cet effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau de chaînes spécifiant les noms des propriétés modifiées par cet effet.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau de chaînes, où chaque chaîne correspond au nom d’une propriété modifiée par cet effet. Par exemple, l’effet Move renvoie un tableau contenant <codeph>"x"</codeph> et <codeph>"y "</codeph>.
     
      <p>Chaque sous-classe d’Effet doit implémenter cette méthode. La méthode est utilisée par la classe EffectManager pour éviter que deux effets tentent d’animer la même propriété du même objet au même moment.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:pause"><apiName>pause</apiName><shortdesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:play"><apiName>play</apiName><shortdesc>
      Commence la lecture de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets EffectInstance (un par cible), pour l’effet.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets de destination sur lesquels exécuter cet effet. Si ce paramètre est spécifié, la propriété <codeph>targets</codeph> de l’effet n’est pas utilisée.
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, lisez l’effet en sens inverse.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Commence la lecture de l’effet. Appelez la méthode <codeph>end</codeph> avant d’appeler la méthode <codeph>play()</codeph> pour vous assurer que toute occurrence précédente de l’effet est terminée avant d’en commencer une nouvelle.
     
      <p>Toutes les sous-classes doivent implémenter cette méthode.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:resume"><apiName>resume</apiName><shortdesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:reverse"><apiName>reverse</apiName><shortdesc>
      Exécute l’effet en sens inverse, si l’effet est en cours de lecture, à partir de sa position actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute l’effet en sens inverse, si l’effet est en cours de lecture, à partir de sa position actuelle.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:stop"><apiName>stop</apiName><shortdesc>
      Arrête l’effet, en laissant les cibles de l’effet dans leur état actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Arrête l’effet, en laissant les cibles de l’effet dans leur état actuel. Contrairement à un appel de la méthode <codeph>pause()</codeph>, vous ne pouvez pas appeler la méthode <codeph>resume()</codeph> après avoir appelé la méthode <codeph>stop()</codeph>. Vous pouvez cependant appeler la méthode <codeph>play()</codeph> pour redémarrer l’effet.
     
      <p>L’occurrence d’effet distribue un événement <codeph>effectEnd</codeph> lorsque vous appelez cette méthode dans le cadre de l’arrêt de l’effet.</p>
     
      <p>Pour les effets de masque, le masque n’est pas supprimé automatiquement lorsque l’effet est arrêté. Exécuter davantage des effets de masque sur la même cible sans supprimer le masque peut produire des résultats inattendus.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffect:mx.effects:IEffect:className:get"><apiName>className</apiName><shortdesc>
      Le nom de la classe d’effet, tel que « Fade ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Le nom de la classe d’effet, tel que <codeph>"Fade"</codeph>.
     
      <p>Il s’agit d’un nom de classe court, ou incomplet qui ne contient pas le nom du package. Pour obtenir le nom complet, utilisez la méthode <codeph>getQualifiedClassName()</codeph> du package flash.utils.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:customFilter:get"><apiName>customFilter</apiName><shortdesc>
      Spécifie un objet filtre personnalisé, de type EffectTargetFilter, utilisé par l’effet pour déterminer les cibles sur lequel lire l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie un objet filtre personnalisé, de type EffectTargetFilter, utilisé par l’effet pour déterminer les cibles sur lequel lire l’effet. 
      
      <p>Le filtrage des cibles est effectué uniquement si vous appelez la méthode <codeph>captureStartValues()</codeph> avant d’exécuter l’effet. Flex appelle automatiquement la méthode <codeph>captureStartValues()</codeph> lorsque l’effet fait partir d’une transition.</p>
      
      <p>Utilisez la propriété <codeph>filter</codeph> pour un filtrage simple. Si la propriété <codeph>customFilter</codeph> n’est pas nulle, la propriété <codeph>filter</codeph> est ignorée.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#EffectTargetFilter"><linktext>mx.effects.EffectTargetFilter</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:duration:get"><apiName>duration</apiName><shortdesc> 
      Durée de l’effet en millisecondes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Durée de l’effet en millisecondes. 
     
      <p>Dans un effet Parallel ou Sequence, la propriété <codeph>duration</codeph> définit la durée de chaque effet. Par exemple, si la propriété <codeph>duration</codeph> d’un effet Sequence est définie sur 3 000, chaque effet dans la séquence prend 3 000 ms pour s’exécuter.</p>
     
      <p>Pour un effet répété, la propriété <codeph>duration</codeph> spécifie la durée d’une seule occurrence de l’effet. Par conséquent, si la propriété <codeph>duration</codeph> d’un effet est définie sur 2 000 et la propriété <codeph>repeatCount</codeph> est définie sur 3, l’effet prend un total de 6 000 ms (6 secondes) pour s’exécuter.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Propriété qui permet d’accéder au contrôle à base de liste de la cible d’un effet data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Propriété permettant d’accéder au contrôle à base de liste d’un effet data. Cette propriété permet à une occurrence d’une classe d’effet de communiquer avec le contrôle à base de liste sur lequel l’effet est exécuté. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:filter:get"><apiName>filter</apiName><shortdesc>
      Spécifie un algorithme de filtrage des cibles d’un effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie un algorithme de filtrage des cibles d’un effet. Une valeur <codeph>null</codeph> spécifie l’absence de filtrage.
      
      <p>Le filtrage des cibles est effectué uniquement si vous appelez la méthode <codeph>captureStartValues()</codeph> avant d’exécuter l’effet. Flex appelle automatiquement la méthode <codeph>captureStartValues()</codeph> lorsque l’effet fait partir d’une transition, ou d’un effet data d’un contrôle à base de liste.</p>
      
      <p>Utilisez cette propriété pour effectuer un filtrage simple. Utilisez la propriété <codeph>customFilter</codeph> pour un filtrage plus complexe. Si la propriété <codeph>customFilter</codeph> a une valeur non nulle, elle est ignorée.</p> 
     
      <p>Vous pouvez utiliser les valeurs suivantes pour la propriété <codeph>filter</codeph>.</p>
     
      <ul>
        <li>Une valeur <codeph>"add"</codeph> exécute l’effet sur les cibles ajoutées en tant qu’enfant dans un conteneur.</li>
        <li>Une valeur <codeph>"addItem"</codeph> exécute l’effet sur la fonctionnalité de rendu d’élément pour tous les éléments de liste ajourés à un contrôle List ou TileList.</li>
        <li>Une valeur <codeph>"hide"</codeph> exécute l’effet sur des cibles dont la propriété visible a été modifiée de <codeph>true</codeph> à <codeph>false</codeph>.</li>
        <li>Une valeur <codeph>"move"</codeph> exécute l’effet sur une cible qui a modifié ses propriétés <codeph>x</codeph> ou <codeph>y</codeph>.</li>
        <li>Une valeur <codeph>"remove"</codeph> exécute l’effet sur des cibles supprimées en tant qu’enfant d’un conteneur.</li>
        <li>Une valeur <codeph>"removeItem"</codeph> exécute l’effet sur la fonctionnalité de rendu d’élément des éléments de liste supprimés d’un contrôle List ou TileList.</li>
        <li>Une valeur <codeph>"replaceItem"</codeph> exécute l’effet sur la fonctionnalité de rendu d’élément des éléments de liste remplacés dans un contrôle List ou TileList par un nouvel élément.</li>
        <li>Une valeur <codeph>"replacementItem"</codeph> exécute l’effet sur la fonctionnalité de rendu d’élément des éléments de liste ajoutés à un contrôle List ou TileList qui remplace un élément existant.</li>
        <li>Une valeur <codeph>"resize"</codeph> exécute l’effet sur des cibles qui ont modifié leur propriétés <codeph>width</codeph> ou <codeph>height</codeph>.</li>
        <li>Une valeur <codeph>"show"</codeph> exécute l’effet sur les cibles dont la propriété visible a été modifiée de <codeph>false</codeph> à <codeph>true</codeph>.</li>
        <li>Une valeur <codeph>""</codeph> indique l’absence de filtrage.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Détermine si l’effet doit masquer l’anneau de focus lors du démarrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si l’effet doit masquer l’anneau de focus lors du démarrage. La cible de l’effet est responsable du masquage de l’anneau de focus. Les sous-classes de la classe UIComponent masquent automatiquement l’anneau de focus. Si l’effet cible n’est pas une sous-classe de la classe UIComponent, ajoutez-y des fonctionnalités pour masquer l’anneau de focus.
     
      <p>Définissez cette propriété sur <codeph>true</codeph> pour masquer l’anneau de focus pendant l’effet.</p>
      
      <p>Pour les sous-classes de Effect, la valeur par défaut est <codeph>false</codeph>. Pour les sous-classes MaskEffect, la valeur par défaut est <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc>
      Indicateur de lecture seule défini sur true si les occurrences de l’effet sont en cours de lecture et sur false si aucune occurrence n’est définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur de lecture seule défini sur true si les occurrences de l’effet sont en cours de lecture et sur false si aucune occurrence n’est définie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc>
      Autre délai, en millisecondes, pour les cibles d’effet suivant la première cible de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Autre délai, en millisecondes, pour les cibles d’effet suivant la première cible de l’effet. Cette valeur est ajoutée à la valeur de la propriété <codeph>startDelay</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Temps de position actuelle de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position temporelle actuelle de l’effet. Cette propriété a une valeur comprise entre 0 et la durée totale, qui inclut les propriétés <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> et <codeph>repeatDelay</codeph> de l’effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc>
      Tableau de noms de propriété à utiliser pour effectuer le filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de noms de propriété à utiliser pour effectuer le filtrage. Cette propriété est utilisée en interne et ne doit pas être définie par les utilisateurs d’effets. 
     
      <p>La valeur par défaut est égale à la valeur du tableau renvoyée par la méthode <codeph>getAffectedProperties()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
      Tableau des noms de style à utiliser pour effectuer le filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau des noms de style à utiliser pour effectuer le filtrage. Cette propriété est utilisée en interne et ne doit pas être définie par les utilisateurs d’effets. 
     
      <p>La valeur par défaut est égale à la valeur du tableau renvoyée par la méthode <codeph>getAffectedProperties()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:target:get"><apiName>target</apiName><shortdesc> 
      Objet auquel s’applique cet effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
      Objet auquel s’applique cet effet. Lorsque l’effet est déclenché par un déclencheur d’effets, la propriété <codeph>target</codeph> est automatiquement définie sur l’objet qui déclenche l’effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:targets:get"><apiName>targets</apiName><shortdesc>
      Tableau d’objets représentant des cibles de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets représentant des cibles de l’effet. Lorsque l’effet est en cours de lecture, il effectue l’effet sur chaque cible en parallèle. La définition de la propriété <codeph>target</codeph> remplace tous les objets dans ce tableau. Lorsque la propriété <codeph>targets</codeph> est définie, la propriété <codeph>target</codeph> renvoie le premier élément de ce tableau. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      Objet Evénement transmis à cet Effet par le gestionnaire EffectManager lorsqu’un effet est déclenché, ou nul si l’effet n’est pas exécuté par le gestionnaire EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Objet Evénement transmis à cet Effet par le gestionnaire EffectManager lorsqu’un effet est déclenché, ou <codeph>null</codeph> si l’effet n’est pas exécuté par le gestionnaire EffectManager.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Pause"><apiName>Pause</apiName><shortdesc>
  L’effet Pause est très utile lors de la mise en séquence des effets.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Pause&gt;</code> tag
  inherits all the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Pause 
    id="ID" 
    eventName="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Pause est très utile lors de la mise en séquence des effets. Cette méthode est sans effet pendant la période de temps spécifiée ou jusqu’à ce qu’un événement précis soit envoyé par la cible. Si vous ajoutez un effet Pause en tant qu’enfant d’un effet Sequence, vous pouvez créer une pause entre les deux autres effets.
  
  </apiDesc><example conref="PauseEffectExample.mxml"><swfblock conref="examples/PauseEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#PauseInstance"><linktext>mx.effects.effectClasses.PauseInstance</linktext></link></related-links><apiConstructor id="mx.effects:Pause:Pause"><apiName>Pause</apiName><shortdesc>
     Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Cet argument est ignoré par l’effet pause si aucun attribut <codeph>eventName</codeph> n’a été affecté. S’il existe un attribut <codeph>eventName</codeph>, la cible doit être un objet de type IEventDispatcher, car il est prévu pour envoyer lévénement portant ce nom. Une cible de valeur nulle est autorisée pour cet effet, car un effet Pause contenant juste une propriété <codeph>duration</codeph> n’agit sur aucune cible spécifique et n’en nécessite donc pas.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Constructeur.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Pause:eventName"><apiName>eventName</apiName><shortdesc> 
     Nom de l’événement que l’effet Pause attend avant de s’arrêter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
     Nom de l’événement que l’effet Pause attend avant de s’arrêter. Ce paramètre doit être utilisé en combinaison avec la propriété <codeph>target</codeph>, qui doit être de type IEventDispatcher. Tous les événements doivent provenir d’un répartiteur.
     
     <p>L’écoute de l’événement <codeph>eventName</codeph> est également liée à la propriété <codeph>duration</codeph> qui agit comme délai pour l’événement. Si l’événement n’est pas reçu dans le délai spécifié par la <codeph>duration</codeph>, l’effet s’arrête malgré tout.</p>
     
     <p>Cette propriété est facultative ; l’action par défaut est d’exécuter sans attendre un événement.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Pause:duration:get"><apiName>duration</apiName><shortdesc> 
     La propriété duration contrôle la quantité de temps pendant laquelle cet effet sera interrompu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
     
     </apiDefaultValue></apiValueDef><apiDesc> 
     La propriété duration contrôle la quantité de temps pendant laquelle cet effet sera interrompu. La propriété duration envoie également un délai d’attente nécessaire au déclenchement de l’événement, si la méthode <codeph>eventName</codeph> a été définie sur cet effet. Si la durée est inférieure à 0, l’effet doit attendre indéfiniment que l’événement soit déclenché. Si elle est définie sur un autre délai, y compris 0, l’effet s’arrête, lorsque cette durée s’est écoulée ou lorsque lévénement nommé se déclenche, le premier des deux prévalant.
     
     </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#IEffect/duration"><linktext>mx.effects.IEffect.duration</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
  La classe CompositeEffect est une classe parent des classes Parallel et Sequence, qui définit les balises MXML des propriétés &amp;lt;mx:Parallel&amp;gt ; et &amp;lt;mx:Sequence&amp;gt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The CompositeEffect class adds the following tag attributes,
  and all the subclasses of the CompositeEffect class
  inherit these tag attributes:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CompositeEffect est une classe parent des classes Parallel et Sequence, qui définit les balises MXML des propriétés <codeph>&lt;mx:Parallel></codeph> et <codeph>&lt;mx:Sequence></codeph>. Flex prend en charge deux méthodes pour combiner ou composer les effets parallel et sequence. Lorsque vous combinez plusieurs effets en parallèle, ils s’écoutent au même moment. Lorsque vous combinez plusieurs effets dans la séquence, un effet doit se terminer avant que l’effet suivant ne commence.
 
  <p>Vous pouvez créer un effet composite dans MXML, comme l’illustre l’exemple suivant :</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
   
  &lt;mx:VBox id="myBox" hideEffect="WipeRightUp">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>La balise <codeph>&lt;mx:children></codeph> est facultative.</p>
  
  <p>Le démarrage d’un effet composite dans le code ActionScript est généralement un processus à cinq étapes :</p>
 
  <ol>
    <li>Créez des occurrences des objets de l’effet pour les regrouper ensemble, par exemple : 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Définissez les propriétés telles que <codeph>duration</codeph> sur les différents objets d’effets.</li>
    <li>Créez une occurrence de l’effet Parallel ou Sequence, par exemple : 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>Appelez la méthode <codeph>addChild()</codeph> pour chaque objet d’effets, par exemple : 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>Invoquez la méthode <codeph>play()</codeph> de l’effet composite, par exemple : 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:CompositeEffect:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Cet argument est ignoré pour les effets composites. Il est inclus uniquement aux fins de cohérence avec d’autres types d’effets.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:CompositeEffect:addChild"><apiName>addChild</apiName><shortdesc>
      Ajoute un nouvel effet enfant à cet effet composite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childEffect</apiItemName><apiOperationClassifier>mx.effects:IEffect</apiOperationClassifier><apiDesc>Effet enfant à ajouter à l’effet composite.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un nouvel effet enfant à cet effet composite. Un effet Sequence exécute chaque effet enfant un par un, dans l’ordre auquel ils ont été ajoutés. Un effet Parallel exécute tous les effets enfant simultanément, peu importe l’ordre auquel ils ont été ajoutés.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:CompositeEffect:children:get"><apiName>children</apiName><shortdesc>
      Tableau contenant les effets enfant de cet effet CompositeEffect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les effets enfant de cet effet CompositeEffect.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:CompositeEffect:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant. Ceci prend en compte la méthode startDelay et les informations de répétition de tous les effets enfant, ainsi que leur durée et renvoie le résultat approprié.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffectTargetHost"><apiName>IEffectTargetHost</apiName><shortdesc>
  L’interface IEffectTargetHost définit l’interface permettant d’accéder au contrôle basé sur la liste cible d’un effet data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IEffectTargetHost définit l’interface permettant d’accéder au contrôle basé sur la liste cible d’un effet data. Tous les contrôles à base de liste implémentent cette interface. Cette interface permet à l’occurrence d’une classe d’effets de communiquer le contrôle à base de liste sur lequel l’effet est exécuté. Cette interface permet également de déterminer s’il faut exécuter un effet basé sur la possibilité d’ajouter, de supprimer ou de remplacer un élément de données dans le contrôle cible. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.listClasses.ListBase.xml"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:addDataEffectItem"><apiName>addDataEffectItem</apiName><shortdesc>
      Ajoute un rendu d’élément si un effet de changement des données est en cours d’exécution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Rendu d’élément à ajouter à la mise en forme du contrôle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un rendu d’élément si un effet de changement des données est en cours d’exécution. Le rendu d’élément doit correspondre à un élément de données récemment ajouté dans la collection du fournisseur de données et qui n’a pas encore été affiché.
     
      <p>Cette fonction sera appelée par un effet <codeph>AddItemAction</codeph> dans le cadre d’un effet de changement des données pour indiquer le point auquel un élément de données ajouté à une collection commence à être affiché par le contrôle, à l’aide d’un rendu d’élément.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:getRendererSemanticValue"><apiName>getRendererSemanticValue</apiName><shortdesc>
      Renvoie la valeur true ou false pour indiquer si l’effet doit être lu sur la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> ou <codeph>false</codeph> pour indiquer si l’effet doit être lu sur la cible. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Rendu d’élément
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticProperty</apiItemName><apiType value="String"/><apiDesc>Propriété sémantique du rendu dont la valeur va être renvoyée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur <codeph>true</codeph> ou <codeph>false</codeph> pour indiquer si l’effet doit être lu sur la cible. La classe EffectTargetFilter appelle cette méthode lorsque vous définissez la propriété <codeph>filter</codeph> sur un effet de données. Définissez par exemple la propriété <codeph>filter</codeph> sur <codeph>addItem</codeph> ou <codeph>removeItem</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:removeDataEffectItem"><apiName>removeDataEffectItem</apiName><shortdesc>
      Supprime un rendu d’élément si un effet de changement des données est en cours d’exécution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Rendu d’élément à supprimer de la mise en forme du contrôle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un rendu d’élément si un effet de changement des données est en cours d’exécution. Le rendu d’élément doit correspondre aux données qui ont déjà été supprimées de la collection du fournisseur de données. Cette fonction sera appelée par un effet <codeph>RemoveItemAction</codeph> dans le cadre d’un effet de changement des données pour indiquer le point auquel un élément de données cesse d’être affiché par le contrôle, à l’aide d’un rendu d’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:unconstrainRenderer"><apiName>unconstrainRenderer</apiName><shortdesc>
      Appelé par un effet UnconstrainItemAction dans le cadre d’un effet de changement des données si les rendus d’élément correspondant à certains éléments de données doivent être déplacés hors des positions normales des rendus d’élément dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Rendu d’élément qui constitue la cible de l’effet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par un effet <codeph>UnconstrainItemAction</codeph> dans le cadre d’un effet de changement des données si les rendus d’élément correspondant à certains éléments de données doivent être déplacés hors des positions normales des rendus d’élément dans le contrôle. Le contrôle n’essaie pas de placer le rendu d’élément pour la durée de l’effet.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
  La classe SetStyleAction définit un effet action qui correspond à la propriété SetStyle de la définition d’un état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="duration"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SetStyleAction&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SetStyleAction
    <b>Properties</b>
    id="ID"
    style=""
    value=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SetStyleAction définit un effet action qui correspond à la propriété SetStyle de la définition d’un état d’affichage. Utilisez un effet SetStyleAction au sein d’une définition de transition pour contrôler quand une modification de l’état d’affichage définie par une propriété <codeph>SetStyle</codeph> se produit pendant la transition.
  
  </apiDesc><example conref="TransitionExample.mxml"><swfblock conref="../states/examples/TransitionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SetStyleActionInstance"><linktext>mx.effects.effectClasses.SetStyleActionInstance</linktext></link><link href="mx.states.xml#SetStyle"><linktext>mx.states.SetStyle</linktext></link></related-links><apiConstructor id="mx.effects:SetStyleAction:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:SetStyleAction:name"><apiName>name</apiName><shortdesc> 
	  Nom de la propriété de style en cours de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
	  Nom de la propriété de style en cours de modification. Par défaut, Flex détermine cette valeur à partir de la définition de la propriété <codeph>SetStyle</codeph> dans la définition de l’état d’affichage.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:value"><apiName>value</apiName><shortdesc> 
	  Nouvelle valeur de la propriété style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
	  Nouvelle valeur de la propriété style. Par défaut, Flex détermine cette valeur à partir de la définition de la propriété <codeph>SetStyle</codeph> dans la définition de l’état d’affichage.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
	  Contient les propriétés style modifiées par cet effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Contient les propriétés style modifiées par cet effet. Cette méthode de l’accesseur Get remplace la méthode de la super-classe.
	 
	  <p>Si vous créez une sous-classe de cette classe pour créer un effet personnalisé, vous devez remplacer cette méthode et renvoyer un tableau contenant une liste des propriétés style modifiées par votre sous-classes.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:Rotate"><apiName>Rotate</apiName><shortdesc>
  L’effet Rotate fait pivoter un composant autour d’un point donné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Rotate" replacement="spark.effects.Rotate" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Rotate&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Rotate
    id="ID"
    angleFrom="0"
    angleTo="360"
    originX="0"
    originY="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Rotate fait pivoter un composant autour d’un point donné. Vous pouvez spécifier les coordonnées du centre de la rotation et les angles de départ et d’arrivée de la rotation. Vous pouvez spécifier des valeurs positives ou négatives pour les angles. 
 
  <p><b>Remarque :</b> pour utiliser l’effet Rotate dans du texte, vous devez utiliser une police intégrée, pas une police de périphérique.</p> 
 
  </apiDesc><example conref="RotateEffectExample.mxml"><swfblock conref="examples/RotateEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#RotateInstance"><linktext>mx.effects.effectClasses.RotateInstance</linktext></link></related-links><apiConstructor id="mx.effects:Rotate:Rotate"><apiName>Rotate</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Rotate:angleFrom"><apiName>angleFrom</apiName><shortdesc> 
	  Angle de départ de la rotation de l’objet cible, exprimé en degrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Angle de départ de la rotation de l’objet cible, exprimé en degrés. Les valeurs possibles vont de 0 à 360.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:angleTo"><apiName>angleTo</apiName><shortdesc> 
	  Angle d’arrivée de la rotation de l’objet cible, exprimé en degrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>360</apiData><apiType value="Number"/><apiDefaultValue>360
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  Angle d’arrivée de la rotation de l’objet cible, exprimé en degrés. Les valeurs peuvent être soit positives, soit négatives.
	 
	  <p>Si la valeur de <codeph>angleTo</codeph> est inférieure à la valeur de <codeph>angleFrom</codeph>, la cible pivote en sens anti-horaire. Dans le cas contraire, elle pivote en sens horaire. Pour faire tourner la cible plusieurs fois, définissez cette valeur sur un grand nombre positif ou sur un petit nombre négatif.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originX"><apiName>originX</apiName><shortdesc>
	  Position x du point central de la rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Position x du point central de la rotation. La cible pivote autour de ce point. Les valeurs possibles sont comprises entre 0 et la largeur de la cible.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originY"><apiName>originY</apiName><shortdesc>
	  Position y du point central de la rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Position y du point central de la rotation. La cible pivote autour de ce point. Les valeurs possibles sont comprises entre 0 et la hauteur de la cible.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:hideFocusRing:set"><apiName>hideFocusRing</apiName><shortdesc>
	  Détermine si l’effet doit masquer l’anneau de focus lors du démarrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Détermine si l’effet doit masquer l’anneau de focus lors du démarrage. La cible est elle-même responsable du masquage réel de l’anneau du focus. 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
  La classe EffectTargetFilter définit un filtre personnalisé qui est exécuté par chaque effet de transition sur chaque cible de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EffectTargetFilter définit un filtre personnalisé qui est exécuté par chaque effet de transition sur chaque cible de l’effet. 
 
  <p>La classe EffectTargetFilter définit une méthode <codeph>defaultFilterFunction()</codeph> qui utilise les propriétés <codeph>filterProperties</codeph> et <codeph>filterStyles</codeph> pour déterminer s’il faut exécuter l’effet sur chaque cible.</p>
  
  <p>Vous pouvez également définir un filtre personnalisé pour implémenter votre propre logique de filtrage. Pour ce faire, définissez votre fonction de filtre, puis spécifiez cette fonction sur un objet EffectTargetFilter à l’aide de la propriété <codeph>filterFunction</codeph>.</p>
  
  <p>Pour configurer un effet à utiliser un filtre personnalisé, transmettez un objet EffectTargetFilter sur la propriété <codeph>Effect.customFilter</codeph> de l’effet.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:EffectTargetFilter:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectTargetFilter:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      Fonction de filtre par défaut de la classe EffectTargetFilter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> pour permettre à l’occurrence effet d’être exécutée. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets PropertyChanges. La propriété <codeph>target</codeph> est égale à la cible de l’effet. Si la propriété d’une cible n’est pas modifiée par une transition, l’objet PropertyChanges correspondant n’est pas inclus dans ce tableau.
      
      </apiDesc></apiParam><apiParam><apiItemName>instanceTarget</apiItemName><apiType value="Object"/><apiDesc>Cible de la classe EffectInstance qui appelle cette fonction. Si un effet a plusieurs cibles, cette fonction est appelée une fois par cible. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction du filtre par défaut de la classe EffectTargetFilter. Si l’objet <codeph>instanceTarget</codeph> dispose des valeurs de départ et d’arrivée pour toutes les valeurs spécifiées par les propriétés <codeph>filterProperties</codeph> ou <codeph>filterStyles</codeph>, exécutez l’effet sur la cible.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:EffectTargetFilter:filterInstance"><apiName>filterInstance</apiName><shortdesc> 
      Détermine si une cible doit être filtrée, renvoyée avec la valeur true si elle doit être incluse dans un effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la cible doit être incluse dans l’effet ; <codeph>false</codeph> le cas contraire.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets PropertyChanges. La propriété cible de chaque objet PropertyChanges est égale à la cible de l’effet. Si la propriété d’une cible n’est pas modifiée par une transition, l’objet PropertyChanges correspondant n’est pas inclus dans ce tableau.
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticsProvider</apiItemName><apiOperationClassifier>mx.effects:IEffectTargetHost</apiOperationClassifier><apiDesc>Classe IEffectTargetHost utilisée pour évaluer les propriétés spécifiées dans l’objet requiredSemantics de la cible, qui est normalement la classe effectTargetHost de l’effet. Pour les effets de modification d’éléments, lorsque les cibles de l’effet sont des rendus d’éléments, il s’agira de la propriété List ou TileList contenant les rendus d’éléments.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>Cible de la classe EffectInstance qui appelle cette fonction. Si un effet a plusieurs cibles, cette fonction est appelée une fois par cible.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Détermine si une cible doit être filtrée, renvoyée avec la valeur true si elle doit être incluse dans un effet. La détermination est effectuée en appelant les classes filterFunction et semanticFilterFunction et en renvoyant la valeur true si et uniquement si les deux fonctions renvoient true. Les fonctions par défaut associées aux valeurs par défaut renvoient toujours true. En règle générale, une classe EffectTargetFilter utilise un type de filtre ou un autre type, pas les deux.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectTargetFilter:filterFunction"><apiName>filterFunction</apiName><shortdesc>
      Fonction qui définit une logique de filtrage personnalisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction qui définit une logique de filtrage personnalisée. Flex appelle cette méthode sur chaque cible de l’effet. Si la fonction renvoie <codeph>true</codeph>, l’effet est lue sur la cible ; si elle renvoie <codeph>false</codeph>, la cible est ignorée par l’effet. Une fonction de filtre personnalisée assure un meilleur contrôle en terme de filtrage que la propriété <codeph>Effect.filter</codeph>. 
     
      <p>La fonction de filtre présente la signature suivante :</p>
     
      <pre>
      filterFunc(propChanges:Array, instanceTarget:Object):Boolean
      {
          // Return true to play the effect on instanceTarget, 
          // or false to not play the effect.
      } 
      </pre>
     
      <p>où :</p>
      
      <p><codeph>propChanges</codeph> : tableau d’objets PropertyChanges, un objet par composant cible de l’effet. Si la propriété d’une cible n’est pas modifiée par la transition, elle n’est pas incluse dans ce tableau.</p>
      
      <p><codeph>InstanceTarget</codeph> : composant cible spécifique de l’effet que vous souhaitez filtrer. Dans la fonction de filtre personnalisée, vous recherchez d’abord le tableau <codeph>propChanges</codeph> de l’objet PropertyChanges qui correspond à l’argument <codeph>instanceTarget</codeph>, en comparant l’argument <codeph>instanceTarget</codeph> avec la propriété <codeph>propChanges.target</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterProperties"><apiName>filterProperties</apiName><shortdesc> 
      Tableau de chaînes spécifiant les propriétés du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Tableau de chaînes spécifiant les propriétés du composant. Si l’une des propriétés du tableau est modifiée sur le composant cible exécutez l’effet sur la cible. 
     
      <p>Si vous définissez une fonction de filtre personnalisée, vous pouvez examiner la propriété <codeph>filterProperties</codeph> à partir de votre fonction.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterStyles"><apiName>filterStyles</apiName><shortdesc> 
      Tableau de chaînes spécifiant les propriétés de style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      Tableau de chaînes spécifiant les propriétés de style. Si l’une des propriétés du tableau est modifiée sur le composant cible exécutez l’effet sur la cible. 
     
      <p>Si vous définissez une fonction de filtre personnalisée, vous pouvez examiner la propriété <codeph>filterStyles</codeph> à partir de votre fonction.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:requiredSemantics"><apiName>requiredSemantics</apiName><shortdesc>
      Un ensemble de propriétés et de valeurs associées doit être associé à une cible pour que l’effet puisse s’exécuter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      Un ensemble de propriétés et de valeurs associées doit être associé à une cible pour que l’effet puisse s’exécuter.
     
      <p>Lorsque vous utilisez des effets de données, vous pouvez utiliser cette propriété pour filtrer les effets. Pour exécuter un effet de données sur toutes les cibles d’un contrôle list qui ne sont pas ajoutées par l’effet, autrement dit les cibles supprimées, remplacées, déplacées ou attribuées de toute autre manière, vous pouvez écrire la définition de l’effet tel qu’indiqué ci-contre : </p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur> </pre>
     
      <p>Pour lire un effet de données sur toutes les cibles qui ne sont pas ajoutées ou supprimées par l’effet, vous pouvez écrire la définition de l’effet tel qu’indiqué ci-contre :</p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}, {'removed':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur></pre>
     
      <p>La liste des propriétés autorisées que vous pouvez spécifier inclut les propriétés <codeph>added</codeph>, <codeph>removed</codeph>, <codeph>replaced</codeph> et <codeph>replacement</codeph>. Les valeurs autorisées pour les propriétés sont <codeph>true</codeph> et <codeph>false</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Fade"><apiName>Fade</apiName><shortdesc>
  L’effet Fade anime la propriété alpha d’un composant, de transparent à opaque, ou d’opaque à transparent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Fade" replacement="spark.effects.Fade" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Fade&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Fade 
    id="ID"
    alphaFrom="val"
    alphaTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Fade anime la propriété <codeph>alpha</codeph> d’un composant, de transparent à opaque et d’opaque à transparent. 
  
  <p>Si vous spécifiez l’effet Fade pour le déclencheur <codeph>showEffect</codeph> ou <codeph>hideEffect</codeph> et si vous omettez des valeurs les propriétés <codeph>alphaFrom</codeph> et <codeph>alphaTo</codeph>, l’effet effectue automatiquement une transition <codeph>alpha</codeph> de la valeur 0 à la valeur <codeph>alpha</codeph> actuelle de la cible sur un déclencheur <codeph>showEffect</codeph> et de la valeur <codeph>alpha</codeph> actuelle de la cible à 0 sur un déclencheur <codeph>hideEffect</codeph>.</p> 
 
  <p><b>Remarque: </b>Pour utiliser l’effet Fade dans du texte, vous devez utiliser une police intégrée, pas une police de périphérique. </p> 
 
  </apiDesc><example conref="FadeEffectExample.mxml"><swfblock conref="examples/FadeEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#FadeInstance"><linktext>mx.effects.effectClasses.FadeInstance</linktext></link></related-links><apiConstructor id="mx.effects:Fade:Fade"><apiName>Fade</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet à animer à l’aide de cet effet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Fade:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
      Niveau de transparence de départ compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Niveau de transparence de départ compris entre 0.0 et 1.0, où 0.0 signifie transparent et 1.0 signifie complètement opaque. 
     
      <p>Si l’effet fait disparaître le composant cible, la valeur par défaut est la valeur actuelle de la propriété <codeph>alpha</codeph>. Si l’effet fait s’afficher le composant cible, la valeur par défaut est 0.0.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Fade:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
      Niveau de transparence d’arrivée, où 0.0 signifie transparent et 1.0 signifie complètement opaque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      Niveau de transparence d’arrivée, où 0.0 signifie transparent et 1.0 signifie complètement opaque.
     
      <p>Si l’effet fait disparaître le composant cible, la valeur par défaut est 0.0. Si l’effet fait s’afficher le composant cible, la valeur par défaut est la valeur actuelle de la propriété <codeph>alpha</codeph> de la cible.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Parallel"><apiName>Parallel</apiName><shortdesc>
  L’effet Parallel exécute plusieurs effets enfant au même moment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;mx:Parallel&gt; tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Parallel id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Parallel&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’effet Parallel exécute plusieurs effets enfant au même moment.
  
  <p>Vous pouvez créer un effet Parallel dans MXML, comme l’illustre l’exemple suivant :</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}" >
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>Vous pouvez constater que la balise <codeph> &lt;mx:childrens></codeph> est facultative.</p>
  
  <p>Le démarrage d’un effet Parallel est généralement un processus à cinq étapes :</p>
 
  <ol>
    <li>Créez des occurrences des objets de l’effet pour les regrouper ensemble, par exemple : 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>Définissez les propriétés telles que <codeph>duration</codeph> sur les différents objets d’effets.</li>
    <li>Créez une occurrence de l’objet d’effet Parallel, par exemple : 
    <pre>myParallelEffect = new mx.effects.Parallel();</pre></li>
    <li>Appelez la méthode <codeph>addChild()</codeph> pour chaque objet d’effets, par exemple : 
    <pre>myParallelEffect.addChild(myFadeEffect);</pre></li>
    <li>Invoquez la méthode <codeph>play()</codeph> de l’effet Parallel, par exemple : 
    <pre>myParallelEffect.play();</pre></li>
  </ol>
 
  </apiDesc><example conref="ParallelEffectExample.mxml"><swfblock conref="examples/ParallelEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ParallelInstance"><linktext>mx.effects.effectClasses.ParallelInstance</linktext></link></related-links><apiConstructor id="mx.effects:Parallel:Parallel"><apiName>Parallel</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Cet argument est ignoré pour les effets Parallel. Il est inclus uniquement aux fins de cohérence avec d’autres types d’effets.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Parallel:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     Renvoie la durée de cet effet tel que définie par la durée de tous les effets enfant. Ceci prend en compte la méthode startDelay et les informations de répétition de tous les effets enfant, ainsi que leur durée et renvoie le résultat approprié.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IAbstractEffect"><apiName>IAbstractEffect</apiName><shortdesc>
  L’interface IAbstractEffect permet d’indiquer qu’une propriété ou un paramètre doit être de type Effect, mais n’implémente pas réellement les API de l’interface IEffect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IAbstractEffect permet d’indiquer qu’une propriété ou un paramètre doit être de type Effect, mais n’implémente pas réellement les API de l’interface IEffect. La classe UIComponent reconnaît quand la propriété qui implémente l’interface AbstractEffect change et la transmet à la classe EffectManager aux fins de traitement.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffect"><linktext>mx.effects.IEffect</linktext></link></related-links></apiClassifier><apiClassifier id="mx.effects:IEffectInstance"><apiName>IEffectInstance</apiName><shortdesc>
  L’interface IEffectInstance représente une occurrence d’un effet exécuté sur une cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IEffectInstance représente une occurrence d’un effet exécuté sur une cible. Chaque cible a une occurrence d’effet séparée qui lui est associée. La durée de vie d’une occurrence d’effet est provisoire. Une occurrence est créée lorsque l’effet est exécuté sur une cible et est détruite lorsque l’effet termine sa lecture. Si existe plusieurs effets sont exécutés sur une cible au même moment (par exemple, un effet Parallel), il existe une autre occurrence d’effet pour chaque effet.
 
  <p>Les développeurs d’effets doivent créer une classe d’occurrences pour leurs effets personnalisés.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:end"><apiName>end</apiName><shortdesc>
      Interrompt une occurrence d’effet en cours de lecture et passe immédiatement à la fin de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt une occurrence d’effet en cours de lecture et passe immédiatement à la fin de l’effet. Cette méthode est invoquée par le biais d’un appel de la méthode <codeph>Effect.end()</codeph>. Dans le cadre de l’implémentation, elle appelle la méthode <codeph>finishEffect()</codeph>.
     
      <p>L’occurrence d’effet distribue un événement <codeph>effectEnd</codeph> lorsque vous appelez cette méthode dans le cadre de l’arrêt de l’effet.</p>
     
      <p>Dans une sous-classe EffectInstance, vous pouvez éventuelement annuler cette méthode. Dans le cadre du remplacement, il est conseillé d’appeler la méthode <codeph>super.end()</codeph> à partir de la fin de votre remplacement, à la suite de votre logique.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/end()"><linktext>mx.effects.Effect.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc>
      Appelée par la méthode end() à la fin de la lecture de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée par la méthode <codeph>end()</codeph> à la fin de la lecture de l’effet. Cette fonction distribue un événement <codeph>endEffect</codeph> pour la cible de l’effet.
     
      <p>Il n’est pas nécessaire de remplacer cette méthode dans une sous-classe. Il est inutile d’appeler cette méthode lors de l’utilisation d’effets, mais il se pourrait que vous l’appelez si vous créez une sous-classe d’effets.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc>
      Appelé à la fin de la lecture de chaque itération d’un effet répété.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelé à la fin de la lecture de chaque itération d’un effet répété.
     
      <p>Il n’est pas nécessaire de remplacer cette méthode dans une sous-classe. Il est inutile d’appeler cette méthode lors de l’utilisation d’effets.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc>
      Cette méthode est appelée si l’effet a été déclenché par le gestionnaire EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet événement envoyé pour déclencher l’effet. Par exemple, si le déclencheur était une classe mouseDownEffect, l’événement serait un objet MouseEvent de type égal à MouseEvent.MOUSEDOWN.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette méthode est appelée si l’effet a été déclenché par EffectManager. Cette version de classe de base enregistre l’événement qui a déclenché l’effet dans la propriété <codeph>triggerEvent.</codeph>. Chaque sous-classe doit remplacer cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:pause"><apiName>pause</apiName><shortdesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode resume().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt momentanément l’effet jusqu’à un appel de la méthode <codeph>resume()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:play"><apiName>play</apiName><shortdesc>
      Exécute l’occurrence d’effet sur la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute l’occurrence d’effet sur la cible. Appelez plutôt la méthode <codeph>startEffect()</codeph> pour lancer la lecture d’un effet dans une classe EffectInstance.
     
      <p>Dans une sous-classe EffectInstance, vous devez remplacer cette méthode. Le remplacement doit appeler la méthode <codeph>super.play()</codeph> de façon à ce que l’événement <codeph>effetStart</codeph> est envoyé à partir de la cible.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:resume"><apiName>resume</apiName><shortdesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode pause().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Reprend l’effet après une interruption demandée par un appel de la méthode <codeph>pause()</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:reverse"><apiName>reverse</apiName><shortdesc>
      Exécute l’effet en sens inverse, à partir de sa position actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute l’effet en sens inverse, à partir de sa position actuelle.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc>
      Exécute l’occurrence d’effet sur la cible, au terme de la période startDelay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute l’occurrence d’effet sur la cible, au terme de la période <codeph>startDelay</codeph>. Appelée par la classe d’effet. Utilisez cette fonction au lieu de la méthode <codeph>play()</codeph> lorsque vous commencer une classe EffectInstance.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:stop"><apiName>stop</apiName><shortdesc>
      Arrête l’effet, en laissant la cible dans son état actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Arrête l’effet, en laissant la cible dans son état actuel. Cette méthode est invoquée par le biais d’un appel de la méthode <codeph>Effect.stop()</codeph>. Dans le cadre de l’implémentation, elle appelle la méthode <codeph>finishEffect()</codeph>.
     
      <p>L’occurrence d’effet distribue un événement <codeph>effectEnd</codeph> lorsque vous appelez cette méthode dans le cadre de l’arrêt de l’effet.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:className:get"><apiName>className</apiName><shortdesc>
      Nom de la classe d’effet, tel que « FadeInstance ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la classe d’effet, tel que <codeph>"FadeInstance"</codeph>.
     
      <p>Il s’agit d’un nom de classe court ou « incomplet » qui n’inclut pas le nom du package. Pour obtenir le nom complet, utilisez la méthode <codeph>getQualifiedClassName()</codeph> du package flash.utils.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:duration:get"><apiName>duration</apiName><shortdesc> 
      Durée de l’effet, en millisecondes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Durée de l’effet, en millisecondes.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      Propriété qui permet d’accéder au contrôle à base de liste de la cible d’un effet data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      Propriété permettant d’accéder au contrôle à base de liste d’un effet data. Cette propriété permet à une occurrence d’une classe d’effet de communiquer avec le contrôle à base de liste sur lequel l’effet est exécuté. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effect:get"><apiName>effect</apiName><shortdesc>
      Objet IEffect qui a créé cet objet IEffectInstance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc>
      Objet IEffect qui a créé cet objet IEffectInstance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      Détermine si l’effet doit masquer l’anneau de focus lors du démarrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si l’effet doit masquer l’anneau de focus lors du démarrage. La cible de l’effet est responsable du masquage de l’anneau de focus. Les sous-classes de la classe UIComponent masquent automatiquement l’anneau de focus. Si la cible de l’effet n’est pas une sous-classe de la classe UIComponent, vous devez y ajouter des fonctionnalités pour masquer l’anneau de focus.
     
      <p>Définissez cette propriété sur <codeph>true</codeph> pour masquer l’anneau de focus pendant l’effet.</p>
      
      <p>Pour les sous-classes de Effect, la valeur par défaut est <codeph>false</codeph>. Pour les sous-classes MaskEffect, la valeur par défaut est <codeph>true</codeph>.
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Temps de position actuelle de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position temporelle actuelle de l’effet. Cette propriété a une valeur comprise entre 0 et la durée totale, qui inclut les propriétés <codeph>startDelay</codeph>, <codeph>repeatCount</codeph> et <codeph>repeatDelay</codeph> de l’effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc>
      Spécifie l’objet PropertyChanges contenant les valeurs de départ et darrivée de l’ensemble des propriétés correspondant aux cibles de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc>
      Spécifie l’objet PropertyChanges contenant les valeurs de départ et darrivée de l’ensemble des propriétés correspondant aux cibles de l’effet. Cette propriété est définie uniquement si la méthode <codeph>captureStartValues()</codeph> a été appelée sur l’effet qui a créé cette occurrence d’effet. 
      
      <p>Utilisez souvent la propriété <codeph>propertyChanges</codeph> pour créer un effet utilisé dans le cadre d’une transition. Flex appelle automatiquement la méthode <codeph>captureStartValues()</codeph> lorsqu’elle commence une transition. Dans le cadre du remplacement de la méthode <codeph>EffectInstance.play()</codeph>, vous pouvez examiner les informations de la méthode <codeph>propertyChanges()</codeph> pour initialiser les valeurs de départ et d’arrivée de l’effet.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc>
      Nombre de fois que l’effet doit être répété.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de fois que l’effet doit être repété. Les valeurs possibles sont tout entier supérieur ou égal à 0.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatCount"><linktext>mx.effects.Effect.repeatCount</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc>
      Intervalle (en millisecondes), qui s’écoule avant de répéter l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Intervalle (en millisecondes), qui s’écoule avant de répéter l’effet.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatDelay"><linktext>mx.effects.Effect.repeatDelay</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc>
      Intervalle (en millisecondes), qui s’écoule avant de commencer l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Intervalle (en millisecondes), qui s’écoule avant de commencer l’effet. Les valeurs possibles sont tout entier supérieur ou égal à  0. Si l’effet est répété à l’aide de la propriété <codeph>repeatCount</codeph>, la propriété <codeph>startDelay</codeph> est appliquée uniquement la première fois que l’effet est exécuté.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Si la valeur est true, elle bloque tout le traitement en arrière-plan pendant l’exécution de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, elle bloque l’ensemble du traitement en arrière-plan pendant que l’effet est exécuté. Le traitement en arrière-plan inclut le mesurage, la mise en forme et le traitement des réponses arrivées en provenance du serveur.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/suspendBackgroundProcessing"><linktext>mx.effects.Effect.suspendBackgroundProcessing</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:target:get"><apiName>target</apiName><shortdesc>
      Objet UIComponent sur lequel cet effet est appliqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet UIComponent sur lequel cet effet est appliqué.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/target"><linktext>mx.effects.Effect.target</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      L’événement, le cas échéant, qui a déclenché la lecture de l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      L’événement, le cas échéant, qui a déclenché la lecture de l’effet. Cette propriété est utile lorsqu’un effet est attribué à plusieurs événements de déclenchement.
     
      <p>Si l’effet a été exécuté par programmation en appelant la méthode <codeph>play()</codeph>, au lieu d’être déclenché par un événement, cette propriété est <codeph>nulle</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>