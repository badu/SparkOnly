<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.managers"><apiName>mx.managers</apiName><apiDetail/><apiClassifier id="mx.managers:HistoryManager"><apiName>HistoryManager</apiName><shortdesc>
  Le gestionnaire d’historique permet aux utilisateurs de parcourir une application Flex avec les commandes de navigation Précédent et Suivant du navigateur Web.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le gestionnaire d’historique permet aux utilisateurs de parcourir une application Flex avec les commandes de navigation Précédent et Suivant du navigateur Web. 
  
  <p>En général, la classe BrowserManager et la liaison profonde vous permettent de conserver un état dans une application et de manipuler les URL et l’historique de navigation, mais la classe HistoryManager peut être utile dans d’autres circonstances, comme dans la gestion d’une application Flex héritée. Vous ne pouvez pas utiliser les classes HistoryManager et BrowserManager dans la même application Flex, même si elles utilisent le même jeu de fichiers de support.</p>
  
  <p>La gestion d’historique est activée par défaut dans les conteneurs Accordion et TabNavigator. Cela signifie que si l’utilisateur sélectionne un des volets d’un contrôle Accordion, il peut renvoyer dans le volet précédent à l’aide du bouton Précédent du navigateur ou de la commande de navigation Précédent. La gestion d’historique est désactivée par défaut pour le conteneur de navigation ViewStack.</p>
  
  <p>Vous pouvez désactiver la gestion d’historique en définissant la propriété <codeph>historyManagementEnabled</codeph> du conteneur de navigation sur <codeph>false</codeph>.</p>
  
  <p>Vous pouvez également activer la gestion d’historique pour d’autres objets d’une application en enregistrant les objets avec la classe HistoryManager. Pour enregistrer un composant avec la classe HistoryManager, appelez la méthode <codeph>register()</codeph> de la classe HistoryManager avec une référence à une occurrence de composant qui implémente l’interface IHistoryManagerClient. Dans l’exemple suivant, le composant Application (<codeph>this</codeph>) est enregistré avec la classe HistoryManager lorsque l’application est initialisée :
  <pre>
  &lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
    implements="mx.managers.IHistoryManagerClient" 
    initialize="mx.managers.HistoryManager.register(this);">
  </pre>
  Vous devez également implémenter les méthodes <codeph>saveState()</codeph> et <codeph>loadState()</codeph> de l’interface IHistoryManagerClient pour terminer l’enregistrement du composant. Les composants qui étendent l’objet UIComponent héritent automatiquement de la méthode <codeph>loadState()</codeph>.</p>
  
  <p>Toutes les méthodes et propriétés de la classe HistoryManager sont statiques. Vous n’avez donc pas besoin de leur créer une occurrence.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links><apiOperation id="mx.managers:HistoryManager:initialize"><apiName>initialize</apiName><shortdesc>
      DECONSEILLE. Initialise la classe HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sm</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>SystemManager de cette application.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      DECONSEILLE. Initialise la classe HistoryManager. En général, il n’est pas nécessaire d’appeler cette méthode, car à chaque fois que vous ajoutez un composant avec <codeph>historyManagementEnabled</codeph>, Flex l’appelle. Toutefois, la classe HistoryManager ne fonctionne pas correctement si elle n’est pas initialisée à partir de l’application de niveau supérieur. Ainsi, si votre application ne comporte pas de composants activés par la classe HistoryManager et si elle charge d’autres sous-applications qui en comportent, vous devez appeler la méthode <codeph>HistoryManager.initialize()</codeph> dans l’application principale, généralement à partir d’un gestionnaire d’événement <codeph>initialize</codeph> de l’application.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:register"><apiName>register</apiName><shortdesc>
      Enregistre un objet avec la classe HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Objet à enregistrer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Enregistre un objet avec la classe HistoryManager. L’objet doit implémenter l’interface IHistoryManagerClient.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#IHistoryManagerClient"><linktext>mx.managers.IHistoryManagerClient</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:HistoryManager:save"><apiName>save</apiName><shortdesc>
      Enregistre l’état actuel de l’application afin de pouvoir le restaurer ultérieurement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Enregistre l’état actuel de l’application afin de pouvoir le restaurer ultérieurement. Cette méthode est appelée automatiquement par les conteneurs de navigation à chaque fois que leur état de navigation change. Si vous avez enregistré une interface avec la classe HistoryManager, il est de votre ressort d’appeler la méthode <codeph>save()</codeph> lorsque l’état de l’application change.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:HistoryManager:unregister"><apiName>unregister</apiName><shortdesc>
      Annule l’enregistrement d’un objet avec la classe HistoryManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:IHistoryManagerClient</apiOperationClassifier><apiDesc>Objet dont l’enregistrement doit être annulé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Annule l’enregistrement d’un objet avec la classe HistoryManager.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:PopUpManagerChildList"><apiName>PopUpManagerChildList</apiName><shortdesc>
  La classe PopUpManagerChildList définit les valeurs constantes de la propriété detail des méthodes PopUpManager addPopUp() et createPopUp().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe PopUpManagerChildList définit les valeurs constantes de la propriété <codeph>detail</codeph> des méthodes PopUpManager<codeph>addPopUp()</codeph> et <codeph>createPopUp()</codeph>.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManager"><linktext>PopUpManager</linktext></link></related-links><apiValue id="mx.managers:PopUpManagerChildList:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	  Indique que le menu contextuel est placé dans la même liste d’enfants que l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que le menu contextuel est placé dans la même liste d’enfants que l’application.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:PARENT"><apiName>PARENT</apiName><shortdesc>
	  Indique que le menu contextuel est placé dans la même liste d’enfants que le composant parent, quelle qu’elle soit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que le menu contextuel est placé dans la même liste d’enfants que le composant parent, quelle qu’elle soit.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:PopUpManagerChildList:POPUP"><apiName>POPUP</apiName><shortdesc>
	  Indique que le menu contextuel est placé dans la liste d’enfants contextuels qui fera en sorte qu’elle flottera sur d’autres menus contextuels dans le calque de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>popup</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que le menu contextuel est placé dans la liste d’enfants contextuels qui fera en sorte qu’elle flottera sur d’autres menus contextuels dans le calque de l’application.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComponent"><apiName>IFocusManagerComponent</apiName><shortdesc>
  L’interface IFocusManagerComponent définit l’interface qui doit être implémentée par les composants susceptibles d’avoir le focus de façon à recevoir le focus de FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFocusManagerComponent définit l’interface qui doit être implémentée par les composants susceptibles d’avoir le focus de façon à recevoir le focus de FocusManager. Les principales implémentations de cette interface sont dans la classe UIComponent, bien que cette dernière n’implémente pas la totalité de l’interface IFocusManagerComponent, car certains UIComponents ne sont pas destinés à recevoir le focus. Donc, pour faire en sorte qu’un composant dérivé de la classe UIComponent puisse recevoir le focus, il vous suffit d’ajouter « implements IFocusManagerComponent » à la définition de la classe.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Appelé par le FocusManager lorsque le composant reçoit le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>true</codeph>, l’indicateur de focus est tracé, sinon il est masqué.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par le FocusManager lorsque le composant reçoit le focus. Le composant doit dessiner ou masquer un graphique qui indique qu’il a le focus.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Appelé par le FocusManager lorsque le composant reçoit le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelé par le FocusManager lorsque le composant reçoit le focus. Le composant peut à son tour attribuer le focus à un composant interne.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Indicateur qui signale si le composant peut recevoir le focus lorsqu’il est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si le composant peut recevoir le focus lorsqu’il est sélectionné.
     
      <p>Pour optimiser votre application, si un composant enfant de votre composant implémente l’interface IFocusManagerComponent et que vous ne souhaitez jamais qu’il reçoive le focus, définissez <codeph>focusEnabled</codeph> sur <codeph>false</codeph> avant d’appeler la méthode <codeph>addChild()</codeph> sur le composant enfant.</p>
     
      <p>Ainsi, la classe FocusManager ignorera ce composant et n’y surveillera pas le changement des propriétés <codeph>tabFocusEnabled</codeph>, <codeph>tabChildren</codeph> et <codeph>mouseFocusEnabled</codeph>. Cela implique également que vous ne pouvez pas changer cette valeur après l’appel de <codeph>addChild()</codeph> et espérer que le FocusManager s’en aperçoive.</p>
     
      <p>Remarque : cela ne signifie pas que vous ne pouvez pas attribuer le focus à cet objet par programme dans votre méthode <codeph>setFocus()</codeph>, mais simplement que le FocusManager ignore ce composant IFocusManagerComponent dans ses recherches d’actions de souris et de tabulation.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc conref="mx.core.UIComponent#hasFocusableChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#hasFocusableChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Indicateur qui signale si le composant peut recevoir le focus lorsqu’il est sélectionné avec la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si le composant peut recevoir le focus lorsqu’il est sélectionné avec la souris. Si la valeur est <codeph>false</codeph>, le focus sera transféré au premier parent qui est <codeph>mouseFocusEnabled</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Indicateur qui spécifie s’il est possible de déplacer le focus avec la touche de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui spécifie s’il est possible de déplacer le focus avec la touche de tabulation. Même si la valeur est <codeph>false</codeph>, vous pouvez recevoir le focus en sélectionnant avec la souris ou en appelant <codeph>setFocus()</codeph>. Cette propriété remplace InteractiveObject.tabEnabled qui doit être définie sur true dans Flex apps. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerComponent:mx.managers:IFocusManagerComponent:tabIndex:get"><apiName>tabIndex</apiName><shortdesc>
      Si la valeur est tabFocusEnabled, l’ordre dans lequel le composant reçoit le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Si la valeur est <codeph>tabFocusEnabled</codeph>, l’ordre dans lequel le composant reçoit le focus. Si la valeur est -1, le composant reçoit le focus en fonction de l’ordre z.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:BrowserManager"><apiName>BrowserManager</apiName><shortdesc>
  L’objet BrowserManager est un gestionnaire Singleton qui agit comme proxy entre le navigateur et l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’objet BrowserManager est un gestionnaire Singleton qui agit comme proxy entre le navigateur et l’application. Il donne accès à l’URL dans la barre d’adresse du navigateur, tout comme l’accès à la propriété <codeph>document.location</codeph> dans JavaScript. Les événements sont distribués lorsque la propriété <codeph>url</codeph> est modifiée. Les écouteurs peuvent ensuite répondre, modifier l’URL et/ou empêcher d’autres de recevoir l’événement. 
 
  <p>Pour utiliser l’objet BrowserManager, appelez la méthode <codeph>getInstance()</codeph> pour recevoir l’occurrence actuelle du gestionnaire, puis appelez les méthodes et écoutez les événements de ce gestionnaire. Consultez la classe IBrowserManager pour connaître les méthodes, propriétés et événements à utiliser.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#IBrowserManager"><linktext>mx.managers.IBrowserManager</linktext></link><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:BrowserManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Retourne l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Retourne l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.
      
      </apiDesc><apiOperationClassifier>mx.managers:IBrowserManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Retourne l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IHistoryManagerClient"><apiName>IHistoryManagerClient</apiName><shortdesc>
  Interface devant être implémentée par des objets enregistrés avec le gestionnaire d’historique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Interface devant être implémentée par des objets enregistrés avec le gestionnaire d’historique. Les méthodes de cette interface sont appelées par le gestionnaire d’historique lors de l’enregistrement et du chargement de l’état d’historique de l’application.
 
  <p>Cette interface est implémentée par les conteneurs de navigation Flex TabNavigator, Accordion et ViewStack. Elle doit être implémentée par tout autre composant enregistré avec le gestionnaire d’historique.</p> 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#HistoryManager"><linktext>mx.managers.HistoryManager</linktext></link></related-links><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:loadState"><apiName>loadState</apiName><shortdesc>
	  Charge l’état de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiType value="Object"/><apiDesc>Etat de l’objet à charger. La valeur est null lors du chargement de l’état initial de l’application.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Charge l’état de cet objet.
	  
	  </apiDesc><example>Le code suivant charge l’index sélectionné et recherche une chaîne de l’état enregistré.
	  <pre>
	  public function loadState(state:Object):void
	  {
	  	// First, check to see if state is null. When the app is reset
	  	// back to its initial state, loadState() is passed null.
	  	if (state == null)
	  	{
	 		myList.selectedIndex = -1;
	  		mySearchInput.text = "";
	  	}
	  	else
	  	{
	  		myList.selectedIndex = state.selectedIndex;
	  		mySearchInput.text = state.searchString;
	  	}
	  }
	  </pre>
	  
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:saveState"><apiName>saveState</apiName><shortdesc>
	  Enregistre l’état de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Etat de cet objet.
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	  Enregistre l’état de cet objet. L’objet contient des paires nom:valeur pour chaque propriété à enregistrer avec l’état. 
	 
	  <p>Le gestionnaire d’historique recueille les informations d’état de tous les composants et encode les informations au format d’URL. La longueur des URL est limitée sur la plupart des navigateurs, les informations d’état retournées doivent dont être aussi concises que possible.</p>
	 
	  </apiDesc><example>Le code suivant enregistre l’index sélectionné à partir d’un objet List et une chaîne de recherche.
	  <pre>
	  public function saveState():Object
	  {
	  	var state:Object = {};
	 
	  	state.selectedIndex = myList.selectedIndex;
	  	state.searchString = mySearchInput.text;
	 
	  	return state;
	 }
	 </pre>
	 
	  </example></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IHistoryManagerClient:mx.managers:IHistoryManagerClient:toString"><apiName>toString</apiName><shortdesc>
	  Convertit cet objet en chaîne unique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ID unique de cet objet.
	  
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Convertit cet objet en chaîne unique. Implémenté par UIComponent.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:ISystemManager"><apiName>ISystemManager</apiName><shortdesc>
  Un objet ISystemManager gère une « fenêtre d’application ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Un objet ISystemManager gère une « fenêtre d’application ». Chaque application qui s’exécute sur le bureau ou dans un navigateur comporte une zone d’affichage des effets visuels de l’application. Il peut s’agir d’une fenêtre dans le système d’exploitation ou d’une zone au sein du navigateur. Il s’agit d’une « fenêtre d’application », ce qui est différent d’une occurrence de <codeph>mx.core.Application</codeph>, qui correspond à la fenêtre de « niveau supérieur » principale d’une application.
 
  <p>Chaque application est dotée d’un objet ISystemManager. L’objet ISystemManager envoie un événement si la taille de la fenêtre d’application change (vous ne pouvez pas la changer au sein de l’application, mais seulement par interaction avec la fenêtre du système d’exploitation ou avec le navigateur). Il est le parent de tous les éléments affichables dans l’application, comme l’occurrence mx.core.Application principale et tous les menus déroulants, infos-bulles, curseurs, etc. Tout objet parent du contrôle ISystemManager est considéré comme une fenêtre de « niveau supérieur », même les infos-bulles et les curseurs.</p>
 
  <p>L’objet ISystemManager fait également basculer le focus entre les fenêtres de niveau supérieur si plusieurs objets IFocusManagerContainer sont affichées et si les utilisateurs interagissent avec les composants au sein des objets IFocusManagerContainer.</p>
 
  <p>Toute activité du clavier et de la souris qui n’est pas expressément traitée à un autre emplacement de l’application est vue par l’objet ISystemManager, ce qui en fait l’endroit idéal pour gérer l’activité, si besoin est.</p>
 
  <p>Si une application est chargée dans une autre application, un objet ISystemManager est tout de même créé, mais il ne gérera pas de « fenêtre d’application », selon les règles de sécurité et du domaine. En revanche, il deviendra le <codeph>contenu</codeph> du composant <codeph>Loader</codeph> qui l’a chargé et servira simplement de parent à la sous-application</p>
 
  <p>L’objet ISystemManager gère plusieurs listes d’enfants, chacune étant destinée aux infos-bulles, curseurs et fenêtres contextuelles. C’est ainsi qu’il s’assure que les fenêtres contextuelles « flottent » sur les fenêtres de l’application principale et que les infos-bulles « flottent » par dessus, et les curseurs encore au-dessus. Si vous observez la propriété <codeph>numChildren</codeph> ou la méthode <codeph>getChildAt()</codeph> appliquée au gestionnaire ISystemManager, elles se rapportent toutes les deux à la fenêtre d’application principale et à toutes les autres fenêtres non contextuelles. Pour obtenir la liste de toutes les fenêtres, y compris les fenêtres contextuelles, les infos-bulles et les curseurs, utilisez la propriété <codeph>rawChildren</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      Déploie ou supprime les boucliers de souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>La valeur est <codeph>true</codeph> pour déployer les boucliers de souris et <codeph>false</codeph> pour les enlever.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Déploie ou supprime les boucliers de souris. Les boucliers de souris bloquent l’entrée de la souris pour les applications non approuvées. Une des raisons pour lesquelles vous pouvez souhaiter bloquer l’entrée de la souris est que lorsque vous faites glisser la souris sur une application non approuvée, vous ne recevez normalement pas d’événements de déplacement de souris. Flash Player n’envoie pas d’événements à travers les limites de confiance/non approuvées pour des raisons de sécurité. En couvrant une application non approuvée avec un bouclier de souris (si vous êtes son parent), vous pouvez recevoir le message de déplacement de la souris et l’opération Glisser-déposer fonctionnera normalement. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
	  Convertit la chaîne donnée en classe ou fonction au niveau du package.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Classe représentée par le <codeph>nom</codeph>, ou valeur null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Nom de classe, par exemple « mx.video.VideoManager ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Convertit la chaîne donnée en classe ou fonction au niveau du package. Appelle la méthode <codeph>ApplicationDomain.getDefinition()</codeph> appropriée selon si un élément est chargé dans une autre application ou non.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Obtient le gestionnaire système qui est la racine de tous les gestionnaires système de niveau supérieur dans cet objet SecurityDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le gestionnaire système de plus haut niveau dans le sandbox
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Obtient le gestionnaire système qui est la racine de tous les gestionnaires système de niveau supérieur dans cet objet SecurityDomain.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Tente d’obtenir le gestionnaire système qui se trouve dans l’application principale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet systemManager de l’application principale s’il est autorisé par les restrictions de sécurité ou valeur null s’il se trouve dans un autre SecurityDomain.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Tente d’obtenir le gestionnaire système qui se trouve dans l’application principale.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>un <codeph>Rectangle</codeph> incluant la portion visible de cet objet. Le rectangle est exprimé en coordonnées globales.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Facultatif. Limites de début du rectangle visible. Les limites sont exprimées en coordonnées globales. Si <codeph>bounds</codeph> est null, les limites de début sont définies par la propriété <codeph>screen</codeph> du gestionnaire système. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Tentative de signalisation au SWFLoader parent que la taille de l’application a peut-être été modifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Tentative de signalisation au SWFLoader parent que la taille de l’application a peut-être été modifiée. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      Retourne la valeur true si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode Font.registerFont().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode <codeph>Font.registerFont</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>tf</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Classe TextFormat représentant les informations de mise en forme de caractères.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur <codeph>true</codeph> si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode <codeph>Font.registerFont</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
      Teste si ce gestionnaire système est la racine de tous les gestionnaires système de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si l’objet SystemManager est la racine de tous les gestionnaires système sur la liste d’affiche. Sinon, la valeur <codeph>false</codeph> est renvoyée.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Teste si ce gestionnaire système est la racine de tous les gestionnaires système de niveau supérieur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ISystemManager:mx.managers:ISystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
	  Retourne la valeur true si cet objet ISystemManager est responsable d’une fenêtre d’application et la valeur false si cette application a été chargée dans une autre application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si cet objet ISystemManager est responsable d’une fenêtre d’application.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie la valeur <codeph>true</codeph> si cet objet ISystemManager est responsable d’une fenêtre d’application et la valeur <codeph>false</codeph> si cette application a été chargée dans une autre application.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
	  Liste des curseurs personnalisés qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Liste des curseurs personnalisés qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les fenêtres de niveau supérieur, les infos-bulles et les curseurs personnalisés. Vous pouvez accéder aux curseurs personnalisés via la propriété <codeph>cursorChildren</codeph>.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, <codeph>cursorChildren.numChildren</codeph> fournit le nombre de curseurs personnalisés (qui sera de 0 ou 1) et, si un curseur personnalisé existe, il est accessible par la méthode <codeph>cursorChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:document:get"><apiName>document</apiName><shortdesc>
	  Référence à l’objet de document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Référence à l’objet de document. Un objet de document est un objet qui se trouve au sommet de la hiérarchie d’une application Flex, d’un composant MXML ou d’un composant AS.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
	  Objet Sprite unique partagé entre les composants et utilisé comme incrustation pour le focus des dessins.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
	  Objet Sprite unique partagé entre les composants et utilisé comme incrustation pour le focus des dessins. Vous le partagez si vous êtes parent avec un composant sur lequel un focus est placé, et non si vous êtes un objet IFocusManagerComponent.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
	  Renvoie la valeur True si SystemManager est un proxy et non une classe racine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Renvoie la valeur True si SystemManager est un proxy et non une classe racine.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc>
	  Objet LoaderInfo qui représente les informations sur l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc>
	  Objet LoaderInfo qui représente les informations sur l’application.
     
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Nombre de fenêtres modales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre de fenêtres modales.  
     
      <p>Les fenêtres modales n’autorisent pas les clics dans une autre fenêtre qui sont susceptibles d’activer l’objet FocusManager dans cette fenêtre. L’objet PopUpManager modifie ce nombre en créant et supprimant les fenêtres modales.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
	  Liste des fenêtres (contextuelles) topMost qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Liste des fenêtres (contextuelles) topMost qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les infos-bulles et les curseurs personnalisés. Vous pouvez accéder aux fenêtres de niveau supérieur via la propriété <codeph>popUpChildren</codeph>.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, la méthode <codeph>popUpChildren.numChildren</codeph> fournit le nombre de fenêtres de niveau supérieur qui est accessible avec méthode <codeph>popUpChildren.getChildAt(i)</codeph>.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Liste de tous les enfants qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Liste de tous les enfants qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les infos-bulles et les curseurs personnalisés.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:screen:get"><apiName>screen</apiName><shortdesc>
	  Taille et position de la fenêtre d’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Taille et position de la fenêtre d’application. L’objet Rectangle contient les propriétés <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> et <codeph>height</codeph>. Le rectangle est exprimé en racine sandbox coordonnées.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:stage:get"><apiName>stage</apiName><shortdesc>
	  Objet flash.display.Stage qui représente la fenêtre d’application associée à cet objet SystemManager.
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
	  Objet flash.display.Stage qui représente la fenêtre d’application associée à cet objet SystemManager.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
	  Liste des infos-bulles qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Liste des infos-bulles qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les fenêtres de niveau supérieur, les infos-bulles et les curseurs personnalisés.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, la méthode <codeph>toolTipChildren.numChildren</codeph> fournit le nombre d’infos-bulles (qui sera de 0 ou 1) et, si une info-bulle existe, il est accessible avec la méthode <codeph>toolTipChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ISystemManager:mx.managers:ISystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
	  Objet ISystemManager responsable de la fenêtre d’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
	  Objet ISystemManager responsable de la fenêtre d’application. Il s’agira du même objet ISystemManager sauf si cette application a été chargée dans une autre application.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ToolTipManager"><apiName>ToolTipManager</apiName><shortdesc>
  La classe ToolTipManager vous permet de définir une fonctionnalité de base sur les infos-bulles et les conseils d’erreur, comme le délai d’affichage et la désactivation des infos-bulles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ToolTipManager vous permet de définir une fonctionnalité de base sur les infos-bulles et les conseils d’erreur, comme le délai d’affichage et la désactivation des infos-bulles.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link></related-links><apiOperation id="mx.managers:ToolTipManager:createToolTip"><apiName>createToolTip</apiName><shortdesc>
      Crée une occurrence de la classe ToolTip avec le texte spécifié et l’affiche à l’emplacement indiqué dans les coordonnées de la scène.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Classe ToolTip récemment créée.
     
      
      </apiDesc><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à afficher dans l’occurrence ToolTip.
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée horizontale de la classe ToolTip dans les coordonnées de la scène. S’il existe plusieurs scènes, la scène appropriée est déterminée à partir de l’argument <codeph>context</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée verticale de la classe ToolTip dans les coordonnées de la scène. S’il existe plusieurs scènes, la scène appropriée est déterminée à partir de l’argument <codeph>context</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>errorTipBorderStyle</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Style de bordure d’un conseil d’erreur. L’argument de cette méthode peut être null, « errorTipRight », « errorTipAbove » ou « errorTipBelow ». S’il est de type null, la méthode <codeph>createToolTip()</codeph> crée une info-bulle normale. S’il est de type « errorTipRight », « errorTipAbove » ou « errorTipBelow », la méthode <codeph>createToolTip()</codeph> crée un conseil d’erreur et ce paramètre détermine vers quel endroit la flèche du conseil d’erreur pointe (la cible de l’erreur). Par exemple, si vous transmettez « errorTipRight », Flex place le conseil d’erreur (via les arguments x et y) à droite de la cible de l’erreur ; la flèche se trouve sur le bord gauche du conseil d’erreur.
     
      </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>Détermine quel StyleManager est utilisé. Généralement, vous passez l'objet sur lequel l'info-bulle s'affiche de sorte que le StyleManager de l'info-bulle soit le même pour l'objet. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une occurrence de la classe ToolTip avec le texte spécifié et l’affiche à l’emplacement indiqué dans les coordonnées de la scène.
     
      <p>Les infos-bulles apparaissent sur leur propre calque, par dessus tout autre élément à l’exception des curseurs.</p>
     
      <p>Le mode d’utilisation standard des infos-bulles est de laisser la classe ToolTipManager les afficher ou les masquer automatiquement lorsque l’utilisateur déplace la souris sur les objets pour lesquels la propriété <codeph>toolTip</codeph> est définie. Vous pouvez désactiver cette gestion automatique des infos-bulles en définissant la propriété <codeph>enabled</codeph> de la classe ToolTipManager sur <codeph>false</codeph>.</p>
     
      <p>Par contraste, cette méthode (avec <codeph>destroyToolTip()</codeph>) vous permet de contrôler par programme les infos-bulles. Vous pouvez les afficher où et quand vous le choisissez. Vous pouvez même en afficher plusieurs à la fois si vous en avez besoin. (La classe ToolTipManager ne le fait jamais, car cela est généralement déroutant pour l’utilisateur).</p>
     
      <p>Cette méthode crée d’abord une nouvelle occurrence de la classe ToolTip et appelle la méthode <codeph>addChild()</codeph> pour la placer dans le calque des classes toolTip de l’objet SystemManager. Si vous affichez un conseil d’erreur, la méthode définit les styles appropriés. Ensuite, elle définit le texte de l’info-bulle, dimensionne l’info-bulle en fonction de son texte et la place à l’endroit que vous avez indiqué.</p>
     
      <p>Vous devez enregistrer la référence à l’info-bulle que cette méthode renvoie afin de pouvoir la transmettre à la méthode <codeph>destroyToolTip()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ToolTipManager:destroyToolTip"><apiName>destroyToolTip</apiName><shortdesc>
      Supprime une info-bulle spécifiée qui a été créée par la méthode createToolTip().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toolTip</apiItemName><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier><apiDesc>Occurrence ToolTip à supprimer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une info-bulle spécifiée qui a été créée par la méthode <codeph>createToolTip()</codeph>.
     
      <p>Cette méthode appelle la méthode <codeph>removeChild()</codeph> pour supprimer l’info-bulle spécifiée du calque des classes ToolTip de l’objet SystemManager. Elle sera ensuite récupérée par le garbage collector sauf si vous en gardez une référence.</p>
     
      <p>Il est déconseillé d’appeler cette méthode sur l’objet <codeph>currentToolTip</codeph> de la classe ToolTipManager.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ToolTipManager:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
      Objet UIComponent qui affiche actuellement une info-bulle, ou valeur null si aucun ne le fait.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Objet UIComponent qui affiche actuellement une info-bulle, ou valeur <codeph>null</codeph> si aucun ne le fait.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:currentToolTip:get"><apiName>currentToolTip</apiName><shortdesc>
      Objet ToolTip actuellement visible, ou valeur null si aucun n’est affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IToolTip</apiValueClassifier></apiValueDef><apiDesc>
      Objet ToolTip actuellement visible, ou valeur <codeph>null</codeph> si aucun n’est affiché.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:enabled:get"><apiName>enabled</apiName><shortdesc>
      Si la valeur est true, la classe ToolTipManager affiche automatiquement les infos-bulles lorsque l’utilisateur déplace le pointeur de la souris sur les composants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la classe ToolTipManager affiche automatiquement les infos-bulles lorsque l’utilisateur déplace le pointeur de la souris sur les composants. Si la valeur est <codeph>false</codeph>, aucune info-bulle n’est affichée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideDelay:get"><apiName>hideDelay</apiName><shortdesc>
      Temps, en millisecondes, que doit attendre Flex avant de masquer l’info-bulle après son apparition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Temps, en millisecondes, que doit attendre Flex avant de masquer l’info-bulle après son apparition. Une fois que Flex a masqué une info-bulle, l’utilisateur doit éloigner la souris du composant, puis la repasser dessus pour voir à nouveau l’info-bulle. Si vous définissez <codeph>hideDelay</codeph> sur <codeph>Infinity</codeph>, Flex ne masque pas l’info-bulle tant que l’utilisateur ne déclenche pas un événément, par exemple s’il éloigne la souris du composant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:hideEffect:get"><apiName>hideEffect</apiName><shortdesc>
      Effet qui est lu lorsqu’une info-bulle est masquée ou valeur null si l’info-bulle doit disparaître sans effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Effet qui est lu lorsqu’une info-bulle est masquée ou valeur <codeph>null</codeph> si l’info-bulle doit disparaître sans effet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:scrubDelay:get"><apiName>scrubDelay</apiName><shortdesc>
      Temps, en millisecondes, qu’un utilisateur peut prendre lorsqu’il déplace la souris entre les contrôles avant que Flex n’attende à nouveau la durée du contrôle showDelay pour afficher une info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Temps, en millisecondes, qu’un utilisateur peut prendre lorsqu’il déplace la souris entre les contrôles avant que Flex n’attende à nouveau la durée du contrôle <codeph>showDelay</codeph> pour afficher une info-bulle.
     
      <p>Ce paramètre est utile si l’utilisateur se déplace rapidement d’un contrôle à un autre. Après l’affichage de la première info-bulle, Flex affiche les autres immédiatement à la suite et n’attend pas. Plus le paramètre du contrôle <codeph>scrubDelay</codeph> est court et plus l’utilisateur est susceptible d’attendre la durée spécifiée par le contrôle <codeph>showDelay</codeph> avant de voir la prochaine info-bulle. Cette propriété est bien adaptée au cas suivant : vous possédez une barre d’outils dotée de plusieurs boutons et l’utilisateur les consulte tour à tour brièvement pour obtenir une rapide description de leur fonctionnalité.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showDelay:get"><apiName>showDelay</apiName><shortdesc>
      Temps, en millisecondes, que Flex attend avant d’affiche la zone d’info-bulle une fois que l’utilisateur a déplacé la souris sur un composant doté d’une info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Temps, en millisecondes, que Flex attend avant d’affiche la zone d’info-bulle une fois que l’utilisateur a déplacé la souris sur un composant doté d’une info-bulle. Pour que l’info-bulle s’affiche instantanément, définissez le contrôle <codeph>showDelay</codeph> sur 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:showEffect:get"><apiName>showEffect</apiName><shortdesc>
      Effet qui est lu lorsqu’une info-bulle est affichée ou valeur null si l’info-bulle doit apparaître sans effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IAbstractEffect</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Effet qui est lu lorsqu’une info-bulle est affichée ou valeur <codeph>null</codeph> si l’info-bulle doit apparaître sans effet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ToolTipManager:toolTipClass:get"><apiName>toolTipClass</apiName><shortdesc>
      Classe à utiliser pour créer les infos-bulles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>mx.controls.ToolTip
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Classe à utiliser pour créer les infos-bulles.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManagerPriority"><apiName>CursorManagerPriority</apiName><shortdesc>
  La classe CursorManagerPriority définit les valeurs constantes de l’argument priority de la méthode CursorManager.setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CursorManagerPriority définit les valeurs constantes de l’argument <codeph>priority</codeph> de la méthode <codeph>CursorManager.setCursor()</codeph>. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links><apiValue id="mx.managers:CursorManagerPriority:HIGH"><apiName>HIGH</apiName><shortdesc>
	  Constante indiquant la propriété du curseur la plus élevée lorsqu’elle est transmise comme argument priority à setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Constante indiquant la propriété du curseur la plus élevée lorsqu’elle est transmise comme argument <codeph>priority</codeph> à <codeph>setCursor()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:LOW"><apiName>LOW</apiName><shortdesc>
	  Constante indiquant la propriété du curseur la plus faible lorsqu’elle est transmise comme argument priority à setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Constante indiquant la propriété du curseur la plus faible lorsqu’elle est transmise comme argument <codeph>priority</codeph> à <codeph>setCursor</codeph>().
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManagerPriority:MEDIUM"><apiName>MEDIUM</apiName><shortdesc>
	  Constante indiquant une propriété du curseur moyenne lorsqu’elle est transmise comme argument priority à setCursor().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Constante indiquant une propriété du curseur moyenne lorsqu’elle est transmise comme argument <codeph>priority</codeph> à <codeph>setCursor</codeph>().
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:DragManager"><apiName>DragManager</apiName><shortdesc>
  La classe DragManager gère les opérations Glisser-déposer, qui vous permettent de déplacer les données d’un endroit à un autre dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="rejectCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Curseur affiché pour une opération de rejet. La valeur par défaut est le symbole « mx.skins.cursor.DragReject » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="moveCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Curseur affiché lors d’une opération de déplacement. La valeur par défaut est le symbole « mx.skins.cursor.DragMove » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Curseur affiché lors d’une opération de liaison. La valeur par défaut est le symbole « mx.skins.cursor.DragLink » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDragImageSkin" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Habillage utilisé pour tracer l’image de glissement par défaut, qui est également appelée proxy de glissement.
 
  </description>
<default>mx.skins.halo.DefaultDragImage (for both Halo and Spark themes)
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="copyCursor" owner="mx.managers:DragManager" playerVersion="Flash9" type="Class">
<description>
  Curseur affiché lors d’une opération de copie. La valeur par défaut est le symbole « mx.skins.cursor.DragCopy » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DragManager gère les opérations Glisser-déposer, qui vous permettent de déplacer les données d’un endroit à un autre dans une application Flex. Par exemple, vous pouvez sélectionner un objet, comme un élément dans un contrôle List ou un contrôle Flex, comme un contrôle Image, puis le faire glisser par dessus un autre composant pour l’ajouter à ce composant.
  
  <p>Toutes les méthodes et propriétés de la classe DragManager sont statiques. Vous n’avez donc pas besoin de leur créer une occurrence.</p>
  
  <p>Tous les composants Flex prennent en charge les opérations Glisser-déposer. Flex fournit un support supplémentaire pour faire glisser et déposer les contrôles List, Tree et DataGrid.</p>
  
  <p>Lorsque l’utilisateur sélectionne un élément avec la souris, le composant sélectionné est appelé l’intiateur de glissement. L’image affichée lors de l’opération de glissement est appelée proxy de glissement.</p>
  
  <p>Lorsque l’utilisateur déplace le proxy de glissement sur un autre composant, l’événement <codeph>dragEnter</codeph> est envoyé à ce composant. Si le composant accepte le glissement, il devient la cible de dépôt et reçoit les événements <codeph>dragOver</codeph>, <codeph>dragExit</codeph> et <codeph>dragDrop</codeph>.</p>
  
  <p>Une fois le glissement terminé, un événement <codeph>dragComplete</codeph> est envoyé à l’initiateur du glissement.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DragSource"><linktext>mx.core.DragSource</linktext></link><link href="mx.events.xml#DragEvent"><linktext>mx.events.DragEvent</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><apiOperation id="mx.managers:DragManager:acceptDragDrop"><apiName>acceptDragDrop</apiName><shortdesc>
      Appelez cette méthode depuis votre gestionnaire d’événements dragEnter si vous acceptez les données glissées et déposées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Cible de dépôt acceptant le glissement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelez cette méthode depuis votre gestionnaire d’événements <codeph>dragEnter</codeph> si vous acceptez les données glissées et déposées. Généralement, vous distribuez <codeph>event.target</codeph> au type de données de la cible de dépose. Dans l'exemple suivant, la cible de dépose est un conteneur de la zone de travail : 
     
      <pre>DragManager.acceptDragDrop(Canvas(event.target));</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:doDrag"><apiName>doDrag</apiName><shortdesc>
      Initie une opération Glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>Interface IUIComponent spécifiant le composant qui initie l’opération de glissement.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiDesc>Objet DragSource contenant les données en cours de glissement.
     
      </apiDesc></apiParam><apiParam><apiItemName>mouseEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Objet MouseEvent contenant les informations de souris pour le début du glissement.
     
      </apiDesc></apiParam><apiParam><apiItemName>dragImage</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Image à faire glisser. Cet argument est facultatif. S’il est omis, un rectangle de glissement standard est utilisé lors de l’opération Glisser-déposer. Si vous spécifiez une image, vous devez définir explicitement sa hauteur et sa largeur. Sinon, elle n’apparaît pas.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Nombre spécifiant le décalage x, en pixels, de l’objet <codeph>dragImage</codeph>. Cet argument est facultatif. S’il est omis, le proxy de glissement est affiché dans le coin supérieur gauche de l’initiateur du glissement. Le décalage est exprimé en pixels à partir du bord gauche du proxy de glissement vers le bord gauche de l’initiateur du glissement. Il s’agit généralement d’un nombre négatif.
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Nombre spécifiant le décalage y, en pixels, de l’objet <codeph>dragImage</codeph>. Cet argument est facultatif. S’il est omis, le proxy de glissement est affiché dans le coin supérieur gauche de l’initiateur du glissement. Le décalage est exprimé en pixels à partir du bord supérieur du proxy de glissement vers le bord supérieur de l’initiateur du glissement. Il s’agit généralement d’un nombre négatif.
     
      </apiDesc></apiParam><apiParam><apiItemName>imageAlpha</apiItemName><apiType value="Number"/><apiData>0.5</apiData><apiDesc>Nombre spécifiant la valeur Alpha utilisée pour l’image de glissement. Cet argument est facultatif. S’il est omis, la valeur Alpha par défaut est de 0.5. La valeur 0.0 indique que l’image est transparente et la valeur 1.0 indique qu’elle est entièrement opaque. 
         
          </apiDesc></apiParam><apiParam><apiItemName>allowMove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indique si une cible de dépôt peut déplacer les données glissées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initie une opération Glisser-déposer.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:getFeedback"><apiName>getFeedback</apiName><shortdesc>
      Renvoie le résultat de l’opération Glisser-déposer en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Les valeurs renvoyées possibles sont <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> ou <codeph>DragManager.NONE</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie le résultat de l’opération Glisser-déposer en cours.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:DragManager:showFeedback"><apiName>showFeedback</apiName><shortdesc>
      Définit l’indicateur de résultat pour l’opération Glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>feedback</apiItemName><apiType value="String"/><apiDesc>Type d’indicateur de résultat à afficher.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit l’indicateur de résultat pour l’opération Glisser-déposer. Les valeurs possibles sont <codeph>DragManager.COPY</codeph>, <codeph>DragManager.MOVE</codeph>, <codeph>DragManager.LINK</codeph> ou <codeph>DragManager.NONE</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:DragManager:COPY"><apiName>COPY</apiName><shortdesc>
      Constante indiquant que le type de l’action de glissement est « copy ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Constante indiquant que le type de l’action de glissement est « copy ».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:LINK"><apiName>LINK</apiName><shortdesc>
      Constante indiquant que le type de l’action de glissement est « link ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Constante indiquant que le type de l’action de glissement est « link ».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:MOVE"><apiName>MOVE</apiName><shortdesc>
      Constante indiquant que le type de l’action de glissement est « move ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Constante indiquant que le type de l’action de glissement est « move ».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:NONE"><apiName>NONE</apiName><shortdesc>
      Constante indiquant que le type de l’action de glissement est « none ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Constante indiquant que le type de l’action de glissement est « none ».
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:DragManager:isDragging:get"><apiName>isDragging</apiName><shortdesc>
      Propriété en lecture seule qui renvoie la valeur true si un glissement est en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Propriété en lecture seule qui retourne la valeur <codeph>true</codeph> si un glissement est en cours.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerContainer"><apiName>IFocusManagerContainer</apiName><shortdesc>
  IFocusManagerContainer définit l’interface que les conteneurs implémentent pour héberger un FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFocusManagerContainer définit l’interface que les conteneurs implémentent pour héberger un FocusManager. L’objet PopUpManager installe automatiquement un objet FocusManager dans n’importe quel conteneur IFocusManagerContainer qu’il fait apparaître.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:contains"><apiName>contains</apiName><shortdesc>
      Détermine si l’objet d’affichage spécifié est un enfant de l’occurrence du conteneur ou l’occurrence en tant que telle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si l’objet enfant est un enfant de l’occurrence du conteneur ou le conteneur en tant que tel, <codeph>false</codeph> dans tous les autres cas.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>L’objet enfant à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si l’objet d’affichage spécifié est un enfant de l’occurrence du conteneur ou l’occurrence en tant que telle. La recherche comprend la liste d’affichage entière, y compris cette occurrence du conteneur. Les petits-enfants, les arrière-petits-enfants, et ainsi de suite renvoient chacun la valeur <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur. Lorsque les contrôles du conteneur ont le focus, l’activation de la touche Entrée revient à cliquer sur ce contrôle Button.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      Objet FocusManager de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      Objet FocusManager de ce composant. L’objet FocusManager doit être dans une propriété <codeph>focusManager</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerContainer:mx.managers:IFocusManagerContainer:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManager"><apiName>ILayoutManager</apiName><shortdesc>
  L’objet LayoutManager est le moteur qui se trouve derrière la mesure et la stratégie de mise en forme de Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’objet LayoutManager est le moteur qui se trouve derrière la mesure et la stratégie de mise en forme de Flex. La mise en forme s’effectue en trois phases : validation, mesure et mise en forme.
 
  <p>Chaque phase est distincte des autres et tous les objets UIComponent d’une phase sont traités avant de passer à la phase suivante. Lors du traitement des objets UIComponent d’une phase, des demandes visant à ce qu’une phase retraite les composants UIComponent peuvent se produire. Ces demandes sont mises en attente et ne sont traitées que lors de la prochaine exécution de la phase.</p>
 
  <p>La phase de <b>validation</b> commence par un appel de la méthode <codeph>validateProperties()</codeph>, qui parcourt une liste (triée dans l’ordre inverse par niveau d’imbrication) d’objets appelant la méthode <xref href="../core/UIComponent.html#validateProperties()"> Méthode <codeph>validateProperties()</codeph></xref>.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication inverse. L’objet imbriqué <b>le moins</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>Cette phase permet aux composants dont le contenu dépend des paramètres de propriété de se configurer avant les phases de mesure et de mise en forme. Pour des raisons de performances, il peut arriver que la méthode setter de la propriété d’un composant ne fasse pas tout le travail nécessaire pour utiliser la nouvelle valeur de propriété. En revanche, la méthode setter de la propriété appelle la méthode <codeph>invalidateProperties()</codeph>, retardant ainsi le travail jusqu’à l’exécution de cette phase. Cela permet d’empêcher tout travail inutile si la propriété est définie plusieurs fois.</p>
 
  <p>La phase de <b>mesure</b> commence par un appel de la méthode <codeph>validateSize()</codeph>, qui parcourt une liste (triée par niveau d’imbrication) d’objet appelant la méthode <xref href="../core/UIComponent.html#validateSize()">Méthode <codeph>validateSize()</codeph></xref> permettant de déterminer si l’objet a changé de taille.</p>
 
  <p>Si la méthode <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> d’un objet a été précédemment appelée, la méthode <codeph>validateSize()</codeph> est également appelée. Si la taille ou la position de l’objet a été modifiée suite à l’appel de la méthode <codeph>validateSize()</codeph>, la méthode <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> de l’objet est appelée, ajoutant ainsi l’objet à la file d’attente de traitement pour la prochaine exécution de la phase de mise en forme. En outre, le parent de l’objet est marqué pour les phases de mesure et de présentation en appelant respectivement les méthodes <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> et <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication. L’objet imbriqué <b>le plus</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>La phase de <b>mise en forme</b> commence par un appel de la méthode <codeph>validateDisplayList()</codeph>, qui parcourt une liste (triée dans l’ordre inverse par niveau d’imbrication) d’objets appelant la méthode<xref href="../core/UIComponent.html#validateDisplayList()">  Méthode <codeph>validateDisplayList()</codeph></xref> permettant de demander que l’objet dimensionne et positionne tous les composants qu’il contient (c’est-à-dire ses enfants).</p>
 
  <p>Si la méthode <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> d’un objet a déjà été appelée, la méthode <codeph>validateDisplayList()</codeph> est appelée.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication inverse. L’objet imbriqué <b>le moins</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>En général, les composants ne remplacent pas les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> ou <codeph>validateDisplayList()</codeph>. Dans le cas des objets UIComponent, la plupart des composants remplacent les méthodes <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> ou <codeph>updateDisplayList()</codeph>, qui sont appelées par les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> ou <codeph>validateDisplayList()</codeph>, respectivement.</p>
 
  <p>Au démarrage de l’application, une seule occurrence de la classe LayoutManager est créée et stockée dans la propriété <codeph>UIComponent.layoutManager</codeph>. Tous les composants sont supposés utiliser cette occurrence. Si vous n’avez pas accès à l’objet UIComponent, vous pouvez également accéder à l’objet LayoutManager à l’aide de la méthode <codeph>LayoutManager.getInstance()</codeph> statique.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  Appelé lorsqu’un composant change d’une façon qui nécessite la modification de sa mise en forme et/ou de ses effets visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet à modifier.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Appelé lorsqu’un composant change d’une façon qui nécessite la modification de sa mise en forme et/ou de ses effets visuels. Dans ce cas, il est nécessaire d’exécuter l’algorithme de mise en forme du composant, même si sa taille n’a pas changé. Par exemple, lorsqu’un nouveau composant enfant est ajouté, ou si une propriété de style change ou si le parent d’un composant a donné à ce dernier une nouvelle taille.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  Ajoute un objet à la liste des composants qui souhaitent que leur méthode validateProperties() soit appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet dont la propriété a changé.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ajoute un objet à la liste des composants qui souhaitent que leur méthode <codeph>validateProperties()</codeph> soit appelée. Un composant doit appeler cette méthode lorsqu’une propriété change. En général, la méthode setter d’une propriété stocke la nouvelle valeur dans une variable temporaire et appelle la méthode <codeph>invalidateProperties()</codeph> afin que ses méthodes <codeph>validateProperties()</codeph> et <codeph>commitProperties()</codeph> soient appelées ultérieurement, lorsque la nouvelle valeur sera réellement appliquée au composant et/ou à ses enfants. L’avantage de cette stratégie réside dans le fait que, souvent, plusieurs propriétés sont modifiées en même temps et les propriétés peuvent interagir entre elles, ou répéter un code lors de leur application ou encore avoir besoin d’être appliquées dans un ordre précis. Cette stratégie est la méthode la plus efficace possible pour appliquer les nouvelles valeurs des propriétés.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  Ajoute un objet à la liste des composants qui souhaitent que leur méthode validateSize() soit appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet dont la taille a changé.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ajoute un objet à la liste des composants qui souhaitent que leur méthode <codeph>validateSize()</codeph> soit appelée. Appelé lorsque la taille d’un objet change.
	 
	  <p>La taille d’un objet peut changer pour deux raisons :</p>
	 
	  <ol>
	    <li>Le contenu de l’objet change. Par exemple, la taille d’un bouton change lorsque son <codeph>étiquette</codeph> est modifiée.</li>
	    <li>Un script change explicitement les propriétés suivantes : <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> ou <codeph>maxHeight</codeph>.</li>
	  </ol>
	 
	  <p>Lorsque la première condition a lieu, il est nécessaire de recalculer les mesures de l’objet. Lorsque la deuxième condition a lieu, il n’est pas nécessaire de recalculer les mesures, car la nouvelle taille de l’objet est connue. Toutefois, il est nécessaire de réaliser à nouveau la mesure et la mise en forme du parent de l’objet.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
	  Renvoie la valeur true si des composants ont besoin d’être validés. Renvoie la valeur false si les composants sont déjà validés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Retourne la valeur <codeph>true</codeph> si des composants ont besoin d’être validés. Retourne la valeur <codeph>false</codeph> si les composants sont déjà validés.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	  Retourne la valeur <codeph>true</codeph> si des composants ont besoin d’être validés. Retourne la valeur <codeph>false</codeph> si les composants sont déjà validés.
          
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
	  Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Le composant transmis est utilisé pour tester les composants à valider. Les méthodes <codeph>validateProperties()</codeph>, <codeph>commitProperties()</codeph>, <codeph>validateSize()</codeph>, <codeph>measure()</codeph>, <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> de tous les composants contenus dans ce composant seront appelées.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, les méthodes <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> ne sont pas appelées.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement. En revanche, les composants appellent généralement une des méthodes d’annulation de l’objet LayoutManager et appliquent les propriétés ultérieurement. La propriété réelle que vous définissez peut être relue immédiatement. Mais si la propriété affecte d’autres propriétés dans le composant ou ses enfants ou parents, ces autres propriétés peuvent ne pas être immédiatement mises à jour.  
	 
	  <p>Pour garantir la mise à jour des valeurs, vous pouvez appeler la méthode <codeph>validateClient()</codeph>. Elle met à jour toutes les propriétés dans tous les composants dont le niveau d’imbrication est supérieur ou égal au composant cible avant de renvoyer le contrôle à l’appelant. Appelez cette méthode uniquement lorsque cela est nécessaire, car cet appel exige des calculs intensifs.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
	  Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement. En revanche, les composants appellent généralement une des méthodes d’annulation de l’objet LayoutManager et appliquent les propriétés ultérieurement. La propriété réelle que vous définissez peut être relue immédiatement. Mais si la propriété affecte d’autres propriétés dans le composant ou ses enfants ou parents, ces autres propriétés peuvent ne pas être immédiatement mises à jour. Pour garantir la mise à jour des valeurs, vous pouvez appeler la méthode <codeph>validateNow()</codeph>. Elle met à jour toutes les propriétés dans tous les composants avant de renvoyer le contrôle. Appelez cette méthode uniquement lorsque cela est nécessaire, car cet appel exige des calculs intensifs.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManager:mx.managers:ILayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
	  Indicateur précisant si l’objet LayoutManager autorise l’actualisation de l’écran entre les phases.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Indicateur précisant si l’objet LayoutManager autorise l’actualisation de l’écran entre les phases. Si la valeur est <codeph>true</codeph>, la mesure et la mise en forme s’effectuent en phases, une phase par actualisation de l’écran. Les méthodes <codeph>validateProperties()</codeph> et <codeph>commitProperties()</codeph> de tous les composants sont appelées jusqu’à la validation de toutes les propriétés. L’écran est ensuite actualisé.  
	 
	  <p>Ensuite, les méthodes <codeph>validateSize()</codeph> et <codeph>measure()</codeph> de tous les composants sont appelées jusqu’à ce que tous les composants aient été mesurés. Enfin, l’écran est à nouveau actualisé.  </p>
	 
	  <p>Pour finir, les méthodes <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> de tous les composants sont appelées jusqu’à ce que tous les composants aient été validés. L’écran est à nouveau actualisé. Si dans la validation d’une phase, une phase antérieure est invalidée, l’objet LayoutManager recommence. Ceci est plus efficace lorsqu’un grand nombre de composants sont créés et initialisés. La structure est responsable de la définition de cette propriété.</p>
	 
	  <p>Si la valeur est <codeph>false</codeph>, les trois phases sont réalisées avant l’actualisation de l’écran.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:FocusManager"><apiName>FocusManager</apiName><shortdesc>
  La classe FocusManager gère le focus des composants en réponse à l’activité de la souris ou du clavier (touche de tabulation).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FocusManager gère le focus des composants en réponse à l’activité de la souris ou du clavier (touche de tabulation). Une application peut contenir plusieurs occurrences de FocusManager. Chaque occurrence de la classe FocusManager est responsable d’un ensemble de composants qui comprend une « boucle de tabulation ». Si vous activez suffisamment la touche de tabulation, le focus traverse un jeu de composants et revient finalement au premier composant sur lequel le focus était placé. Il s’agit d’une « boucle de tabulation », qui est gérée par une occurrence FocusManager. Si votre application comporte des fenêtres contextuelles qui possèdent leur propre jeu de composants dans une « boucle de tabulation », elles auront leurs propres occurrences de classe FocusManager. L’application principale possède toujours une occurrence de FocusManager.
   <p>L’objet FocusManager gère le focus à partir du « niveau du composant ». Dans Flex, un objet UITextField dans un composant est la seule façon d’autoriser la saisie de texte par clavier. Pour Flash Player ou AIR, cet objet UITextField a le focus. Toutefois, du point de vue de l’objet FocusManager, le composant qui est le parent de l’objet UITextField a le focus. Ainsi, il existe une distinction entre le focus au niveau du composant et le focus de niveau Player. Les développeurs d’application ne sont généralement confrontés qu’au focus au niveau du composant, tandis que les développeurs de composant doivent comprendre le focus de niveau Player.</p>
   <p>Tous les composants qui peuvent être gérés par le FocusManager doivent implémenter la classe mx.managers.IFocusManagerComponent, alors que les objets gérés par le focus de niveau Player n’ont pas à le faire.</p>  
   <p>L’objet FocusManager gère également le concept d’un defaultButton : objet Button placé sur un formulaire et qui distribue un événement click lorsque l’utilisateur appuie sur la touche Entrée, selon l’emplacement du focus à ce moment-là.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.managers:FocusManager:FocusManager"><apiName>FocusManager</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerContainer</apiOperationClassifier><apiDesc>Objet IFocusManagerContainer qui héberge l’objet FocusManager.
           </apiDesc></apiParam><apiParam><apiItemName>popup</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, indique que le conteneur est un composant contextuel et non l’application principale.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
           <p>Un objet FocusManager gère le focus au sein des enfants d’un objet IFocusManagerContainer. Il s’installe dans l’objet IFocusManagerContainer à l’exécution du constructeur.</p>
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:FocusManager:activate"><apiName>activate</apiName><shortdesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément. Si un utilisateur clique dans un objet IFocusManagerContainer avec un objet FocusManager désactivé, l’objet SystemManager appelle la méthode <codeph>activate()</codeph> sur cet objet FocusManager. La méthode <codeph>deactivate()</codeph> de l’objet FocusManager qui a été activé est appelée avant l’activation d’un autre objet FocusManager.
           <p>L’objet FocusManager ajoute les gestionnaires d’événement qui lui permettent de surveiller les actions de la souris et du clavier en relation avec le focus.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément. Si un utilisateur clique dans un objet IFocusManagerContainer avec un objet FocusManager désactivé, l’objet SystemManager appelle la méthode <codeph>activate()</codeph> sur cet objet FocusManager. La méthode <codeph>deactivate()</codeph> de l’objet FocusManager qui a été activé est appelée avant l’activation d’un autre objet FocusManager.
           <p>Le FocusManager supprime les gestionnaires d’événement qui lui permettent de surveiller les actions de la souris et du clavier en relation avec le focus.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      
      Renvoie le composant IFocusManagerComponent qui contient l’objet donné, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant IFOcusManagerComponent contenant <codeph>o</codeph> ou <codeph>null</codeph>
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Objet pouvant avoir le focus de niveau Flash Player.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie le composant IFocusManagerComponent qui contient l’objet donné, le cas échéant. Flash Player pouvant attribuer le focus à un sous-composant d’un composant Flex, cette méthode identifie le composant IFocusManagerComponent qui a le focus du point de vue du composant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      
      Récupère le composant IFocusManagerComponent qui a le focus actuellement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet IFocusManagerComponent qui a le focus.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Récupère le composant IFocusManagerComponent qui a le focus actuellement. Il est conseillé d’appeler cette méthode plutôt que d’utiliser l’objet Stage, car elle indique quel composant a le focus. L’objet Stage risque de renvoyer un sous-composant dans ce composant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      
      Renvoie le composant IFocusManagerComponent qui recevrait le focus si l’utilisateur appuyait sur la touche de tabulation pour accéder à un autre composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant susceptible de recevoir le focus.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, renvoie l’objet résultant de l’activation des touches Maj-Tab.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie le composant IFocusManagerComponent qui recevrait le focus si l’utilisateur appuyait sur la touche de tabulation pour accéder à un autre composant. Il renverra le même composant que celui qui a actuellement le focus si l’application ne comporte aucun autre composant valide.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      
      Définit la valeur de showFocusIndicator sur false et supprime l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Définit la valeur de <codeph>showFocusIndicator</codeph> sur <codeph>false</codeph> et supprime l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      
      Attribue le focus à un composant IFocusManagerComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Composant qui peut recevoir le focus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Attribue le focus à un composant IFocusManagerComponent. Ne vérifie pas ni visibilité du composant, ni son état activé, ni aucune autre condition.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      
      Définit la valeur de showFocusIndicator sur true et dessine l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Définit la valeur de <codeph>showFocusIndicator</codeph> sur <codeph>true</codeph> et dessine l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:FocusManager:toString"><apiName>toString</apiName><shortdesc>
      Renvoie une représentation de chaîne du composant qui héberge l’objet FocusManager. « .focusManager » est ajouté à la fin de la chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Retourne une représentation de chaîne du composant qui héberge l’objet FocusManager. <codeph>".focusManager"</codeph> est ajouté à la fin de la chaîne.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Retourne une représentation de chaîne du composant qui héberge l’objet FocusManager. <codeph>".focusManager"</codeph> est ajouté à la fin de la chaîne.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:FocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      
      Un indicateur qui spécifie si l’objet FocusManager doit confirmer l’utilisation de la touche Entrée pour activer le bouton par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Un indicateur qui spécifie si l’objet FocusManager doit confirmer l’utilisation de la touche Entrée pour activer le bouton par défaut. TextArea et d’autres composants voulant reconnaître la touche <codeph>Entrée</codeph> définissent cette propriété sur <codeph>false</codeph> pour empêcher la touche Entrée de distribuer un événement <codeph>click</codeph> sur le bouton défaut, s’il existe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      
      Référence au contrôle Button par défaut d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      
      Référence au contrôle Button par défaut d’origine. L’activation de la touche Entrée pendant que le focus est sur un contrôle quelconque active le contrôle Button en distribuant un événement <codeph>click</codeph> sur le contrôle Button, comme s’il avait reçu un clic de souris. Le véritable contrôle Button par défaut change si le focus est attribué à un autre contrôle Button, mais revient au contrôle d’origine si le focus n’est pas sur un bouton.
     
      <p>Cette propriété étant gérée par les conteneurs Flex, ne la définissez pas directement pour spécifier le bouton par défaut.</p>
     
      <p>L’objet <codeph>defaultButton</codeph> doit appartenir à la classe <codeph>mx.controls.Button</codeph>, même si cette propriété est de type <codeph>IUIComponent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Sprite unique qui est déplacé de conteneur en conteneur au fur et à mesure que le focus arrive sur ces conteneurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Sprite unique qui est déplacé de conteneur en conteneur au fur et à mesure que le focus arrive sur ces conteneurs. L’objet Sprite est utilisé en tant que parent de l’indicateur visuel, qui signale qu’un composant a le focus.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      
      Prochain et unique index de tabulation à utiliser dans cette boucle de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Prochain et unique index de tabulation à utiliser dans cette boucle de tabulation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:FocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      
      Indicateur précisant si le composant avec focus doit faire l’objet d’une indication visuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Indicateur précisant si le composant avec focus doit faire l’objet d’une indication visuelle. Si la valeur est <codeph>true</codeph>, un composant qui reçoit le focus trace un indicateur visible pour signaler qu’il a le focus.
     
      <p>Par défaut, cette valeur est <codeph>false</codeph> jusqu’à ce que l’utilisateur appuie sur la touche de tabulation ; elle est ensuite définie sur <codeph>true</codeph>.</p>
     
      <p>En général, il est préférable d’utiliser les méthodes <codeph>showFocus()</codeph> et <codeph>hideFocus()</codeph> pour modifier cette propriété, car elles mettent également à jour l’indicateur visuel signalant qu’un composant a le focus.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerComplexComponent"><apiName>IFocusManagerComplexComponent</apiName><shortdesc>
  L’interface IFocusManagerComplexComponent définit l’interface que les composants pouvant posséder plusieurs cibles de focus internes doivent implémenter afin de recevoir le focus de l’objet FocusManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFocusManagerComplexComponent définit l’interface que les composants pouvant posséder plusieurs cibles de focus internes doivent implémenter afin de recevoir le focus de l’objet FocusManager.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:assignFocus"><apiName>assignFocus</apiName><shortdesc>
	  Appelé par le FocusManager lorsque le composant reçoit le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>« bottom » si la touche de tabulation est utilisée avec la touche MAJ. Sinon, « top ».
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Appelé par le FocusManager lorsque le composant reçoit le focus. Le composant peut à son tour attribuer le focus à un composant interne. La méthode setFocus() des composants sera tout de même appelée lorsque la souris place le focus sur eux, mais cette méthode sera utilisée lorsque le focus change par le biais du clavier
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManagerComplexComponent:mx.managers:IFocusManagerComplexComponent:hasFocusableContent:get"><apiName>hasFocusableContent</apiName><shortdesc>
	  Indicateur précisant si le composant possède actuellement des cibles de focus internes.
	 
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  Indicateur précisant si le composant possède actuellement des cibles de focus internes.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IBrowserManager"><apiName>IBrowserManager</apiName><shortdesc>
  Interface que l’occurrence partagée de l’objet BrowserManager implémente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Interface que l’occurrence partagée de l’objet BrowserManager implémente. Les applications écoutent les événements, appellent les méthodes et accèdent aux propriétés sur l’occurrence partagée qui est accessible avec la méthode <codeph>BrowserManager.getInstance()</codeph>.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#BrowserManager"><linktext>mx.managers.BrowserManager</linktext></link></related-links><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.URL_CHANGE_urlChange"><apiName>urlChange</apiName><shortdesc>
  Distribué lorsque l’URL est modifiée par l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’URL est modifiée par l’application.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE_browserURLChange"><apiName>browserURLChange</apiName><shortdesc>
  Distribué lorsque l’URL est modifiée par le navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.BrowserChangeEvent.BROWSER_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.BrowserChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’URL est modifiée par le navigateur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:IBrowserManager_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque l’URL est modifiée par l’interaction de l’utilisateur avec le navigateur, par l’invocation d’une application dans AIR par l’utilisateur ou par la définition de la propriété par programme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’URL est modifiée par l’interaction de l’utilisateur avec le navigateur, par l’invocation d’une application dans AIR par l’utilisateur ou par la définition de la propriété par programme.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:initForHistoryManager"><apiName>initForHistoryManager</apiName><shortdesc> 
      Initialise l’objet BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Initialise l’objet BrowserManager. Le gestionnaire d’historique appelle cette méthode pour préparer l’objet BrowserManager à d’autres appels du gestionnaire d’historique. Vous ne pouvez pas utiliser le gestionnaire d’historique et appeler la méthode <codeph>setFragment()</codeph> depuis l’application. Par conséquent, la méthode <codeph>init()</codeph> définit généralement la valeur de la propriété <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> sur <codeph>false</codeph> pour désactiver le gestionnaire d’historique.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:init"><apiName>init</apiName><shortdesc> 
      Initialise l’objet BrowserManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Fragment à utiliser si aucun fragment ne se trouve dans l’URL initiale.
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Titre à utiliser si aucun fragment ne se trouve dans l’URL initiale.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Initialise l’objet BrowserManager. L’objet BrowserManager recevra l’URL initiale. S’il possède un fragment, il distribue un événement <codeph>BROWSER_URL_CHANGE</codeph>. Cette méthode définit la valeur de la propriété <codeph>ApplicationGlobals.application.historyManagementEnabled</codeph> sur <codeph>false</codeph>, car le gestionnaire d’historique interfère généralement avec la gestion des fragments d’URL de votre application.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setFragment"><apiName>setFragment</apiName><shortdesc> 
      Change le fragment de l’URL après le ’#’ dans le navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Nouveau fragment à utiliser après le ’#’ dans l’URL.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Change le fragment de l’URL après le ’#’ dans le navigateur. Une tentative de suivi de cette URL dans l’historique de navigation sera effectuée.
     
      <p>Si le titre est défini, l’ancien titre dans le navigateur est remplacé par le nouveau.</p>
     
      <p>Pour stocker l’URL, une méthode JavaScript du nom de <codeph>setBrowserURL()</codeph> sera appelée. Le wrapper HTML de l’application doit posséder cette méthode qui doit implémenter un mécanisme pour prendre cette valeur et l’enregistrer avec le schéma d’historique et la barre d’adresse du navigateur.</p>
     
      <p>Lorsque cela est défini, l’événement <codeph>APPLICATION_URL_CHANGE</codeph> est distribué. Si l’événement est annulé, la méthode <codeph>setBrowserURL()</codeph> n’est pas appelée.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:setTitle"><apiName>setTitle</apiName><shortdesc> 
      Change le texte dans la barre de titre du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Nouveau titre à utiliser dans la barre de titre du navigateur.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Change le texte dans la barre de titre du navigateur. Cette méthode n’affecte pas l’historique de navigation.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:base:get"><apiName>base</apiName><shortdesc>
      Portion de l’URL actuelle avant le ’#’, telle qu’elle apparaît dans la barre d’adresse du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Portion de l’URL actuelle avant le ’#’, telle qu’elle apparaît dans la barre d’adresse du navigateur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:fragment:get"><apiName>fragment</apiName><shortdesc>
      Portion de l’URL actuelle après le ’#’, telle qu’elle apparaît dans la barre d’adresse du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Portion de l’URL actuelle après le ’#’, telle qu’elle apparaît dans la barre d’adresse du navigateur. Utilisez la méthode <codeph>setURLFragment()</codeph> pour changer cette valeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:title:get"><apiName>title</apiName><shortdesc>
      Titre de l’application, tel qu’il doit apparaître dans l’historique de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Titre de l’application, tel qu’il doit apparaître dans l’historique de navigation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IBrowserManager:mx.managers:IBrowserManager:url:get"><apiName>url</apiName><shortdesc>
      URL actuelle, telle qu’elle apparaît dans la barre d’adresse du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      URL actuelle, telle qu’elle apparaît dans la barre d’adresse du navigateur.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:PopUpManager"><apiName>PopUpManager</apiName><shortdesc>
  La classe Singleton de l’objet PopUpManager crée des fenêtres de niveau supérieur et les place ou les supprime du calque par dessus toutes les autres fenêtres visibles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Singleton de l’objet PopUpManager crée des fenêtres de niveau supérieur et les place ou les supprime du calque par dessus toutes les autres fenêtres visibles. Voir le gestionnaire système pour obtenir une description des calques. Il est utilisé pour les boîtes de dialogue contextuelles, les menus et les listes déroulantes dans le contrôle ComboBox et des composants similaires.
 
  <p>L’objet PopUpManager donne également une certaine modalité de sorte que les fenêtres situées sous les fenêtres contextuelles ne peuvent pas recevoir d’événements de la souris. Il fournit également un événement si l’utilisateur clique sur la souris en dehors de la fenêtre afin que le développeur puisse choisir de faire disparaître la fenêtre ou d’avertir l’utilisateur.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links><apiOperation id="mx.managers:PopUpManager:addPopUp"><apiName>addPopUp</apiName><shortdesc>
      Fait apparaître une fenêtre de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>window</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Objet IFlexDisplayObject devant apparaître.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à utiliser pour déterminer quels calques de SystemManage utiliser et facultativement, le point de référence pour centrer la nouvelle fenêtre de niveau supérieur. Il est possible qu’il ne s’agisse pas du parent réel de la fenêtre contextuelle, car toutes les fenêtres contextuelles sont les parents de l’objet SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, la fenêtre est modale, ce qui signifie que l’utilisateur ne pourra pas interagir avec d’autres fenêtres contextuelles, tant que la fenêtre n’est pas retirée.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Liste d’enfants à laquelle ajouter la fenêtre contextuelle. Une des méthodes <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> ou <codeph>PopUpManagerChildList.PARENT</codeph> (par défaut).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet moduleFactory dans lequel ce message doit rechercher ses polices intégrées et son gestionnaire de style. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fait apparaître une fenêtre de niveau supérieur. Il est conseillé d’appeler la méthode <codeph>removePopUp()</codeph> pour supprimer les fenêtres contextuelles créées avec la méthode <codeph>addPopUp()</codeph>. Si la classe implémente l’objet IFocusManagerContainer, la fenêtre aura son propre objet FocusManager de sorte que, si l’utilisateur fait appel à la touche de tabulation pour aller d’un contrôle à un autre, il accédera uniquement aux contrôles de la fenêtre.
     
      <p><b>Exemple</b></p> 
     
      <pre>var tw:TitleWindow = new TitleWindow();
        tw.title = "My Title";
        mx.managers.PopUpManager.addPopUp(tw, pnl, false);</pre>
     
      <p>Crée une fenêtre contextuelle à l’aide de l’occurrence <codeph>tw</codeph> de la classe TitleWindow et <codeph>pnl</codeph> comme objet Sprite pour déterminer où insérer la fenêtre contextuelle. Elle est définie comme étant non modale.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:bringToFront"><apiName>bringToFront</apiName><shortdesc>
      Assurez-vous que la fenêtre contextuelle est plus élevée que les autres objets dans la liste d’enfants. L’objet SystemManager le fait automatiquement si la fenêtre contextuelle est une fenêtre de niveau supérieur et si la souris est dessus, mais sinon, vous devez vous en occuper vous-même.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Objet IFlexDisplayObject représentant la fenêtre contextuelle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Assurez-vous que la fenêtre contextuelle est plus élevée que les autres objets dans la liste d’enfants. L’objet SystemManager le fait automatiquement si la fenêtre contextuelle est une fenêtre de niveau supérieur et si la souris est dessus, mais sinon, vous devez vous en occuper vous-même.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:centerPopUp"><apiName>centerPopUp</apiName><shortdesc>
      Centre une fenêtre contextuelle sur la fenêtre qui a été utilisée dans l’appel de la méthode createPopUp() ou addPopUp().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Objet IFlexDisplayObject représentant la fenêtre contextuelle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Centre une fenêtre contextuelle sur la fenêtre qui a été utilisée dans l’appel de la méthode <codeph>createPopUp()</codeph> ou <codeph>addPopUp()</codeph>.
     
      <p>Notez que la position de la fenêtre contextuelle peut ne pas changer immédiatement après cet appel, car Flex peut attendre de mesurer et de mettre en forme la fenêtre contextuelle avant de la centrer.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:PopUpManager:createPopUp"><apiName>createPopUp</apiName><shortdesc>
      Crée une fenêtre de niveau supérieur et la place au-dessus des autres fenêtres dans l’ordre de plan.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Référence à la nouvelle fenêtre de niveau supérieur.
     
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à utiliser pour déterminer quels calques de SystemManage utiliser et facultativement, le point de référence pour centrer la nouvelle fenêtre de niveau supérieur. Il est possible qu’il ne s’agisse pas du parent réel de la fenêtre contextuelle, car toutes les fenêtres contextuelles sont les parents de l’objet SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="Class"/><apiDesc>Classe d’objet qui doit être créée pour la fenêtre contextuelle. La classe doit implémenter l’objet IFlexDisplayObject.
     
      </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, la fenêtre est modale, ce qui signifie que l’utilisateur ne pourra pas interagir avec d’autres fenêtres contextuelles, tant que la fenêtre n’est pas retirée.
     
      </apiDesc></apiParam><apiParam><apiItemName>childList</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Liste d’enfants à laquelle ajouter la fenêtre contextuelle. Une des méthodes <codeph>PopUpManagerChildList.APPLICATION</codeph>, <codeph>PopUpManagerChildList.POPUP</codeph> ou <codeph>PopUpManagerChildList.PARENT</codeph> (par défaut).
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet moduleFactory dans lequel ce message doit rechercher ses polices intégrées et son gestionnaire de style. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une fenêtre de niveau supérieur et la place au-dessus des autres fenêtres dans l’ordre de plan. Il est conseillé d’appeler la méthode <codeph>removePopUp()</codeph> pour supprimer les fenêtres contextuelles créées avec la méthode <codeph>createPopUp</codeph>. Si la classe implémente l’objet IFocusManagerContainer, la fenêtre aura son propre objet FocusManager de sorte que, si l’utilisateur fait appel à la touche de tabulation pour aller d’un contrôle à un autre, il accédera uniquement aux contrôles de la fenêtre.
     
      <p><b>Exemple</b></p> 
     
      <pre>pop = mx.managers.PopUpManager.createPopUp(pnl, TitleWindow, false); </pre>
      
      <p>Crée une fenêtre contextuelle basée sur la classe TitleWindow, à l’aide de l’occurrence <codeph>pnl</codeph> comme objet MovieClip pour déterminer où insérer la fenêtre contextuelle. La fenêtre est définie comme non modale, ce qui signifie que d’autres fenêtres peuvent recevoir les événements de la souris.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#PopUpManagerChildList"><linktext>PopUpManagerChildList</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:PopUpManager:removePopUp"><apiName>removePopUp</apiName><shortdesc>
      Supprime une fenêtre contextuelle qui est déclenchée par la méthode createPopUp() ou addPopUp().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>popUp</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Objet IFlexDisplayObject représentant la fenêtre contextuelle.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une fenêtre contextuelle qui est déclenchée par la méthode <codeph>createPopUp()</codeph> ou <codeph>addPopUp()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.managers:IFocusManager"><apiName>IFocusManager</apiName><shortdesc>
  L’interface IFocusManager doit être mise en œuvre par les composants pour gérer le focus sur les composants en réponse à l’activité de la souris ou du clavier (touche de tabulation), ainsi que pour prendre en charge un bouton par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFocusManager doit être mise en œuvre par les composants pour gérer le focus sur les composants en réponse à l’activité de la souris ou du clavier (touche de tabulation), ainsi que pour prendre en charge un bouton par défaut.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#FocusManager"><linktext>mx.managers.FocusManager</linktext></link></related-links><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:activate"><apiName>activate</apiName><shortdesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément. Si un utilisateur clique dans un objet IFocusManagerContainer avec un objet FocusManager désactivé, l’objet SystemManager appelle la méthode <codeph>activate()</codeph> sur cet objet FocusManager. La méthode <codeph>deactivate()</codeph> de l’objet FocusManager qui a été activé est appelée avant l’activation d’un autre objet FocusManager.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:deactivate"><apiName>deactivate</apiName><shortdesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Le SystemManager active et désactive un FocusManager si plusieurs IFocusManagerContainer sont visibles simultanément. Si un utilisateur clique dans un objet IFocusManagerContainer avec un objet FocusManager désactivé, l’objet SystemManager appelle la méthode <codeph>activate()</codeph> sur cet objet FocusManager. La méthode <codeph>deactivate()</codeph> de l’objet FocusManager qui a été activé est appelée avant l’activation d’un autre objet FocusManager.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:findFocusManagerComponent"><apiName>findFocusManagerComponent</apiName><shortdesc>
      Renvoie le composant IFocusManagerComponent qui contient l’objet donné, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant IFOcusManagerComponent contenant <codeph>o</codeph> ou <codeph>null</codeph>
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>o</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Objet pouvant avoir le focus de niveau Flash Player.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le composant IFocusManagerComponent qui contient l’objet donné, le cas échéant. Flash Player pouvant attribuer le focus à un sous-composant d’un composant Flex, cette méthode identifie le composant IFocusManagerComponent qui a le focus du point de vue du composant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getFocus"><apiName>getFocus</apiName><shortdesc>
      Récupère le composant IFocusManagerComponent qui a le focus actuellement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet IFocusManagerComponent qui a le focus.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Récupère le composant IFocusManagerComponent qui a le focus actuellement. Il est conseillé d’appeler cette méthode plutôt que d’utiliser l’objet Stage, car elle indique quel composant a le focus. L’objet Stage risque de renvoyer un sous-composant dans ce composant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:getNextFocusManagerComponent"><apiName>getNextFocusManagerComponent</apiName><shortdesc>
      Renvoie le composant IFocusManagerComponent qui recevrait le focus si l’utilisateur appuyait sur la touche de tabulation pour accéder à un autre composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant susceptible de recevoir le focus.
      
      </apiDesc><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier></apiReturn><apiParam><apiItemName>backward</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, renvoie l’objet résultant de l’activation des touches Maj-Tab.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le composant IFocusManagerComponent qui recevrait le focus si l’utilisateur appuyait sur la touche de tabulation pour accéder à un autre composant. Il renverra le même composant que celui qui a actuellement le focus si l’application ne comporte aucun autre composant valide.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:hideFocus"><apiName>hideFocus</apiName><shortdesc>
      Définit la valeur de showFocusIndicator sur false et supprime l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit la valeur de <codeph>showFocusIndicator</codeph> sur <codeph>false</codeph> et supprime l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:setFocus"><apiName>setFocus</apiName><shortdesc>
      Attribue le focus à un composant IFocusManagerComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>o</apiItemName><apiOperationClassifier>mx.managers:IFocusManagerComponent</apiOperationClassifier><apiDesc>Composant qui peut recevoir le focus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Attribue le focus à un composant IFocusManagerComponent. Ne vérifie pas ni visibilité du composant, ni son état activé, ni aucune autre condition.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocus"><apiName>showFocus</apiName><shortdesc>
      Définit la valeur de showFocusIndicator sur true et dessine l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit la valeur de <codeph>showFocusIndicator</codeph> sur <codeph>true</codeph> et dessine l’indicateur de focus visuel sur l’objet qui a le focus, le cas échéant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButtonEnabled:get"><apiName>defaultButtonEnabled</apiName><shortdesc>
      Un indicateur qui spécifie si l’objet FocusManager doit confirmer l’utilisation de la touche Entrée pour activer le bouton par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Un indicateur qui spécifie si l’objet FocusManager doit confirmer l’utilisation de la touche Entrée pour activer le bouton par défaut. TextArea et d’autres composants voulant reconnaître la touche <codeph>Entrée</codeph> définissent cette propriété sur <codeph>false</codeph> pour empêcher la touche Entrée de distribuer un événement <codeph>click</codeph> sur le bouton défaut, s’il existe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Référence au contrôle Button par défaut d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IButton</apiValueClassifier></apiValueDef><apiDesc>
      Référence au contrôle Button par défaut d’origine. L’activation de la touche Entrée pendant que le focus est sur un contrôle quelconque active le contrôle Button en distribuant un événement <codeph>click</codeph> sur le contrôle Button, comme s’il avait reçu un clic de souris. Le véritable contrôle Button par défaut change si le focus est attribué à un autre contrôle Button, mais revient au contrôle d’origine si le focus n’est pas sur un bouton.
     
      <p>Cette propriété étant gérée par les conteneurs Flex, ne la définissez pas directement pour spécifier le bouton par défaut.</p>
     
      <p>L’objet <codeph>defaultButton</codeph> doit appartenir à la classe <codeph>mx.controls.Button</codeph>, même si cette propriété est de type <codeph>IUIComponent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Sprite unique qui est déplacé de conteneur en conteneur au fur et à mesure que le focus arrive sur ces conteneurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Sprite unique qui est déplacé de conteneur en conteneur au fur et à mesure que le focus arrive sur ces conteneurs. L’objet Sprite est utilisé en tant que parent de l’indicateur visuel, qui signale qu’un composant a le focus.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:nextTabIndex:get"><apiName>nextTabIndex</apiName><shortdesc>
      Prochain et unique index de tabulation à utiliser dans cette boucle de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Prochain et unique index de tabulation à utiliser dans cette boucle de tabulation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManager:mx.managers:IFocusManager:showFocusIndicator:get"><apiName>showFocusIndicator</apiName><shortdesc>
      Indicateur précisant si le composant avec focus doit faire l’objet d’une indication visuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur précisant si le composant avec focus doit faire l’objet d’une indication visuelle. Si la valeur est <codeph>true</codeph>, un composant qui reçoit le focus trace un indicateur visible pour signaler qu’il a le focus.
     
      <p>Par défaut, cette valeur est <codeph>false</codeph> jusqu’à ce que l’utilisateur appuie sur la touche de tabulation ; elle est ensuite définie sur <codeph>true</codeph>.</p>
     
      <p>En général, il est préférable d’utiliser les méthodes <codeph>showFocus()</codeph> et <codeph>hideFocus()</codeph> pour modifier cette propriété, car elles mettent également à jour l’indicateur visuel signalant qu’un composant a le focus.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IFocusManagerGroup"><apiName>IFocusManagerGroup</apiName><shortdesc>
  L’interface IFocusManagerGroup définit l’interface que tous les composants doivent implémenter s’ils sont regroupés en jeux, dans lesquels un seul membre peut être sélectionné à tout moment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFocusManagerGroup définit l’interface que tous les composants doivent implémenter s’ils sont regroupés en jeux, dans lesquels un seul membre peut être sélectionné à tout moment. Par exemple, un objet RadioButton implémente l’interface IFocusManagerGroup parce qu’un jeu d’objets RadioButton du même groupe ne peut avoir qu’un objet RadioButton sélectionné en même temps. De plus, l’objet FocusManager fera attention de ne pas donner le focus aux objets RadioButton qui ne sont pas sélectionnés en réponse au déplacement du focus via la touche de tabulation.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:groupName:get"><apiName>groupName</apiName><shortdesc>
	 Nom du groupe de contrôles qui possède le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	 Nom du groupe de contrôles qui possède le contrôle.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:IFocusManagerGroup:mx.managers:IFocusManagerGroup:selected:get"><apiName>selected</apiName><shortdesc>
	 Indicateur qui signale si le contrôle est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 Indicateur qui signale si le contrôle est sélectionné.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:SystemManager"><apiName>SystemManager</apiName><shortdesc>
  Classe SystemManager qui gère une fenêtre d’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModuleFactory</apiBaseInterface><apiBaseInterface>mx.managers:ISystemManager</apiBaseInterface><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe SystemManager qui gère une fenêtre d’application. Chaque application qui s’exécute sur le bureau ou dans un navigateur comporte une zone d’affichage des effets visuels de l’application. Il peut s’agir d’une fenêtre dans le système d’exploitation ou d’une zone au sein du navigateur. Il s’agit d’une « fenêtre d’application », ce qui est différent d’une occurrence de la classe <codeph>mx.core.Application</codeph>, qui correspond à la fenêtre principale, ou de niveau supérieur, d’une application.
   <p>Chaque application est dotée d’un composant SystemManager. Le composant SystemManager envoie un événement si la taille de la fenêtre d’application change (vous ne pouvez pas la changer au sein de l’application, mais seulement par interaction avec la fenêtre du système d’exploitation ou avec le navigateur). Il est le parent de tous les éléments affichables dans l’application, comme l’occurrence mx.core.Application principale et tous les menus déroulants, infos-bulles, curseurs, etc. Tout objet qui est le parent du contrôle SystemManager est considéré comme une fenêtre de niveau supérieur, même les infos-bulles et les curseurs.</p>
   <p>L’objet SystemManager fait également basculer le focus entre les fenêtres de niveau supérieur si plusieurs objets IFocusManagerContainer sont affichés et si les utilisateurs interagissent avec les composants au sein des objets IFocusManagerContainer.  </p>
   <p>Toute activité du clavier et de la souris qui n’est pas expressément traitée à un autre emplacement de l’application est vue par l’objet SystemManager, ce qui en fait l’endroit idéal pour gérer l’activité, si besoin est.</p>
   <p>Si une application est chargée dans une autre application, un gestionnaire SystemManager sera tout de même créé, mais il ne gérera pas de fenêtre d’application, selon les règles de sécurité et du domaine. En revanche, il deviendra le <codeph>contenu</codeph> du composant <codeph>Loader</codeph> qui l’a chargé et servira simplement de parent à la sous-application</p>
   <p>Le gestionnaire SystemManager gère plusieurs listes d’enfants, chacune étant destinée aux infos-bulles, curseurs et fenêtres contextuelles. C’est ainsi qu’il s’assure que les fenêtres contextuelles « flottent » sur les fenêtres de l’application principale et que les infos-bulles « flottent » par dessus, et les curseurs encore au-dessus. Si vous utilisez simplement la propriété <codeph>numChildren</codeph> ou appelez la méthode <codeph>getChildAt()</codeph> dans l’objet SystemManager, vous accédez à la fenêtre d’application principale et à toutes les autres fenêtres non contextuelles. Pour obtenir la liste de toutes les fenêtres, y compris les fenêtres contextuelles, les infos-bulles et les curseurs, utilisez la propriété <codeph>rawChildren</codeph>.</p>
   <p>L’objet SystemManager est la première classe d’affichage créée dans une application. Il est responsable de la création d’une méthode <codeph>mx.preloaders.Preloader</codeph> qui affiche toutes les occurrences <codeph>mx.preloaders.SparkDownloadProgressBar</codeph> lorsque l’application termine son chargement, puis créé l’occurrence <codeph>mx.core.Application</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.managers:SystemManager_flash.events.Event.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Distribué lorsque l’objet Stage est redimensionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.RESIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’objet Stage est redimensionné.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.IDLE_idle"><apiName>idle</apiName><shortdesc>
  Distribué toutes les 100 millisecondes lorsque aucune activité du clavier ou de la souris n’a eu lieu pendant 1 seconde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.IDLE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué toutes les 100 millisecondes lorsque aucune activité du clavier ou de la souris n’a eu lieu pendant 1 seconde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.managers:SystemManager_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Distribué lorsque l’application a terminé son initialisation.
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’application a terminé son initialisation.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.managers:SystemManager:SystemManager"><apiName>SystemManager</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
           <p>Ceci est le point de départ de toutes les applications Flex. Cette classe est définie pour être la classe racine d’un fichier SWF Flex. Flash Player instancie une occurrence de cette classe, ce qui entraîne l’appel de ce constructeur.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.managers:SystemManager:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      
      Ajoute une bibliothèque RSL dans la liste des preloadedRSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>Le loaderInfo de la bibliothèque RSL chargée.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>Les informations de configuration de la bibliothèque RSL. Un vecteur de RSLData. Le premier élément du tableau est la bibliothèque RSL principale. Les éléments restants sont les bibliothèques RSL auxiliaires.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Ajoute une bibliothèque RSL dans la liste des preloadedRSL. Cette méthode est appelée par les fabriques de modules enfants lorsqu’elles ajoutent/chargent une bibliothèque RSL dans le domaine d’application de cette fabrique de modules.
           <p>Vous n’appelez pas cette méthode directement. Cette méthode est appelée par les fabriques de modules enfants lorsqu’elles ajoutent/chargent une bibliothèque RSL dans le domaine d’application de cette fabrique de modules.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Appelle Security.allowDomain() pour le fichier SWF associé à cetle classe SystemManager, plus les fichiers SWF associés aux RSL préchargés par cette dernière. </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Appelle Security.allowDomain() pour le fichier SWF associé à cetle classe SystemManager, plus les fichiers SWF associés aux RSL préchargés par cette dernière. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Appelle Security.allowInsecureDomain() pour le fichier SWF associé à cetle classe SystemManager, plus les fichiers SWF associés aux RSL préchargés par cette dernière. </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Appelle Security.allowInsecureDomain() pour le fichier SWF associé à cetle classe SystemManager, plus les fichiers SWF associés aux RSL préchargés par cette dernière. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:create"><apiName>create</apiName><shortdesc>
      Méthode de fabrique qui demande une occurrence d’une définition connue au module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence du module, ou valeur <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>params</apiItemName><apiType value="restParam"/><apiDesc>Liste facultative d’arguments. Vous pouvez transmettre autant d’arguments que vous voulez. Ils sont ensuite stockés dans un tableau appelé <codeph>parameters</codeph>. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode de fabrique qui demande une occurrence d’une définition connue au module. Vous pouvez fournir un jeu facultatif de paramètres pour que les fabriques de construction changent ce qu’elles créent en fonction de la saisie. La transmission de la valeur null indique que la définition par défaut est créée, si possible. Cette méthode est remplacée dans la sous-classe autogénérée.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:deployMouseShields"><apiName>deployMouseShields</apiName><shortdesc>
      
      Déploie ou supprime les boucliers de souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deploy</apiItemName><apiType value="Boolean"/><apiDesc>La valeur est <codeph>true</codeph> pour déployer les boucliers de souris et <codeph>false</codeph> pour les enlever.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Déploie ou supprime les boucliers de souris. Les boucliers de souris bloquent l’entrée de la souris pour les applications non approuvées. Une des raisons pour lesquelles vous pouvez souhaiter bloquer l’entrée de la souris est que lorsque vous faites glisser la souris sur une application non approuvée, vous ne recevez normalement pas d’événements de déplacement de souris. Flash Player n’envoie pas d’événements à travers les limites de confiance/non approuvées pour des raisons de sécurité. En couvrant une application non approuvée avec un bouclier de souris (si vous êtes son parent), vous pouvez recevoir le message de déplacement de la souris et l’opération Glisser-déposer fonctionnera normalement. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
      
	  Convertit la chaîne donnée en classe ou fonction au niveau du package.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Classe représentée par le <codeph>nom</codeph>, ou valeur null.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Nom de classe, par exemple « mx.video.VideoManager ».
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Convertit la chaîne donnée en classe ou fonction au niveau du package. Appelle la méthode <codeph>ApplicationDomain.getDefinition()</codeph> appropriée selon si un élément est chargé dans une autre application ou non.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Méthode pratique pour déterminer si la hauteur explicite ou mesurée doit être utilisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre correspondant au paramètre <codeph>explicitHeight</codeph> s’il est défini, ou propriété <codeph>measuredHeight</codeph> dans le cas contraire.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Méthode pratique pour déterminer si la hauteur explicite ou mesurée doit être utilisée.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Méthode pratique pour déterminer si la largeur explicite ou mesurée doit être utilisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre correspondant au paramètre <codeph>explicitWidth</codeph> s’il est défini, ou propriété <codeph>measuredWidth</codeph> dans le cas contraire.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Méthode pratique pour déterminer si la largeur explicite ou mesurée doit être utilisée.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSWFRoot"><apiName>getSWFRoot</apiName><shortdesc>
      Retourne l’objet DisplayObject racine du fichier SWF contenant le code de l’objet donné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Objet DisplayObject racine.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="Object"/><apiDesc>N’importe quel objet. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne l’objet DisplayObject racine du fichier SWF contenant le code de l’objet donné.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getSandboxRoot"><apiName>getSandboxRoot</apiName><shortdesc>
      Remonte dans la chaîne parent pour obtenir le gestionnaire système de niveau supérieur dans cet objet SecurityDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gestionnaire système racine dans cet objet SecurityDomain.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Remonte dans la chaîne parent pour obtenir le gestionnaire système de niveau supérieur dans cet objet SecurityDomain.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getTopLevelRoot"><apiName>getTopLevelRoot</apiName><shortdesc>
      Remonte dans la chaîne parent pour obtenir le gestionnaire système de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gestionnaire système racine.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Remonte dans la chaîne parent pour obtenir le gestionnaire système de niveau supérieur. Retourne la valeur <codeph>null</codeph> s’il ne figure pas sur la liste d’affichage ou si l’utilisateur n’y a pas accès.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
     
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>un <codeph>Rectangle</codeph> incluant la portion visible de cet objet. Le rectangle est exprimé en coordonnées globales.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Facultatif. Limites de début du rectangle visible. Les limites sont exprimées en coordonnées globales. Si <codeph>bounds</codeph> est null, les limites de début sont définies par la propriété <codeph>screen</codeph> du gestionnaire système. 
     
      </apiDesc></apiParam><apiParam><apiItemName>skipToSandboxRoot</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
     
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Tentative de signalisation au SWFLoader parent que la taille de l’application a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Tentative de signalisation au SWFLoader parent que la taille de l’application a été modifiée.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isFontFaceEmbedded"><apiName>isFontFaceEmbedded</apiName><shortdesc>
      
      Retourne la valeur true si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode Font.registerFont().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode <codeph>Font.registerFont</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>textFormat</apiItemName><apiType value="flash.text:TextFormat"/><apiDesc>Classe TextFormat représentant les informations de mise en forme de caractères.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la valeur <codeph>true</codeph> si la police requise est imbriquée dans cette application ou a été enregistrée globalement à l’aide de la méthode <codeph>Font.registerFont</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelRoot"><apiName>isTopLevelRoot</apiName><shortdesc>
     
      Teste si ce gestionnaire système est la racine de tous les gestionnaires système de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si l’objet SystemManager est la racine de tous les gestionnaires système sur la liste d’affiche. Sinon, la valeur <codeph>false</codeph> est renvoyée.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Teste si ce gestionnaire système est la racine de tous les gestionnaires système de niveau supérieur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevelWindow"><apiName>isTopLevelWindow</apiName><shortdesc>
          Détermine si l’objet DisplayObject donné est la fenêtre de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si l’objet DisplayObject donné est la fenêtre de niveau supérieur.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à tester.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
          Détermine si l’objet DisplayObject donné est la fenêtre de niveau supérieur.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:isTopLevel"><apiName>isTopLevel</apiName><shortdesc>
      
	  Retourne la valeur true si cet objet ISystemManager est responsable d’une fenêtre d’application et la valeur false si cette application a été chargée dans une autre application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si cet objet ISystemManager est responsable d’une fenêtre d’application.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
	  Renvoie la valeur <codeph>true</codeph> si cet objet ISystemManager est responsable d’une fenêtre d’application et la valeur <codeph>false</codeph> si cette application a été chargée dans une autre application.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:move"><apiName>move</apiName><shortdesc>
      L’appel de la méthode move() n’a aucun effet, car elle est associée directement à la fenêtre d’application ou à l’objet Loader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle coordonnée x.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle coordonnée y.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      L’appel de la méthode <codeph>move()</codeph> n’a aucun effet, car elle est associée directement à la fenêtre d’application ou à l’objet Loader.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:SystemManager:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      L’appel de la méthode setActualSize() n’a aucun effet si elle est associée directement à la fenêtre d’application et s’il s’agit de la fenêtre de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur.
           </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      L’appel de la méthode <codeph>setActualSize()</codeph> n’a aucun effet si elle est associée directement à la fenêtre d’application et s’il s’agit de la fenêtre de niveau supérieur. Sinon, tente de se redimensionner en écrêtant les enfants si besoin est.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:SystemManager:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      
      Contrôle si les domaines autorisés par les appels à allowDomain() sont également autorisés par les bibliothèques RSL chargées après l’appel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contrôle si les domaines autorisés par les appels à <codeph>allowDomain()</codeph> sont également autorisés par les bibliothèques RSL chargées après l’appel. Les autres bibliothèques RSL peuvent être chargées dans cette fabrique de modules par les sous-applications ou modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      
      Contrôle si les domaines autorisés par les appels à allowInsecureDomain() sont également autorisés par les bibliothèques RSL chargées après l’appel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contrôle si les domaines autorisés par les appels à <codeph>allowInsecureDomain()</codeph> sont également autorisés par les bibliothèques RSL chargées après l’appel. Les autres bibliothèques RSL peuvent être ajoutées dans cette fabrique de modules par les sous-applications ou modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:application:get"><apiName>application</apiName><shortdesc>
      Application dont cet objet SystemManager est le parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Application dont cet objet SystemManager est le parent. Les objets SystemManager créent une occurrence d’une application même s’ils sont chargés dans une autre application. Ainsi, cela peut ne pas correspondre à l’application mx.core.Application.application si le fichier SWF a été chargé dans une autre application.
      <p>Notez que cette propriété n’est pas tapée comme mx.core.Application, en raison des performances du temps de chargement, mais peut être contrainte dans l’application mx.core.Application.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.managers:SystemManager:cursorChildren:get"><apiName>cursorChildren</apiName><shortdesc>
      
	  Liste des curseurs personnalisés qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Liste des curseurs personnalisés qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les fenêtres de niveau supérieur, les infos-bulles et les curseurs personnalisés. Vous pouvez accéder aux curseurs personnalisés via la propriété <codeph>cursorChildren</codeph>.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, <codeph>cursorChildren.numChildren</codeph> fournit le nombre de curseurs personnalisés (qui sera de 0 ou 1) et, si un curseur personnalisé existe, il est accessible par la méthode <codeph>cursorChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:document:get"><apiName>document</apiName><shortdesc>
      
	  Référence à l’objet de document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
	  Référence à l’objet de document. Un objet de document est un objet qui se trouve au sommet de la hiérarchie d’une application Flex, d’un composant MXML ou d’un composant AS.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:embeddedFontList:get"><apiName>embeddedFontList</apiName><shortdesc>
      Table de polices imbriquées dans cette application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Table de polices imbriquées dans cette application. L’objet est une table indexée par le nom de police.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Largeur explicite de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur explicite de cet objet. Pour l’objet SystemManager, la valeur doit toujours est NaN, sauf si l’application a été chargée dans une autre application. Si l’application n’a pas été chargée dans une autre application, la définition de cette valeur n’a aucun effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Largeur explicite de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur explicite de cet objet. Pour l’objet SystemManager, la valeur doit toujours est NaN, sauf si l’application a été chargée dans une autre application. Si l’application n’a pas été chargée dans une autre application, la définition de cette valeur n’a aucun effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:focusPane:get"><apiName>focusPane</apiName><shortdesc conref="mx.core.UIComponent#focusPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="mx.core.UIComponent#focusPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:height:get"><apiName>height</apiName><shortdesc>
      Hauteur de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur de cet objet. Pour l’objet SystemManager, il doit toujours s’agir de la largeur de la scène, sauf si l’application a été chargée dans une autre application. Si l’application n’a pas été chargée dans une autre application, la définition de cette valeur n’a aucun effet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:isProxy:get"><apiName>isProxy</apiName><shortdesc>
      True si la classe SystemManager est un proxy et non une classe racine 
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True si la classe SystemManager est un proxy et non une classe racine 
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      L’objet measuredHeight correspond à la hauteur explicite ou mesurée dans la fenêtre mx.core.Application principale ou correspond à la hauteur de début du fichier SWF si la fenêtre principale n’a pas encore été créée ou n’existe pas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      L’objet measuredHeight correspond à la hauteur explicite ou mesurée dans la fenêtre mx.core.Application principale ou correspond à la hauteur de début du fichier SWF si la fenêtre principale n’a pas encore été créée ou n’existe pas.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      L’objet measuredWidth correspond à la largeur explicite ou mesurée dans la fenêtre mx.core.Application principale ou correspond à la largeur de début du fichier SWF si la fenêtre principale n’a pas encore été créée ou n’existe pas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      L’objet measuredWidth correspond à la largeur explicite ou mesurée dans la fenêtre mx.core.Application principale ou correspond à la largeur de début du fichier SWF si la fenêtre principale n’a pas encore été créée ou n’existe pas.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Nombre de fenêtres non flottantes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre de fenêtres non flottantes. Il s’agit de la fenêtre d’application principale plus toutes les autres fenêtres ajoutées à l’objet SystemManager qui ne sont pas des fenêtres contextuelles, des infos-bulles ou des curseurs.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:numModalWindows:get"><apiName>numModalWindows</apiName><shortdesc>
      Nombre de fenêtres modales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre de fenêtres modales. Les fenêtres modales n’autorisent pas les clics dans une autre fenêtre qui sont susceptibles d’activer l’objet FocusManager dans cette fenêtre. L’objet PopUpManager modifie ce nombre en créant et supprimant les fenêtres modales.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.ISWFBridgeProvider#parentAllowsChild">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:parent:get"><apiName>parent</apiName><shortdesc>
     Remplacez la propriété parent pour gérer le cas où le parent se trouve dans un sandbox différent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
     Remplacez la propriété parent pour gérer le cas où le parent se trouve dans un sandbox différent. Si le parent se trouve dans le même sandbox, il est retourné. Si le parent se trouve dans un sandbox différent, la valeur null est retournée.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:popUpChildren:get"><apiName>popUpChildren</apiName><shortdesc>
      
	  Liste des fenêtres (contextuelles) topMost qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Liste des fenêtres (contextuelles) topMost qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les infos-bulles et les curseurs personnalisés. Vous pouvez accéder aux fenêtres de niveau supérieur via la propriété <codeph>popUpChildren</codeph>.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, la méthode <codeph>popUpChildren.numChildren</codeph> fournit le nombre de fenêtres de niveau supérieur qui est accessible avec méthode <codeph>popUpChildren.getChildAt(i)</codeph>.</p>
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      
      Les bibliothèques RSL chargées par ce SystemManager ou FlexModuleFactory avant le lancement de l’application.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      
      Les bibliothèques RSL chargées par ce SystemManager ou FlexModuleFactory avant le lancement de l’application. Ce dictionnaire peut également inclure des bibliothèques RSL chargées dans le domaine d’application de cette fabrique de modules par d’autres modules ou sous-applications. Lorsqu’une nouvelle entrée de dictionnaire est ajoutée par une fabrique de modules enfant, un événement <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> est distribué par la fabrique de modules propriétaire du dictionnaire. Les informations sur les preloadedRSL sont stockées dans un dictionnaire. La clé est l’objet LoaderInfo du RSL. La valeur est le vecteur de RSLData où le premier élément est la bibliothèque RSL principale et les éléments restants sont les bibliothèques RSL auxiliaires.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundAlpha:get"><apiName>preloaderBackgroundAlpha</apiName><shortdesc>
      Alpha d’arrière-plan utilisé par l’enfant du préchargeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Alpha d’arrière-plan utilisé par l’enfant du préchargeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundColor:get"><apiName>preloaderBackgroundColor</apiName><shortdesc>
      Couleur d’arrière-plan utilisée par l’enfant du préchargeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Couleur d’arrière-plan utilisée par l’enfant du préchargeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundImage:get"><apiName>preloaderBackgroundImage</apiName><shortdesc>
      Couleur d’arrière-plan utilisée par l’enfant du préchargeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Couleur d’arrière-plan utilisée par l’enfant du préchargeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:preloaderBackgroundSize:get"><apiName>preloaderBackgroundSize</apiName><shortdesc>
      Taille d’arrière-plan utilisée par l’enfant du préchargeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Taille d’arrière-plan utilisée par l’enfant du préchargeur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      
	  Liste de tous les enfants qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Liste de tous les enfants qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les infos-bulles et les curseurs personnalisés.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:screen:get"><apiName>screen</apiName><shortdesc>
      
	  Taille et position de la fenêtre d’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
	  Taille et position de la fenêtre d’application. L’objet Rectangle contient les propriétés <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> et <codeph>height</codeph>. Le rectangle est exprimé en racine sandbox coordonnées.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:toolTipChildren:get"><apiName>toolTipChildren</apiName><shortdesc>
      
	  Liste des infos-bulles qui sont les parents de cet objet ISystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      
	  Liste des infos-bulles qui sont les parents de cet objet ISystemManager.
	 
	  <p>Un objet ISystemManager possède plusieurs types d’enfants, comme l’application, les fenêtres contextuelles, les fenêtres de niveau supérieur, les infos-bulles et les curseurs personnalisés.</p>
	 
	  <p>L’objet IChildList comporte des méthodes comme <codeph>getChildAt()</codeph> et comme <codeph>numChildren</codeph>. Par exemple, la méthode <codeph>toolTipChildren.numChildren</codeph> fournit le nombre d’infos-bulles (qui sera de 0 ou 1) et, si une info-bulle existe, il est accessible avec la méthode <codeph>toolTipChildren.getChildAt(0)</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:topLevelSystemManager:get"><apiName>topLevelSystemManager</apiName><shortdesc>
      Retourne l’objet SystemManager responsable de la fenêtre d’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie l’objet SystemManager responsable de la fenêtre d’application. Il s’agira du même objet SystemManager sauf si cette application a été chargée dans une autre application.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:SystemManager:width:get"><apiName>width</apiName><shortdesc>
      Largeur de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur de cet objet. Pour l’objet SystemManager, il doit toujours s’agir de la largeur de la scène, sauf si l’application a été chargée dans une autre application. Si l’application n’a pas été chargée dans une autre application, la définition de cette valeur n’aura aucun effet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:LayoutManager"><apiName>LayoutManager</apiName><shortdesc>
  L’objet LayoutManager est le moteur qui se trouve derrière la mesure et la stratégie de mise en forme de Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManager</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’objet LayoutManager est le moteur qui se trouve derrière la mesure et la stratégie de mise en forme de Flex. La mise en forme s’effectue en trois phases : validation, mesure et mise en forme.
 
  <p>Chaque phase est distincte des autres et tous les objets UIComponent d’une phase sont traités avant de passer à la phase suivante. Lors du traitement des objets UIComponent d’une phase, des demandes visant à ce qu’une phase retraite les composants UIComponent peuvent se produire. Ces demandes sont mises en attente et ne sont traitées que lors de la prochaine exécution de la phase.</p>
 
  <p>La phase de <b>validation</b> commence par un appel de la méthode <codeph>validateProperties()</codeph>, qui parcourt une liste (triée dans l’ordre inverse par niveau d’imbrication) d’objets appelant la méthode <xref href="../core/UIComponent.html#validateProperties()"> Méthode <codeph>validateProperties()</codeph></xref>.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication inverse. L’objet imbriqué <b>le moins</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>Cette phase permet aux composants dont le contenu dépend des paramètres de propriété de se configurer avant les phases de mesure et de mise en forme. Pour des raisons de performances, il peut arriver que la méthode setter de la propriété d’un composant ne fasse pas tout le travail nécessaire pour utiliser la nouvelle valeur de propriété. En revanche, la méthode setter de la propriété appelle la méthode <codeph>invalidateProperties()</codeph>, retardant ainsi le travail jusqu’à l’exécution de cette phase. Cela permet d’empêcher tout travail inutile si la propriété est définie plusieurs fois.</p>
 
  <p>La phase de <b>mesure</b> commence par un appel de la méthode <codeph>validateSize()</codeph>, qui parcourt une liste (triée par niveau d’imbrication) d’objet appelant la méthode <xref href="../core/UIComponent.html#validateSize()">Méthode <codeph>validateSize()</codeph></xref> permettant de déterminer si l’objet a changé de taille.</p>
 
  <p>Si la méthode <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> d’un objet a été précédemment appelée, la méthode <codeph>validateSize()</codeph> est également appelée. Si la taille ou la position de l’objet a été modifiée suite à l’appel de la méthode <codeph>validateSize()</codeph>, la méthode <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> de l’objet est appelée, ajoutant ainsi l’objet à la file d’attente de traitement pour la prochaine exécution de la phase de mise en forme. En outre, le parent de l’objet est marqué pour les phases de mesure et de présentation en appelant respectivement les méthodes <xref href="../core/UIComponent.html#invalidateSize()"> <codeph>invalidateSize()</codeph></xref> et <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref>.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication. L’objet imbriqué <b>le plus</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>La phase de <b>mise en forme</b> commence par un appel de la méthode <codeph>validateDisplayList()</codeph>, qui parcourt une liste (triée dans l’ordre inverse par niveau d’imbrication) d’objets appelant la méthode<xref href="../core/UIComponent.html#validateDisplayList()">  Méthode <codeph>validateDisplayList()</codeph></xref> permettant de demander que l’objet dimensionne et positionne tous les composants qu’il contient (c’est-à-dire ses enfants).</p>
 
  <p>Si la méthode <xref href="../core/UIComponent.html#invalidateDisplayList()"> <codeph>invalidateDisplayList()</codeph></xref> d’un objet a déjà été appelée, la méthode <codeph>validateDisplayList()</codeph> est appelée.</p>
 
  <p>Les objets de la liste sont traités dans l’ordre d’imbrication inverse. L’objet imbriqué <b>le moins</b> profondément est utilisé en premier. Cette opération peut également porter le nom de tri ou de classement inverse.</p>
 
  <p>En général, les composants ne remplacent pas les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> ou <codeph>validateDisplayList()</codeph>. Dans le cas des objets UIComponent, la plupart des composants remplacent les méthodes <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> ou <codeph>updateDisplayList()</codeph>, qui sont appelées par les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> ou <codeph>validateDisplayList()</codeph>, respectivement.</p>
 
  <p>Au démarrage de l’application, une seule occurrence de la classe LayoutManager est créée et stockée dans la propriété <codeph>UIComponent.layoutManager</codeph>. Tous les composants sont supposés utiliser cette occurrence. Si vous n’avez pas accès à l’objet UIComponent, vous pouvez également accéder à l’objet LayoutManager à l’aide de la méthode <codeph>LayoutManager.getInstance()</codeph> statique.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:LayoutManager:attachListeners"><apiName>attachListeners</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Renvoie l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.
          
          </apiDesc><apiOperationClassifier>mx.managers:LayoutManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Renvoie l’occurrence unique de cette classe Singleton. La crée si elle n’existe pas déjà.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Appelé lorsqu’un composant change d’une façon qui nécessite la modification de sa mise en forme et/ou de ses effets visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet à modifier.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un composant change d’une façon qui nécessite la modification de sa mise en forme et/ou de ses effets visuels. Dans ce cas, il est nécessaire d’exécuter l’algorithme de mise en forme du composant, même si sa taille n’a pas changé. Par exemple, lorsqu’un nouveau composant enfant est ajouté, ou si une propriété de style change ou si le parent d’un composant a donné à ce dernier une nouvelle taille.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Ajoute un objet à la liste des composants qui souhaitent que leur méthode validateProperties() soit appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet dont la propriété a changé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un objet à la liste des composants qui souhaitent que leur méthode <codeph>validateProperties()</codeph> soit appelée. Un composant doit appeler cette méthode lorsqu’une propriété change. En général, la méthode setter d’une propriété stocke la nouvelle valeur dans une variable temporaire et appelle la méthode <codeph>invalidateProperties()</codeph> afin que ses méthodes <codeph>validateProperties()</codeph> et <codeph>commitProperties()</codeph> soient appelées ultérieurement, lorsque la nouvelle valeur sera réellement appliquée au composant et/ou à ses enfants. L’avantage de cette stratégie réside dans le fait que, souvent, plusieurs propriétés sont modifiées en même temps et les propriétés peuvent interagir entre elles, ou répéter un code lors de leur application ou encore avoir besoin d’être appliquées dans un ordre précis. Cette stratégie est la méthode la plus efficace possible pour appliquer les nouvelles valeurs des propriétés.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Ajoute un objet à la liste des composants qui souhaitent que leur méthode validateSize() soit appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Objet dont la taille a changé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un objet à la liste des composants qui souhaitent que leur méthode <codeph>validateSize()</codeph> soit appelée. Appelé lorsque la taille d’un objet change.
     
      <p>La taille d’un objet peut changer pour deux raisons :</p>
     
      <ol>
        <li>Le contenu de l’objet change. Par exemple, la taille d’un bouton change lorsque son <codeph>étiquette</codeph> est modifiée.</li>
        <li>Un script change explicitement les propriétés suivantes : <codeph>minWidth</codeph>, <codeph>minHeight</codeph>, <codeph>explicitWidth</codeph>, <codeph>explicitHeight</codeph>, <codeph>maxWidth</codeph> ou <codeph>maxHeight</codeph>.</li>
      </ol>
     
      <p>Lorsque la première condition a lieu, il est nécessaire de recalculer les mesures de l’objet. Lorsque la deuxième condition a lieu, il n’est pas nécessaire de recalculer les mesures, car la nouvelle taille de l’objet est connue. Toutefois, il est nécessaire de réaliser à nouveau la mesure et la mise en forme du parent de l’objet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:isInvalid"><apiName>isInvalid</apiName><shortdesc>
      Renvoie la valeur true si des composants ont besoin d’être validés. Renvoie la valeur false si les composants sont déjà validés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Retourne la valeur <codeph>true</codeph> si des composants ont besoin d’être validés. Retourne la valeur <codeph>false</codeph> si les composants sont déjà validés.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Retourne la valeur <codeph>true</codeph> si des composants ont besoin d’être validés. Retourne la valeur <codeph>false</codeph> si les composants sont déjà validés.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateClient"><apiName>validateClient</apiName><shortdesc>
      Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.managers:ILayoutManagerClient</apiOperationClassifier><apiDesc>Le composant transmis est utilisé pour tester les composants à valider. Les méthodes <codeph>validateProperties()</codeph>, <codeph>commitProperties()</codeph>, <codeph>validateSize()</codeph>, <codeph>measure()</codeph>, <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> de tous les composants contenus dans ce composant seront appelées.
     
        </apiDesc></apiParam><apiParam><apiItemName>skipDisplayList</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, les méthodes <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> ne sont pas appelées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement. En revanche, les composants appellent généralement une des méthodes d’annulation de l’objet LayoutManager et appliquent les propriétés ultérieurement. La propriété réelle que vous définissez peut être relue immédiatement. Mais si la propriété affecte d’autres propriétés dans le composant ou ses enfants ou parents, ces autres propriétés peuvent ne pas être immédiatement mises à jour.  
     
      <p>Pour garantir la mise à jour des valeurs, vous pouvez appeler la méthode <codeph>validateClient()</codeph>. Elle met à jour toutes les propriétés dans tous les composants dont le niveau d’imbrication est supérieur ou égal au composant cible avant de renvoyer le contrôle à l’appelant. Appelez cette méthode uniquement lorsque cela est nécessaire, car cet appel exige des calculs intensifs.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:LayoutManager:validateNow"><apiName>validateNow</apiName><shortdesc>
      Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Lorsque les propriétés sont modifiées, les composants n’appliquent généralement pas ces changements immédiatement. En revanche, les composants appellent généralement une des méthodes d’annulation de l’objet LayoutManager et appliquent les propriétés ultérieurement. La propriété réelle que vous définissez peut être relue immédiatement. Mais si la propriété affecte d’autres propriétés dans le composant ou ses enfants ou parents, ces autres propriétés peuvent ne pas être immédiatement mises à jour. Pour garantir la mise à jour des valeurs, vous pouvez appeler la méthode <codeph>validateNow()</codeph>. Elle met à jour toutes les propriétés dans tous les composants avant de renvoyer le contrôle. Appelez cette méthode uniquement lorsque cela est nécessaire, car cet appel exige des calculs intensifs.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:LayoutManager:usePhasedInstantiation:get"><apiName>usePhasedInstantiation</apiName><shortdesc>
      Indicateur précisant si l’objet LayoutManager autorise l’actualisation de l’écran entre les phases.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur précisant si l’objet LayoutManager autorise l’actualisation de l’écran entre les phases. Si la valeur est <codeph>true</codeph>, la mesure et la mise en forme s’effectuent en phases, une phase par actualisation de l’écran. Les méthodes <codeph>validateProperties()</codeph> et <codeph>commitProperties()</codeph> de tous les composants sont appelées jusqu’à la validation de toutes les propriétés. L’écran est ensuite actualisé.  
     
      <p>Ensuite, les méthodes <codeph>validateSize()</codeph> et <codeph>measure()</codeph> de tous les composants sont appelées jusqu’à ce que tous les composants aient été mesurés. Enfin, l’écran est à nouveau actualisé.  </p>
     
      <p>Pour finir, les méthodes <codeph>validateDisplayList()</codeph> et <codeph>updateDisplayList()</codeph> de tous les composants sont appelées jusqu’à ce que tous les composants aient été validés. L’écran est à nouveau actualisé. Si dans la validation d’une phase, une phase antérieure est invalidée, l’objet LayoutManager recommence. Ceci est plus efficace lorsqu’un grand nombre de composants sont créés et initialisés. La structure est responsable de la définition de cette propriété.</p>
     
      <p>Si la valeur est <codeph>false</codeph>, les trois phases sont réalisées avant l’actualisation de l’écran.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IMarshalSystemManager"><apiName>IMarshalSystemManager</apiName><shortdesc>
  L’interface IMarshalSystemManager définit les méthodes et les propriétés que les classes doivent implémenter pour accéder, ajouter et supprimer des ponts à d’autres applications dans une configuration inter-versionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IMarshalSystemManager définit les méthodes et les propriétés que les classes doivent implémenter pour accéder, ajouter et supprimer des ponts à d’autres applications dans une configuration inter-versionnée.
 
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildBridge"><apiName>addChildBridge</apiName><shortdesc> 
      Ajoute un pont enfant au gestionnaire du système.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont de l’enfant.
     
      </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>SWFLoader de l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Ajoute un pont enfant au gestionnaire du système. Chaque pont enfant représente les composants d’un autre sandbox ou de composants compilés avec une autre version de Flex.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:addChildToSandboxRoot"><apiName>addChildToSandboxRoot</apiName><shortdesc> 
      Ajoute l'enfant spécifié à la racine sandbox dans le calque requis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Nom de l’objet IChildList dans SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Ajoute l'enfant spécifié à la racine sandbox dans le calque requis.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:dispatchEventFromSWFBridges"><apiName>dispatchEventFromSWFBridges</apiName><shortdesc>
      Distribuez un message à toutes les applications parent et enfant du groupe de ponts SWF de ce SystemManager, qu’elles soient dans le même objet SecurityDomain ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Evénement à distribuer.
          
          </apiDesc></apiParam><apiParam><apiItemName>skip</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>Indique un objet IEventDispatcher auquel vous ne voulez pas distribuer de message. Ceci est principalement utilisé pour ignorer l’objet IEventDispatcher qui est à l’origine de l’événement.
     
          </apiDesc></apiParam><apiParam><apiItemName>trackClones</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indique si une référence aux événements doit être conservée lors de leur distribution.
          
          </apiDesc></apiParam><apiParam><apiItemName>toOtherSystemManagers</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indique si l’événement doit être distribué à d’autres objets SystemManager de niveau supérieur dans AIR.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Distribuez un message à toutes les applications parent et enfant du groupe de ponts SWF de ce SystemManager, qu’elles soient dans le même objet SecurityDomain ou non. Vous pouvez exclure une application avec les paramètres de cette méthode.
     
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:isDisplayObjectInABridgedApplication"><apiName>isDisplayObjectInABridgedApplication</apiName><shortdesc>
      Vérifie si un objet d’affichage est dans une application enfant qui est chargée en mode de compatibilité ou dans un sandbox non approuvé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est <codeph>true</codeph> si <codeph>displayObject</codeph> se trouve dans une application enfant qui est chargée en mode de compatibilité ou dans un sandbox non approuvé. Sinon, la valeur est <codeph>false</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si un objet d’affichage est dans une application enfant qui est chargée en mode de compatibilité ou dans un sandbox non approuvé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc> 
      Ajoute un pont enfant au gestionnaire du système.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont de l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Ajoute un pont enfant au gestionnaire du système. Chaque pont enfant représente les composants d’un autre sandbox ou de composants compilés avec une autre version de Flex.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:removeChildFromSandboxRoot"><apiName>removeChildFromSandboxRoot</apiName><shortdesc> 
      Supprime l’enfant spécifié de la racine sandbox dans le calque requis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>layer</apiItemName><apiType value="String"/><apiDesc>Nom de l’objet IChildList dans SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Supprime l’enfant spécifié de la racine sandbox dans le calque requis.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:useSWFBridge"><apiName>useSWFBridge</apiName><shortdesc>
      Détermine si l’appelant qui utilise le gestionnaire système doit communiquer directement avec d’autres gestionnaires ou s’il doit communiquer avec un pont.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est <codeph>true</codeph> si l’appelant qui utilise ce gestionnaire système doit communiquer à l’aide des ponts sandbox. La valeur est <codeph>false</codeph> si le gestionnaire système peut appeler directement d’autres gestionnaires via des références.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Détermine si l’appelant qui utilise le gestionnaire système doit communiquer directement avec d’autres gestionnaires ou s’il doit communiquer avec un pont.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:IMarshalSystemManager:mx.managers:IMarshalSystemManager:swfBridgeGroup:get"><apiName>swfBridgeGroup</apiName><shortdesc>
      Contient tous les ponts vers d’autres applications auxquelles cette application est connectée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:ISWFBridgeGroup</apiValueClassifier></apiValueDef><apiDesc>
      Contient tous les ponts vers d’autres applications auxquelles cette application est connectée.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:ILayoutManagerClient"><apiName>ILayoutManagerClient</apiName><shortdesc>
  L’interface ILayoutManagerClient définit l’interface qu’un composant doit implémenter pour participer à la séquence de validation/mesure/mise en forme de l’objet LayoutManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface ILayoutManagerClient définit l’interface qu’un composant doit implémenter pour participer à la séquence de validation/mesure/mise en forme de l’objet LayoutManager.  
 
  <p>Les objets qui implémentent cette interface peuvent être transmis à la méthode <codeph>invalidateProperties()</codeph> de l’objet LayoutManager. Lorsque l’objet LayoutManager atteint la phase de validation des propriétés, il invoque la méthode <codeph>validateProperties()</codeph> de cet objet.</p>
 
  <p>De même, si un objet est transmis à la méthode <codeph>invalidateSize()</codeph> de l’objet LayoutManager, il appelle alors la méthode <codeph>validateSize() </codeph> de cet objet lors de la phase de mesure, et si un objet est transmis à la méthode <codeph>invalidateDisplayList()</codeph> du LayoutManager, alors l’objet LayoutManager appelle sa méthode <codeph>validateDisplayList()</codeph> lors de la phase de mise en forme.</p>
 
  <p>L’interface ILayoutManagerClient est implémentée par les classes UIComponent et ProgrammaticSkin.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      Valide la position et la taille des enfants, et trace d’autres effets visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide la position et la taille des enfants, et trace d’autres effets visuels. Si la méthode <codeph>LayoutManager.invalidateDisplayList()</codeph> est appelée avec cette interface ILayoutManagerClient, la méthode <codeph>validateDisplayList()</codeph> est alors appelée lorsqu’il est temps de mettre à jour la liste d’affichage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Valide les propriétés d’un composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide les propriétés d’un composant. Si la méthode <codeph>LayoutManager.invalidateProperties()</codeph> est appelée avec cette interface ILayoutManagerClient, la méthode <codeph>validateProperties()</codeph> est alors appelée lorsqu’il est temps de valider les valeurs de propriété.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:validateSize"><apiName>validateSize</apiName><shortdesc>
      Valide la taille mesurée du composant si la méthode LayoutManager.invalidateSize() est appelée avec cette interface ILayoutManagerClient, puis la méthode validateSize() est appelée lorsqu’il est temps d’effectuer les mesures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode est appelée sur les enfants des objets.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Valide la taille mesurée du composant si la méthode <codeph>LayoutManager.invalidateSize()</codeph> est appelée avec cette interface ILayoutManagerClient, puis la méthode <codeph>validateSize()</codeph> est appelée lorsqu’il est temps d’effectuer les mesures.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:initialized:get"><apiName>initialized</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était). Cet indicateur ne doit être modifié que par l’objet LayoutManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était). Cet indicateur ne doit être modifié que par l’objet LayoutManager.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      La valeur nestLevel du gestionnaire système de niveau supérieur est 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      La valeur nestLevel du gestionnaire système de niveau supérieur est 1. La valeur <codeph>nestLevel</codeph> de ses enfants immédiats (l’application de niveau supérieur et toutes les fenêtres contextuelles) est 2. La valeur <codeph>nestLevel</codeph> de leurs enfants est 3 et ainsi de suite. L’objet <codeph>nestLevel</codeph> permet de trier l’interface ILayoutManagerClients lors des phases de mesure et de mise en forme. Lors de la phase de validation, l’objet LayoutManager valide les propriétés sur les clients par ordre croissant de la valeur <codeph>nestLevel</codeph>, de sorte que les propriétés des enfants d’un objet sont validées avant que Flex ne valide les propriétés sur l’objet lui-même. Lors de la phase de mesure, l’objet LayoutManager mesure les clients par ordre décroissant de la valeur <codeph>nestLevel</codeph>, de sorte que les enfants d’un objet sont mesurés avant que Flex ne mesure l’objet lui-même. Lors de la phase de mise en forme, l’objet LayoutManager dispose les clients par ordre croissant de la valeur <codeph>nestLevel</codeph>, de sorte qu’un objet peut définir la taille de ses enfants avant que les objets enfant ne soient invités à positionner et dimensionner leurs enfants.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:ILayoutManagerClient:mx.managers:ILayoutManagerClient:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Indicateur précisant si un objet attend que son événement updateComplete soit distribué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur précisant si un objet attend que son événement <codeph> updateComplete</codeph> soit distribué. Cet indicateur ne doit être modifié que par l’objet LayoutManager.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:IToolTipManagerClient"><apiName>IToolTipManagerClient</apiName><shortdesc>
  Les composants qui implémentent l’interface IToolTipManagerClient peuvent comporter des infos-bulles et doivent posséder une méthode getter/setter toolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Les composants qui implémentent l’interface IToolTipManagerClient peuvent comporter des infos-bulles et doivent posséder une méthode getter/setter toolTip. La classe ToolTipManager gère l’affichage et le masquage de l’info-bulle au nom de tous les composants qui sont une interface IToolTipManagerClient.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.core.xml#IToolTip"><linktext>mx.core.IToolTip</linktext></link></related-links><apiValue id="mx.managers:IToolTipManagerClient:mx.managers:IToolTipManagerClient:toolTip:get"><apiName>toolTip</apiName><shortdesc>
	  Texte de l’info-bulle de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Texte de l’info-bulle de ce composant.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.managers:CursorManager"><apiName>CursorManager</apiName><shortdesc>
  La classe CursorManager contrôle une liste de priorités des curseurs, dans laquelle le curseur qui a la propriété la plus élevée est actuellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="busyCursorBackground" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  La classe à utiliser comme enveloppe du curseur d’arrière-plan occupé. La valeur par défaut est le symbole « cursorStretch » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="busyCursor" owner="mx.managers:CursorManager" playerVersion="Flash9" type="Class">
<description>
  Habillage du curseur occupé.
 
  </description>
<default>mx.skins.halo.BusyCursor
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CursorManager contrôle une liste de priorités des curseurs, dans laquelle le curseur qui a la propriété la plus élevée est actuellement visible. Si la liste des curseurs contient plusieurs curseurs de priorité identique, le gestionnaire des curseurs affiche le curseur qui a été créé le plus récemment.
  
  <p>Par exemple, si votre application effectue un traitement qui implique que l’utilisateur doit attendre jusqu’à la fin du traitement, vous pouvez modifier le curseur pour qu’il reflète la période d’attente. Dans ce cas, vous pouvez utiliser un sablier ou une autre image pour le curseur.</p>
  
  <p>Vous pouvez également changer le curseur pour indiquer à l’utilisateur les actions qu’il peut effectuer. Par exemple, vous pouvez utiliser une image de curseur pour indiquer à l’utilisateur que la saisie est activée et un autre pour lui indiquer que la saisie est désactivée. Vous pouvez utiliser une image JPEG, GIF, PNG ou SVG, un objet Sprite ou un fichier SWF comme image de curseur.</p>
  
  <p>Toutes les méthodes et propriétés de la classe CursorManager sont statiques. Vous n’avez donc pas besoin de leur créer une occurrence.</p>
 
  <p>Dans AIR, chaque occurrence mx.core.Window utilise sa propre occurrence de la classe CursorManager. Au lieu de référencer directement les méthodes et propriétés statiques de la classe CursorManager, utilisez la propriété <codeph>Window.cursorManager</codeph> pour référencer l’occurrence CursorManager de l’occurrence Window. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link><link href="" invalidHref="mx.core.Window.xml"><linktext>mx.core.Window</linktext></link></related-links><apiOperation id="mx.managers:CursorManager:getInstance"><apiName>getInstance</apiName><shortdesc>
      Chaque occurrence mx.core.Window dans une application AIR possède sa propre occurrence CursorManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Occurrence CursorManager de l’occurrence Window principale dans une application AIR.  
      
      </apiDesc><apiType value="mx.managers:ICursorManager"/></apiReturn></apiOperationDef><apiDesc>
      Chaque occurrence mx.core.Window dans une application AIR possède sa propre occurrence CursorManager. Cette méthode renvoie l’occurrence CursorManager de l’occurrence Window principale.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:hideCursor"><apiName>hideCursor</apiName><shortdesc>
      Rend le curseur invisible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Rend le curseur invisible. La visibilité du curseur n’est pas fonction du nombre de références. Un seul appel de la méthode <codeph>hideCursor()</codeph> masque toujours le curseur, quel que soit le nombre d’appels de la méthode <codeph>showCursor()</codeph> effectués.
     
      <p>L’appel de cette méthode n’affecte pas le curseur système. Utilisez les méthodes <codeph>Mouse.show()</codeph> et <codeph>Mouse.hide()</codeph> pour contrôler directement le curseur système. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeAllCursors"><apiName>removeAllCursors</apiName><shortdesc>
      Supprime tous les curseurs de la liste des curseurs et rétablit le curseur système.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime tous les curseurs de la liste des curseurs et rétablit le curseur système.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeBusyCursor"><apiName>removeBusyCursor</apiName><shortdesc>
      Supprime le curseur occupé de la liste des curseurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime le curseur occupé de la liste des curseurs. Si d’autres demandes de curseur occupé sont toujours actives dans la liste des curseurs, ce qui signifie que vous avez appelé la méthode <codeph>setBusyCursor()</codeph> plusieurs fois, un curseur occupé ne peut pas disparaître tant que vous n’avez pas supprimé tous les curseurs occupés de la liste.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:removeCursor"><apiName>removeCursor</apiName><shortdesc>
      Supprime un curseur de la liste des curseurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursorID</apiItemName><apiType value="int"/><apiDesc>ID du curseur à supprimer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un curseur de la liste des curseurs. Si le curseur en cours de suppression est le curseur actuellement affiché, l’objet CursorManager affiche le curseur suivant dans la liste, s’il en existe un. Si la liste est vide, l’objet CursorManager affiche le curseur système par défaut.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setBusyCursor"><apiName>setBusyCursor</apiName><shortdesc>
      Affiche le curseur occupé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Affiche le curseur occupé. Le curseur occupé a une priorité de CursorManagerPriority.LOW. Par conséquent, si la liste des curseurs contient un curseur doté d’une priorité supérieure, le curseur occupé n’est pas affiché tant que vous n’avez pas supprimé le curseur avec la priorité supérieure. Pour créer un curseur occupé à un niveau de priorité supérieure, utilisez la méthode <codeph>setCursor()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.managers:CursorManager:setCursor"><apiName>setCursor</apiName><shortdesc>
      Crée un curseur et lui attribue une priorité facultative.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ID du curseur.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>cursorClass</apiItemName><apiType value="Class"/><apiDesc>Classe du curseur à afficher.
     
      </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>2</apiData><apiDesc>Nombre entier qui indique le niveau de priorité du curseur. Les valeurs possibles sont <codeph>CursorManagerPriority.HIGH</codeph>, <codeph>CursorManagerPriority.MEDIUM</codeph> et <codeph>CursorManagerPriority.LOW</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>xOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Nombre qui définit le décalage x du curseur, en pixels, par rapport au pointeur de la souris.
     
      </apiDesc></apiParam><apiParam><apiItemName>yOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Nombre qui définit le décalage y du curseur, en pixels, par rapport au pointeur de la souris.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée un curseur et lui attribue une priorité facultative. Ajoute le nouveau curseur à la liste des curseurs.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.managers.xml#CursorManagerPriority"><linktext>mx.managers.CursorManagerPriority</linktext></link></related-links></apiOperation><apiOperation id="mx.managers:CursorManager:showCursor"><apiName>showCursor</apiName><shortdesc>
      Rend le curseur visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Rend le curseur visible. La visibilité du curseur n’est pas fonction du nombre de références. Un seul appel de la méthode <codeph>showCursor()</codeph> affiche toujours le curseur, quel que soit le nombre d’appels de la méthode <codeph>hideCursor()</codeph> effectués.
     
      <p>L’appel de cette méthode n’affecte pas le curseur système. Utilisez les méthodes <codeph>Mouse.show()</codeph> et <codeph>Mouse.hide()</codeph> pour contrôler directement le curseur système. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.managers:CursorManager:NO_CURSOR"><apiName>NO_CURSOR</apiName><shortdesc>
      Constante correspondant à la valeur de la propriété currentCursorID lorsqu’aucun curseur n’est géré par l’objet CursorManager et que par conséquent le curseur système est affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Constante correspondant à la valeur de la propriété <codeph>currentCursorID</codeph> lorsque aucun curseur n’est géré par l’objet CursorManager et que par conséquent le curseur système est affiché.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorID:get"><apiName>currentCursorID</apiName><shortdesc>
      ID du curseur personnalisé actuel, ou NO_CURSOR si le curseur système est affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      ID du curseur personnalisé actuel, ou NO_CURSOR si le curseur système est affiché.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorXOffset:get"><apiName>currentCursorXOffset</apiName><shortdesc>
      Décalage x du curseur personnalisé, en pixels, par rapport au pointeur de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Décalage x du curseur personnalisé, en pixels, par rapport au pointeur de la souris.
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.managers:CursorManager:currentCursorYOffset:get"><apiName>currentCursorYOffset</apiName><shortdesc>
      Décalage y du curseur personnalisé, en pixels, par rapport au pointeur de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Décalage y du curseur personnalisé, en pixels, par rapport au pointeur de la souris.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>