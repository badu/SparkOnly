<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.effects"><apiName>mx.effects</apiName><apiDetail/><apiClassifier id="mx.effects:EffectManager"><apiName>EffectManager</apiName><shortdesc>
  EffectManager 类侦听由 Flex 应用程序中的对象分派的事件，如 show 和 move 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  EffectManager 类侦听由 Flex 应用程序中的对象分派的事件，如 <codeph>show</codeph> 和 <codeph>move</codeph> 事件。对于与事件触发器有一一对应关系的每个事件，它确定是否为对象分配效果。如果已定义某个效果，它将播放此效果。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.effects:EffectManager:endEffectsForTarget"><apiName>endEffectsForTarget</apiName><shortdesc>
      立即结束当前在目标上播放的任何效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>结束其上所有效果的目标组件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      立即结束当前在目标上播放的任何效果。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:resumeEventHandling"><apiName>resumeEventHandling</apiName><shortdesc>
      允许 EffectManager 类在调用 suspendEventHandling() 方法后继续处理事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      允许 EffectManager 类在调用 <codeph>suspendEventHandling()</codeph> 方法后继续处理事件。在内部与 <codeph>suspendEventHandling()</codeph> 方法配合使用，以便更新屏幕不会触发另一效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectManager:suspendEventHandling"><apiName>suspendEventHandling</apiName><shortdesc>
      调用此方法后，EffectManager 类将忽略所有事件，并且不会触发任何效果，直到调用 resumeEventHandling()。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用此方法后，EffectManager 类将忽略所有事件，并且不会触发任何效果，直到调用 <codeph>resumeEventHandling()</codeph>。在内部使用，以便更新屏幕不会触发另一效果。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:Effect"><apiName>Effect</apiName><shortdesc>
  Effect 类是一个抽象基类，用于定义所有 Flex 效果的基本功能。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The Effect class defines the following properties,
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    <b>Properties</b>
    customFilter=""
    duration="500"
    filter=""
    hideFocusRing="false"
    perElementOffset="0"
    repeatCount="1"
    repeatDelay="0"
    startDelay="0"
    suspendBackgroundProcessing="false|true"
    target="<i>effect target</i>"
    targets="<i>array of effect targets</i>"
     
    <b>Events</b>
    effectEnd="<i>No default</i>"
    efectStart="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffect</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Effect 类是一个抽象基类，用于定义所有 Flex 效果的基本功能。Effect 类定义所有效果的基本工厂类。EffectInstance 类定义所有效果实例子类的基类。
 
  <p>在应用程序中不创建 Effect 类本身的实例，而是创建一个子类的实例，如 Fade 或 WipeLeft。</p>
  
  </apiDesc><example conref="SimpleEffectExample.mxml"><swfblock conref="examples/SimpleEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#EffectInstance"><linktext>mx.effects.EffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  当效果开始播放时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当效果开始播放时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  在已停止效果时分派，仅当该效果已被 stop() 方法调用中断时才会发生。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在已停止效果时分派，仅当该效果已被 <codeph>stop()</codeph> 方法调用中断时才会发生。还将分派 EFFECT_END 事件以指示已结束该效果。将首先发送此额外事件，作为对效果未达到其结束状态的侦听器的指示。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:Effect_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  在其中一个效果实例完成播放时（既可以是实例实际完成播放时，也可以是通过调用 end() 方法中断效果时）分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在其中一个效果实例完成播放时（既可以是实例实际完成播放时，也可以是通过调用 <codeph>end()</codeph> 方法中断效果时）分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:Effect:Effect"><apiName>Effect</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      <p>启动效果的过程通常分为三个步骤：</p>
     
      <ul>
        <li>使用 <codeph>new</codeph> 运算符创建一个效果对象实例。</li>
        <li>设置效果对象上的属性，如 <codeph>duration</codeph>。</li>
        <li>调用 <codeph>play()</codeph> 方法或将效果分配给触发器。</li>
      </ul>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Effect:protected:applyValueToTarget"><apiName>applyValueToTarget</apiName><shortdesc>
      供 Effect 基础结构内部使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>效果目标。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>目标属性。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>属性的值。 
     
      </apiDesc></apiParam><apiParam><apiItemName>props</apiItemName><apiType value="Object"/><apiDesc>一个对象数组，其中每个 Array 元素中都包含效果正在监视的属性的 <codeph>start</codeph> 和 <codeph>end</codeph> Object。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      供 Effect 基础结构内部使用。如果已调用 <codeph>captureStartValues()</codeph>，则当 Flex 调用 <codeph>play()</codeph> 方法时，将使用此函数将目标设置回初始状态。默认行为是使用 <codeph>getValueFromTarget()</codeph> 方法获取捕获的值，并直接在目标的属性上进行设置。例如： <pre>
      
      target[property] = value;</pre>
     
      <p>仅当需要以其他方式应用捕获的值时，才覆盖此方法。请注意，目标的样式属性将使用其他机制进行设置。使用 <codeph>relevantStyles</codeph> 属性指定要捕获并应用的样式属性。 </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc conref="mx.effects.IEffect#captureEndValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureEndValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>要捕获其值的目标的数组
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureMoreStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc conref="mx.effects.IEffect#captureStartValues()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#captureStartValues()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstance"><apiName>createInstance</apiName><shortdesc conref="mx.effects.IEffect#createInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>效果的效果实例对象。
      
      </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:createInstances"><apiName>createInstances</apiName><shortdesc conref="mx.effects.IEffect#createInstances()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>效果的效果实例对象的数组，一个目标一个数组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>要使用此效果设置动画的对象的数组。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#createInstances()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc conref="mx.effects.IEffect#deleteInstance()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>效果实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#deleteInstance()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectEndHandler"><apiName>effectEndHandler</apiName><shortdesc>
      当效果实例完成播放时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>EffectEvent 类型的事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当效果实例完成播放时调用。如果覆盖此方法，请确保调用超级方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStartHandler"><apiName>effectStartHandler</apiName><shortdesc>
      当效果实例开始播放时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>EffectEvent 类型的事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当效果实例开始播放时调用此方法。如果覆盖此方法，请确保调用超级方法。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:effectStopHandler"><apiName>effectStopHandler</apiName><shortdesc>
      当效果实例已被 stop() 方法调用停止时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>EffectEvent 类型的事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当效果实例已被 <codeph>stop()</codeph> 方法调用停止时调用。如果覆盖此方法，请确保调用超级方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffect#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>要终止的 EffectInstance。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:filterInstance"><apiName>filterInstance</apiName><shortdesc>
      确定筛选效果实例所用的逻辑。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果应播放效果实例，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>效果修改的属性。
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>效果目标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定筛选效果实例所用的逻辑。CompositeEffect 类将覆盖此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc conref="mx.effects.IEffect#getAffectedProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>一个用于指定此效果修改的属性的名称的字符串 Array。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#getAffectedProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:getValueFromTarget"><apiName>getValueFromTarget</apiName><shortdesc>
      由 captureStartValues() 方法调用，用来从目标获得某个属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>目标属性的值。 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>效果目标。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>目标属性。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      由 <codeph>captureStartValues()</codeph> 方法调用，用来从目标获得某个属性的值。此函数应仅供效果框架内部调用。默认行为是只返回 <codeph>target[property]</codeph>。如果您需要其他行为，效果开发人员可以覆盖此函数。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:protected:initInstance"><apiName>initInstance</apiName><shortdesc>
      将效果的属性复制到效果实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>要初始化的效果实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将效果的属性复制到效果实例。 
     
      <p>Flex 将从 <codeph>Effect.createInstance()</codeph> 方法调用此方法；您不必亲自调用它。 </p>
     
      <p>创建自定义效果时覆盖此方法，将属性从 Effect 类复制到效果实例类。进行覆盖时，请调用 <codeph>super.initInstance()</codeph>。 </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffect#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffect#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>效果的 EffectInstance 对象的数组，一个目标一个数组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>播放此效果的目标对象的数组。如果已指定此参数，则不会使用效果的 <codeph>targets</codeph> 属性。
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>true</codeph>，则向后播放效果。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffect#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffect#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffect#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Effect:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffect#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffect#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Effect:protected:applyTransitionEndProperties"><apiName>applyTransitionEndProperties</apiName><shortdesc>
     此标志控制该效果（进行转换时）是否将根据结束状态自动应用属性值，这与将值保留为效果本身所设置的值相反。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     此标志控制该效果（进行转换时）是否将根据结束状态自动应用属性值，这与将值保留为效果本身所设置的值相反。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:protected:endValuesCaptured"><apiName>endValuesCaptured</apiName><shortdesc>
      一个标志，如果已确定效果的结束值，则该标志中包含 true；如果需要在效果运行时从效果目标的当前属性捕获这些值，则其中包含 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，如果已确定效果的结束值，则标志中包含 <codeph>true</codeph>；如果需要在效果运行时从效果目标的当前属性捕获这些值，则其中包含 <codeph>false</codeph>。此属性对数据效果而言是必需的，因为设置数据效果（如 DefaultListEffect 和 DefaultTileListEffect）的顺序比设置普通效果的顺序要复杂。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:instanceClass"><apiName>instanceClass</apiName><shortdesc>
      一个 Class 类型的对象，用于指定此效果类的效果实例类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      一个 Class 类型的对象，用于指定此效果类的效果实例类。 
      
      <p>Effect 类的所有子类都必须在其构造函数中设置此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatCount"><apiName>repeatCount</apiName><shortdesc>
      效果的重复次数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1</apiData><apiType value="int"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      效果的重复次数。可能的值为任何大于等于 0 的整数。值为 1 表示播放一次效果。值为 0 表示无限制地循环播放效果，直到通过调用 <codeph>end()</codeph> 方法停止播放。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:repeatDelay"><apiName>repeatDelay</apiName><shortdesc>
      重复播放效果前需要等待的时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      重复播放效果前需要等待的时间（以毫秒为单位）。可能的值为任何大于等于 0 的整数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:startDelay"><apiName>startDelay</apiName><shortdesc>
      开始播放效果前需要等待的时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      开始播放效果前需要等待的时间（以毫秒为单位）。此值可以是任何大于或等于 0 的整数。如果使用 <codeph>repeatCount</codeph> 属性重复播放效果，则只在首次播放效果时应用 <codeph>startDelay</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      如果为 true，则在播放效果时阻止所有背景处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则在播放效果时阻止所有背景处理。背景处理包括度量、布局和处理来自服务器的响应。默认值为 <codeph>false</codeph>。
     
      <p>大多数情况下，建议将此属性设置为 <codeph>true</codeph>，因为这可以提高应用程序的性能。但是，如果符合下列条件之一，则应将此属性设置为 <codeph>false</codeph>：</p>
      <ul>
        <li>播放效果时可能会出现用户输入内容，并且应用程序必须在效果完成播放前响应用户输入。</li>
        <li>播放效果时可能会收到来自服务器的响应，并且应用程序必须一面播放效果，一面处理此响应。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffect#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:customFilter:get"><apiName>customFilter</apiName><shortdesc conref="mx.effects.IEffect#customFilter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#customFilter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffect#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffect#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffect#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:filter:get"><apiName>filter</apiName><shortdesc conref="mx.effects.IEffect#filter">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffect#filter">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffect#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc conref="mx.effects.IEffect#isPlaying">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffect#isPlaying">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc conref="mx.effects.IEffect#perElementOffset">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffect#perElementOffset">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      效果的当前时间位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 <codeph>startDelay</codeph>、<codeph>repeatCount</codeph> 和 <codeph>repeatDelay</codeph>）之间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc conref="mx.effects.IEffect#relevantProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc conref="mx.effects.IEffect#relevantStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#relevantStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffect#target"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffect#target"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:targets:get"><apiName>targets</apiName><shortdesc conref="mx.effects.IEffect#targets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.effects.IEffect#targets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Effect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffect#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffect#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
  MaskEffect 类是所有设置蒙版动画的效果的抽象基类，如划出效果和 Iris 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The MaskEffect class defines the following properties, 
  which all of its subclasses inherit:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    createMaskFunction=""
    moveEasingFunction=""
    scaleEasingFunction=""
    scaleXFrom=""
    scaleXTo=""
    scaleYFrom=""
    scaleYTo=""
    show="true|false"
    xFrom=""
    xTo=""
    yFrom=""
    yTo=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  MaskEffect 类是所有设置遮罩动画的效果的抽象基类，如划出效果和 Iris 效果。此类封装了所有基于遮罩的效果中常见的方法和属性。
 
  <p>遮罩效果使用名为“遮罩”的叠加层来执行该效果。默认情况下，遮罩是一个矩形，与目标组件大小相同。 </p>
 
  <p>应用遮罩效果之前或之后，目标组件的状态必须是不可见的。也就是说，遮罩效果通常会使目标组件出现在屏幕上，或从屏幕中消失。</p>
 
  <p>您可以使用 <codeph>scaleXFrom</codeph>、<codeph>scaleYFrom</codeph>、<codeph>scaleXTo</codeph> 和 <codeph>scaleX</codeph> 属性指定遮罩的初始和最终缩放比例。如果将此值设置为 1.0，则表示将遮罩缩放为目标组件的大小；如果将此值设置为 2.0，则表示将遮罩缩放为目标组件的两倍大小；如果将此值设置为 0.5，则表示将遮罩缩放为目标组件的一半大小，依此类推。要使用上述任一属性，都必须指定所有四个属性。</p>
 
  <p>您可以使用 <codeph>xFrom</codeph>、<codeph>yFrom</codeph>、<codeph>xTo</codeph> 和 <codeph>yTo</codeph> 属性指定遮罩相对于目标组件的初始位置和最终位置坐标，其中 (0, 0) 对应于目标的左上角。要使用上述任一属性，都必须指定所有四个属性。</p>
 
  <p>遮罩的初始位置和最终位置坐标取决于效果的类型以及 <codeph>show</codeph> 属性是 <codeph>true</codeph> 还是 <codeph>false</codeph>。例如，对于 <codeph>show</codeph> 值设置为 <codeph>false</codeph> 的 WipeLeft 效果，遮罩初始位置的坐标为 (0, 0)，对应于目标的左上角；最终位置的坐标为 (宽度, 0)，对应于目标的右上角，其中的宽度指目标的宽度。</p>
 
  <p>对于 <codeph>show</codeph> 值设置为 <codeph>true</codeph> 的 WipeLeft 效果，遮罩初始位置的坐标为 (宽度, 0)，最终位置的坐标为 (0, 0)。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MaskEffectInstance"><linktext>mx.effects.effectClasses.MaskEffectInstance</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  在结束效果时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在结束效果时分派。
 
  <p>如果某个效果只播放一次，则此事件将与 <codeph>effectEnd</codeph> 事件同时发生。如果将效果配置为重复播放，则在每次重复播放效果结束时都会发生此事件，而在最后一次播放效果结束后发生 <codeph>endEffect</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  每当效果更新目标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  每当效果更新目标时分派。分派此事件相当于调用 <codeph>onMoveTweenUpdate()</codeph> 和 <codeph>onScaleTweenUpdate()</codeph> 方法。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:MaskEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  在开始播放效果时分派此事件，相当于首次调用 onMoveTweenUpdate() 和 onScaleTweenUpdate() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在开始播放效果时分派此事件，相当于首次调用 <codeph>onMoveTweenUpdate()</codeph> 和 <codeph>onScaleTweenUpdate()</codeph> 方法。Flex 还会同时为此效果首次分派 <codeph>tweenUpdate</codeph> 事件。
 
  <p><codeph>Effect.effectStart</codeph> 事件在 <codeph>tweenStart</codeph> 事件之前分派。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:MaskEffect:MaskEffect"><apiName>MaskEffect</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:MaskEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      返回被此效果修改的组件属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个用于指定此效果修改的属性的名称的字符串 Array。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回被此效果修改的组件属性。此方法返回一个包含 <codeph>[ "visible", "width", "height" ]</codeph> 的 Array。由于 WipeDown、WipeLeft、WipeRight 和 WipeDown 效果子类都修改相同的属性，所以这些类不会实现此方法。 
     
      <p>如果通过子类化 MaskEffect 类创建自定义效果，并且该子类修改目标上的其它属性集，则必须覆盖此方法，并返回一个包含被子类修改的属性列表的 Array。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:MaskEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      当 TweenEffect 分派 TweenEvent 时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>TweenEvent 类型的事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 TweenEffect 分派 TweenEvent 时调用此方法。如果覆盖此方法，请确保调用超级方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:MaskEffect:createMaskFunction"><apiName>createMaskFunction</apiName><shortdesc>
      效果创建遮罩时调用的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      效果创建遮罩时调用的函数。默认值是返回与目标大小相同的 Rectangle 的函数。 
     
      <p>自定义遮罩函数具有以下签名：</p>
     
      <pre>
      public function createLargeMask(targ:Object, boundp:Rectangle):Shape
      {
          var myMask:Shape = new FlexShape();
     
          // Create mask.
     
          return myMask;
      }
      </pre>
     
      <p>自定义遮罩函数的一个参数对应于效果的目标组件，另一个参数用于定义目标尺寸，以便您正确设置遮罩大小。您可以使用此参数访问目标组件的 <codeph>width</codeph> 和 <codeph>height</codeph> 等属性，以创建大小合适的遮罩。</p>
     
      <p>此函数将返回一个用于定义遮罩的 Shape 对象。</p>   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:moveEasingFunction"><apiName>moveEasingFunction</apiName><shortdesc>
      要用于移动遮罩的缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要用于移动遮罩的缓动函数。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleEasingFunction"><apiName>scaleEasingFunction</apiName><shortdesc>
      要用于缩放遮罩的缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要用于缩放遮罩的缓动函数。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXFrom"><apiName>scaleXFrom</apiName><shortdesc>
      遮罩最初的 scaleX。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      遮罩最初的 scaleX。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>scaleXFrom</codeph>、<codeph>scaleYFrom</codeph>、<codeph>scaleXTo</codeph> 和 <codeph>scaleX</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleXTo"><apiName>scaleXTo</apiName><shortdesc> 
      遮罩最终的 scaleX。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      遮罩最终的 scaleX。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>scaleXFrom</codeph>、<codeph>scaleYFrom</codeph>、<codeph>scaleXTo</codeph> 和 <codeph>scaleX</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYFrom"><apiName>scaleYFrom</apiName><shortdesc> 
      遮罩最初的 scaleY。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      遮罩最初的 scaleY。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>scaleXFrom</codeph>、<codeph>scaleYFrom</codeph>、<codeph>scaleXTo</codeph> 和 <codeph>scaleX</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:scaleYTo"><apiName>scaleYTo</apiName><shortdesc>
      遮罩最终的 scaleY。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      遮罩最终的 scaleY。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>scaleXFrom</codeph>、<codeph>scaleYFrom</codeph>、<codeph>scaleXTo</codeph> 和 <codeph>scaleX</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xFrom"><apiName>xFrom</apiName><shortdesc> 
      遮罩初始位置的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      遮罩初始位置的 x 坐标。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>xFrom</codeph>、<codeph>yFrom</codeph>、<codeph>xTo</codeph> 和 <codeph>yTo</codeph>。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:xTo"><apiName>xTo</apiName><shortdesc> 
      遮罩目标位置的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      遮罩目标位置的 x 坐标。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>xFrom</codeph>、<codeph>yFrom</codeph>、<codeph>xTo</codeph> 和 <codeph>yTo</codeph>。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yFrom"><apiName>yFrom</apiName><shortdesc>
      遮罩初始位置的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      遮罩初始位置的 y 坐标。 
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>xFrom</codeph>、<codeph>yFrom</codeph>、<codeph>xTo</codeph> 和 <codeph>yTo</codeph>。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:yTo"><apiName>yTo</apiName><shortdesc> 
      遮罩目标位置的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      遮罩目标位置的 y 坐标。
     
      <p>要指定此属性，您必须指定以下所有四个属性：<codeph>xFrom</codeph>、<codeph>yFrom</codeph>、<codeph>xTo</codeph> 和 <codeph>yTo</codeph>。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:MaskEffect:showTarget:get"><apiName>showTarget</apiName><shortdesc>
      指定目标组件是可见 (true) 还是不可见 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定如果为 <codeph>true</codeph>，则目标组件可见；如果为 <codeph>false</codeph>，则不可见。如果对 <codeph>showEffect</codeph> 或 <codeph>hideEffect</codeph> 触发器指定了此效果，则 Flex 会为您设置 <codeph>showTarget</codeph> 属性。当组件可见时设置为 <codeph>true</codeph>，当组件不可见时设置为 <codeph>false</codeph>。如果对其它效果触发器应用此效果，则需要自行设置此属性，通常在 <codeph>startEffect</codeph> 事件的事件侦听器中进行设置。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
  SoundEffect 类用于播放 MP3 音频文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SoundEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SoundEffect
    <b>Properties</b>
    id="ID"
    autoLoad="true|false"
    bufferTime="1000"
    loops="0"
    panEasingFunction=""
    panFrom="0"
    source=""
    startTime="0"
    useDuration="true|false"
    volumeEasingFunction="true|false"
    volumeTo="1"
     
    <b>Events</b>
    complete="<i>No default</i>"
    id3="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundEffect 类用于播放 MP3 音频文件。例如，可以设置在用户单击 Button 控件时播放一种声音。此效果允许您重复播放声音、选择源文件以及控制音量和平移。 
 
  <p>可以使用 <codeph>source</codeph> 属性指定 MP3 文件。如果已使用 <codeph>Embed</codeph> 关键字嵌入 MP3 文件，即可将 MP3 文件的 Class 对象传递给 <codeph>source</codeph> 属性。否则，为 MP3 文件指定完整的 URL。</p>
  
  </apiDesc><example conref="SoundEffectExample.mxml"><swfblock conref="examples/SoundEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SoundEffectInstance"><linktext>mx.effects.effectClasses.SoundEffectInstance</linktext></link><link href="" invalidHref="flash.media.Sound.xml"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="mx.effects:SoundEffect_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  加载声音文件时定期分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  加载声音文件时定期分派。
 
  <p>在事件对象内部，您可以访问当前已加载的字节数和要加载的总字节数。不保证一定会分派此事件，这意味着可能在未分派任何 <codeph>progress</codeph> 事件的情况下分派 <codeph>complete</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  在加载声音文件期间发生错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在加载声音文件期间发生错误时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.ID3_id3"><apiName>id3</apiName><shortdesc>
  当 ID3 数据可用于 MP3 声音文件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ID3</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 ID3 数据可用于 MP3 声音文件时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:SoundEffect_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  当声音文件完成加载时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当声音文件完成加载时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:SoundEffect:SoundEffect"><apiName>SoundEffect</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:SoundEffect:load"><apiName>load</apiName><shortdesc>
      如果 source 属性指向 URL，则加载 MP3。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如果 <codeph>source</codeph> 属性指向 URL，则加载 MP3。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:SoundEffect:bufferTime"><apiName>bufferTime</apiName><shortdesc> 
      SoundEffect 类使用内部 Sound 对象来控制 MP3 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1000</apiData><apiType value="Number"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      SoundEffect 类使用内部 Sound 对象来控制 MP3 文件。此属性指定声音数据应在 Sound 对象的缓冲区中存储的最短时间（以毫秒为单位）。在开始回放以及在网络中断后继续回放之前，Sound 对象将一直等待，直至至少拥有这一数量的数据为止。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:loops"><apiName>loops</apiName><shortdesc>
      循环模式下播放该声音的次数，其中值 0 表示此效果播放一次，值 1 表示此效果播放两次，依此类推。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      循环模式下播放该声音的次数，其中值 0 表示此效果播放一次，值 1 表示此效果播放两次，依此类推。如果要重复播放 MP3 文件，也是使用 <codeph>useDuration</codeph> 属性的设置来确定回放时间。
     
      <p><codeph>duration</codeph> 属性的优先级高于此属性的优先级。如果效果的持续时间短于播放一次声音所需的时间，则声音将不循环。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panEasingFunction"><apiName>panEasingFunction</apiName><shortdesc>
      均衡效果的缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      均衡效果的缓动函数。使用此函数可在 <codeph>panFrom</codeph> 和 <codeph>panTo</codeph> 的值之间进行插补。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panFrom"><apiName>panFrom</apiName><shortdesc>
      Sound 对象的初始平移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Sound 对象的初始平移。此值介于 -1.0 和 1.0 之间，其中 -1.0 表示仅使用左声道，1.0 表示仅使用右声道，而 0.0 表示在两个声道间平均地均衡声音。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:panTo"><apiName>panTo</apiName><shortdesc>
      Sound 对象的最终平移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Sound 对象的最终平移。此值介于 -1.0 和 1.0 之间，其中 -1.0 表示仅使用左声道，1.0 表示仅使用右声道，而 0.0 表示在两个声道间平均地均衡声音。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:startTime"><apiName>startTime</apiName><shortdesc> 
      MP3 文件中的初始位置（以毫秒为单位），应在此位置开始回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      MP3 文件中的初始位置（以毫秒为单位），应在此位置开始回放。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:useDuration"><apiName>useDuration</apiName><shortdesc>
      如果为 true，则会在 duration 属性中指定的时间过后停止效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则会在 <codeph>duration</codeph> 属性中指定的时间过后停止效果。如果为 <codeph>false</codeph>，则会在 MP3 完成播放或循环后停止效果。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeEasingFunction"><apiName>volumeEasingFunction</apiName><shortdesc>
      音量效果的缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      音量效果的缓动函数。此函数用于在 <codeph>volumeFrom</codeph> 和 <codeph>volumeTo</codeph> 的值之间进行插补。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeFrom"><apiName>volumeFrom</apiName><shortdesc>
      Sound 对象的初始音量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Sound 对象的初始音量。此值介于 0.0 和 1.0 之间。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:volumeTo"><apiName>volumeTo</apiName><shortdesc>
      Sound 对象的最终音量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Sound 对象的最终音量。此值介于 0.0 和 1.0 之间。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:autoLoad:get"><apiName>autoLoad</apiName><shortdesc> 
      如果为 true，则在指定 source 时加载 MP3 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      如果为 <codeph>true</codeph>，则在指定 <codeph>source</codeph> 时加载 MP3 文件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:isLoading:get"><apiName>isLoading</apiName><shortdesc>
      如果已加载 MP3，则此属性为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果已加载 MP3，则此属性为 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:sound:get"><apiName>sound</apiName><shortdesc>
      已加载 MP3 文件的 Sound 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Sound"/></apiValueDef><apiDesc>
      已加载 MP3 文件的 Sound 对象。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SoundEffect:source:get"><apiName>source</apiName><shortdesc>
      要播放的 MP3 文件的 URL 或类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      要播放的 MP3 文件的 URL 或类。如果已使用 <codeph>Embed</codeph> 关键字嵌入 MP3 文件，即可将 MP3 文件的 Class 对象传递给 <codeph>source</codeph> 属性。否则，为 MP3 文件指定完整的 URL。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
  TweenEffect 类是基于 Tween 对象的所有效果的 superclass。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:TweenEffect" replacement="spark.effects.Animate" since="4.0">
<description>
  在 Flex 3 中，TweenEffect 是动画效果的超类。自 Flex 4 起，Spark 效果将扩展 spark.effects.Animate 类而不是 TweenEffect。
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TweenEffect&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:TagName
    <b>Properties</b>
    easingFunction="<i>easing function name; no default</i>"
     
    <b>Events</b>
    tweenEnd="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  TweenEffect 类是基于 Tween 对象的所有效果的 superclass。此类封装了所有基于 Tween 的效果中常用的方法和属性，以避免在其他位置重复使用代码。
 
  <p>通过创建 TweenEffect 类的子类可定义在某段时间内播放动画的效果。例如，Resize 效果会在指定的时段内修改其目标的大小。</p>
 
  </apiDesc><example conref="SimpleTweenEffectExample.mxml"><swfblock conref="examples/SimpleTweenEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><shortdesc>
  当补间效果结束时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当补间效果结束时分派。此事件与调用 <codeph>TweenEffectInstance.onTweenEnd()</codeph> 方法相对应。
 
  <p>如果只播放一次补间效果，则此事件将与 <codeph>effectEnd</codeph> 事件同时发生。如果将补间效果配置为重复播放，则在每次重复播放效果结束时都会发生此事件，而在最后一次播放效果结束后发生 <codeph>endEffect</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><shortdesc>
  每当补间效果更新目标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  每当补间效果更新目标时分派。此事件与调用 <codeph>TweenEffectInstance.onTweenUpdate()</codeph> 方法相对应。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.effects:TweenEffect_mx.events.TweenEvent.TWEEN_START_tweenStart"><apiName>tweenStart</apiName><shortdesc>
  当开始播放补间效果时分派此事件，相当于首次调用 onTweenUpdate() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TweenEvent.TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events.TweenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当开始播放补间效果时分派此事件，相当于首次调用 <codeph>onTweenUpdate()</codeph> 方法。Flex 还会同时为此效果首次分派 <codeph>tweenUpdate</codeph> 事件。
 
  <p><codeph>Effect.effectStart</codeph> 事件在 <codeph>tweenStart</codeph> 事件之前分派。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.effects:TweenEffect:TweenEffect"><apiName>TweenEffect</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:TweenEffect:protected:tweenEventHandler"><apiName>tweenEventHandler</apiName><shortdesc>
      当 TweenEffect 分派 TweenEvent 时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:TweenEvent</apiOperationClassifier><apiDesc>TweenEvent 类型的事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 TweenEffect 分派 TweenEvent 时调用此方法。如果覆盖此方法，请确保调用超级方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:TweenEffect:easingFunction"><apiName>easingFunction</apiName><shortdesc>
      动画的缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/></apiValueDef><apiDesc>
      动画的缓动函数。此缓动函数用于在初始值和最终值之间进行插值。简单的缓动函数只能进行线性 interpolation，而比较高级的缓动函数可以创建加速和减速效果，使动画效果看起来更加自然。
     
      <p>如果未指定缓动函数，则使用基于 <codeph>Math.sin()</codeph> 方法的缓动函数。</p>
     
      <p>该缓动函数位于 Robert Penner 编写的函数签名之后。该函数使用四个参数：第一个参数是“current time”，其中动画的开始时间是 0；第二个参数是动画开始时的初始值（一个 Number）；第三个参数是结束值与初始值之间的差值；第四个参数是动画的持续时间。返回值是当前时间的插值。此值通常介于初始值和结束值之间。</p>
     
      <p>此属性的值必须是一个函数对象。</p>
     
      <p>Flex 在 mx.effects.easing 包中提供了一组缓动函数。</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Tween"><apiName>Tween</apiName><shortdesc>
  Tween 类定义一个补间，此补间是在某个时段内对目标对象执行的属性动画。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Tween" replacement="spark.effects.animation.Animation" since="4.0">
<description>
  在 Flex 3 中，Tween 是效果的基础动画类。自 Flex 4 起，Spark 效果将使用 spark.effects.animation.Animation 类提供相似的功能。
 </description>
	</Alternative></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Tween 类定义一个补间，此补间是在某个时段内对目标对象执行的属性动画。该动画可以是对位置的更改（如 Move 效果）、对大小的更改（如 Resize 或 Zoom 效果）、对可见性的更改（如 Fade 或 Dissolve 效果），也可以是其他类型的动画。
 
  <p>当定义补间效果时，通常在 <codeph>EffectInstance.play()</codeph> 方法的覆盖部分创建一个 Tween 类实例。Tween 实例接受 <codeph>startValue</codeph>、<codeph>endValue</codeph> 和 <codeph>duration</codeph> 属性，并可选择使用缓动函数来定义动画效果。</p> 
 
  <p>在效果持续期间，Tween 对象将按固定的时间间隔对效果实例调用 <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> 回调函数，向 <codeph>onTweenUpdate()</codeph> 方法传递一个介于 <codeph>startValue</codeph> 和 <codeph>endValue</codeph> 之间的插值。通常，回调函数会更新目标对象的特定属性，使该对象在效果持续期间呈示动画效果。</p>
 
  <p>当效果结束时，Tween 对象将调用 <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph> 回调函数（如果已定义）。 </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.effects.effectClasses.xml#TweenEffectInstance"><linktext>mx.effects.effectClasses.TweenEffectInstance</linktext></link></related-links><apiConstructor id="mx.effects:Tween:Tween"><apiName>Tween</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>listener</apiItemName><apiType value="Object"/><apiDesc>在每个动画间隔通知的对象。通常会将 <codeph>this</codeph> 关键字作为其值进行传递。<codeph>listener</codeph> 必须定义 <codeph>onTweenUpdate()</codeph> 方法，并可以选择定义 <codeph>onTweenEnd()</codeph> 方法。前一种方法在动画效果的每个间隔期间调用，而后一种方法只在动画完成后调用。
     
      </apiDesc></apiParam><apiParam><apiItemName>startValue</apiItemName><apiType value="Object"/><apiDesc>动画的初始值。可能是数字，也可能是数字数组。如果传递的是数字，则 Tween 会在此数字与传递给 <codeph>endValue</codeph> 参数的数字之间进行插值。如果传递的是数字数组，则插补数组中的每个数字。
     
      </apiDesc></apiParam><apiParam><apiItemName>endValue</apiItemName><apiType value="Object"/><apiDesc>动画的最终值。此参数的类型必须与 <codeph>startValue</codeph> 参数相匹配。
     
      </apiDesc></apiParam><apiParam><apiItemName>duration</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>动画的持续时间（以毫秒为单位）。
     
      </apiDesc></apiParam><apiParam><apiItemName>minFps</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc><codeph>onTweenUpdate()</codeph> 方法在每秒钟的最少调用次数。补间代码会尝试尽量多调用 <codeph>onTweenUpdate()</codeph> 方法（每秒钟至多 100 次）。但是，如果频率低于 <codeph>minFps</codeph>，则动画的持续时间会自动增加。这样，由于未能获得任何 CPU 周期而暂时冻结的动画会从停止的地方重新开始，而不是突然向前跳跃。 
     
      </apiDesc></apiParam><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>指定用于代替 <codeph>listener.OnTweenUpdate()</codeph> 的备用更新回调函数
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>指定用于代替 <codeph>listener.OnTweenEnd()</codeph> 的备用结束回调函数
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      <p>调用此构造函数后，动画将自动开始播放。</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:Tween:endTween"><apiName>endTween</apiName><shortdesc>
      中断补间，直接跳至补间的末尾，然后调用 onTweenEnd() 回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      中断补间，直接跳至补间的末尾，然后调用 <codeph>onTweenEnd()</codeph> 回调函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:pause"><apiName>pause</apiName><shortdesc>
      暂停效果，直到调用 resume() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      暂停效果，直到调用 <codeph>resume()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:resume"><apiName>resume</apiName><shortdesc>
      在效果由 pause() 方法暂停后继续播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在效果由 <codeph>pause()</codeph> 方法暂停后继续播放效果。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:reverse"><apiName>reverse</apiName><shortdesc>
      从效果的当前位置开始反向播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      从效果的当前位置开始反向播放效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:seek"><apiName>seek</apiName><shortdesc>
      将补间效果前移到指定位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiDesc>介于 0 和 <codeph>duration</codeph> 属性的值之间的位置（以毫秒为单位）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将补间效果前移到指定位置。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:setTweenHandlers"><apiName>setTweenHandlers</apiName><shortdesc>
      默认情况下，在效果持续期间，Tween 类将按固定时间间隔对效果实例调用 mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate() 回调函数，并可以在效果结束时选择调用 mx.effects.effectClasses.TweenEffectInstance.onTweenEnd() 回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateFunction</apiItemName><apiType value="Function"/><apiDesc>指定更新回调函数。
     
      </apiDesc></apiParam><apiParam><apiItemName>endFunction</apiItemName><apiType value="Function"/><apiDesc>指定结束回调函数。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      默认情况下，在效果持续期间，Tween 类将按固定时间间隔对效果实例调用 <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenUpdate()</codeph> 回调函数，并可以在效果结束时选择调用 <codeph>mx.effects.effectClasses.TweenEffectInstance.onTweenEnd()</codeph> 回调函数。 
     
      <p>通过这种方法，您可以指定不同的方法作为更新回调函数和结束回调函数。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:Tween:stop"><apiName>stop</apiName><shortdesc>
      停止补间，且无需分派事件，也无需调用 Tween 的 endFunction 或 onTweenEnd()。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止补间，且无需分派事件，也无需调用 Tween 的 endFunction 或 <codeph>onTweenEnd()</codeph>。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:Tween:duration"><apiName>duration</apiName><shortdesc>
      动画的持续时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      动画的持续时间（以毫秒为单位）。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:listener"><apiName>listener</apiName><shortdesc>
      在每个动画间隔通知的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      在每个动画间隔通知的对象。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Tween:easingFunction:set"><apiName>easingFunction</apiName><shortdesc>
      为动画设置缓动函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Function"/></apiValueDef><apiDesc>
      为动画设置缓动函数。此缓动函数用于在 <codeph>startValue</codeph> 值和 <codeph>endValue</codeph> 值之间进行插值。简单的缓动函数只能进行线性 interpolation，而比较高级的缓动函数可以创建加速和减速效果，使动画效果看起来更加自然。
     
      <p>如果未指定缓动函数，则使用基于 <codeph>Math.sin()</codeph> 方法的缓动函数。</p>
     
      <p>该缓动函数位于 Robert Penner 编写的函数签名之后。该函数使用四个参数：第一个参数是“current time”，其中动画的开始时间是 0；第二个参数是动画开始时的初始值（一个 Number）。第三个参数是结束值与初始值之间的差值；第四个参数是动画的持续时间。返回值是当前时间的内插值（通常是介于初始值和结束值之间的值）。</p>
     
      <p>Flex 在 mx.effects.easing 包中提供了一组缓动函数。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
  EffectInstance 类代表在目标上播放的效果实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IEffectInstance</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  EffectInstance 类代表在目标上播放的效果实例。每个目标都有与之相关联的单独效果实例。效果实例的生存期是短暂的。在目标上播放效果时会创建一个实例，当效果完成播放时将破坏此实例。如果目标上同时播放了多个效果（例如，Parallel 效果），则每个效果都有其单独的效果实例。
 
  <p>效果开发人员必须为其自定义效果创建实例类。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiConstructor id="mx.effects:EffectInstance:EffectInstance"><apiName>EffectInstance</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>要使用此效果为其设置动画的 UIComponent 对象。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectInstance:end"><apiName>end</apiName><shortdesc conref="mx.effects.IEffectInstance#end()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#end()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#finishEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#finishRepeat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#initEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>为触发效果而分派的 Event 对象。例如，如果触发器是 mouseDownEffect，则事件可能是类型等效于 MouseEvent.MOUSEDOWN 的 MouseEvent。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#initEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:pause"><apiName>pause</apiName><shortdesc conref="mx.effects.IEffectInstance#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:play"><apiName>play</apiName><shortdesc conref="mx.effects.IEffectInstance#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:resume"><apiName>resume</apiName><shortdesc conref="mx.effects.IEffectInstance#resume()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#resume()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:reverse"><apiName>reverse</apiName><shortdesc conref="mx.effects.IEffectInstance#reverse()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#reverse()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc conref="mx.effects.IEffectInstance#startEffect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#startEffect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:EffectInstance:stop"><apiName>stop</apiName><shortdesc conref="mx.effects.IEffectInstance#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.effects.IEffectInstance#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectInstance:protected:playCount"><apiName>playCount</apiName><shortdesc> 
      已播放实例的次数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc> 
      已播放实例的次数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:className:get"><apiName>className</apiName><shortdesc conref="mx.effects.IEffectInstance#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:duration:get"><apiName>duration</apiName><shortdesc conref="mx.effects.IEffectInstance#duration"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#duration"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effectTargetHost">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:effect:get"><apiName>effect</apiName><shortdesc conref="mx.effects.IEffectInstance#effect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#effect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#hideFocusRing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      效果的当前时间位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 <codeph>startDelay</codeph>、<codeph>repeatCount</codeph> 和 <codeph>repeatDelay</codeph>）之间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc conref="mx.effects.IEffectInstance#propertyChanges">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#propertyChanges">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#repeatDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#repeatDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc conref="mx.effects.IEffectInstance#startDelay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#startDelay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#suspendBackgroundProcessing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:target:get"><apiName>target</apiName><shortdesc conref="mx.effects.IEffectInstance#target">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#target">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc conref="mx.effects.IEffectInstance#triggerEvent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc conref="mx.effects.IEffectInstance#triggerEvent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Zoom"><apiName>Zoom</apiName><shortdesc>
  Zoom 效果放大或缩小中心点上的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Zoom" replacement="spark.effects.Scale" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Zoom&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Zoom
    id="ID"
    captureRollEvents="false|true"
    originX="Calculated"
    originY="Calculated"
    zoomWidthFrom="0.01"
    zoomWidthTo="1.0"
    zoomHeightFrom="0.01"
    zoomHeightTo="1.0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Zoom 效果放大或缩小中心点上的对象。
 
  <p>将 Zoom 效果应用到使用系统字体呈示的文本时，Flex 缩放整个磅值之间的文本。尽管将 Zoom 效果应用到文本时不必使用嵌入的字体，但将 Zoom 效果应用到嵌入的字体时，它将更加平滑。 </p>
 
  <p><b>注意：</b>当 <codeph>Container.autoLayout</codeph> 属性为 <codeph>false</codeph> 时，Zoom 效果不起作用。</p>
  
  </apiDesc><example conref="ZoomEffectExample.mxml"><swfblock conref="examples/ZoomEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ZoomInstance"><linktext>mx.effects.effectClasses.ZoomInstance</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link></related-links><apiConstructor id="mx.effects:Zoom:Zoom"><apiName>Zoom</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Zoom:captureRollEvents"><apiName>captureRollEvents</apiName><shortdesc>
	  如果为 true，将阻止 Flex 在鼠标未发生过移动的情况下分派 rollOut 和 rollOver 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  如果为 <codeph>true</codeph>，将阻止 Flex 在鼠标未发生过移动的情况下分派 <codeph>rollOut</codeph> 和 <codeph>rollOver</codeph> 事件。使用 Zoom 效果在较大大小和较小大小之间切换效果目标时，将此属性设置为 <codeph>true</codeph>。 
	  
	  <p>例如，可使用 <codeph>rollOverEffect</codeph> 触发 Zoom 效果来缩小目标。目标收缩后，鼠标指针将不再位于目标上方，随之触发 <codeph>rollOut</codeph> 事件和相应的 <codeph>rollOutEffect</codeph>。通过将 <codeph>captureRollEvents</codeph> 属性设置为 <codeph>true</codeph>，可以防止 Flex 分派 <codeph>rollOut</codeph> 事件，除非因移动鼠标发生此事件。 </p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originX"><apiName>originX</apiName><shortdesc>
	  代表当效果目标位于支持绝对定位的容器（如 Canvas 容器）中时缩放原点 x 位置的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  代表当效果目标位于支持绝对定位的容器（如 Canvas 容器）中时缩放原点 x 位置的数字。缩放原点是目标上作为 Zoom 效果中心的位置。
	 
	  <p>此值必须介于 0 和目标组件的宽度之间。</p> 
	 
	  默认值为 <codeph>target.width</codeph> / 2，这是目标的中心。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:originY"><apiName>originY</apiName><shortdesc>
	  代表当效果目标位于支持绝对定位的容器（如 Canvas 容器）中时缩放原点 y 位置的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  代表当效果目标位于支持绝对定位的容器（如 Canvas 容器）中时缩放原点 y 位置的数字。缩放原点是目标上作为 Zoom 效果中心的位置。
	 
	  <p>此值必须介于 0 和目标组件的高度之间。</p> 
	 
	  默认值为 <codeph>target.height</codeph> / 2，此位置是目标的中心。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightFrom"><apiName>zoomHeightFrom</apiName><shortdesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表开始进行高度缩放时的缩放比例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表开始进行高度缩放时的缩放比例。默认值为 0.01，此时显示的高度非常小。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomHeightTo"><apiName>zoomHeightTo</apiName><shortdesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表完成高度缩放时的缩放比例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表完成高度缩放时的缩放比例。默认值为 1.0，此时对象显示为正常高度。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthFrom"><apiName>zoomWidthFrom</apiName><shortdesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表开始进行宽度缩放时的缩放比例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表开始进行宽度缩放时的缩放比例。默认值为 0.01，此时显示的宽度非常小。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Zoom:zoomWidthTo"><apiName>zoomWidthTo</apiName><shortdesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表完成宽度缩放时的缩放比例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  一个介于 0.01 和 1.0 之间的百分比数值，代表完成宽度缩放时的缩放比例。默认值为 1.0，此时对象显示为正常宽度。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
  AnimateProperty 效果可为组件的属性或样式设置动画效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:AnimateProperty&gt;</code> tag
  inherits all the tag attributes of its superclass
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:AnimateProperty 
    id="ID"
   fromValue="0"
    isStyle="false|true"	 
    property="<i>required</i>"
    roundValue="false|true"
    toValue="0" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  AnimateProperty 效果可为组件的属性或样式设置动画效果。可通过设置属性名称、属性的开始值和结束值来设置动画效果。此效果会将该属性设置为初始值，然后在播放效果期间更新此属性值，直到到达结束值。 
 
  <p>例如，要更改 Button 控件的宽度，您可以指定 <codeph>width</codeph> 作为要设置动画的属性，并指定效果的起始值和最终宽度值。</p> 
 
  </apiDesc><example conref="AnimatePropertyEffectExample.mxml"><swfblock conref="examples/AnimatePropertyEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#AnimatePropertyInstance"><linktext>mx.effects.effectClasses.AnimatePropertyInstance</linktext></link></related-links><apiConstructor id="mx.effects:AnimateProperty:AnimateProperty"><apiName>AnimateProperty</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:AnimateProperty:fromValue"><apiName>fromValue</apiName><shortdesc>
	  用于设置效果的属性的起始值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  用于设置效果的属性的起始值。默认值是目标的当前属性值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:isStyle"><apiName>isStyle</apiName><shortdesc>
	  如果为 true，则属性特性是一个样式，您可以使用 setStyle() 方法对其进行设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  如果为 <codeph>true</codeph>，则属性特性是一个样式，您可以使用 <codeph>setStyle()</codeph> 方法对其进行设置。 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:property"><apiName>property</apiName><shortdesc>
	  要设置动画的目标上属性的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  要设置动画的目标上属性的名称。此属性是必需的。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:roundValue"><apiName>roundValue</apiName><shortdesc>
	  如果为 true，则会将插补的补间值舍入到最接近的整数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  如果为 <codeph>true</codeph>，则会将插补的补间值舍入到最接近的整数。如果您设置动画的属性是 int 或 uint 类型，则此属性会很有用。
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:AnimateProperty:toValue"><apiName>toValue</apiName><shortdesc>
	  该效果的结束值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  该效果的结束值。默认值是目标的当前属性值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Move"><apiName>Move</apiName><shortdesc>
  Move 效果在指定的时间间隔内随时间更改组件的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Move" replacement="spark.effects.Move" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Move&gt;</code> tag
  inherits all of the tag attributes of its of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Move
    id="ID"
    xFrom="val" 
    yFrom="val"
    xTo="val"
    yTo="val"
    xBy="val"
    yBy="val"
   /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Move 效果在指定的时间间隔内随时间更改组件的位置。您可以使用 <codeph>xFrom</codeph> 和 <codeph>yFrom</codeph> 值指定初始位置，使用 <codeph>xTo</codeph> 和 <codeph>yTo</codeph> 指定目标位置，或者使用 <codeph>xBy</codeph> 和 <codeph>yBy</codeph> 指定像素数目来移动组件。 
 
  <p>如果指定值初始位置、目标位置或移动量这些值中的任意两个，则 Flex 会计算第三个值。如果指定所有这三个值，则 Flex 会忽略 <codeph>xBy</codeph> 和 <codeph>yBy</codeph> 值。如果仅指定 <codeph>xTo</codeph> 和 <codeph>yTo</codeph> 值或 <codeph>xBy</codeph> 和 <codeph>yBy</codeph> 值，则 Flex 会将 <codeph>xFrom</codeph> 和 <codeph>yFrom</codeph> 设置为对象的当前位置。</p>
  
  <p>如果指定 <codeph>moveEffect</codeph> 触发器的 Move 效果，并且不设置六个 From、To 和 By 属性，则 Flex 会设置它们来创建从对象的原始位置到其新位置的平滑过渡。</p>
 
  <p>通常，您将此效果应用到使用绝对定位的容器（如 Canvas）或使用 <codeph>"layout=absolute"</codeph> 的容器（如 Application 或 Panel）中的目标。如果您将其应用到执行自动布局的容器（如 VBox 或 Grid 容器）中的目标，则会移动目标，但下次容器更新其布局时，会将目标移回其原始位置。您可以将容器的 <codeph>autoLayout</codeph> 属性设置为 <codeph>false</codeph> 来禁止往回移动，但这会禁用容器中所有控件的布局。</p>
  
  </apiDesc><example conref="MoveEffectExample.mxml"><swfblock conref="examples/MoveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#MoveInstance"><linktext>mx.effects.effectClasses.MoveInstance</linktext></link></related-links><apiConstructor id="mx.effects:Move:Move"><apiName>Move</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Move:xBy"><apiName>xBy</apiName><shortdesc> 
      组件沿 x 轴移动的像素数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      组件沿 x 轴移动的像素数目。此值可以为负值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xFrom"><apiName>xFrom</apiName><shortdesc> 
      初始位置的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      初始位置的 x 坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:xTo"><apiName>xTo</apiName><shortdesc> 
      目标位置的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      目标位置的 x 坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yBy"><apiName>yBy</apiName><shortdesc> 
      组件沿 y 轴移动的像素数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      组件沿 y 轴移动的像素数目。此值可以为负值。     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yFrom"><apiName>yFrom</apiName><shortdesc>
      初始位置的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      初始位置的 y 坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Move:yTo"><apiName>yTo</apiName><shortdesc> 
      目标位置的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      目标位置的 y 坐标。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Iris"><apiName>Iris</apiName><shortdesc>
  Iris 效果通过扩展或收缩集中在目标上的矩形蒙版为效果目标设置动画。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Iris&gt;</code> tag
  inherits all of the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Iris
    id="ID"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:MaskEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Iris 效果通过扩展或收缩集中在目标上的矩形遮罩为效果目标设置动画。该效果可以从目标的中心放大遮罩来显示目标，也可以向中心收缩遮罩来隐藏目标。
 
  </apiDesc><example conref="IrisEffectExample.mxml"><swfblock conref="examples/IrisEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#IrisInstance"><linktext>mx.effects.effectClasses.IrisInstance</linktext></link></related-links><apiConstructor id="mx.effects:Iris:Iris"><apiName>Iris</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.effects:Sequence"><apiName>Sequence</apiName><shortdesc>
  Sequence 效果以子效果的添加顺序依次播放多个子效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Sequence&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Sequence id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Sequence&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Sequence 效果以子效果的添加顺序依次播放多个子效果。
  
  <p>您可以在 MXML 中创建 Sequence 效果，如下例所示：</p>
 
  <pre>
  &lt;mx:Sequence id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Sequence>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>请注意，<codeph>&lt;mx:children></codeph> 标签是可选的。</p>
  
  <p>在 ActionScript 中启动 composite 效果通常分为五个步骤：</p>
 
  <ol>
    <li>创建要组合到一起的效果对象的实例，例如： 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>在各个效果对象上设置属性，如 <codeph>duration</codeph>。</li>
    <li>创建 Sequence 效果对象的实例，例如： 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>针对每个效果对象调用 <codeph>addChild()</codeph> 方法，例如： 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>调用 Sequence 效果的 <codeph>play()</codeph> 方法，例如： 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc><example conref="SequenceEffectExample.mxml"><swfblock conref="examples/SequenceEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SequenceInstance"><linktext>mx.effects.effectClasses.SequenceInstance</linktext></link></related-links><apiConstructor id="mx.effects:Sequence:Sequence"><apiName>Sequence</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Sequence 效果会忽略此参数。包含此参数的目的只是为了与其他类型的效果保持一致。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Sequence:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     返回此效果的持续时间，由所有子效果的持续时间进行定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     返回此效果的持续时间，由所有子效果的持续时间进行定义。这会考虑所有子效果的 startDelay 和重复信息，以及其持续时间，并返回相应的结果。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Dissolve"><apiName>Dissolve</apiName><shortdesc>
  将组件的动画效果设置为从透明到不透明，或从不透明到透明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Dissolve&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Dissolve
    id="ID"
    alphaFrom="val"
    alphaTo="val"
    color="val"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  将组件的动画效果设置为从透明到不透明，或从不透明到透明。播放 Dissolve 效果时，它将执行下列操作：
  
  <ol>
    <li>当开始播放效果时，它将创建一个不透明的矩形。此矩形悬浮在目标组件上方，它的颜色符合 <codeph>Dissolve.color</codeph> 属性，并且其 <codeph>alpha</codeph> 属性最初设置为 (1.0 - <codeph>Dissolve.alphaFrom</codeph>)。</li>
    <li>随着效果播放，此矩形的 <codeph>alpha</codeph> 属性将从 (1.0 - <codeph>alphaFrom</codeph>) 演变到 (1.0 - <codeph>alphaTo</codeph>)。随着该矩形变得越来越不透明，其下方的内容逐渐消失。</li>
    <li>完成效果后，矩形将被破坏。</li>
  </ol>
  
  <p>如果目标对象是一个 Container，则 Dissolve 效果将应用于容器内部的内容区域。内容区域指容器背景颜色可见的区域。</p>
 
  <p><b>注意</b>：要将 Dissolve 效果用于 DataGrid 控件的 <codeph>creationCompleteEffect</codeph> 触发器，您必须使用 DataGrid 控件的子标签或使用数据绑定为控件定义内嵌的数据提供程序。此问题是由于在分派 <codeph>creationComplete</codeph> 事件前尚未设置数据提供程序导致的。因此，当开始播放效果时，Flex 尚未完成 DataGrid 控件的大小设置。 </p>
  
  </apiDesc><example conref="DissolveEffectExample.mxml"><swfblock conref="examples/DissolveEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#DissolveInstance"><linktext>mx.effects.effectClasses.DissolveInstance</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link></related-links><apiConstructor id="mx.effects:Dissolve:Dissolve"><apiName>Dissolve</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Dissolve:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
	  介于 0.0 和 1.0 之间的初始透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  介于 0.0 和 1.0 之间的初始透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。 
	 
	  <p>如果效果导致目标组件消失，则默认值为目标的 <codeph>alpha</codeph> 属性的当前值。如果效果导致目标组件显示，则默认值为 0.0。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
	  介于 0.0 和 1.0 之间的最终透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  介于 0.0 和 1.0 之间的最终透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。 
	 
	  <p>如果效果导致目标组件消失，则默认值为 0.0。如果效果导致目标组件显示，则默认值为目标的 <codeph>alpha</codeph> 属性的当前值。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:color"><apiName>color</apiName><shortdesc> 
	  一个十六进制值，代表效果显示在目标对象上方的浮动矩形的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0xFFFFFFFF</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
	  一个十六进制值，代表效果显示在目标对象上方的浮动矩形的颜色。默认值是由目标组件的 <codeph>backgroundColor</codeph> 样式属性指定的颜色；如果未设置 <codeph>backgroundColor</codeph>，则为 0xFFFFFF。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Dissolve:targetArea"><apiName>targetArea</apiName><shortdesc>
	  要对其播放效果的目标区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.geom:RoundedRectangle</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  要对其播放效果的目标区域。具有溶解效果的叠加层是使用此属性的尺寸绘制的。UIComponents 将在整个组件上创建叠加层。容器会在其内容区域上方创建一个叠加层，而不是在镶边上方创建。 
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Blur"><apiName>Blur</apiName><shortdesc>
  通过 Blur 效果，您可以对组件应用模糊视觉效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Blur" replacement="spark.effects.AnimateFilter" since="4.0">
<description>
  在 Flex 4 中，会将 AnimateFilter 效果与 Blur 位图过滤器一起使用。
 </description>
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Blur&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Blur
    id="ID"
    blurXFrom="val"
    blurXTo="val"
    blurYFrom="val"
    blurYTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  通过 Blur 效果，您可以对组件应用模糊视觉效果。模糊效果可以柔化图像的细节。您可以生成一些模糊效果，范围从创建一个柔化的、未聚焦的外观到高斯模糊（就像通过半透明玻璃查看图像一样的朦胧的外观）。 
 
  <p>Blur 效果将 Flash BlurFilter 类用作其实现的一部分。有关详细信息，请参见 flash.filters.BlurFilter。</p>
  
  <p>如果对某个组件应用了 Blur 效果，则无法再对该组件应用 BlurFilter，也无法再次应用 Blur 效果。 </p> 
 
  </apiDesc><example conref="BlurEffectExample.mxml"><swfblock conref="examples/BlurEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link><link href="mx.effects.effectClasses.xml#BlurInstance"><linktext>mx.effects.effectClasses.BlurInstance</linktext></link></related-links><apiConstructor id="mx.effects:Blur:Blur"><apiName>Blur</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Blur:blurXFrom"><apiName>blurXFrom</apiName><shortdesc> 
	  起始水平模糊量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  起始水平模糊量。有效值为 0.0 到 255.0。 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurXTo"><apiName>blurXTo</apiName><shortdesc> 
	  终止水平模糊量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  终止水平模糊量。有效值为 0.0 到 255.0。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYFrom"><apiName>blurYFrom</apiName><shortdesc> 
	  起始垂直模糊量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>4</apiData><apiType value="Number"/><apiDefaultValue>4
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  起始垂直模糊量。有效值为 0.0 到 255.0。 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Blur:blurYTo"><apiName>blurYTo</apiName><shortdesc> 
	  终止垂直模糊量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0 
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  终止垂直模糊量。有效值为 0.0 到 255.0。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffect"><apiName>IEffect</apiName><shortdesc>
  IEffect 接口定义所有 Flex 效果的基本接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.effects:IAbstractEffect</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IEffect 接口定义所有 Flex 效果的基本接口。IEffectInstance 接口定义所有效果实例子类的基本接口。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffectInstance"><linktext>mx.effects.IEffectInstance</linktext></link></related-links><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureEndValues"><apiName>captureEndValues</apiName><shortdesc>
      捕获效果目标上相关属性的当前值，并将这些值另存为结束值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      捕获效果目标上相关属性的当前值，并将这些值另存为结束值。
      
      <p>如果此效果是数据更改效果的一部分，Flex 会自动调用 <codeph>captureEndValues()</codeph> 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureMoreStartValues"><apiName>captureMoreStartValues</apiName><shortdesc>
      捕获另一组目标相关属性的当前值。在运行数据更改效果时，Flex 将使用此函数。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiDesc>要捕获其值的目标的数组
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      捕获另一组目标相关属性的当前值
     
      <p>在运行数据更改效果时，Flex 将使用此函数。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:captureStartValues"><apiName>captureStartValues</apiName><shortdesc>
      捕获效果目标上相关属性的当前值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      捕获效果目标上相关属性的当前值。Flex 会在转移效果过程中自动调用 <codeph>captureStartValues()</codeph> 方法。
      
      <p>如果希望效果指出此效果的起始值和结束值，请使用此函数。下面是使用此函数的正确步骤：</p>
      
      <ol>
        <li>调用 <codeph>captureStartValues()</codeph> 方法。效果捕获效果起始值。</li>
        <li>更改效果目标，如添加/删除子项、更改属性、更改位置或更改尺寸。</li>
        <li>调用 <codeph>play()</codeph> 方法。此效果将捕获结束值。此函数会为此效果创建的每个效果实例填充 <codeph>EffectInstance.propertyChanges</codeph> 属性。效果开发人员可以使用 <codeph>propertyChanges</codeph> 属性检索其效果的起始值和结束值。</li>
      </ol>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstance"><apiName>createInstance</apiName><shortdesc>
      创建一个效果实例并对其进行初始化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>效果的效果实例对象。
      
      </apiDesc><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建一个效果实例并对其进行初始化。在播放效果实例前，使用此方法（而非 <codeph>play()</codeph> 方法）处理效果实例属性。 
      
      <p>所创建的效果实例的类型由 <codeph>instanceClass</codeph> 属性指定。然后，使用 <codeph>initInstance()</codeph> 方法初始化此实例。如果该实例是 EffectManager 在效果触发器触发此效果时创建的，则还需要调用 <codeph>EffectInstance.initEffect()</codeph> 方法进一步初始化此效果。</p>
     
      <p>调用 <codeph>createInstance()</codeph> 方法不会播放效果。对返回的效果实例调用 <codeph>startEffect()</codeph> 方法。 </p>
     
      <p><codeph>Effect.play()</codeph> 方法将自动调用此函数。 </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:createInstances"><apiName>createInstances</apiName><shortdesc>
      获取一个目标对象 Array，并对每个目标调用 createInstance() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>效果的效果实例对象的数组，一个目标一个数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>要使用此效果设置动画的对象的数组。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取一个目标对象 Array，并对每个目标调用 <codeph>createInstance()</codeph> 方法。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:deleteInstance"><apiName>deleteInstance</apiName><shortdesc>
      删除实例中的事件侦听器，然后从实例列表中删除该实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>效果实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      删除实例中的事件侦听器，然后从实例列表中删除该实例。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:end"><apiName>end</apiName><shortdesc>
      中断当前正在播放的效果，立即跳转到该效果的末尾。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>要终止的 EffectInstance。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      中断当前正在播放的效果，立即跳转到该效果的末尾。调用此方法将调用 <codeph>EffectInstance.end()</codeph> 方法。
     
      <p>如果调用此方法来结束播放效果，效果实例将分派 <codeph>effectEnd</codeph> 事件。</p>
     
      <p>如果将效果实例作为参数传递，则会中断此实例。如果没有传入参数，则该效果当前生成的所有效果实例都将中断。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#EffectInstance/end()"><linktext>mx.effects.EffectInstance.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:getAffectedProperties"><apiName>getAffectedProperties</apiName><shortdesc>
      返回一个字符串 Array，其中每个 String 都是被此效果更改的属性的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个用于指定此效果修改的属性的名称的字符串 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回一个字符串 Array，其中每个 String 都是被此效果更改的属性的名称。例如，Move 效果会返回一个包含 <codeph>"x"</codeph> 和 <codeph>"y"</codeph> 的 Array。
     
      <p>Effect 的每个子类都必须实现此方法。EffectManager 使用此方法来避免试图同时对同一对象的相同属性设置两种不同的动画效果。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:pause"><apiName>pause</apiName><shortdesc>
      暂停效果，直到调用 resume() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      暂停效果，直到调用 <codeph>resume()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:play"><apiName>play</apiName><shortdesc>
      开始播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>效果的 EffectInstance 对象的数组，一个目标一个数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>targets</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>播放此效果的目标对象的数组。如果已指定此参数，则不会使用效果的 <codeph>targets</codeph> 属性。
     
      </apiDesc></apiParam><apiParam><apiItemName>playReversedFromEnd</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>true</codeph>，则向后播放效果。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      开始播放效果。通常在调用 <codeph>play()</codeph> 方法之前先调用 <codeph>end()</codeph> 方法，以确保在开始播放新效果前已结束先前效果的所有实例。
     
      <p>所有子类都必须实现此方法。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:resume"><apiName>resume</apiName><shortdesc>
      在效果由 pause() 方法暂停后继续播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在效果由 <codeph>pause()</codeph> 方法暂停后继续播放效果。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:reverse"><apiName>reverse</apiName><shortdesc>
      逆序播放效果；如果当前正在播放效果，则从该效果的当前位置开始逆序播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      逆序播放效果；如果当前正在播放效果，则从该效果的当前位置开始逆序播放。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffect:mx.effects:IEffect:stop"><apiName>stop</apiName><shortdesc>
      停止播放效果，使效果目标保持当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止播放效果，使效果目标保持当前状态。与调用 <codeph>pause()</codeph> 方法不同，无法先调用 <codeph>stop()</codeph> 方法再调用 <codeph>resume()</codeph> 方法。不过，您可以调用 <codeph>play()</codeph> 方法重新播放效果。
     
      <p>如果调用此方法来结束播放效果，效果实例将分派 <codeph>effectEnd</codeph> 事件。</p>
     
      <p>对于遮罩效果，停止播放效果后不会自动删除遮罩。如果事先没有删除遮罩就继续对同一目标运行遮罩效果，可能会出现意外结果。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffect:mx.effects:IEffect:className:get"><apiName>className</apiName><shortdesc>
      效果类的名称，如“Fade”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      效果类的名称，如 <codeph>"Fade"</codeph>。
     
      <p>这是一个短类名称或 unqualified 类名称，不包含包名称。如果需要限定名称，可使用 flash.utils 包中的 <codeph>getQualifiedClassName()</codeph> 方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:customFilter:get"><apiName>customFilter</apiName><shortdesc>
      指定一个 EffectTargetFilter 类型的自定义滤镜对象，效果将使用此对象来确定播放效果的目标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:EffectTargetFilter</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定一个 EffectTargetFilter 类型的自定义滤镜对象，效果将使用此对象来确定播放效果的目标。 
      
      <p>只有在播放效果之前调用 <codeph>captureStartValues()</codeph> 方法时，才执行目标过滤。Flex 会在转移效果过程中自动调用 <codeph>captureStartValues()</codeph> 方法。</p>
      
      <p>使用 <codeph>filter</codeph> 属性可实现简单过滤。如果 <codeph>customFilter</codeph> 属性值非空，则会忽略 <codeph>filter</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#EffectTargetFilter"><linktext>mx.effects.EffectTargetFilter</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:duration:get"><apiName>duration</apiName><shortdesc> 
      效果的持续时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      效果的持续时间（以毫秒为单位）。 
     
      <p>在 Parallel 或 Sequence 效果中，可通过 <codeph>duration</codeph> 属性设置每种效果的持续时间。例如，如果 Sequence 效果的 <codeph>duration</codeph> 属性设置为 3000，则 Sequence 中的每个效果都会播放 3000 毫秒。</p>
     
      <p>对于重复播放的效果来说，<codeph>duration</codeph> 属性将指定效果各个实例的持续时间。因此，如果某个效果的 <codeph>duration</codeph> 属性设置为 2000，并且 <codeph>repeatCount</codeph> 属性设置为 3，则播放此效果共需要 6000 毫秒（6 秒）。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      一个属性，您可以通过设置此属性访问数据效果基于列表的目标控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      一个属性，您可以通过设置此属性访问数据效果基于列表的目标控件。通过设置此属性，效果类的实例将能够访问播放此效果的基于列表的控件。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:filter:get"><apiName>filter</apiName><shortdesc>
      指定用于过滤效果目标的算法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于过滤效果目标的算法。如果此值为 <codeph>null</codeph>，将指定不进行任何过滤。
      
      <p>只有在播放效果之前调用 <codeph>captureStartValues()</codeph> 方法时，才执行目标过滤。当转移过程或基于列表的控件的数据效果中需使用该效果时，Flex 会自动调用 <codeph>captureStartValues()</codeph> 方法。</p>
      
      <p>使用此属性可实现简单过滤。使用 <codeph>customFilter</codeph> 属性可实现更为复杂的过滤。如果 <codeph>customFilter</codeph> 属性值非空，则会忽略此属性。</p> 
     
      <p><codeph>filter</codeph> 属性可使用以下值：</p>
     
      <ul>
        <li>如果将此值设置为 <codeph>"add"</codeph>，则可以在作为子项添加到容器的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>"addItem"</codeph>，则可以在添加到 List 或 TileList 控件的任何列表项的项呈示器上播放效果。</li>
        <li>如果将此值设置为 <codeph>"hide"</codeph>，则可以在已将 visible 属性从 <codeph>true</codeph> 更改为 <codeph>false</codeph> 的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>"move"</codeph>，则可以在更改了 <codeph>x</codeph> 或 <codeph>y</codeph> 属性的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>"remove"</codeph>，则可以在已作为容器子项删除的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>"removeItem"</codeph>，则可以在从 List 或 TileList 控件中删除的任何列表项的项呈示器上播放效果。</li>
        <li>如果将此值设置为 <codeph>"replacedItem"</codeph>，则可以在 List 或 TileList 控件中被替换为新项目的任何列表项的项呈示器上播放效果。</li>
        <li>如果将此值设置为 <codeph>"replacementItem"</codeph>，则可以在添加到 List 或 TileList 控件中用以替换现有项目的任何列表项的项呈示器上播放效果。</li>
        <li>如果将此值设置为 <codeph>"resize"</codeph>，则可以在更改了 <codeph>width</codeph> 或 <codeph>height</codeph> 属性的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>"show"</codeph>，则可以在已将 visible 属性从 <codeph>false</codeph> 更改为 <codeph>true</codeph> 的任何目标上播放效果。</li>
        <li>如果将此值设置为 <codeph>""</codeph>，则指定不进行任何过滤。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      确定在开始播放效果时，效果是否应隐藏对焦环。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定在开始播放效果时，效果是否应隐藏对焦环。效果目标负责隐藏对焦环。UIComponent 类的子类将自动隐藏对焦环。如果效果目标不是 UIComponent 类的子类，则必须向其添加隐藏对焦环的功能。
     
      <p>将此属性设置为 <codeph>true</codeph> 可在播放效果期间隐藏对焦环。</p>
      
      <p>对于 Effect 的子类，默认值是 <codeph>false</codeph>。对于 MaskEffect 的子类，默认值是 <codeph>true</codeph>。
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:isPlaying:get"><apiName>isPlaying</apiName><shortdesc>
      一个只读标志，如果当前正在播放效果的任一实例，则为 true；否则，则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个只读标志，如果当前正在播放效果的任一实例，则为 true；否则，则为 false。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:perElementOffset:get"><apiName>perElementOffset</apiName><shortdesc>
      在效果的第一个目标之后，其他效果目标的附加延迟（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在效果的第一个目标之后，其他效果目标的附加延迟（以毫秒为单位）。此值将添加到 <codeph>startDelay</codeph> 属性的值中。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      效果的当前时间位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 <codeph>startDelay</codeph>、<codeph>repeatCount</codeph> 和 <codeph>repeatDelay</codeph>）之间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantProperties:get"><apiName>relevantProperties</apiName><shortdesc>
      一个属性名称 Array，执行过滤时将使用这些名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个属性名称 Array，执行过滤时将使用这些名称。此属性仅供内部使用，效果用户不应设置此属性。 
     
      <p>默认值为 <codeph>getAffectedProperties()</codeph> 方法返回的 Array。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
      一个样式名称 Array，执行过滤时将使用这些名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个样式名称 Array，执行过滤时将使用这些名称。此属性仅供内部使用，效果用户不应设置此属性。 
     
      <p>默认值为 <codeph>getAffectedProperties()</codeph> 方法返回的 Array。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:target:get"><apiName>target</apiName><shortdesc> 
      要应用此效果的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
      要应用此效果的对象。当效果触发器触发某个效果时，会自动将 <codeph>target</codeph> 属性设置为触发该效果的对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:targets:get"><apiName>targets</apiName><shortdesc>
      一个对象 Array，这些对象都是效果的目标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个对象 Array，这些对象都是效果的目标。播放效果时，会对各个目标并行执行效果。设置 <codeph>target</codeph> 属性将替换此 Array 中的所有对象。设置 <codeph>targets</codeph> 属性后，<codeph>target</codeph> 属性将返回此 Array 中的第一个项目。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffect:mx.effects:IEffect:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      如果触发了某个效果，则此项目是由 EffectManager 传递给此 Effect 的 Event 对象；如果 EffectManager 当前没有播放此效果，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      如果触发了某个效果，则此项目是由 EffectManager 传递给此 Effect 的 Event 对象；如果 EffectManager 当前没有播放此效果，则为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Pause"><apiName>Pause</apiName><shortdesc>
  Pause 效果在对效果进行排序时很有用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Pause&gt;</code> tag
  inherits all the tag attributes of its superclass, 
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Pause 
    id="ID" 
    eventName="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Pause 效果在对效果进行排序时很有用。在指定时间段内或在目标分派指定事件之前，它不执行任何操作。如果将 Pause 效果添加为 Sequence 效果的子项，可以创建两个其他效果之间的暂停。
  
  </apiDesc><example conref="PauseEffectExample.mxml"><swfblock conref="examples/PauseEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#PauseInstance"><linktext>mx.effects.effectClasses.PauseInstance</linktext></link></related-links><apiConstructor id="mx.effects:Pause:Pause"><apiName>Pause</apiName><shortdesc>
     构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>如果未指定任何 <codeph>eventName</codeph> 属性，则 Pause 效果会忽略此参数。如果存在一个 <codeph>eventName</codeph>，则目标必须是 IEventDispatcher 类型的一个对象，因为它应分派该命名的事件。此效果允许一个 null 目标，因为仅有一个 <codeph>duration</codeph> 属性的 Pause 效果未对任何特定目标起作用，因此不需要目标。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
     构造函数。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Pause:eventName"><apiName>eventName</apiName><shortdesc> 
     在结束之前，Pause 一直在等待的事件的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
     在结束之前，Pause 一直在等待的事件的名称。此参数必须与 <codeph>target</codeph> 属性（必须采用 IEventDispatcher 类型）联合使用；所有事件必须源于某些分派程序。
     
     <p>对 <codeph>eventName</codeph> 的侦听也与 <codeph>duration</codeph> 属性相关，该属性充当该事件的超时。如果未在由 <codeph>duration</codeph> 指定的时间段内收到该事件，则该效果无论如何都将结束。</p>
     
     <p>此属性是可选的；默认操作是播放而不等待任何事件。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Pause:duration:get"><apiName>duration</apiName><shortdesc> 
     duration 属性控制此效果将暂停的时间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
     
     </apiDefaultValue></apiValueDef><apiDesc> 
     duration 属性控制此效果将暂停的时间。如果未对此效果设置 <codeph>eventName</codeph>，则该 duration 还将充当等待事件被触发的一个超时。如果 duration 小于 0，则该效果将无限期等待事件被触发。如果将该属性设置为任何其他时间（包括 0），则以下任一情况先发生时，该效果都会结束：该持续时间已耗用时，或命名的事件触发时。
     
     </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#IEffect/duration"><linktext>mx.effects.IEffect.duration</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
  CompositeEffect 类是 Parallel 类和 Sequence 类的父类，这两个类定义 &amp;lt;mx:Parallel&amp;gt; 和 &amp;lt;mx:Sequence&amp;gt; MXML 标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The CompositeEffect class adds the following tag attributes,
  and all the subclasses of the CompositeEffect class
  inherit these tag attributes:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  CompositeEffect 类是 Parallel 类和 Sequence 类的父类，这两个类定义 <codeph>&lt;mx:Parallel></codeph> 和 <codeph>&lt;mx:Sequence></codeph>MXML 标签。Flex 支持采用以下两种方法来组合或复合效果：并行和排序。以并行方式组合多个效果时，会同时播放这些效果。以排序方式组合多个效果时，在下一效果开始之前必须完成上一个效果。
 
  <p>您可以在 MXML 中创建复合效果，如以下示例所示：</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
   
  &lt;mx:VBox id="myBox" hideEffect="WipeRightUp">
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p><codeph>&lt;mx:children></codeph> 标签是可选的。</p>
  
  <p>在 ActionScript 中启动 composite 效果通常分为五个步骤：</p>
 
  <ol>
    <li>创建要组合到一起的效果对象的实例，例如： 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>在各个效果对象上设置属性，如 <codeph>duration</codeph>。</li>
    <li>创建 Parallel 或 Sequence 效果对象的实例；例如： 
    <pre>mySequenceEffect = new mx.effects.Sequence();</pre></li>
    <li>针对每个效果对象调用 <codeph>addChild()</codeph> 方法，例如： 
    <pre>mySequenceEffect.addChild(myFadeEffect);</pre></li>
    <li>调用复合效果的 <codeph>play()</codeph> 方法；例如： 
    <pre>mySequenceEffect.play();</pre></li>
  </ol>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:CompositeEffect:CompositeEffect"><apiName>CompositeEffect</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>复合效果会忽略此参数。包含此参数的目的只是为了与其他类型的效果保持一致。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:CompositeEffect:addChild"><apiName>addChild</apiName><shortdesc>
      将新的子效果添加到此复合效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childEffect</apiItemName><apiOperationClassifier>mx.effects:IEffect</apiOperationClassifier><apiDesc>要添加到复合效果的子效果。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将新的子效果添加到此复合效果。Sequence 效果按照子效果的添加顺序播放子效果，一次播放一个。Parallel 效果同时播放所有子效果；添加子效果的顺序无关紧要。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:CompositeEffect:children:get"><apiName>children</apiName><shortdesc>
      包含此 CompositeEffect 的子效果的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      包含此 CompositeEffect 的子效果的数组。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:CompositeEffect:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     返回此效果的持续时间，由所有子效果的持续时间进行定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     返回此效果的持续时间，由所有子效果的持续时间进行定义。这会考虑所有子效果的 startDelay 和重复信息，以及其持续时间，并返回相应的结果。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IEffectTargetHost"><apiName>IEffectTargetHost</apiName><shortdesc>
  IEffectTargetHost 接口定义允许您访问数据效果的基于目标 list 控件的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IEffectTargetHost 接口定义允许您访问数据效果的基于目标 list 控件的接口。所有基于列表的控件实现此接口。此接口启用效果类的实例与播放效果的基于列表的控件进行通信。此接口还用于确定是否基于已在目标控件中添加、删除或替换数据项目播放效果。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.listClasses.ListBase.xml"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:addDataEffectItem"><apiName>addDataEffectItem</apiName><shortdesc>
      如果正在运行数据更改效果，则添加项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>要添加到控件布局中的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果正在运行数据更改效果，则添加项呈示器。项呈示器应与数据提供程序集合中最近添加但尚未显示的数据项目对应。
     
      <p>此函数将作为数据更改效果的一部分由 <codeph>AddItemAction</codeph> 效果调用，用以指定使用项呈示器的控件开始显示添加到集合中的项目的时间点。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:getRendererSemanticValue"><apiName>getRendererSemanticValue</apiName><shortdesc>
      返回 true 或 false 以指示是否应在目标上播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> 或 <codeph>false</codeph>，指示是否应在目标对象中播放效果。 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>项呈示器
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticProperty</apiItemName><apiType value="String"/><apiDesc>要返回其值的呈示器的语义属性。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 <codeph>true</codeph> 或 <codeph>false</codeph> 以指示是否应在目标上播放效果。当您在数据效果上设置 <codeph>filter</codeph> 属性时，EffectTargetFilter 类调用此方法。例如，将 <codeph>filter</codeph> 属性设置为 <codeph>addItem</codeph> 或 <codeph>removeItem</codeph>。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:removeDataEffectItem"><apiName>removeDataEffectItem</apiName><shortdesc>
      如果正在运行数据更改效果，则移除项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>要从控件布局中删除的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果正在运行数据更改效果，则移除项呈示器。项呈示器必须与从数据提供程序集合中移除的数据对应。此函数将作为数据更改效果的一部分由 <codeph>RemoveItemAction</codeph> 效果调用，用以指定使用项呈示器的控件停止显示数据项目的时间点。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectTargetHost:mx.effects:IEffectTargetHost:unconstrainRenderer"><apiName>unconstrainRenderer</apiName><shortdesc>
      如果对应于特定数据项目的项呈示器需要移动到控件中项呈示器的正常位置之外，则将作为数据更改效果的一部分由 UnconstrainItemAction 效果调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>作为效果目标的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果对应于特定数据项目的项呈示器需要移动到控件中项呈示器的正常位置之外，则将作为数据更改效果的一部分由 <codeph>UnconstrainItemAction</codeph> 效果调用。该控件不会尝试定位效果的持续时间的项呈示器。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.effects:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
  SetStyleAction 类定义对应于视图状态定义的 SetStyle 属性的动画效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="duration"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SetStyleAction&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:SetStyleAction
    <b>Properties</b>
    id="ID"
    style=""
    value=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:Effect</apiBaseClassifier></apiClassifierDef><apiDesc>
  SetStyleAction 类定义对应于视图状态定义的 SetStyle 属性的动画效果。使用过渡定义中的 SetStyleAction 效果控制在过渡期间何时发生 <codeph>SetStyle</codeph> 属性定义的视图状态更改。
  
  </apiDesc><example conref="TransitionExample.mxml"><swfblock conref="../states/examples/TransitionExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#SetStyleActionInstance"><linktext>mx.effects.effectClasses.SetStyleActionInstance</linktext></link><link href="mx.states.xml#SetStyle"><linktext>mx.states.SetStyle</linktext></link></related-links><apiConstructor id="mx.effects:SetStyleAction:SetStyleAction"><apiName>SetStyleAction</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:SetStyleAction:name"><apiName>name</apiName><shortdesc> 
	  正在更改的样式属性的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> 
	  正在更改的样式属性的名称。默认情况下，Flex 根据视图状态定义中的 <codeph>SetStyle</codeph> 属性定义确定该值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:value"><apiName>value</apiName><shortdesc> 
	  样式属性的新值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
	  样式属性的新值。默认情况下，Flex 根据视图状态定义中的 <codeph>SetStyle</codeph> 属性定义确定该值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:SetStyleAction:relevantStyles:get"><apiName>relevantStyles</apiName><shortdesc>
	  包含此效果修改的样式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
	  包含此效果修改的样式属性。此 getter 方法覆盖 superclass 方法。
	 
	  <p>如果创建此类的子类来创建自定义效果，则必须覆盖此方法并返回包含子类修改的样式属性列表的 Array。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/getAffectedProperties()"><linktext>mx.effects.Effect.getAffectedProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.effects:Rotate"><apiName>Rotate</apiName><shortdesc>
  Rotate 效果可围绕指定的点旋转组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Rotate" replacement="spark.effects.Rotate" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Rotate&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Rotate
    id="ID"
    angleFrom="0"
    angleTo="360"
    originX="0"
    originY="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Rotate 效果可围绕指定的点旋转组件。您可以指定旋转中心的坐标以及旋转的起始角度和最终角度。既可以指定正角度值，也可以指定负角度值。 
 
  <p><b>注意：</b>要对文本使用 Rotate 效果，必须使用嵌入字体，而不是设备字体。</p> 
 
  </apiDesc><example conref="RotateEffectExample.mxml"><swfblock conref="examples/RotateEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#RotateInstance"><linktext>mx.effects.effectClasses.RotateInstance</linktext></link></related-links><apiConstructor id="mx.effects:Rotate:Rotate"><apiName>Rotate</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Rotate:angleFrom"><apiName>angleFrom</apiName><shortdesc> 
	  目标对象的起始旋转角度（以度表示）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  目标对象的起始旋转角度（以度表示）。有效值范围是 0 到 360。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:angleTo"><apiName>angleTo</apiName><shortdesc> 
	  目标对象结束旋转时的角度（以度表示）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>360</apiData><apiType value="Number"/><apiDefaultValue>360
	  
	  </apiDefaultValue></apiValueDef><apiDesc> 
	  目标对象结束旋转时的角度（以度表示）。此值可以是正值也可以是负值。
	 
	  <p>如果 <codeph>angleTo</codeph> 的值比 <codeph>angleFrom</codeph> 的值小，则目标沿逆时针方向旋转。否则，它将以顺时针方向旋转。如果希望对目标进行多次旋转，请将此值设置为较大的正数或较小的负数。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originX"><apiName>originX</apiName><shortdesc>
	  旋转中心点的 x 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  旋转中心点的 x 位置。目标将围绕此点进行旋转。有效值介于 0 和目标的宽度之间。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:originY"><apiName>originY</apiName><shortdesc>
	  旋转中心点的 y 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  旋转中心点的 y 位置。目标将围绕此点进行旋转。有效值介于 0 和目标的高度之间。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Rotate:hideFocusRing:set"><apiName>hideFocusRing</apiName><shortdesc>
	  确定在开始播放效果时，效果是否应隐藏对焦环。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  确定在开始播放效果时，效果是否应隐藏对焦环。目标本身负责实际隐藏对焦环。 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
  EffectTargetFilter 类定义每个效果目标上的每个过渡效果执行的自定义滤镜。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  EffectTargetFilter 类定义每个效果目标上的每个过渡效果执行的自定义滤镜。 
 
  <p>EffectTargetFilter 类定义使用 <codeph>filterProperties</codeph> 和 <codeph>filterStyles</codeph> 属性的 <codeph>defaultFilterFunction()</codeph> 方法以确定是否在每个效果目标上播放效果。</p>
  
  <p>您还可以定义自定义滤镜函数来实现自己的过滤逻辑。为此，定义滤镜函数，然后使用 <codeph>filterFunction</codeph> 属性将该函数指定给 EffectTargetFilter 对象。</p>
  
  <p>要配置效果以使用自定义滤镜，可将 EffectTargetFilter 对象传递到效果的 <codeph>Effect.customFilter</codeph> 属性。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.effects:EffectTargetFilter:EffectTargetFilter"><apiName>EffectTargetFilter</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.effects:EffectTargetFilter:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      EffectTargetFilter 类的默认滤镜函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>返回 <codeph>true</codeph> 以允许播放效果实例。 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>PropertyChanges 对象的 Array。每个 PropertyChanges 对象的 <codeph>target</codeph> 属性等同于效果的目标。如果过渡未修改目标的属性，则对应的 PropertyChanges 对象不包括在此数组中。
      
      </apiDesc></apiParam><apiParam><apiItemName>instanceTarget</apiItemName><apiType value="Object"/><apiDesc>调用此函数的 EffectInstance 的目标。如果效果包含多个目标，则每个目标调用此函数一次。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      EffectTargetFilter 类的默认滤镜函数。如果 <codeph>instanceTarget</codeph> 对于 <codeph>filterProperties</codeph> 或 <codeph>filterStyles</codeph> 属性指定的任意值包含不同的开始值和结束值，则在目标上播放效果。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:EffectTargetFilter:filterInstance"><apiName>filterInstance</apiName><shortdesc> 
      确定是否应该过滤目标，如果该目标应包含在效果中，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果目标应包括在效果中，则为 <codeph>true</codeph>，否则返回 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propChanges</apiItemName><apiType value="Array"/><apiDesc>PropertyChanges 对象的 Array。每个 PropertyChanges 对象的 target 属性等同于效果的目标。如果过渡未修改目标的属性，则对应的 PropertyChanges 对象不包括在此数组中。
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticsProvider</apiItemName><apiOperationClassifier>mx.effects:IEffectTargetHost</apiOperationClassifier><apiDesc>用于计算目标的 requiredSemantics 中所指定属性的 IEffectTargetHost，一般为效果的 effectTargetHost。对于项目更改效果，当效果的目标为项呈示器时，这将是包含项呈示器的 List 或 TileList。
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>调用此函数的 EffectInstance 的目标。如果效果包含多个目标，则每个目标调用此函数一次。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      确定是否应该过滤目标，如果该目标应包含在效果中，则返回 true。通过调用 filterFunction 和 semanticFilterFunction 确定是否应该过滤目标，当且仅当这两个函数都返回 true 时才返回 true。包含默认值的默认函数始终返回 true。通常，EffectTargetFilter 使用某一种类型的滤镜或其它类型的滤镜，但不同时使用两种滤镜。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:EffectTargetFilter:filterFunction"><apiName>filterFunction</apiName><shortdesc>
      定义自定义滤镜逻辑的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      定义自定义滤镜逻辑的函数。Flex 针对效果的每个目标调用此方法。如果函数返回 <codeph>true</codeph>，则在目标上播放效果；如果返回 <codeph>false</codeph>，则效果跳过目标。与 <codeph>Effect.filter</codeph> 属性相比，自定义滤镜函数可为您提供更多的筛选控制。 
     
      <p>滤镜函数具有以下特征：</p>
     
      <pre>
      filterFunc(propChanges:Array, instanceTarget:Object):Boolean
      {
          // Return true to play the effect on instanceTarget, 
          // or false to not play the effect.
      } 
      </pre>
     
      <p>其中：</p>
      
      <p><codeph>propChanges</codeph> — PropertyChanges 对象的 Array，每个目标效果组件一个对象。如果过渡未修改目标的属性，则该属性不包括在此 Array 中。</p>
      
      <p><codeph>instanceTarget</codeph> — 要过滤的效果的特定目标组件。在自定义滤镜函数中，首先通过将 <codeph>instanceTarget</codeph> 参数比作 <codeph>propChanges.target</codeph> 属性来搜索 <codeph>propChanges</codeph> Array 以获得与 <codeph>instanceTarget</codeph> 参数相匹配的 PropertyChanges 对象。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterProperties"><apiName>filterProperties</apiName><shortdesc> 
      指定组件属性的字符串 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      指定组件属性的字符串 Array。如果目标组件上 Array 中的任一属性发生更改，则在目标上播放效果。 
     
      <p>如果定义自定义滤镜函数，则您可以在自己的函数中检查 <codeph>filterProperties</codeph> 属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:filterStyles"><apiName>filterStyles</apiName><shortdesc> 
      指定样式属性的字符串 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc> 
      指定样式属性的字符串 Array。如果目标组件上 Array 中的任一样式属性发生更改，则在目标上播放效果。 
     
      <p>如果定义自定义滤镜函数，则您可以在自己的函数中检查 <codeph>filterStyles</codeph> 属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:EffectTargetFilter:requiredSemantics"><apiName>requiredSemantics</apiName><shortdesc>
      必须与要播放的效果目标相关联的属性和关联值的集合。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      必须与要播放的效果目标相关联的属性和关联值的集合。
     
      <p>使用数据效果时，您可以使用此属性过滤效果。如果希望在不是由效果添加的 list 控件的所有目标（即以任何其它方式删除、替换、移动或影响的目标）上播放数据效果，您可以按如下方式写入效果定义： </p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur> </pre>
     
      <p>要在不是由效果添加或删除的所有目标上播放数据效果，您可以按如下方式写入效果定义：</p>
     
      <pre>
      &lt;mx:Blur>
          &lt;mx:customFilter>
              &lt;mx:EffectTargetFilter requiredSemantics="{{'added':false}, {'removed':false}}"/>
          &lt;/mx:customFilter>
      &lt;/mx:Blur></pre>
     
      <p>您可以指定的允许的属性列表包括 <codeph>added</codeph>、<codeph>removed</codeph>、<codeph>replaced</codeph> 和 <codeph>replacement</codeph>。属性的允许值是 <codeph>true</codeph> 和 <codeph>false</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Fade"><apiName>Fade</apiName><shortdesc>
  淡入淡出效果可设置组件的 alpha 属性的动画效果（从透明到不透明或从不透明到透明）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Alternative owner="mx.effects:Fade" replacement="spark.effects.Fade" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Fade&gt;</code> tag
  inherits the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Fade 
    id="ID"
    alphaFrom="val"
    alphaTo="val"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:TweenEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  淡入淡出效果可设置组件的 <codeph>alpha</codeph> 属性的动画效果（从透明到不透明或从不透明到透明）。 
  
  <p>如果为 <codeph>showEffect</codeph> 或 <codeph>hideEffect</codeph> 触发器指定淡入淡出效果，并且省略 <codeph>alphaFrom</codeph> 和 <codeph>alphaTo</codeph> 属性的值，则效果会自动将 <codeph>alpha</codeph> 在 <codeph>showEffect</codeph> 触发器上从 0 过渡到的目标的当前 <codeph>alpha</codeph> 值，而在 <codeph>hideEffect</codeph> 触发器上从目标的当前 <codeph>alpha</codeph> 值过渡到的 0。</p> 
 
  <p><b>注意：</b>要对文本使用淡入淡出效果，必须使用嵌入字体，而不是设备字体。 </p> 
 
  </apiDesc><example conref="FadeEffectExample.mxml"><swfblock conref="examples/FadeEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#FadeInstance"><linktext>mx.effects.effectClasses.FadeInstance</linktext></link></related-links><apiConstructor id="mx.effects:Fade:Fade"><apiName>Fade</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要使用此效果为其设置动画的 Object。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Fade:alphaFrom"><apiName>alphaFrom</apiName><shortdesc> 
      介于 0.0 和 1.0 之间的初始透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      介于 0.0 和 1.0 之间的初始透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。 
     
      <p>如果效果导致目标组件消失，则默认值为目标的 <codeph>alpha</codeph> 属性的当前值。如果效果导致目标组件显示，则默认值为 0.0。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:Fade:alphaTo"><apiName>alphaTo</apiName><shortdesc> 
      最终透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
      最终透明度级别，其中 0.0 表示透明，1.0 表示完全不透明。
     
      <p>如果效果导致目标组件消失，则默认值为 0.0。如果效果导致目标组件显示，则默认值为目标的 <codeph>alpha</codeph> 属性的当前值。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:Parallel"><apiName>Parallel</apiName><shortdesc>
  Parallel 效果同时播放多个子效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="children"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;mx:Parallel&gt; tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:Parallel id="<i>identifier</i>"&gt;
    &lt;mx:children&gt;
      &lt;!-- Specify child effect tags --&gt; 
    &lt;/mx:children&gt;
  &lt;/mx:Parallel&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.effects:CompositeEffect</apiBaseClassifier></apiClassifierDef><apiDesc>
  Parallel 效果同时播放多个子效果。
  
  <p>可以在 MXML 中创建 Paralell 效果，如下例所示：</p>
 
  <pre>
  &lt;mx:Parallel id="WipeRightUp">
    &lt;mx:children>
      &lt;mx:WipeRight duration="1000"/>
      &lt;mx:WipeUp duration="1000"/>
    &lt;/mx:children>
  &lt;/mx:Parallel>
  
  &lt;mx:VBox id="myBox" hideEffect="{WipeRightUp}" >
    &lt;mx:TextArea id="aTextArea" text="hello"/>
  &lt;/mx:VBox>
  </pre>
 
  <p>请注意，<codeph>&lt;mx:children></codeph> 标签是可选的。</p>
  
  <p>在 ActionScript 中启动 Parallel 效果通常分为五个步骤：</p>
 
  <ol>
    <li>创建要组合到一起的效果对象的实例，例如： 
    <pre>myFadeEffect = new mx.effects.Fade(target);</pre></li>
    <li>在各个效果对象上设置属性，如 <codeph>duration</codeph>。</li>
    <li>创建 Parallel 效果对象的实例，例如： 
    <pre>myParallelEffect = new mx.effects.Parallel();</pre></li>
    <li>针对每个效果对象调用 <codeph>addChild()</codeph> 方法，例如： 
    <pre>myParallelEffect.addChild(myFadeEffect);</pre></li>
    <li>调用 Parallel 效果的 <codeph>play()</codeph> 方法，例如： 
    <pre>myParallelEffect.play();</pre></li>
  </ol>
 
  </apiDesc><example conref="ParallelEffectExample.mxml"><swfblock conref="examples/ParallelEffectExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.effects.effectClasses.xml#ParallelInstance"><linktext>mx.effects.effectClasses.ParallelInstance</linktext></link></related-links><apiConstructor id="mx.effects:Parallel:Parallel"><apiName>Parallel</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Parallel 效果会忽略此参数。包含此参数的目的只是为了与其他类型的效果保持一致。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.effects:Parallel:compositeDuration:get"><apiName>compositeDuration</apiName><shortdesc>
     
     返回此效果的持续时间，由所有子效果的持续时间进行定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
     
     返回此效果的持续时间，由所有子效果的持续时间进行定义。这会考虑所有子效果的 startDelay 和重复信息，以及其持续时间，并返回相应的结果。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.effects:IAbstractEffect"><apiName>IAbstractEffect</apiName><shortdesc>
  IAbstractEffect 接口用于指示某个属性或参数必须属于类型 Effect，但实际不实现 IEffect 接口的任何 API。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAbstractEffect 接口用于指示某个属性或参数必须属于类型 Effect，但实际不实现 IEffect 接口的任何 API。UIComponent 类识别何时更改实现 AbstractEffect 接口的属性，并将其传递给 EffectManager 类以进行处理。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#IEffect"><linktext>mx.effects.IEffect</linktext></link></related-links></apiClassifier><apiClassifier id="mx.effects:IEffectInstance"><apiName>IEffectInstance</apiName><shortdesc>
  IEffectInstance 接口代表在目标上播放的效果实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IEffectInstance 接口代表在目标上播放的效果实例。每个目标都有与之相关联的单独效果实例。效果实例的生存期是短暂的。在目标上播放效果时会创建一个实例，当效果完成播放时将破坏此实例。如果目标上同时播放了多个效果（例如，Parallel 效果），则每个效果都有其单独的效果实例。
 
  <p>效果开发人员必须为其自定义效果创建实例类。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:end"><apiName>end</apiName><shortdesc>
      中断当前播放的效果实例，立即跳转到效果的结束位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      中断当前播放的效果实例，立即跳转到效果的结束位置。通过调用 <codeph>Effect.end()</codeph> 方法可调用此方法。在实现过程中，它会调用 <codeph>finishEffect()</codeph> 方法。
     
      <p>如果调用此方法来结束播放效果，效果实例将分派 <codeph>effectEnd</codeph> 事件。</p>
     
      <p>在 EffectInstance 的子类中，您可以在进行覆盖时顺便覆盖此方法，并应在完成您的逻辑之后从覆盖的结束位置调用 <codeph>super.end()</codeph> 方法。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.effects.xml#Effect/end()"><linktext>mx.effects.Effect.end()</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishEffect"><apiName>finishEffect</apiName><shortdesc>
      在完成效果播放时由 end() 方法调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在完成效果播放时由 <codeph>end()</codeph> 方法调用。此函数将为效果目标分派 <codeph>endEffect</codeph> 事件。
     
      <p>您不必在子类中覆盖此方法。在使用效果时无需调用此方法，但在创建效果子类时可能需要调用此方法。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:finishRepeat"><apiName>finishRepeat</apiName><shortdesc>
      每次完成重复效果的迭代播放后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      每次完成重复效果的迭代播放后调用。
     
      <p>您不必在子类中覆盖此方法。您无需在使用效果时调用此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:initEffect"><apiName>initEffect</apiName><shortdesc>
      如果由 EffectManager 触发效果，则会调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>为触发效果而分派的 Event 对象。例如，如果触发器是 mouseDownEffect，则事件可能是类型等效于 MouseEvent.MOUSEDOWN 的 MouseEvent。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果由 EffectManager 触发效果，则会调用此方法。此基类版本会将触发效果的事件保存在 <codeph>triggerEvent</codeph> 属性中。每个子类都应该覆盖此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:pause"><apiName>pause</apiName><shortdesc>
      暂停效果，直到调用 resume() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      暂停效果，直到调用 <codeph>resume()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:play"><apiName>play</apiName><shortdesc>
      在目标上播放效果实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在目标上播放效果实例。改为调用 <codeph>startEffect()</codeph> 方法，以在 EffectInstance 上开始播放效果。
     
      <p>在 EffectInstance 的子类中，必须覆盖此方法。此覆盖必须调用 <codeph>super.play()</codeph> 方法，以便从目标中分派 <codeph>effectStart</codeph> 事件。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:resume"><apiName>resume</apiName><shortdesc>
      在效果由 pause() 方法暂停后继续播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在效果由 <codeph>pause()</codeph> 方法暂停后继续播放效果。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:reverse"><apiName>reverse</apiName><shortdesc>
      从效果的当前位置开始反向播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      从效果的当前位置开始反向播放效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startEffect"><apiName>startEffect</apiName><shortdesc>
      经过 startDelay 所占用的这段时间后，在目标上播放效果实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      经过 <codeph>startDelay</codeph> 所占用的这段时间后，在目标上播放效果实例。由 Effect 类调用。在启动 EffectInstance 时，请使用此函数，而非 <codeph>play()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:stop"><apiName>stop</apiName><shortdesc>
      停止播放效果，使目标保持当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止播放效果，使目标保持当前状态。您需要通过调用 <codeph>Effect.stop()</codeph> 方法来调用此方法。在实现过程中，它会调用 <codeph>finishEffect()</codeph> 方法。
     
      <p>如果调用此方法来结束播放效果，效果实例将分派 <codeph>effectEnd</codeph> 事件。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:className:get"><apiName>className</apiName><shortdesc>
      效果类的名称，如“FadeInstance”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      效果类的名称，如 <codeph>"FadeInstance"</codeph>。
     
      <p>这是一个短类名称或“非限定”类名称，不包含包名称。如果需要限定名称，可使用 flash.utils 包中的 <codeph>getQualifiedClassName()</codeph> 方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:duration:get"><apiName>duration</apiName><shortdesc> 
      效果的持续时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>500
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      效果的持续时间（以毫秒为单位）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effectTargetHost:get"><apiName>effectTargetHost</apiName><shortdesc>
      一个属性，您可以通过设置此属性访问数据效果基于列表的目标控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffectTargetHost</apiValueClassifier></apiValueDef><apiDesc>
      一个属性，您可以通过设置此属性访问数据效果基于列表的目标控件。通过设置此属性，效果类的实例将能够访问播放此效果的基于列表的控件。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:effect:get"><apiName>effect</apiName><shortdesc>
      创建此 IEffectInstance 对象的 IEffect 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc>
      创建此 IEffectInstance 对象的 IEffect 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:hideFocusRing:get"><apiName>hideFocusRing</apiName><shortdesc>
      确定在开始播放效果时，效果是否应隐藏对焦环。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定在开始播放效果时，效果是否应隐藏对焦环。效果目标负责隐藏对焦环。UIComponent 类的子类将自动隐藏对焦环。如果效果目标不是 UIComponent 类的子类，则必须向其添加隐藏对焦环的功能。
     
      <p>将此属性设置为 <codeph>true</codeph> 可在播放效果期间隐藏对焦环。</p>
      
      <p>对于 Effect 的子类，默认值是 <codeph>false</codeph>。对于 MaskEffect 的子类，默认值是 <codeph>true</codeph>。
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      效果的当前时间位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 <codeph>startDelay</codeph>、<codeph>repeatCount</codeph> 和 <codeph>repeatDelay</codeph>）之间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:propertyChanges:get"><apiName>propertyChanges</apiName><shortdesc>
      指定包含一组属性的初始值和结束值的 PropertyChanges 对象，这些属性与效果的目标相关。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.effects.effectClasses:PropertyChanges</apiValueClassifier></apiValueDef><apiDesc>
      指定包含一组属性的初始值和结束值的 PropertyChanges 对象，这些属性与效果的目标相关。只有对创建此效果实例的效果调用 <codeph>captureStartValues()</codeph> 方法时，才设置此属性。 
      
      <p>通常使用 <codeph>propertyChanges</codeph> 属性创建转移过程中使用的效果。Flex 会在开始转移时自动调用 <codeph>captureStartValues()</codeph> 方法。在覆盖 <codeph>Effectinstance.play()</codeph> 方法的过程中，您可以检查 <codeph>propertyChanges()</codeph> 方法中的信息，以初始化效果的起始值和结束值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#PropertyChanges"><linktext>mx.effects.effectClasses.PropertyChanges</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatCount:get"><apiName>repeatCount</apiName><shortdesc>
      效果的重复次数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      效果的重复次数。可能的值为任何大于等于 0 的整数。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatCount"><linktext>mx.effects.Effect.repeatCount</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:repeatDelay:get"><apiName>repeatDelay</apiName><shortdesc>
      重复播放效果前需要等待的时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      重复播放效果前需要等待的时间（以毫秒为单位）。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/repeatDelay"><linktext>mx.effects.Effect.repeatDelay</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:startDelay:get"><apiName>startDelay</apiName><shortdesc>
      开始播放效果前需要等待的时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      开始播放效果前需要等待的时间（以毫秒为单位）。此值可以是任何大于或等于 0 的整数。如果使用 <codeph>repeatCount</codeph> 属性重复播放效果，则只在首次播放该效果时应用 <codeph>startDelay</codeph> 属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:suspendBackgroundProcessing:get"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      如果为 true，则在播放效果时阻止所有背景处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则在播放效果时阻止所有背景处理。背景处理包括度量、布局和处理来自服务器的响应。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/suspendBackgroundProcessing"><linktext>mx.effects.Effect.suspendBackgroundProcessing</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:target:get"><apiName>target</apiName><shortdesc>
      要应用此效果的 UIComponent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      要应用此效果的 UIComponent 对象。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect/target"><linktext>mx.effects.Effect.target</linktext></link></related-links></apiValue><apiValue id="mx.effects:IEffectInstance:mx.effects:IEffectInstance:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      触发播放效果的事件（如果有）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      触发播放效果的事件（如果有）。如果要将一个效果分配给多个触发事件，此属性非常有用。
     
      <p>如果通过调用 <codeph>play()</codeph> 方法以编程方式播放（而非由某个事件触发）该效果，则此属性将为 <codeph>null</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>